(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:21:17
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/prusti_tests_._pass_._slices_._slice-elem_eq-umce_._slice-elem_eq-umce.rs_slice_elem_eq_umce--slice-Both.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<$Snap> 0)
(declare-sort Snap$Slice$i32 0)
(declare-sort $FVF<val_ref> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Snap$Slice$i32To$Snap (Snap$Slice$i32) $Snap)
(declare-fun $SortWrappers.$SnapToSnap$Slice$i32 ($Snap) Snap$Slice$i32)
(assert (forall ((x Snap$Slice$i32)) (!
    (= x ($SortWrappers.$SnapToSnap$Slice$i32($SortWrappers.Snap$Slice$i32To$Snap x)))
    :pattern (($SortWrappers.Snap$Slice$i32To$Snap x))
    :qid |$Snap.$SnapToSnap$Slice$i32To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Snap$Slice$i32To$Snap($SortWrappers.$SnapToSnap$Slice$i32 x)))
    :pattern (($SortWrappers.$SnapToSnap$Slice$i32 x))
    :qid |$Snap.Snap$Slice$i32To$SnapToSnap$Slice$i32|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<val_ref>To$Snap ($FVF<val_ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<val_ref> ($Snap) $FVF<val_ref>)
(assert (forall ((x $FVF<val_ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<val_ref>($SortWrappers.$FVF<val_ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<val_ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<val_ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<val_ref>To$Snap($SortWrappers.$SnapTo$FVF<val_ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<val_ref> x))
    :qid |$Snap.$FVF<val_ref>To$SnapTo$FVF<val_ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.___BitVec_32_To$Snap ((_ BitVec 32)) $Snap)
(declare-fun $SortWrappers.$SnapTo___BitVec_32_ ($Snap) (_ BitVec 32))
(assert (forall ((x (_ BitVec 32))) (!
    (= x ($SortWrappers.$SnapTo___BitVec_32_($SortWrappers.___BitVec_32_To$Snap x)))
    :pattern (($SortWrappers.___BitVec_32_To$Snap x))
    :qid |$Snap.$SnapTo___BitVec_32_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___BitVec_32_To$Snap($SortWrappers.$SnapTo___BitVec_32_ x)))
    :pattern (($SortWrappers.$SnapTo___BitVec_32_ x))
    :qid |$Snap.___BitVec_32_To$SnapTo___BitVec_32_|
    )))
(declare-fun $SortWrappers.___FloatingPoint_8_24_To$Snap ((_ FloatingPoint 8 24)) $Snap)
(declare-fun $SortWrappers.$SnapTo___FloatingPoint_8_24_ ($Snap) (_ FloatingPoint 8 24))
(assert (forall ((x (_ FloatingPoint 8 24))) (!
    (= x ($SortWrappers.$SnapTo___FloatingPoint_8_24_($SortWrappers.___FloatingPoint_8_24_To$Snap x)))
    :pattern (($SortWrappers.___FloatingPoint_8_24_To$Snap x))
    :qid |$Snap.$SnapTo___FloatingPoint_8_24_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___FloatingPoint_8_24_To$Snap($SortWrappers.$SnapTo___FloatingPoint_8_24_ x)))
    :pattern (($SortWrappers.$SnapTo___FloatingPoint_8_24_ x))
    :qid |$Snap.___FloatingPoint_8_24_To$SnapTo___FloatingPoint_8_24_|
    )))
(declare-fun $SortWrappers.___BitVec_64_To$Snap ((_ BitVec 64)) $Snap)
(declare-fun $SortWrappers.$SnapTo___BitVec_64_ ($Snap) (_ BitVec 64))
(assert (forall ((x (_ BitVec 64))) (!
    (= x ($SortWrappers.$SnapTo___BitVec_64_($SortWrappers.___BitVec_64_To$Snap x)))
    :pattern (($SortWrappers.___BitVec_64_To$Snap x))
    :qid |$Snap.$SnapTo___BitVec_64_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___BitVec_64_To$Snap($SortWrappers.$SnapTo___BitVec_64_ x)))
    :pattern (($SortWrappers.$SnapTo___BitVec_64_ x))
    :qid |$Snap.___BitVec_64_To$SnapTo___BitVec_64_|
    )))
(declare-fun $SortWrappers.___FloatingPoint_12_52_To$Snap ((_ FloatingPoint 12 52)) $Snap)
(declare-fun $SortWrappers.$SnapTo___FloatingPoint_12_52_ ($Snap) (_ FloatingPoint 12 52))
(assert (forall ((x (_ FloatingPoint 12 52))) (!
    (= x ($SortWrappers.$SnapTo___FloatingPoint_12_52_($SortWrappers.___FloatingPoint_12_52_To$Snap x)))
    :pattern (($SortWrappers.___FloatingPoint_12_52_To$Snap x))
    :qid |$Snap.$SnapTo___FloatingPoint_12_52_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___FloatingPoint_12_52_To$Snap($SortWrappers.$SnapTo___FloatingPoint_12_52_ x)))
    :pattern (($SortWrappers.$SnapTo___FloatingPoint_12_52_ x))
    :qid |$Snap.___FloatingPoint_12_52_To$SnapTo___FloatingPoint_12_52_|
    )))
(declare-fun $SortWrappers.___BitVec_8_To$Snap ((_ BitVec 8)) $Snap)
(declare-fun $SortWrappers.$SnapTo___BitVec_8_ ($Snap) (_ BitVec 8))
(assert (forall ((x (_ BitVec 8))) (!
    (= x ($SortWrappers.$SnapTo___BitVec_8_($SortWrappers.___BitVec_8_To$Snap x)))
    :pattern (($SortWrappers.___BitVec_8_To$Snap x))
    :qid |$Snap.$SnapTo___BitVec_8_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___BitVec_8_To$Snap($SortWrappers.$SnapTo___BitVec_8_ x)))
    :pattern (($SortWrappers.$SnapTo___BitVec_8_ x))
    :qid |$Snap.___BitVec_8_To$SnapTo___BitVec_8_|
    )))
(declare-fun $SortWrappers.___BitVec_16_To$Snap ((_ BitVec 16)) $Snap)
(declare-fun $SortWrappers.$SnapTo___BitVec_16_ ($Snap) (_ BitVec 16))
(assert (forall ((x (_ BitVec 16))) (!
    (= x ($SortWrappers.$SnapTo___BitVec_16_($SortWrappers.___BitVec_16_To$Snap x)))
    :pattern (($SortWrappers.___BitVec_16_To$Snap x))
    :qid |$Snap.$SnapTo___BitVec_16_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___BitVec_16_To$Snap($SortWrappers.$SnapTo___BitVec_16_ x)))
    :pattern (($SortWrappers.$SnapTo___BitVec_16_ x))
    :qid |$Snap.___BitVec_16_To$SnapTo___BitVec_16_|
    )))
(declare-fun $SortWrappers.___BitVec_128_To$Snap ((_ BitVec 128)) $Snap)
(declare-fun $SortWrappers.$SnapTo___BitVec_128_ ($Snap) (_ BitVec 128))
(assert (forall ((x (_ BitVec 128))) (!
    (= x ($SortWrappers.$SnapTo___BitVec_128_($SortWrappers.___BitVec_128_To$Snap x)))
    :pattern (($SortWrappers.___BitVec_128_To$Snap x))
    :qid |$Snap.$SnapTo___BitVec_128_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.___BitVec_128_To$Snap($SortWrappers.$SnapTo___BitVec_128_ x)))
    :pattern (($SortWrappers.$SnapTo___BitVec_128_ x))
    :qid |$Snap.___BitVec_128_To$SnapTo___BitVec_128_|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> (Seq<Int>) Snap$Slice$i32)
(declare-fun uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$<Seq<Int>> (Snap$Slice$i32) Seq<Int>)
(declare-fun read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> (Snap$Slice$i32 Int) Int)
(declare-fun len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> (Snap$Slice$i32) Int)
; /field_value_functions_declarations.smt2 [val_ref: Ref]
(declare-fun $FVF.domain_val_ref ($FVF<val_ref>) Set<$Ref>)
(declare-fun $FVF.lookup_val_ref ($FVF<val_ref> $Ref) $Ref)
(declare-fun $FVF.after_val_ref ($FVF<val_ref> $FVF<val_ref>) Bool)
(declare-fun $FVF.loc_val_ref ($Ref $Ref) Bool)
(declare-fun $FVF.perm_val_ref ($FPM $Ref) $Perm)
(declare-const $fvfTOP_val_ref $FVF<val_ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun read$ ($Snap) $Perm)
(declare-fun read$%limited ($Snap) $Perm)
(declare-const read$%stateless Bool)
(declare-fun read$%precondition ($Snap) Bool)
(declare-fun Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap $Ref) Int)
(declare-fun Slice$len__$TY$__i32$Slice$i32$$int$%limited ($Snap $Ref) Int)
(declare-fun Slice$len__$TY$__i32$Slice$i32$$int$%stateless ($Ref) Bool)
(declare-fun Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap $Ref) Bool)
(declare-fun lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap $Ref Int) Int)
(declare-fun lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited ($Snap $Ref Int) Int)
(declare-fun lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%stateless ($Ref Int) Bool)
(declare-fun lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap $Ref Int) Bool)
(declare-fun seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ ($Snap $Ref Int) Seq<Int>)
(declare-fun seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited ($Snap $Ref Int) Seq<Int>)
(declare-fun seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%stateless ($Ref Int) Bool)
(declare-fun seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition ($Snap $Ref Int) Bool)
(declare-fun snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 ($Snap $Ref) Snap$Slice$i32)
(declare-fun snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited ($Snap $Ref) Snap$Slice$i32)
(declare-fun snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%stateless ($Ref) Bool)
(declare-fun snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition ($Snap $Ref) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun DeadBorrowToken$%trigger ($Snap Int) Bool)
(declare-fun Slice$i32%trigger ($Snap $Ref) Bool)
(declare-fun i32%trigger ($Snap $Ref) Bool)
(declare-fun ref$Slice$i32%trigger ($Snap $Ref) Bool)
(declare-fun struct$m_std$$ops$$Range$usize%trigger ($Snap $Ref) Bool)
(declare-fun struct$m_std$$ops$$RangeFrom$usize%trigger ($Snap $Ref) Bool)
(declare-fun struct$m_std$$ops$$RangeFull%trigger ($Snap $Ref) Bool)
(declare-fun struct$m_std$$ops$$RangeTo$usize%trigger ($Snap $Ref) Bool)
(declare-fun struct$m_std$$ops$$RangeToInclusive$usize%trigger ($Snap $Ref) Bool)
(declare-fun tuple0$%trigger ($Snap $Ref) Bool)
(declare-fun usize%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (=> (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (=>
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=> (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (=> (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (=>
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((data Seq<Int>)) (!
  (Seq_equal
    (uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$<Seq<Int>> (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> data))
    data)
  :pattern ((cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> data))
  :qid |prog.Snap$Slice$i32$injectivity|)))
(assert (forall ((data Snap$Slice$i32)) (!
  (=
    (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> (uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$<Seq<Int>> data))
    data)
  :pattern ((uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$<Seq<Int>> data))
  :qid |prog.Snap$Slice$i32$surjectivity|)))
(assert (forall ((_l_data Seq<Int>) (_r_data Seq<Int>)) (!
  (=>
    (Seq_equal _l_data _r_data)
    (=
      (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> _l_data)
      (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> _r_data)))
  :pattern ((cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> _l_data) (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> _r_data))
  :qid |prog.Snap$Slice$i32$extensionality|)))
(assert (forall ((data Seq<Int>) (idx Int)) (!
  (=
    (read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> data) idx)
    (Seq_index data idx))
  :pattern ((read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> data) idx))
  :pattern ((Seq_index data idx))
  :qid |prog.Slice$i32$read_indices|)))
(assert (forall ((data Seq<Int>)) (!
  (=
    (len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> data))
    (Seq_length data))
  :pattern ((len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> data)))
  :pattern ((Seq_length data))
  :qid |prog.Slice$i32$len_of_seq|)))
(assert (forall ((slice Snap$Slice$i32)) (!
  (>= (len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> slice) 0)
  :pattern ((len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> slice))
  :qid |prog.Slice$i32$len_positive|)))
(assert (forall ((slice Snap$Slice$i32)) (!
  (<=
    (* (len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> slice) 4)
    9223372036854775807)
  :pattern ((len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> slice))
  :qid |prog.Slice$i32$len_upper_bound|)))
(assert (forall ((self Snap$Slice$i32) (idx Int)) (!
  (and
    (<=
      (- 0 2147483648)
      (read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> self idx))
    (<=
      (read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> self idx)
      2147483647))
  :pattern ((read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> self idx))
  :qid |prog.Snap$Slice$i32$valid|)))
; /field_value_functions_axioms.smt2 [val_ref: Ref]
(assert (forall ((vs $FVF<val_ref>) (ws $FVF<val_ref>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_val_ref vs) ($FVF.domain_val_ref ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_val_ref vs))
            (= ($FVF.lookup_val_ref vs x) ($FVF.lookup_val_ref ws x)))
          :pattern (($FVF.lookup_val_ref vs x) ($FVF.lookup_val_ref ws x))
          :qid |qp.$FVF<val_ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<val_ref>To$Snap vs)
              ($SortWrappers.$FVF<val_ref>To$Snap ws)
              )
    :qid |qp.$FVF<val_ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_val_ref pm r))
    :pattern (($FVF.perm_val_ref pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_val_ref f r) true)
    :pattern (($FVF.loc_val_ref f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap)) (!
  (= (read$%limited s@$) (read$ s@$))
  :pattern ((read$ s@$))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap)) (!
  (as read$%stateless  Bool)
  :pattern ((read$%limited s@$))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) (=>
    (read$%precondition s@$)
    (and (< $Perm.No result@0@00) (< result@0@00 $Perm.Write))))
  :pattern ((read$%limited s@$))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) true)
  :pattern ((read$%limited s@$))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) true)
  :pattern ((read$%limited s@$))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap) (self@1@00 $Ref)) (!
  (=
    (Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00)
    (Slice$len__$TY$__i32$Slice$i32$$int$ s@$ self@1@00))
  :pattern ((Slice$len__$TY$__i32$Slice$i32$$int$ s@$ self@1@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (self@1@00 $Ref)) (!
  (Slice$len__$TY$__i32$Slice$i32$$int$%stateless self@1@00)
  :pattern ((Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (self@1@00 $Ref)) (!
  (let ((result@2@00 (Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))) (=>
    (Slice$len__$TY$__i32$Slice$i32$$int$%precondition s@$ self@1@00)
    (and (>= result@2@00 0) (<= result@2@00 18446744073709551615))))
  :pattern ((Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap) (self@1@00 $Ref)) (!
  (let ((result@2@00 (Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))) true)
  :pattern ((Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))
  :qid |quant-u-14|)))
(assert (forall ((s@$ $Snap) (self@1@00 $Ref)) (!
  (let ((result@2@00 (Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))) true)
  :pattern ((Slice$len__$TY$__i32$Slice$i32$$int$%limited s@$ self@1@00))
  :qid |quant-u-15|)))
(assert (forall ((s@$ $Snap) (self@3@00 $Ref) (idx@4@00 Int)) (!
  (=
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited s@$ self@3@00 idx@4@00)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ s@$ self@3@00 idx@4@00))
  :pattern ((lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ s@$ self@3@00 idx@4@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (self@3@00 $Ref) (idx@4@00 Int)) (!
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%stateless self@3@00 idx@4@00)
  :pattern ((lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited s@$ self@3@00 idx@4@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (Seq_equal
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00)
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ s@$ self@6@00 start@7@00))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ s@$ self@6@00 start@7@00))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%stateless self@6@00 start@7@00)
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (let ((result@8@00 (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))) (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (and
      (=>
        (>=
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (Seq_equal result@8@00 (as Seq_empty  Seq<Int>)))
      (=>
        (<
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (=
          (Seq_length result@8@00)
          (-
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00)
            start@7@00)))
      (=>
        (<
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (=
          (Seq_index result@8@00 0)
          (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
            ($Snap.first s@$)
            ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 start@7@00)))
      (=>
        (<
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (forall ((i Int) (j Int)) (!
          (=>
            (and
              (<= start@7@00 i)
              (and
                (<
                  i
                  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
                (and
                  (<= 0 j)
                  (and
                    (<
                      j
                      (-
                        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00)
                        start@7@00))
                    (= i (+ j start@7@00))))))
            (=
              (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
                ($Snap.first s@$)
                ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 i)
              (Seq_index result@8@00 j)))
          :pattern ((lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited ($Snap.combine
            ($Snap.first s@$)
            ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 i) (Seq_index
            result@8@00
            j))
          ))))))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))
  :qid |quant-u-16|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (let ((result@8@00 (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))) (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))
  :qid |quant-u-17|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (let ((result@8@00 (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))) (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (and
      (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)
      (=>
        (<
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)))))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))
  :qid |quant-u-18|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (let ((result@8@00 (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))) (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (and
      (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)
      (=>
        (<
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          ($Snap.first s@$)
          ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 start@7@00)))))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))
  :qid |quant-u-19|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (let ((result@8@00 (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))) (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (and
      (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)
      (=>
        (<
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (forall ((i Int) (j Int)) (!
          (and
            (=>
              (<= start@7@00 i)
              (and
                (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)
                (=>
                  (and
                    (<
                      i
                      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
                    (<= 0 j))
                  (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00))))
            (=>
              (and
                (<= start@7@00 i)
                (and
                  (<
                    i
                    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
                  (and
                    (<= 0 j)
                    (and
                      (<
                        j
                        (-
                          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00)
                          start@7@00))
                      (= i (+ j start@7@00))))))
              (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
                ($Snap.first s@$)
                ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 i)))
          :pattern ((lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited ($Snap.combine
            ($Snap.first s@$)
            ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 i) (Seq_index
            result@8@00
            j))
          ))))))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited s@$ self@6@00 start@7@00))
  :qid |quant-u-20|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (Seq_equal
      (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ s@$ self@6@00 start@7@00)
      (ite
        (>=
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        (as Seq_empty  Seq<Int>)
        (Seq_append
          (Seq_singleton (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
            ($Snap.first s@$)
            ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 start@7@00))
          (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%limited ($Snap.combine
            ($Snap.first s@$)
            $Snap.unit) self@6@00 (+ start@7@00 1))))))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ s@$ self@6@00 start@7@00))
  :qid |quant-u-21|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref) (start@7@00 Int)) (!
  (=>
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition s@$ self@6@00 start@7@00)
    (and
      (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.first s@$) self@6@00)
      (ite
        (>=
          start@7@00
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.first s@$) self@6@00))
        true
        (and
          (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
            ($Snap.first s@$)
            ($Snap.combine $Snap.unit $Snap.unit)) self@6@00 start@7@00)
          (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition ($Snap.combine
            ($Snap.first s@$)
            $Snap.unit) self@6@00 (+ start@7@00 1))))))
  :pattern ((seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ s@$ self@6@00 start@7@00))
  :qid |quant-u-22|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (=
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00)
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 s@$ self@9@00))
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 s@$ self@9@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%stateless self@9@00)
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (let ((result@10@00 (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))) (=>
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition s@$ self@9@00)
    (and
      (forall ((i Int)) (!
        (=>
          (and
            (<= 0 i)
            (< i (Slice$len__$TY$__i32$Slice$i32$$int$ s@$ self@9@00)))
          (=
            (read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> result@10@00 i)
            (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
              s@$
              ($Snap.combine $Snap.unit $Snap.unit)) self@9@00 i)))
        :pattern ((read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> result@10@00 i))
        :pattern ((lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited ($Snap.combine
          s@$
          ($Snap.combine $Snap.unit $Snap.unit)) self@9@00 i))
        ))
      (=
        (Slice$len__$TY$__i32$Slice$i32$$int$ s@$ self@9@00)
        (len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> result@10@00)))))
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))
  :qid |quant-u-23|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (let ((result@10@00 (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))) (=>
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition s@$ self@9@00)
    (forall ((i Int)) (!
      (and
        (=>
          (<= 0 i)
          (Slice$len__$TY$__i32$Slice$i32$$int$%precondition s@$ self@9@00))
        (=>
          (and
            (<= 0 i)
            (< i (Slice$len__$TY$__i32$Slice$i32$$int$ s@$ self@9@00)))
          (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
            s@$
            ($Snap.combine $Snap.unit $Snap.unit)) self@9@00 i)))
      :pattern ((read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$<Int> result@10@00 i))
      :pattern ((lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%limited ($Snap.combine
        s@$
        ($Snap.combine $Snap.unit $Snap.unit)) self@9@00 i))
      ))))
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))
  :qid |quant-u-24|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (let ((result@10@00 (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))) (=>
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition s@$ self@9@00)
    (Slice$len__$TY$__i32$Slice$i32$$int$%precondition s@$ self@9@00)))
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%limited s@$ self@9@00))
  :qid |quant-u-25|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (=>
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition s@$ self@9@00)
    (=
      (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 s@$ self@9@00)
      (cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32<Snap$Slice$i32> (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$ ($Snap.combine
        s@$
        $Snap.unit) self@9@00 0))))
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 s@$ self@9@00))
  :qid |quant-u-26|)))
(assert (forall ((s@$ $Snap) (self@9@00 $Ref)) (!
  (=>
    (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition s@$ self@9@00)
    (seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$%precondition ($Snap.combine
      s@$
      $Snap.unit) self@9@00 0))
  :pattern ((snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 s@$ self@9@00))
  :qid |quant-u-27|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- m_slice ----------
(declare-const _0@0@01 $Ref)
(declare-const _0@1@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@2@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@3@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@4@01 Bool)
; [exec]
; var __t3: Bool
(declare-const __t3@5@01 Bool)
; [exec]
; var __t4: Bool
(declare-const __t4@6@01 Bool)
; [exec]
; var __t5: Bool
(declare-const __t5@7@01 Bool)
; [exec]
; var __t6: Bool
(declare-const __t6@8@01 Bool)
; [exec]
; var __t7: Bool
(declare-const __t7@9@01 Bool)
; [exec]
; var __t8: Bool
(declare-const __t8@10@01 Bool)
; [exec]
; var __t9: Bool
(declare-const __t9@11@01 Bool)
; [exec]
; var __t10: Bool
(declare-const __t10@12@01 Bool)
; [exec]
; var __t11: Bool
(declare-const __t11@13@01 Bool)
; [exec]
; var __t12: Bool
(declare-const __t12@14@01 Bool)
; [exec]
; var __t13: Bool
(declare-const __t13@15@01 Bool)
; [exec]
; var __t14: Bool
(declare-const __t14@16@01 Bool)
; [exec]
; var __t15: Bool
(declare-const __t15@17@01 Bool)
; [exec]
; var __t16: Bool
(declare-const __t16@18@01 Bool)
; [exec]
; var __t17: Bool
(declare-const __t17@19@01 Bool)
; [exec]
; var __t18: Bool
(declare-const __t18@20@01 Bool)
; [exec]
; var __t19: Bool
(declare-const __t19@21@01 Bool)
; [exec]
; var __t20: Bool
(declare-const __t20@22@01 Bool)
; [exec]
; var __t21: Bool
(declare-const __t21@23@01 Bool)
; [exec]
; var __t22: Bool
(declare-const __t22@24@01 Bool)
; [exec]
; var __t23: Bool
(declare-const __t23@25@01 Bool)
; [exec]
; var __t24: Bool
(declare-const __t24@26@01 Bool)
; [exec]
; var __t25: Bool
(declare-const __t25@27@01 Bool)
; [exec]
; var _aux_havoc_usize: Ref
(declare-const _aux_havoc_usize@28@01 $Ref)
; [exec]
; var __t26: Bool
(declare-const __t26@29@01 Bool)
; [exec]
; var __t27: Ref
(declare-const __t27@30@01 $Ref)
; [exec]
; var __t28: Bool
(declare-const __t28@31@01 Bool)
; [exec]
; var __t29: Ref
(declare-const __t29@32@01 $Ref)
; [exec]
; var __t30: Bool
(declare-const __t30@33@01 Bool)
; [exec]
; var __t31: Bool
(declare-const __t31@34@01 Bool)
; [exec]
; var __t32: Ref
(declare-const __t32@35@01 $Ref)
; [exec]
; var __t33: Bool
(declare-const __t33@36@01 Bool)
; [exec]
; var __t34: Ref
(declare-const __t34@37@01 $Ref)
; [exec]
; var __t35: Bool
(declare-const __t35@38@01 Bool)
; [exec]
; var __t36: Bool
(declare-const __t36@39@01 Bool)
; [exec]
; var __t37: Ref
(declare-const __t37@40@01 $Ref)
; [exec]
; var __t38: Bool
(declare-const __t38@41@01 Bool)
; [exec]
; var __t39: Ref
(declare-const __t39@42@01 $Ref)
; [exec]
; var __t40: Bool
(declare-const __t40@43@01 Bool)
; [exec]
; var __t41: Bool
(declare-const __t41@44@01 Bool)
; [exec]
; var __t42: Ref
(declare-const __t42@45@01 $Ref)
; [exec]
; var __t43: Bool
(declare-const __t43@46@01 Bool)
; [exec]
; var __t44: Ref
(declare-const __t44@47@01 $Ref)
; [exec]
; var __t45: Bool
(declare-const __t45@48@01 Bool)
; [exec]
; var __t46: Bool
(declare-const __t46@49@01 Bool)
; [exec]
; var __t47: Ref
(declare-const __t47@50@01 $Ref)
; [exec]
; var __t48: Bool
(declare-const __t48@51@01 Bool)
; [exec]
; var __t49: Ref
(declare-const __t49@52@01 $Ref)
; [exec]
; var __t50: Bool
(declare-const __t50@53@01 Bool)
; [exec]
; var _old$pre$0: Ref
(declare-const _old$pre$0@54@01 $Ref)
; [exec]
; var _1: Ref
(declare-const _1@55@01 $Ref)
; [exec]
; var _2: Ref
(declare-const _2@56@01 $Ref)
; [exec]
; var _3: Ref
(declare-const _3@57@01 $Ref)
; [exec]
; var _4: Ref
(declare-const _4@58@01 $Ref)
; [exec]
; var _5: Ref
(declare-const _5@59@01 $Ref)
; [exec]
; var _7: Ref
(declare-const _7@60@01 $Ref)
; [exec]
; var _8: Ref
(declare-const _8@61@01 $Ref)
; [exec]
; var _9: Int
(declare-const _9@62@01 Int)
; [exec]
; var _10: Int
(declare-const _10@63@01 Int)
; [exec]
; var _11: Int
(declare-const _11@64@01 Int)
; [exec]
; var _12: Ref
(declare-const _12@65@01 $Ref)
; [exec]
; var _13: Int
(declare-const _13@66@01 Int)
; [exec]
; var _14: Int
(declare-const _14@67@01 Int)
; [exec]
; var _15: Int
(declare-const _15@68@01 Int)
; [exec]
; var _16: Ref
(declare-const _16@69@01 $Ref)
; [exec]
; var _18: Ref
(declare-const _18@70@01 $Ref)
; [exec]
; var _19: Ref
(declare-const _19@71@01 $Ref)
; [exec]
; var _20: Ref
(declare-const _20@72@01 $Ref)
; [exec]
; var _21: Ref
(declare-const _21@73@01 $Ref)
; [exec]
; var _23: Ref
(declare-const _23@74@01 $Ref)
; [exec]
; var _24: Ref
(declare-const _24@75@01 $Ref)
; [exec]
; var _25: Int
(declare-const _25@76@01 Int)
; [exec]
; var _26: Int
(declare-const _26@77@01 Int)
; [exec]
; var _27: Int
(declare-const _27@78@01 Int)
; [exec]
; var _28: Ref
(declare-const _28@79@01 $Ref)
; [exec]
; var _29: Int
(declare-const _29@80@01 Int)
; [exec]
; var _30: Int
(declare-const _30@81@01 Int)
; [exec]
; var _31: Int
(declare-const _31@82@01 Int)
; [exec]
; var _32: Ref
(declare-const _32@83@01 $Ref)
; [exec]
; var _34: Ref
(declare-const _34@84@01 $Ref)
; [exec]
; var _35: Ref
(declare-const _35@85@01 $Ref)
; [exec]
; var _36: Ref
(declare-const _36@86@01 $Ref)
; [exec]
; var _37: Ref
(declare-const _37@87@01 $Ref)
; [exec]
; var _39: Ref
(declare-const _39@88@01 $Ref)
; [exec]
; var _40: Ref
(declare-const _40@89@01 $Ref)
; [exec]
; var _41: Int
(declare-const _41@90@01 Int)
; [exec]
; var _42: Int
(declare-const _42@91@01 Int)
; [exec]
; var _43: Int
(declare-const _43@92@01 Int)
; [exec]
; var _44: Ref
(declare-const _44@93@01 $Ref)
; [exec]
; var _45: Int
(declare-const _45@94@01 Int)
; [exec]
; var _46: Int
(declare-const _46@95@01 Int)
; [exec]
; var _47: Int
(declare-const _47@96@01 Int)
; [exec]
; var _48: Ref
(declare-const _48@97@01 $Ref)
; [exec]
; var _50: Ref
(declare-const _50@98@01 $Ref)
; [exec]
; var _51: Ref
(declare-const _51@99@01 $Ref)
; [exec]
; var _52: Ref
(declare-const _52@100@01 $Ref)
; [exec]
; var _53: Ref
(declare-const _53@101@01 $Ref)
; [exec]
; var _55: Ref
(declare-const _55@102@01 $Ref)
; [exec]
; var _56: Ref
(declare-const _56@103@01 $Ref)
; [exec]
; var _57: Int
(declare-const _57@104@01 Int)
; [exec]
; var _58: Int
(declare-const _58@105@01 Int)
; [exec]
; var _59: Int
(declare-const _59@106@01 Int)
; [exec]
; var _60: Ref
(declare-const _60@107@01 $Ref)
; [exec]
; var _61: Int
(declare-const _61@108@01 Int)
; [exec]
; var _62: Int
(declare-const _62@109@01 Int)
; [exec]
; var _63: Int
(declare-const _63@110@01 Int)
; [exec]
; var _64: Ref
(declare-const _64@111@01 $Ref)
; [exec]
; var _66: Ref
(declare-const _66@112@01 $Ref)
; [exec]
; var _67: Ref
(declare-const _67@113@01 $Ref)
; [exec]
; var _68: Ref
(declare-const _68@114@01 $Ref)
; [exec]
; var _69: Ref
(declare-const _69@115@01 $Ref)
; [exec]
; var _71: Ref
(declare-const _71@116@01 $Ref)
; [exec]
; var _72: Ref
(declare-const _72@117@01 $Ref)
; [exec]
; var _73: Int
(declare-const _73@118@01 Int)
; [exec]
; var _74: Int
(declare-const _74@119@01 Int)
; [exec]
; var _75: Int
(declare-const _75@120@01 Int)
; [exec]
; var _76: Ref
(declare-const _76@121@01 $Ref)
; [exec]
; var _77: Int
(declare-const _77@122@01 Int)
; [exec]
; var _78: Int
(declare-const _78@123@01 Int)
; [exec]
; var _79: Int
(declare-const _79@124@01 Int)
; [exec]
; var _80: Ref
(declare-const _80@125@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; __t3 := false
; [exec]
; __t4 := false
; [exec]
; __t5 := false
; [exec]
; __t6 := false
; [exec]
; __t7 := false
; [exec]
; __t8 := false
; [exec]
; __t9 := false
; [exec]
; __t10 := false
; [exec]
; __t11 := false
; [exec]
; __t12 := false
; [exec]
; __t13 := false
; [exec]
; __t14 := false
; [exec]
; __t15 := false
; [exec]
; __t16 := false
; [exec]
; __t17 := false
; [exec]
; __t18 := false
; [exec]
; __t19 := false
; [exec]
; __t20 := false
; [exec]
; __t21 := false
; [exec]
; __t22 := false
; [exec]
; __t23 := false
; [exec]
; __t24 := false
; [exec]
; __t25 := false
; [exec]
; inhale acc(_1.val_ref, write) && acc(Slice$i32(_1.val_ref), read$())
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 ($Snap.combine ($Snap.first $t@126@01) ($Snap.second $t@126@01))))
(assert (not (= _1@55@01 $Ref.null)))
; [eval] read$()
(push) ; 3
(assert (read$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No (read$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) >
;   5
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 $Snap.unit))
; [eval] len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) > 5
; [eval] len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref))
; [eval] snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition ($Snap.second $t@126@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(pop) ; 3
; Joined path conditions
(assert (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32%precondition ($Snap.second $t@126@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(assert (>
  (len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$<Int> (snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32 ($Snap.second $t@126@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
  5))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; __t0 := true
; [exec]
; _4 := builtin$havoc_ref()
(declare-const ret@129@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_4.val_ref, write)
(declare-const $t@130@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@129@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _4.val_ref := _1.val_ref
(declare-const val_ref@131@01 $Ref)
(assert (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_4.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@132@01 $Snap)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@133@01 $Snap)
(assert (and
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@133@01 ($Snap.second $t@126@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@133@01 $t@132@01))))
(assert (<= $Perm.No (+ (read$ $Snap.unit) (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l0
; [exec]
; _5 := builtin$havoc_ref()
(declare-const ret@134@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(struct$m_std$$ops$$Range$usize(_5), write)
(declare-const $t@135@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _aux_havoc_usize := builtin$havoc_ref()
(declare-const ret@136@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(struct$m_std$$ops$$Range$usize(_5), write)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (not (= ret@134@01 $Ref.null)))
(assert (=
  ($Snap.second $t@135@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second $t@135@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@135@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (struct$m_std$$ops$$Range$usize%trigger $t@135@01 ret@134@01))
; [exec]
; _5.f$start := _aux_havoc_usize
; [exec]
; inhale acc(_5.f$start.val_int, write)
(declare-const $t@137@01 Int)
(assert (not (= ret@136@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _5.f$start.val_int := 1
; [exec]
; _aux_havoc_usize := builtin$havoc_ref()
(declare-const ret@138@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _5.f$end := _aux_havoc_usize
; [exec]
; inhale acc(_5.f$end.val_int, write)
(declare-const $t@139@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@138@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _5.f$end.val_int := 4
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l1
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@140@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(ref$Slice$i32(_3), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@141@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert _5.f$start.val_int >= 0
; [eval] _5.f$start.val_int >= 0
; [exec]
; assert _5.f$end.val_int <= Slice$len__$TY$__i32$Slice$i32$$int$(_4.val_ref)
; [eval] _5.f$end.val_int <= Slice$len__$TY$__i32$Slice$i32$$int$(_4.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_4.val_ref)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@133@01 val_ref@131@01))
(pop) ; 3
; Joined path conditions
(assert (and
  (<=
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@133@01 val_ref@131@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (<= 4 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 4 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01)))
; [exec]
; assert _5.f$start.val_int <= _5.f$end.val_int
; [eval] _5.f$start.val_int <= _5.f$end.val_int
; [exec]
; unfold acc(ref$Slice$i32(_3), read$())
; [eval] read$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= $t@141@01 ($Snap.combine ($Snap.first $t@141@01) ($Snap.second $t@141@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= (read$ $Snap.unit) $Perm.Write))
(assert (=> (< $Perm.No (read$ $Snap.unit)) (not (= ret@140@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (ref$Slice$i32%trigger $t@141@01 ret@140@01))
; [exec]
; inhale Slice$len__$TY$__i32$Slice$i32$$int$(_3.val_ref) ==
;   _5.f$end.val_int - _5.f$start.val_int
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_3.val_ref) == _5.f$end.val_int - _5.f$start.val_int
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_3.val_ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
(pop) ; 3
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
; [eval] _5.f$end.val_int - _5.f$start.val_int
(assert (=
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))
  3))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (let _LET_1 ==
;     (_4.val_ref) in
;     (let _LET_0 ==
;       (_3.val_ref) in
;       (forall i: Int, j: Int ::
;         { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_3.val_ref,
;         i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_4.val_ref,
;         j) }
;         0 <= i &&
;         (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) &&
;         (j == i + _5.f$start.val_int &&
;         (_5.f$start.val_int <= j && j < _5.f$end.val_int))) ==>
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) ==
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j))))
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 $Snap.unit))
; [eval] (let _LET_1 == (_4.val_ref) in (let _LET_0 == (_3.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_3.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_4.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) && (j == i + _5.f$start.val_int && (_5.f$start.val_int <= j && j < _5.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j))))
(declare-const letvar@144@01 $Ref)
(assert (= (as letvar@144@01  $Ref) val_ref@131@01))
; [eval] (let _LET_0 == (_3.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_3.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_4.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) && (j == i + _5.f$start.val_int && (_5.f$start.val_int <= j && j < _5.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const letvar@145@01 $Ref)
(assert (= (as letvar@145@01  $Ref) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
; [eval] (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_3.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_4.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) && (j == i + _5.f$start.val_int && (_5.f$start.val_int <= j && j < _5.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j))
(declare-const i@146@01 Int)
(declare-const j@147@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) && (j == i + _5.f$start.val_int && (_5.f$start.val_int <= j && j < _5.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j)
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) && (j == i + _5.f$start.val_int && (_5.f$start.val_int <= j && j < _5.f$end.val_int)))
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@146@01 | live]
; [else-branch: 0 | !(0 <= i@146@01) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@146@01]
(assert (<= 0 i@146@01))
; [eval] i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1 | i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01)) | live]
; [else-branch: 1 | !(i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01))) | live]
(push) ; 7
; [then-branch: 1 | i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01))]
(assert (<
  i@146@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
; [eval] j == i + _5.f$start.val_int
; [eval] i + _5.f$start.val_int
(push) ; 8
; [then-branch: 2 | j@147@01 == i@146@01 + 1 | live]
; [else-branch: 2 | j@147@01 != i@146@01 + 1 | live]
(push) ; 9
; [then-branch: 2 | j@147@01 == i@146@01 + 1]
(assert (= j@147@01 (+ i@146@01 1)))
; [eval] _5.f$start.val_int <= j
(push) ; 10
; [then-branch: 3 | 1 <= j@147@01 | live]
; [else-branch: 3 | !(1 <= j@147@01) | live]
(push) ; 11
; [then-branch: 3 | 1 <= j@147@01]
(assert (<= 1 j@147@01))
; [eval] j < _5.f$end.val_int
(pop) ; 11
(push) ; 11
; [else-branch: 3 | !(1 <= j@147@01)]
(assert (not (<= 1 j@147@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 1 j@147@01)) (<= 1 j@147@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 2 | j@147@01 != i@146@01 + 1]
(assert (not (= j@147@01 (+ i@146@01 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (= j@147@01 (+ i@146@01 1))
  (and (= j@147@01 (+ i@146@01 1)) (or (not (<= 1 j@147@01)) (<= 1 j@147@01)))))
; Joined path conditions
(assert (or (not (= j@147@01 (+ i@146@01 1))) (= j@147@01 (+ i@146@01 1))))
(pop) ; 7
(push) ; 7
; [else-branch: 1 | !(i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01)))]
(assert (not
  (<
    i@146@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (<
    i@146@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
  (and
    (<
      i@146@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
    (=>
      (= j@147@01 (+ i@146@01 1))
      (and
        (= j@147@01 (+ i@146@01 1))
        (or (not (<= 1 j@147@01)) (<= 1 j@147@01))))
    (or (not (= j@147@01 (+ i@146@01 1))) (= j@147@01 (+ i@146@01 1))))))
; Joined path conditions
(assert (or
  (not
    (<
      i@146@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
  (<
    i@146@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@146@01)]
(assert (not (<= 0 i@146@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (<= 0 i@146@01)
  (and
    (<= 0 i@146@01)
    (=>
      (<
        i@146@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
      (and
        (<
          i@146@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
        (=>
          (= j@147@01 (+ i@146@01 1))
          (and
            (= j@147@01 (+ i@146@01 1))
            (or (not (<= 1 j@147@01)) (<= 1 j@147@01))))
        (or (not (= j@147@01 (+ i@146@01 1))) (= j@147@01 (+ i@146@01 1)))))
    (or
      (not
        (<
          i@146@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
      (<
        i@146@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))))))
; Joined path conditions
(assert (or (not (<= 0 i@146@01)) (<= 0 i@146@01)))
(push) ; 4
; [then-branch: 4 | j@147@01 < 4 && 1 <= j@147@01 && j@147@01 == i@146@01 + 1 && i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01)) && 0 <= i@146@01 | live]
; [else-branch: 4 | !(j@147@01 < 4 && 1 <= j@147@01 && j@147@01 == i@146@01 + 1 && i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01)) && 0 <= i@146@01) | live]
(push) ; 5
; [then-branch: 4 | j@147@01 < 4 && 1 <= j@147@01 && j@147@01 == i@146@01 + 1 && i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01)) && 0 <= i@146@01]
(assert (and
  (and
    (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
    (<
      i@146@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
  (<= 0 i@146@01)))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@141@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) i@146@01))
(pop) ; 6
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@141@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) i@146@01))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_1, j)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 7
(assert (not (<= 0 j@147@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 j@147@01))
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (< j@147@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< j@147@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@133@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@131@01 j@147@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (<= 0 j@147@01)
  (< j@147@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@133@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@131@01 j@147@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(j@147@01 < 4 && 1 <= j@147@01 && j@147@01 == i@146@01 + 1 && i@146@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@141@01), First:($t@141@01)) && 0 <= i@146@01)]
(assert (not
  (and
    (and
      (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
      (<
        i@146@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
    (<= 0 i@146@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (and
      (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
      (<
        i@146@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
    (<= 0 i@146@01))
  (and
    (< j@147@01 4)
    (<= 1 j@147@01)
    (= j@147@01 (+ i@146@01 1))
    (<
      i@146@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
    (<= 0 i@146@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@141@01)
      ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) i@146@01)
    (<= 0 j@147@01)
    (< j@147@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01))
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      $t@133@01
      ($Snap.combine $Snap.unit $Snap.unit)) val_ref@131@01 j@147@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
        (<
          i@146@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
      (<= 0 i@146@01)))
  (and
    (and
      (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
      (<
        i@146@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
    (<= 0 i@146@01))))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_3.val_ref, i)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 i@146@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (< $Perm.No (+ (read$ $Snap.unit) (read$ $Snap.unit))))
  (not (= ($Snap.second $t@141@01) $t@133@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (+ (read$ $Snap.unit) (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@133@01 ($Snap.second $t@141@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and (not (= _1@55@01 ret@129@01)) (not (= _1@55@01 ret@140@01)))
    (and (not (= ret@129@01 _1@55@01)) (not (= ret@129@01 ret@140@01)))
    (and (not (= ret@140@01 _1@55@01)) (not (= ret@140@01 ret@129@01))))
  (and (not (= ret@136@01 ret@138@01)) (not (= ret@138@01 ret@136@01)))))
(assert (and (not (= ret@136@01 ret@138@01)) (not (= ret@138@01 ret@136@01))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 i@146@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and (not (= _1@55@01 ret@129@01)) (not (= _1@55@01 ret@140@01)))
    (and (not (= ret@129@01 _1@55@01)) (not (= ret@129@01 ret@140@01)))
    (and (not (= ret@140@01 _1@55@01)) (not (= ret@140@01 ret@129@01))))
  (and (not (= ret@136@01 ret@138@01)) (not (= ret@138@01 ret@136@01)))))
(assert (and (not (= ret@136@01 ret@138@01)) (not (= ret@138@01 ret@136@01))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 i@146@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (< $Perm.No (+ (read$ $Snap.unit) (read$ $Snap.unit))))
  (not (= ($Snap.second $t@141@01) $t@133@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (+ (read$ $Snap.unit) (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@133@01 ($Snap.second $t@141@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and (not (= _1@55@01 ret@129@01)) (not (= _1@55@01 ret@140@01)))
    (and (not (= ret@129@01 _1@55@01)) (not (= ret@129@01 ret@140@01)))
    (and (not (= ret@140@01 _1@55@01)) (not (= ret@140@01 ret@129@01))))
  (and (not (= ret@136@01 ret@138@01)) (not (= ret@138@01 ret@136@01)))))
(assert (and (not (= ret@136@01 ret@138@01)) (not (= ret@138@01 ret@136@01))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 i@146@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@146@01 Int) (j@147@01 Int)) (!
  (and
    (=>
      (<= 0 i@146@01)
      (and
        (<= 0 i@146@01)
        (=>
          (<
            i@146@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
          (and
            (<
              i@146@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
            (=>
              (= j@147@01 (+ i@146@01 1))
              (and
                (= j@147@01 (+ i@146@01 1))
                (or (not (<= 1 j@147@01)) (<= 1 j@147@01))))
            (or (not (= j@147@01 (+ i@146@01 1))) (= j@147@01 (+ i@146@01 1)))))
        (or
          (not
            (<
              i@146@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
          (<
            i@146@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
    (or (not (<= 0 i@146@01)) (<= 0 i@146@01))
    (=>
      (and
        (and
          (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
          (<
            i@146@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
        (<= 0 i@146@01))
      (and
        (< j@147@01 4)
        (<= 1 j@147@01)
        (= j@147@01 (+ i@146@01 1))
        (<
          i@146@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
        (<= 0 i@146@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@141@01)
          ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) i@146@01)
        (<= 0 j@147@01)
        (<
          j@147@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 val_ref@131@01))
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          $t@133@01
          ($Snap.combine $Snap.unit $Snap.unit)) val_ref@131@01 j@147@01)))
    (or
      (not
        (and
          (and
            (and
              (and (< j@147@01 4) (<= 1 j@147@01))
              (= j@147@01 (+ i@146@01 1)))
            (<
              i@146@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
          (<= 0 i@146@01)))
      (and
        (and
          (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
          (<
            i@146@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
        (<= 0 i@146@01))))
  
  :qid |prog.l624-aux|)))
(assert (forall ((i@146@01 Int) (j@147@01 Int)) (!
  (=>
    (and
      (and
        (and (and (< j@147@01 4) (<= 1 j@147@01)) (= j@147@01 (+ i@146@01 1)))
        (<
          i@146@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@141@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
      (<= 0 i@146@01))
    (=
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        ($Snap.second $t@141@01)
        ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) i@146@01)
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        $t@133@01
        ($Snap.combine $Snap.unit $Snap.unit)) val_ref@131@01 j@147@01)))
  
  :qid |prog.l624|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __t1 := true
; [exec]
; _2 := builtin$havoc_ref()
(declare-const ret@148@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_2.val_ref, write)
(declare-const $t@149@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@148@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _2.val_ref := _3.val_ref
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const val_ref@150@01 $Ref)
(assert (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_2.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@151@01 $Snap)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@152@01 $Snap)
(assert (and
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@152@01 ($Snap.second $t@141@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@152@01 $t@151@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l2
; [exec]
; _10 := builtin$havoc_int()
(declare-const ret@153@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _10 := 0
; [exec]
; assert acc(Slice$i32(_2.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _11 := builtin$havoc_int()
(declare-const ret@154@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _11 := Slice$len__$TY$__i32$Slice$i32$$int$(_2.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_2.val_ref)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@152@01 val_ref@150@01))
(pop) ; 3
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@152@01 val_ref@150@01))
(declare-const _11@155@01 Int)
(assert (= _11@155@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@152@01 val_ref@150@01)))
; [exec]
; _12 := builtin$havoc_ref()
(declare-const ret@156@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.val_bool, write)
(declare-const $t@157@01 Bool)
(assert (not (= ret@156@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _12.val_bool := _10 < _11
; [eval] _10 < _11
(declare-const val_bool@158@01 Bool)
(assert (= val_bool@158@01 (< 0 _11@155@01)))
; [exec]
; __t26 := _12.val_bool
; [exec]
; assert __t26
(set-option :timeout 0)
(push) ; 3
(assert (not val_bool@158@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert val_bool@158@01)
; [exec]
; __t2 := true
; [exec]
; __t27 := builtin$havoc_ref()
(declare-const ret@159@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t27), write)
(declare-const $t@160@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_2.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_2.val_ref, _10) ==
;   (unfolding acc(i32(__t27), write) in __t27.val_int)
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_2.val_ref, _10) == (unfolding acc(i32(__t27), write) in __t27.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_2.val_ref, _10)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 4
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (< 0 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@152@01 val_ref@150@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@152@01 val_ref@150@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@152@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@150@01 0))
(pop) ; 3
; Joined path conditions
(assert (and
  (< 0 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@152@01 val_ref@150@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@152@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@150@01 0)))
; [eval] (unfolding acc(i32(__t27), write) in __t27.val_int)
(push) ; 3
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@160@01) ret@159@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@159@01 $Ref.null)))
(pop) ; 3
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@160@01) ret@159@01)
  (not (= ret@159@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@152@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@150@01 0)
  $t@160@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _9 := builtin$havoc_int()
(declare-const ret@162@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t27), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _9 := __t27.val_int
; [exec]
; label l3
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | True | live]
; [else-branch: 5 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5 | True]
; [exec]
; exhale acc(Slice$i32(_2.val_ref), read$())
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] __t0 && (__t0 && (__t0 && __t1))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | True | live]
; [else-branch: 6 | False | live]
(push) ; 5
; [then-branch: 6 | True]
(push) ; 6
; [then-branch: 7 | True | live]
; [else-branch: 7 | False | live]
(push) ; 7
; [then-branch: 7 | True]
(push) ; 8
; [then-branch: 8 | True | live]
; [else-branch: 8 | False | live]
(push) ; 9
; [then-branch: 8 | True]
(pop) ; 9
(push) ; 9
; [else-branch: 8 | False]
(assert false)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 7 | False]
(assert false)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 6 | False]
(assert false)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | True | live]
; [else-branch: 9 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 9 | True]
; [exec]
; exhale acc(Slice$i32(old[l0](_4.val_ref)), read$())
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] old[l0](_4.val_ref)
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _14 := builtin$havoc_int()
(declare-const ret@163@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _14 := 1
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _15 := builtin$havoc_int()
(declare-const ret@164@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _15 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(pop) ; 5
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(declare-const _15@165@01 Int)
(assert (=
  _15@165@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
; [exec]
; _16 := builtin$havoc_ref()
(declare-const ret@166@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_16.val_bool, write)
(declare-const $t@167@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@166@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _16.val_bool := _14 < _15
; [eval] _14 < _15
(declare-const val_bool@168@01 Bool)
(assert (= val_bool@168@01 (< 1 _15@165@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t28 := _16.val_bool
; [exec]
; assert __t28
(set-option :timeout 0)
(push) ; 5
(assert (not val_bool@168@01))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert val_bool@168@01)
; [exec]
; __t3 := true
; [exec]
; __t29 := builtin$havoc_ref()
(declare-const ret@169@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t29), write)
(declare-const $t@170@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _14) ==
;   (unfolding acc(i32(__t29), write) in __t29.val_int)
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _14) == (unfolding acc(i32(__t29), write) in __t29.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _14)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  1
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@133@01
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 1))
(pop) ; 5
; Joined path conditions
(assert (and
  (<
    1
    (Slice$len__$TY$__i32$Slice$i32$$int$ $t@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@133@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 1)))
; [eval] (unfolding acc(i32(__t29), write) in __t29.val_int)
(push) ; 5
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@170@01) ret@169@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@169@01 $Ref.null)))
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@170@01) ret@169@01)
  (not (= ret@169@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@133@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 1)
  $t@170@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _13 := builtin$havoc_int()
(declare-const ret@172@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t29), write)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _13 := __t29.val_int
; [exec]
; label l4
; [exec]
; _8 := builtin$havoc_ref()
(declare-const ret@173@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_8.val_bool, write)
(declare-const $t@174@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@173@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _8.val_bool := _9 == _13
; [eval] _9 == _13
(declare-const val_bool@175@01 Bool)
(assert (= val_bool@175@01 (= $t@160@01 $t@170@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _7 := builtin$havoc_ref()
(declare-const ret@176@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_7.val_bool, write)
(declare-const $t@177@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@176@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _7.val_bool := !_8.val_bool
; [eval] !_8.val_bool
(declare-const val_bool@178@01 Bool)
(assert (= val_bool@178@01 (not val_bool@175@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t30 := _7.val_bool
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not val_bool@178@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | val_bool@178@01 | dead]
; [else-branch: 10 | !(val_bool@178@01) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 10 | !(val_bool@178@01)]
(assert (not val_bool@178@01))
(pop) ; 5
; [eval] !__t30
(push) ; 5
(set-option :timeout 10)
(assert (not val_bool@178@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not val_bool@178@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | !(val_bool@178@01) | live]
; [else-branch: 11 | val_bool@178@01 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | !(val_bool@178@01)]
(assert (not val_bool@178@01))
; [exec]
; label return
; [exec]
; __t5 := true
; [exec]
; _20 := builtin$havoc_ref()
(declare-const ret@179@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_20.val_ref, write)
(declare-const $t@180@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@179@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _20.val_ref := _1.val_ref
(declare-const val_ref@181@01 $Ref)
(assert (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_20.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@182@01 $Snap)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@183@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (= $t@183@01 $t@133@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@183@01 $t@182@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l7
; [exec]
; _21 := builtin$havoc_ref()
(declare-const ret@184@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(struct$m_std$$ops$$RangeTo$usize(_21), write)
(declare-const $t@185@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _aux_havoc_usize := builtin$havoc_ref()
(declare-const ret@186@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(struct$m_std$$ops$$RangeTo$usize(_21), write)
(assert (= $t@185@01 ($Snap.combine ($Snap.first $t@185@01) ($Snap.second $t@185@01))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@184@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (struct$m_std$$ops$$RangeTo$usize%trigger $t@185@01 ret@184@01))
; [exec]
; _21.f$end := _aux_havoc_usize
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(_21.f$end.val_int, write)
(declare-const $t@187@01 Int)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@186@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _21.f$end.val_int := 2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l8
; [exec]
; _19 := builtin$havoc_ref()
(declare-const ret@188@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(ref$Slice$i32(_19), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@189@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert _21.f$end.val_int <=
;   Slice$len__$TY$__i32$Slice$i32$$int$(_20.val_ref)
; [eval] _21.f$end.val_int <= Slice$len__$TY$__i32$Slice$i32$$int$(_20.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_20.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@183@01 val_ref@181@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (<=
    $Perm.No
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@183@01 val_ref@181@01)))
(set-option :timeout 0)
(push) ; 6
(assert (not (<= 2 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<= 2 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01)))
; [exec]
; assert 0 <= _21.f$end.val_int
; [eval] 0 <= _21.f$end.val_int
; [exec]
; unfold acc(ref$Slice$i32(_19), read$())
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (= $t@189@01 ($Snap.combine ($Snap.first $t@189@01) ($Snap.second $t@189@01))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No (read$ $Snap.unit)) (not (= ret@188@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (ref$Slice$i32%trigger $t@189@01 ret@188@01))
; [exec]
; inhale Slice$len__$TY$__i32$Slice$i32$$int$(_19.val_ref) ==
;   _21.f$end.val_int - 0
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 $Snap.unit))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_19.val_ref) == _21.f$end.val_int - 0
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_19.val_ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
(pop) ; 6
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
; [eval] _21.f$end.val_int - 0
(assert (=
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))
  2))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (let _LET_3 ==
;     (_20.val_ref) in
;     (let _LET_2 ==
;       (_19.val_ref) in
;       (forall i: Int, j: Int ::
;         { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_19.val_ref,
;         i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_20.val_ref,
;         j) }
;         0 <= i &&
;         (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2) &&
;         (j == i + 0 && (0 <= j && j < _21.f$end.val_int))) ==>
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i) ==
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j))))
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 $Snap.unit))
; [eval] (let _LET_3 == (_20.val_ref) in (let _LET_2 == (_19.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_19.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_20.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2) && (j == i + 0 && (0 <= j && j < _21.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j))))
(declare-const letvar@192@01 $Ref)
(assert (= (as letvar@192@01  $Ref) val_ref@181@01))
; [eval] (let _LET_2 == (_19.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_19.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_20.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2) && (j == i + 0 && (0 <= j && j < _21.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j)))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const letvar@193@01 $Ref)
(assert (= (as letvar@193@01  $Ref) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
; [eval] (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_19.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_20.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2) && (j == i + 0 && (0 <= j && j < _21.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j))
(declare-const i@194@01 Int)
(declare-const j@195@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2) && (j == i + 0 && (0 <= j && j < _21.f$end.val_int))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j)
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2) && (j == i + 0 && (0 <= j && j < _21.f$end.val_int)))
; [eval] 0 <= i
(push) ; 7
; [then-branch: 12 | 0 <= i@194@01 | live]
; [else-branch: 12 | !(0 <= i@194@01) | live]
(push) ; 8
; [then-branch: 12 | 0 <= i@194@01]
(assert (<= 0 i@194@01))
; [eval] i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_2)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
; [then-branch: 13 | i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01)) | live]
; [else-branch: 13 | !(i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01))) | live]
(push) ; 10
; [then-branch: 13 | i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01))]
(assert (<
  i@194@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
; [eval] j == i + 0
; [eval] i + 0
(push) ; 11
; [then-branch: 14 | j@195@01 == i@194@01 | live]
; [else-branch: 14 | j@195@01 != i@194@01 | live]
(push) ; 12
; [then-branch: 14 | j@195@01 == i@194@01]
(assert (= j@195@01 i@194@01))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 15 | 0 <= j@195@01 | live]
; [else-branch: 15 | !(0 <= j@195@01) | live]
(push) ; 14
; [then-branch: 15 | 0 <= j@195@01]
(assert (<= 0 j@195@01))
; [eval] j < _21.f$end.val_int
(pop) ; 14
(push) ; 14
; [else-branch: 15 | !(0 <= j@195@01)]
(assert (not (<= 0 j@195@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j@195@01)) (<= 0 j@195@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 14 | j@195@01 != i@194@01]
(assert (not (= j@195@01 i@194@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (= j@195@01 i@194@01)
  (and (= j@195@01 i@194@01) (or (not (<= 0 j@195@01)) (<= 0 j@195@01)))))
; Joined path conditions
(assert (or (not (= j@195@01 i@194@01)) (= j@195@01 i@194@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 13 | !(i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01)))]
(assert (not
  (<
    i@194@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (<
    i@194@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
  (and
    (<
      i@194@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
    (=>
      (= j@195@01 i@194@01)
      (and (= j@195@01 i@194@01) (or (not (<= 0 j@195@01)) (<= 0 j@195@01))))
    (or (not (= j@195@01 i@194@01)) (= j@195@01 i@194@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i@194@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
  (<
    i@194@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | !(0 <= i@194@01)]
(assert (not (<= 0 i@194@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (<= 0 i@194@01)
  (and
    (<= 0 i@194@01)
    (=>
      (<
        i@194@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
      (and
        (<
          i@194@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
        (=>
          (= j@195@01 i@194@01)
          (and (= j@195@01 i@194@01) (or (not (<= 0 j@195@01)) (<= 0 j@195@01))))
        (or (not (= j@195@01 i@194@01)) (= j@195@01 i@194@01))))
    (or
      (not
        (<
          i@194@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
      (<
        i@194@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))))))
; Joined path conditions
(assert (or (not (<= 0 i@194@01)) (<= 0 i@194@01)))
(push) ; 7
; [then-branch: 16 | j@195@01 < 2 && 0 <= j@195@01 && j@195@01 == i@194@01 && i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01)) && 0 <= i@194@01 | live]
; [else-branch: 16 | !(j@195@01 < 2 && 0 <= j@195@01 && j@195@01 == i@194@01 && i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01)) && 0 <= i@194@01) | live]
(push) ; 8
; [then-branch: 16 | j@195@01 < 2 && 0 <= j@195@01 && j@195@01 == i@194@01 && i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01)) && 0 <= i@194@01]
(assert (and
  (and
    (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
    (<
      i@194@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
  (<= 0 i@194@01)))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_2, i)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@189@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) i@194@01))
(pop) ; 9
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@189@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) i@194@01))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_3, j)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (< j@195@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< j@195@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@183@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@181@01 j@195@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (< j@195@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@183@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@181@01 j@195@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 16 | !(j@195@01 < 2 && 0 <= j@195@01 && j@195@01 == i@194@01 && i@194@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@189@01), First:($t@189@01)) && 0 <= i@194@01)]
(assert (not
  (and
    (and
      (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
      (<
        i@194@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
    (<= 0 i@194@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (and
      (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
      (<
        i@194@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
    (<= 0 i@194@01))
  (and
    (< j@195@01 2)
    (<= 0 j@195@01)
    (= j@195@01 i@194@01)
    (<
      i@194@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
    (<= 0 i@194@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@189@01)
      ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) i@194@01)
    (< j@195@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01))
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      $t@183@01
      ($Snap.combine $Snap.unit $Snap.unit)) val_ref@181@01 j@195@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
        (<
          i@194@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
      (<= 0 i@194@01)))
  (and
    (and
      (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
      (<
        i@194@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
    (<= 0 i@194@01))))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_19.val_ref, i)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 8
(assert (not (<= 0 i@194@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@189@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@189@01) $t@183@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@189@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@183@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@183@01 ($Snap.second $t@189@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@183@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ret@138@01 ret@186@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ret@186@01 ret@138@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 ret@188@01)))
    (and
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@148@01)))
    (and
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 ret@188@01)))
    (and
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@188@01)))
    (and
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@188@01)))
    (and
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@148@01))))
  (and
    (and
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01)))
    (and
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@156@01)))
    (and
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@156@01)))
    (and
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@166@01))))
  (and (not (= ret@134@01 ret@184@01)) (not (= ret@184@01 ret@134@01)))
  (and
    (and
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@186@01)))
    (and
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@186@01)))
    (and
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01)))
    (and
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01)))
    (and
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))))))
(assert (and
  (and
    (and
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01)))
    (not (= ret@173@01 ret@176@01))
    (not (= ret@166@01 ret@176@01))
    (not (= ret@156@01 ret@176@01)))
  (and
    (and (not (= ret@138@01 ret@136@01)) (not (= ret@138@01 ret@186@01)))
    (and (not (= ret@136@01 ret@138@01)) (not (= ret@136@01 ret@186@01)))
    (and (not (= ret@186@01 ret@138@01)) (not (= ret@186@01 ret@136@01))))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 8
(assert (not (<= 0 i@194@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@183@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@183@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 ret@188@01)))
    (and
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@148@01)))
    (and
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 ret@188@01)))
    (and
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@188@01)))
    (and
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@188@01)))
    (and
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@148@01))))
  (and
    (and
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01)))
    (and
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@156@01)))
    (and
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@156@01)))
    (and
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@166@01))))
  (and (not (= ret@134@01 ret@184@01)) (not (= ret@184@01 ret@134@01)))
  (and
    (and
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@186@01)))
    (and
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@186@01)))
    (and
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01)))
    (and
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01)))
    (and
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))))))
(assert (and
  (and
    (and
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01)))
    (not (= ret@173@01 ret@176@01))
    (not (= ret@166@01 ret@176@01))
    (not (= ret@156@01 ret@176@01)))
  (and (not (= ret@134@01 ret@184@01)) (not (= ret@184@01 ret@134@01)))
  (and
    (and (not (= ret@138@01 ret@136@01)) (not (= ret@138@01 ret@186@01)))
    (and (not (= ret@136@01 ret@138@01)) (not (= ret@136@01 ret@186@01)))
    (and (not (= ret@186@01 ret@138@01)) (not (= ret@186@01 ret@136@01))))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 8
(assert (not (<= 0 i@194@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@189@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@189@01) $t@183@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@189@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@183@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@183@01 ($Snap.second $t@189@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@183@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 ret@188@01)))
    (and
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@148@01)))
    (and
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 ret@188@01)))
    (and
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@188@01)))
    (and
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@188@01)))
    (and
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@148@01))))
  (and
    (and
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01)))
    (and
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@156@01)))
    (and
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@156@01)))
    (and
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@166@01))))
  (and (not (= ret@134@01 ret@184@01)) (not (= ret@184@01 ret@134@01)))
  (and
    (and
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@186@01)))
    (and
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@186@01)))
    (and
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01)))
    (and
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01)))
    (and
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))))))
(assert (and
  (and
    (and
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01)))
    (not (= ret@173@01 ret@176@01))
    (not (= ret@166@01 ret@176@01))
    (not (= ret@156@01 ret@176@01)))
  (and (not (= ret@134@01 ret@184@01)) (not (= ret@184@01 ret@134@01)))
  (and
    (and (not (= ret@138@01 ret@136@01)) (not (= ret@138@01 ret@186@01)))
    (and (not (= ret@136@01 ret@138@01)) (not (= ret@136@01 ret@186@01)))
    (and (not (= ret@186@01 ret@138@01)) (not (= ret@186@01 ret@136@01))))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 8
(assert (not (<= 0 i@194@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@194@01 Int) (j@195@01 Int)) (!
  (and
    (=>
      (<= 0 i@194@01)
      (and
        (<= 0 i@194@01)
        (=>
          (<
            i@194@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
          (and
            (<
              i@194@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
            (=>
              (= j@195@01 i@194@01)
              (and
                (= j@195@01 i@194@01)
                (or (not (<= 0 j@195@01)) (<= 0 j@195@01))))
            (or (not (= j@195@01 i@194@01)) (= j@195@01 i@194@01))))
        (or
          (not
            (<
              i@194@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
          (<
            i@194@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
    (or (not (<= 0 i@194@01)) (<= 0 i@194@01))
    (=>
      (and
        (and
          (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
          (<
            i@194@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
        (<= 0 i@194@01))
      (and
        (< j@195@01 2)
        (<= 0 j@195@01)
        (= j@195@01 i@194@01)
        (<
          i@194@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
        (<= 0 i@194@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@189@01)
          ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) i@194@01)
        (<
          j@195@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 val_ref@181@01))
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          $t@183@01
          ($Snap.combine $Snap.unit $Snap.unit)) val_ref@181@01 j@195@01)))
    (or
      (not
        (and
          (and
            (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
            (<
              i@194@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
          (<= 0 i@194@01)))
      (and
        (and
          (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
          (<
            i@194@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
        (<= 0 i@194@01))))
  
  :qid |prog.l1339-aux|)))
(assert (forall ((i@194@01 Int) (j@195@01 Int)) (!
  (=>
    (and
      (and
        (and (and (< j@195@01 2) (<= 0 j@195@01)) (= j@195@01 i@194@01))
        (<
          i@194@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@189@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
      (<= 0 i@194@01))
    (=
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        ($Snap.second $t@189@01)
        ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) i@194@01)
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        $t@183@01
        ($Snap.combine $Snap.unit $Snap.unit)) val_ref@181@01 j@195@01)))
  
  :qid |prog.l1339|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __t6 := true
; [exec]
; _18 := builtin$havoc_ref()
(declare-const ret@196@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_18.val_ref, write)
(declare-const $t@197@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@196@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _18.val_ref := _19.val_ref
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const val_ref@198@01 $Ref)
(assert (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_18.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@199@01 $Snap)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@200@01 $Snap)
(assert (and
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@200@01 ($Snap.second $t@189@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@200@01 $t@199@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l9
; [exec]
; _26 := builtin$havoc_int()
(declare-const ret@201@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _26 := 1
; [exec]
; assert acc(Slice$i32(_18.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; _27 := builtin$havoc_int()
(declare-const ret@202@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _27 := Slice$len__$TY$__i32$Slice$i32$$int$(_18.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_18.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@200@01 val_ref@198@01))
(pop) ; 6
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@200@01 val_ref@198@01))
(declare-const _27@203@01 Int)
(assert (= _27@203@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@200@01 val_ref@198@01)))
; [exec]
; _28 := builtin$havoc_ref()
(declare-const ret@204@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_28.val_bool, write)
(declare-const $t@205@01 Bool)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@204@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _28.val_bool := _26 < _27
; [eval] _26 < _27
(declare-const val_bool@206@01 Bool)
(assert (= val_bool@206@01 (< 1 _27@203@01)))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t31 := _28.val_bool
; [exec]
; assert __t31
(set-option :timeout 0)
(push) ; 6
(assert (not val_bool@206@01))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert val_bool@206@01)
; [exec]
; __t7 := true
; [exec]
; __t32 := builtin$havoc_ref()
(declare-const ret@207@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t32), write)
(declare-const $t@208@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_18.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_18.val_ref, _26) ==
;   (unfolding acc(i32(__t32), write) in __t32.val_int)
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_18.val_ref, _26) == (unfolding acc(i32(__t32), write) in __t32.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_18.val_ref, _26)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (< 1 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@200@01 val_ref@198@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< 1 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@200@01 val_ref@198@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@200@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@198@01 1))
(pop) ; 6
; Joined path conditions
(assert (and
  (< 1 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@200@01 val_ref@198@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@200@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@198@01 1)))
; [eval] (unfolding acc(i32(__t32), write) in __t32.val_int)
(push) ; 6
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@208@01) ret@207@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@207@01 $Ref.null)))
(pop) ; 6
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@208@01) ret@207@01)
  (not (= ret@207@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@200@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@198@01 1)
  $t@208@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _25 := builtin$havoc_int()
(declare-const ret@210@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t32), write)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _25 := __t32.val_int
; [exec]
; label l10
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | True | live]
; [else-branch: 17 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 17 | True]
; [exec]
; exhale acc(Slice$i32(_18.val_ref), read$())
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] __t5 && (__t5 && (__t5 && __t6))
(set-option :timeout 0)
(push) ; 7
; [then-branch: 18 | True | live]
; [else-branch: 18 | False | live]
(push) ; 8
; [then-branch: 18 | True]
(push) ; 9
; [then-branch: 19 | True | live]
; [else-branch: 19 | False | live]
(push) ; 10
; [then-branch: 19 | True]
(push) ; 11
; [then-branch: 20 | True | live]
; [else-branch: 20 | False | live]
(push) ; 12
; [then-branch: 20 | True]
(pop) ; 12
(push) ; 12
; [else-branch: 20 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 19 | False]
(assert false)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 18 | False]
(assert false)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | True | live]
; [else-branch: 21 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 21 | True]
; [exec]
; exhale acc(Slice$i32(old[l7](_20.val_ref)), read$())
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] old[l7](_20.val_ref)
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; _30 := builtin$havoc_int()
(declare-const ret@211@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _30 := 1
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; _31 := builtin$havoc_int()
(declare-const ret@212@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _31 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@183@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(pop) ; 8
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@183@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(declare-const _31@213@01 Int)
(assert (=
  _31@213@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
; [exec]
; _32 := builtin$havoc_ref()
(declare-const ret@214@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_32.val_bool, write)
(declare-const $t@215@01 Bool)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@214@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _32.val_bool := _30 < _31
; [eval] _30 < _31
(declare-const val_bool@216@01 Bool)
(assert (= val_bool@216@01 (< 1 _31@213@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t33 := _32.val_bool
; [exec]
; assert __t33
(set-option :timeout 0)
(push) ; 8
(assert (not val_bool@216@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert val_bool@216@01)
; [exec]
; __t8 := true
; [exec]
; __t34 := builtin$havoc_ref()
(declare-const ret@217@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t34), write)
(declare-const $t@218@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _30) ==
;   (unfolding acc(i32(__t34), write) in __t34.val_int)
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _30) == (unfolding acc(i32(__t34), write) in __t34.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _30)
(set-option :timeout 0)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  1
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@183@01
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 1))
(pop) ; 8
; Joined path conditions
(assert (and
  (<
    1
    (Slice$len__$TY$__i32$Slice$i32$$int$ $t@183@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@183@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 1)))
; [eval] (unfolding acc(i32(__t34), write) in __t34.val_int)
(push) ; 8
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@218@01) ret@217@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@217@01 $Ref.null)))
(pop) ; 8
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@218@01) ret@217@01)
  (not (= ret@217@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@183@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 1)
  $t@218@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _29 := builtin$havoc_int()
(declare-const ret@220@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t34), write)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _29 := __t34.val_int
; [exec]
; label l11
; [exec]
; _24 := builtin$havoc_ref()
(declare-const ret@221@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_24.val_bool, write)
(declare-const $t@222@01 Bool)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@221@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _24.val_bool := _25 == _29
; [eval] _25 == _29
(declare-const val_bool@223@01 Bool)
(assert (= val_bool@223@01 (= $t@208@01 $t@218@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@224@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_23.val_bool, write)
(declare-const $t@225@01 Bool)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@224@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _23.val_bool := !_24.val_bool
; [eval] !_24.val_bool
(declare-const val_bool@226@01 Bool)
(assert (= val_bool@226@01 (not val_bool@223@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t35 := _23.val_bool
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not val_bool@226@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | val_bool@226@01 | dead]
; [else-branch: 22 | !(val_bool@226@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 22 | !(val_bool@226@01)]
(assert (not val_bool@226@01))
(pop) ; 8
; [eval] !__t35
(push) ; 8
(set-option :timeout 10)
(assert (not val_bool@226@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not val_bool@226@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | !(val_bool@226@01) | live]
; [else-branch: 23 | val_bool@226@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 23 | !(val_bool@226@01)]
(assert (not val_bool@226@01))
; [exec]
; label bb0
; [exec]
; __t10 := true
; [exec]
; _36 := builtin$havoc_ref()
(declare-const ret@227@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_36.val_ref, write)
(declare-const $t@228@01 $Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@227@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _36.val_ref := _1.val_ref
(declare-const val_ref@229@01 $Ref)
(assert (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_36.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@230@01 $Snap)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@231@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@231@01 $t@183@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@231@01 $t@230@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          (+ (read$ $Snap.unit) (read$ $Snap.unit))
          ($Perm.min
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l14
; [exec]
; _37 := builtin$havoc_ref()
(declare-const ret@232@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(struct$m_std$$ops$$RangeFrom$usize(_37), write)
(declare-const $t@233@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _aux_havoc_usize := builtin$havoc_ref()
(declare-const ret@234@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(struct$m_std$$ops$$RangeFrom$usize(_37), write)
(assert (= $t@233@01 ($Snap.combine ($Snap.first $t@233@01) ($Snap.second $t@233@01))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@232@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@232@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (struct$m_std$$ops$$RangeFrom$usize%trigger $t@233@01 ret@232@01))
; [exec]
; _37.f$start := _aux_havoc_usize
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@232@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(_37.f$start.val_int, write)
(declare-const $t@235@01 Int)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@234@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _37.f$start.val_int := 1
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l15
; [exec]
; _35 := builtin$havoc_ref()
(declare-const ret@236@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(ref$Slice$i32(_35), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@237@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert _37.f$start.val_int >= 0
; [eval] _37.f$start.val_int >= 0
; [exec]
; assert _37.f$start.val_int <=
;   Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref)
; [eval] _37.f$start.val_int <= Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@231@01 val_ref@229@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (<=
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@231@01 val_ref@229@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (<= 1 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 1 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01)))
; [exec]
; unfold acc(ref$Slice$i32(_35), read$())
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (= $t@237@01 ($Snap.combine ($Snap.first $t@237@01) ($Snap.second $t@237@01))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No (read$ $Snap.unit)) (not (= ret@236@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (ref$Slice$i32%trigger $t@237@01 ret@236@01))
; [exec]
; inhale Slice$len__$TY$__i32$Slice$i32$$int$(_35.val_ref) ==
;   Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref) - _37.f$start.val_int
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 $Snap.unit))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_35.val_ref) == Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref) - _37.f$start.val_int
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_35.val_ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
(pop) ; 9
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref) - _37.f$start.val_int
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_36.val_ref)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert (=
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))
  (- (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01) 1)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (let _LET_5 ==
;     (_36.val_ref) in
;     (let _LET_4 ==
;       (_35.val_ref) in
;       (forall i: Int, j: Int ::
;         { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_35.val_ref,
;         i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_36.val_ref,
;         j) }
;         0 <= i &&
;         (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4) &&
;         (j == i + _37.f$start.val_int &&
;         (_37.f$start.val_int <= j &&
;         j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)))) ==>
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i) ==
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j))))
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] (let _LET_5 == (_36.val_ref) in (let _LET_4 == (_35.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_35.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_36.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4) && (j == i + _37.f$start.val_int && (_37.f$start.val_int <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j))))
(declare-const letvar@240@01 $Ref)
(assert (= (as letvar@240@01  $Ref) val_ref@229@01))
; [eval] (let _LET_4 == (_35.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_35.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_36.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4) && (j == i + _37.f$start.val_int && (_37.f$start.val_int <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const letvar@241@01 $Ref)
(assert (= (as letvar@241@01  $Ref) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
; [eval] (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_35.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_36.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4) && (j == i + _37.f$start.val_int && (_37.f$start.val_int <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j))
(declare-const i@242@01 Int)
(declare-const j@243@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4) && (j == i + _37.f$start.val_int && (_37.f$start.val_int <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j)
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4) && (j == i + _37.f$start.val_int && (_37.f$start.val_int <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5))))
; [eval] 0 <= i
(push) ; 10
; [then-branch: 24 | 0 <= i@242@01 | live]
; [else-branch: 24 | !(0 <= i@242@01) | live]
(push) ; 11
; [then-branch: 24 | 0 <= i@242@01]
(assert (<= 0 i@242@01))
; [eval] i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_4)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
; [then-branch: 25 | i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01)) | live]
; [else-branch: 25 | !(i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01))) | live]
(push) ; 13
; [then-branch: 25 | i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01))]
(assert (<
  i@242@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
; [eval] j == i + _37.f$start.val_int
; [eval] i + _37.f$start.val_int
(push) ; 14
; [then-branch: 26 | j@243@01 == i@242@01 + 1 | live]
; [else-branch: 26 | j@243@01 != i@242@01 + 1 | live]
(push) ; 15
; [then-branch: 26 | j@243@01 == i@242@01 + 1]
(assert (= j@243@01 (+ i@242@01 1)))
; [eval] _37.f$start.val_int <= j
(push) ; 16
; [then-branch: 27 | 1 <= j@243@01 | live]
; [else-branch: 27 | !(1 <= j@243@01) | live]
(push) ; 17
; [then-branch: 27 | 1 <= j@243@01]
(assert (<= 1 j@243@01))
; [eval] j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_5)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 27 | !(1 <= j@243@01)]
(assert (not (<= 1 j@243@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 1 j@243@01)) (<= 1 j@243@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 26 | j@243@01 != i@242@01 + 1]
(assert (not (= j@243@01 (+ i@242@01 1))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (= j@243@01 (+ i@242@01 1))
  (and (= j@243@01 (+ i@242@01 1)) (or (not (<= 1 j@243@01)) (<= 1 j@243@01)))))
; Joined path conditions
(assert (or (not (= j@243@01 (+ i@242@01 1))) (= j@243@01 (+ i@242@01 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 25 | !(i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01)))]
(assert (not
  (<
    i@242@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i@242@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
  (and
    (<
      i@242@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
    (=>
      (= j@243@01 (+ i@242@01 1))
      (and
        (= j@243@01 (+ i@242@01 1))
        (or (not (<= 1 j@243@01)) (<= 1 j@243@01))))
    (or (not (= j@243@01 (+ i@242@01 1))) (= j@243@01 (+ i@242@01 1))))))
; Joined path conditions
(assert (or
  (not
    (<
      i@242@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
  (<
    i@242@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))))
(pop) ; 11
(push) ; 11
; [else-branch: 24 | !(0 <= i@242@01)]
(assert (not (<= 0 i@242@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (<= 0 i@242@01)
  (and
    (<= 0 i@242@01)
    (=>
      (<
        i@242@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
      (and
        (<
          i@242@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
        (=>
          (= j@243@01 (+ i@242@01 1))
          (and
            (= j@243@01 (+ i@242@01 1))
            (or (not (<= 1 j@243@01)) (<= 1 j@243@01))))
        (or (not (= j@243@01 (+ i@242@01 1))) (= j@243@01 (+ i@242@01 1)))))
    (or
      (not
        (<
          i@242@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
      (<
        i@242@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))))))
; Joined path conditions
(assert (or (not (<= 0 i@242@01)) (<= 0 i@242@01)))
(push) ; 10
; [then-branch: 28 | j@243@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@231@01, val_ref@229@01) && 1 <= j@243@01 && j@243@01 == i@242@01 + 1 && i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01)) && 0 <= i@242@01 | live]
; [else-branch: 28 | !(j@243@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@231@01, val_ref@229@01) && 1 <= j@243@01 && j@243@01 == i@242@01 + 1 && i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01)) && 0 <= i@242@01) | live]
(push) ; 11
; [then-branch: 28 | j@243@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@231@01, val_ref@229@01) && 1 <= j@243@01 && j@243@01 == i@242@01 + 1 && i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01)) && 0 <= i@242@01]
(assert (and
  (and
    (and
      (and
        (<
          j@243@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
        (<= 1 j@243@01))
      (= j@243@01 (+ i@242@01 1)))
    (<
      i@242@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
  (<= 0 i@242@01)))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_4, i)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@237@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) i@242@01))
(pop) ; 12
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@237@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) i@242@01))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_5, j)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 13
(assert (not (<= 0 j@243@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 j@243@01))
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@231@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@229@01 j@243@01))
(pop) ; 12
; Joined path conditions
(assert (and
  (<= 0 j@243@01)
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@231@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@229@01 j@243@01)))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 28 | !(j@243@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@231@01, val_ref@229@01) && 1 <= j@243@01 && j@243@01 == i@242@01 + 1 && i@242@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@237@01), First:($t@237@01)) && 0 <= i@242@01)]
(assert (not
  (and
    (and
      (and
        (and
          (<
            j@243@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
          (<= 1 j@243@01))
        (= j@243@01 (+ i@242@01 1)))
      (<
        i@242@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
    (<= 0 i@242@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (and
      (and
        (and
          (<
            j@243@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
          (<= 1 j@243@01))
        (= j@243@01 (+ i@242@01 1)))
      (<
        i@242@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
    (<= 0 i@242@01))
  (and
    (< j@243@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
    (<= 1 j@243@01)
    (= j@243@01 (+ i@242@01 1))
    (<
      i@242@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
    (<= 0 i@242@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@237@01)
      ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) i@242@01)
    (<= 0 j@243@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      $t@231@01
      ($Snap.combine $Snap.unit $Snap.unit)) val_ref@229@01 j@243@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (and
            (<
              j@243@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
            (<= 1 j@243@01))
          (= j@243@01 (+ i@242@01 1)))
        (<
          i@242@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
      (<= 0 i@242@01)))
  (and
    (and
      (and
        (and
          (<
            j@243@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
          (<= 1 j@243@01))
        (= j@243@01 (+ i@242@01 1)))
      (<
        i@242@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
    (<= 0 i@242@01))))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_35.val_ref, i)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 i@242@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@232@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@237@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@237@01) $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@237@01) $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@237@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@200@01 ($Snap.second $t@237@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@231@01 ($Snap.second $t@237@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@231@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@231@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ret@186@01 ret@138@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ret@138@01 ret@186@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ret@136@01 ret@234@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ret@234@01 ret@136@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@236@01)))
    (and
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@196@01)))
    (and
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@236@01)))
    (and
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@236@01)))
    (and
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@236@01)))
    (and
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@196@01)))
    (and
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@236@01)))
    (and
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@236@01)))
    (and
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@196@01))))
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@176@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@176@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@176@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@176@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@176@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@176@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@176@01)))
    (and
      (not (= ret@176@01 ret@224@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@234@01)))
    (and
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@234@01)))
    (and
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@234@01)))
    (and
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@234@01)))
    (and
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@234@01)))
    (and
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@234@01)))
    (and
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@234@01)))
    (and
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@169@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
(assert (and
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01)))
    (and (not (= ret@221@01 ret@224@01)) (not (= ret@221@01 ret@176@01)))
    (and (not (= ret@214@01 ret@224@01)) (not (= ret@214@01 ret@176@01)))
    (and (not (= ret@204@01 ret@224@01)) (not (= ret@204@01 ret@176@01)))
    (and (not (= ret@156@01 ret@224@01)) (not (= ret@156@01 ret@176@01)))
    (and (not (= ret@166@01 ret@224@01)) (not (= ret@166@01 ret@176@01)))
    (and (not (= ret@173@01 ret@224@01)) (not (= ret@173@01 ret@176@01)))
    (and
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))))
  (and
    (and
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@234@01)))
    (and (not (= ret@136@01 ret@186@01)) (not (= ret@136@01 ret@138@01)))
    (and
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@234@01)))
    (and (not (= ret@234@01 ret@186@01)) (not (= ret@234@01 ret@138@01))))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 i@242@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@232@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@231@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@231@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@236@01)))
    (and
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@196@01)))
    (and
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@236@01)))
    (and
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@236@01)))
    (and
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@236@01)))
    (and
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@196@01)))
    (and
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@236@01)))
    (and
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@236@01)))
    (and
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@196@01))))
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@176@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@176@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@176@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@176@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@176@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@176@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@176@01)))
    (and
      (not (= ret@176@01 ret@224@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@234@01)))
    (and
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@234@01)))
    (and
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@234@01)))
    (and
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@234@01)))
    (and
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@234@01)))
    (and
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@234@01)))
    (and
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@234@01)))
    (and
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@169@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
(assert (and
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01)))
    (and (not (= ret@221@01 ret@224@01)) (not (= ret@221@01 ret@176@01)))
    (and (not (= ret@214@01 ret@224@01)) (not (= ret@214@01 ret@176@01)))
    (and (not (= ret@204@01 ret@224@01)) (not (= ret@204@01 ret@176@01)))
    (and (not (= ret@156@01 ret@224@01)) (not (= ret@156@01 ret@176@01)))
    (and (not (= ret@166@01 ret@224@01)) (not (= ret@166@01 ret@176@01)))
    (and (not (= ret@173@01 ret@224@01)) (not (= ret@173@01 ret@176@01)))
    (and
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@234@01)))
    (and (not (= ret@136@01 ret@186@01)) (not (= ret@136@01 ret@138@01)))
    (and
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@234@01)))
    (and (not (= ret@234@01 ret@186@01)) (not (= ret@234@01 ret@138@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 i@242@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@232@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@237@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@237@01) $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@237@01) $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@237@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@200@01 ($Snap.second $t@237@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@231@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@231@01 ($Snap.second $t@237@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@231@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@231@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@236@01)))
    (and
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@196@01)))
    (and
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@236@01)))
    (and
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@236@01)))
    (and
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@236@01)))
    (and
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@196@01)))
    (and
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@236@01)))
    (and
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@236@01)))
    (and
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@196@01))))
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@176@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@176@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@176@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@176@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@176@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@176@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@176@01)))
    (and
      (not (= ret@176@01 ret@224@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@234@01)))
    (and
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@234@01)))
    (and
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@234@01)))
    (and
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@234@01)))
    (and
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@234@01)))
    (and
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@234@01)))
    (and
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@234@01)))
    (and
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@169@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
(assert (and
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01)))
    (and (not (= ret@221@01 ret@224@01)) (not (= ret@221@01 ret@176@01)))
    (and (not (= ret@214@01 ret@224@01)) (not (= ret@214@01 ret@176@01)))
    (and (not (= ret@204@01 ret@224@01)) (not (= ret@204@01 ret@176@01)))
    (and (not (= ret@156@01 ret@224@01)) (not (= ret@156@01 ret@176@01)))
    (and (not (= ret@166@01 ret@224@01)) (not (= ret@166@01 ret@176@01)))
    (and (not (= ret@173@01 ret@224@01)) (not (= ret@173@01 ret@176@01)))
    (and
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@234@01)))
    (and (not (= ret@136@01 ret@186@01)) (not (= ret@136@01 ret@138@01)))
    (and
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@234@01)))
    (and (not (= ret@234@01 ret@186@01)) (not (= ret@234@01 ret@138@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 i@242@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@242@01 Int) (j@243@01 Int)) (!
  (and
    (=>
      (<= 0 i@242@01)
      (and
        (<= 0 i@242@01)
        (=>
          (<
            i@242@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
          (and
            (<
              i@242@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
            (=>
              (= j@243@01 (+ i@242@01 1))
              (and
                (= j@243@01 (+ i@242@01 1))
                (or (not (<= 1 j@243@01)) (<= 1 j@243@01))))
            (or (not (= j@243@01 (+ i@242@01 1))) (= j@243@01 (+ i@242@01 1)))))
        (or
          (not
            (<
              i@242@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
          (<
            i@242@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
    (or (not (<= 0 i@242@01)) (<= 0 i@242@01))
    (=>
      (and
        (and
          (and
            (and
              (<
                j@243@01
                (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
              (<= 1 j@243@01))
            (= j@243@01 (+ i@242@01 1)))
          (<
            i@242@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
        (<= 0 i@242@01))
      (and
        (<
          j@243@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
        (<= 1 j@243@01)
        (= j@243@01 (+ i@242@01 1))
        (<
          i@242@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
        (<= 0 i@242@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@237@01)
          ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) i@242@01)
        (<= 0 j@243@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          $t@231@01
          ($Snap.combine $Snap.unit $Snap.unit)) val_ref@229@01 j@243@01)))
    (or
      (not
        (and
          (and
            (and
              (and
                (<
                  j@243@01
                  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
                (<= 1 j@243@01))
              (= j@243@01 (+ i@242@01 1)))
            (<
              i@242@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
          (<= 0 i@242@01)))
      (and
        (and
          (and
            (and
              (<
                j@243@01
                (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
              (<= 1 j@243@01))
            (= j@243@01 (+ i@242@01 1)))
          (<
            i@242@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
        (<= 0 i@242@01))))
  
  :qid |prog.l780-aux|)))
(assert (forall ((i@242@01 Int) (j@243@01 Int)) (!
  (=>
    (and
      (and
        (and
          (and
            (<
              j@243@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 val_ref@229@01))
            (<= 1 j@243@01))
          (= j@243@01 (+ i@242@01 1)))
        (<
          i@242@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@237@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
      (<= 0 i@242@01))
    (=
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        ($Snap.second $t@237@01)
        ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) i@242@01)
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        $t@231@01
        ($Snap.combine $Snap.unit $Snap.unit)) val_ref@229@01 j@243@01)))
  
  :qid |prog.l780|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __t11 := true
; [exec]
; _34 := builtin$havoc_ref()
(declare-const ret@244@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_34.val_ref, write)
(declare-const $t@245@01 $Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@244@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _34.val_ref := _35.val_ref
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const val_ref@246@01 $Ref)
(assert (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_34.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@247@01 $Snap)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@248@01 $Snap)
(assert (and
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@248@01 ($Snap.second $t@237@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@248@01 $t@247@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l16
; [exec]
; _42 := builtin$havoc_int()
(declare-const ret@249@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _42 := 2
; [exec]
; assert acc(Slice$i32(_34.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; _43 := builtin$havoc_int()
(declare-const ret@250@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _43 := Slice$len__$TY$__i32$Slice$i32$$int$(_34.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_34.val_ref)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@248@01 val_ref@246@01))
(pop) ; 9
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@248@01 val_ref@246@01))
(declare-const _43@251@01 Int)
(assert (= _43@251@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@248@01 val_ref@246@01)))
; [exec]
; _44 := builtin$havoc_ref()
(declare-const ret@252@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_44.val_bool, write)
(declare-const $t@253@01 Bool)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@252@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _44.val_bool := _42 < _43
; [eval] _42 < _43
(declare-const val_bool@254@01 Bool)
(assert (= val_bool@254@01 (< 2 _43@251@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t36 := _44.val_bool
; [exec]
; assert __t36
(set-option :timeout 0)
(push) ; 9
(assert (not val_bool@254@01))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert val_bool@254@01)
; [exec]
; __t12 := true
; [exec]
; __t37 := builtin$havoc_ref()
(declare-const ret@255@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t37), write)
(declare-const $t@256@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_34.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_34.val_ref, _42) ==
;   (unfolding acc(i32(__t37), write) in __t37.val_int)
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_34.val_ref, _42) == (unfolding acc(i32(__t37), write) in __t37.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_34.val_ref, _42)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (< 2 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@248@01 val_ref@246@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< 2 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@248@01 val_ref@246@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@248@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@246@01 2))
(pop) ; 9
; Joined path conditions
(assert (and
  (< 2 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@248@01 val_ref@246@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@248@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@246@01 2)))
; [eval] (unfolding acc(i32(__t37), write) in __t37.val_int)
(push) ; 9
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@256@01) ret@255@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@255@01 $Ref.null)))
(pop) ; 9
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@256@01) ret@255@01)
  (not (= ret@255@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@248@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@246@01 2)
  $t@256@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _41 := builtin$havoc_int()
(declare-const ret@258@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t37), write)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _41 := __t37.val_int
; [exec]
; label l17
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | True | live]
; [else-branch: 29 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 29 | True]
; [exec]
; exhale acc(Slice$i32(_34.val_ref), read$())
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] __t10 && (__t10 && (__t10 && __t11))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 30 | True | live]
; [else-branch: 30 | False | live]
(push) ; 11
; [then-branch: 30 | True]
(push) ; 12
; [then-branch: 31 | True | live]
; [else-branch: 31 | False | live]
(push) ; 13
; [then-branch: 31 | True]
(push) ; 14
; [then-branch: 32 | True | live]
; [else-branch: 32 | False | live]
(push) ; 15
; [then-branch: 32 | True]
(pop) ; 15
(push) ; 15
; [else-branch: 32 | False]
(assert false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 31 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 30 | False]
(assert false)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | True | live]
; [else-branch: 33 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 33 | True]
; [exec]
; exhale acc(Slice$i32(old[l14](_36.val_ref)), read$())
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] old[l14](_36.val_ref)
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+ (read$ $Snap.unit) (read$ $Snap.unit))
            ($Perm.min
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; _46 := builtin$havoc_int()
(declare-const ret@259@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _46 := 3
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; _47 := builtin$havoc_int()
(declare-const ret@260@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _47 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@231@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(pop) ; 11
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@231@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(declare-const _47@261@01 Int)
(assert (=
  _47@261@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
; [exec]
; _48 := builtin$havoc_ref()
(declare-const ret@262@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_48.val_bool, write)
(declare-const $t@263@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@262@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _48.val_bool := _46 < _47
; [eval] _46 < _47
(declare-const val_bool@264@01 Bool)
(assert (= val_bool@264@01 (< 3 _47@261@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t38 := _48.val_bool
; [exec]
; assert __t38
(set-option :timeout 0)
(push) ; 11
(assert (not val_bool@264@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert val_bool@264@01)
; [exec]
; __t13 := true
; [exec]
; __t39 := builtin$havoc_ref()
(declare-const ret@265@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t39), write)
(declare-const $t@266@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _46) ==
;   (unfolding acc(i32(__t39), write) in __t39.val_int)
(declare-const $t@267@01 $Snap)
(assert (= $t@267@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _46) == (unfolding acc(i32(__t39), write) in __t39.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _46)
(set-option :timeout 0)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  3
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  3
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@231@01
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 3))
(pop) ; 11
; Joined path conditions
(assert (and
  (<
    3
    (Slice$len__$TY$__i32$Slice$i32$$int$ $t@231@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@231@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 3)))
; [eval] (unfolding acc(i32(__t39), write) in __t39.val_int)
(push) ; 11
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@266@01) ret@265@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@265@01 $Ref.null)))
(pop) ; 11
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@266@01) ret@265@01)
  (not (= ret@265@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@231@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 3)
  $t@266@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _45 := builtin$havoc_int()
(declare-const ret@268@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t39), write)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _45 := __t39.val_int
; [exec]
; label l18
; [exec]
; _40 := builtin$havoc_ref()
(declare-const ret@269@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_40.val_bool, write)
(declare-const $t@270@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@269@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _40.val_bool := _41 == _45
; [eval] _41 == _45
(declare-const val_bool@271@01 Bool)
(assert (= val_bool@271@01 (= $t@256@01 $t@266@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; _39 := builtin$havoc_ref()
(declare-const ret@272@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_39.val_bool, write)
(declare-const $t@273@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@272@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _39.val_bool := !_40.val_bool
; [eval] !_40.val_bool
(declare-const val_bool@274@01 Bool)
(assert (= val_bool@274@01 (not val_bool@271@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t40 := _39.val_bool
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not val_bool@274@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | val_bool@274@01 | dead]
; [else-branch: 34 | !(val_bool@274@01) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 34 | !(val_bool@274@01)]
(assert (not val_bool@274@01))
(pop) ; 11
; [eval] !__t40
(push) ; 11
(set-option :timeout 10)
(assert (not val_bool@274@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not val_bool@274@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | !(val_bool@274@01) | live]
; [else-branch: 35 | val_bool@274@01 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 35 | !(val_bool@274@01)]
(assert (not val_bool@274@01))
; [exec]
; label bb1
; [exec]
; __t15 := true
; [exec]
; _52 := builtin$havoc_ref()
(declare-const ret@275@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_52.val_ref, write)
(declare-const $t@276@01 $Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@275@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _52.val_ref := _1.val_ref
(declare-const val_ref@277@01 $Ref)
(assert (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_52.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@278@01 $Snap)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@279@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@279@01 $t@231@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@279@01 $t@278@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          (+
            (-
              (+ (read$ $Snap.unit) (read$ $Snap.unit))
              ($Perm.min
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l21
; [exec]
; _53 := builtin$havoc_ref()
(declare-const ret@280@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(struct$m_std$$ops$$RangeFull(_53), write)
(declare-const $t@281@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l22
; [exec]
; _51 := builtin$havoc_ref()
(declare-const ret@282@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(ref$Slice$i32(_51), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@283@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(ref$Slice$i32(_51), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (= $t@283@01 ($Snap.combine ($Snap.first $t@283@01) ($Snap.second $t@283@01))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No (read$ $Snap.unit)) (not (= ret@282@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (ref$Slice$i32%trigger $t@283@01 ret@282@01))
; [exec]
; inhale Slice$len__$TY$__i32$Slice$i32$$int$(_51.val_ref) ==
;   Slice$len__$TY$__i32$Slice$i32$$int$(_52.val_ref) - 0
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 $Snap.unit))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_51.val_ref) == Slice$len__$TY$__i32$Slice$i32$$int$(_52.val_ref) - 0
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_51.val_ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
(pop) ; 12
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_52.val_ref) - 0
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_52.val_ref)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@279@01 val_ref@277@01))
(pop) ; 12
; Joined path conditions
(assert (and
  (<=
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@279@01 val_ref@277@01)))
(assert (=
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (let _LET_7 ==
;     (_52.val_ref) in
;     (let _LET_6 ==
;       (_51.val_ref) in
;       (forall i: Int, j: Int ::
;         { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_51.val_ref,
;         i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_52.val_ref,
;         j) }
;         0 <= i &&
;         (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6) &&
;         (j == i + 0 &&
;         (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)))) ==>
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i) ==
;         lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j))))
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 $Snap.unit))
; [eval] (let _LET_7 == (_52.val_ref) in (let _LET_6 == (_51.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_51.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_52.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6) && (j == i + 0 && (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j))))
(declare-const letvar@286@01 $Ref)
(assert (= (as letvar@286@01  $Ref) val_ref@277@01))
; [eval] (let _LET_6 == (_51.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_51.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_52.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6) && (j == i + 0 && (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const letvar@287@01 $Ref)
(assert (= (as letvar@287@01  $Ref) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
; [eval] (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_51.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_52.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6) && (j == i + 0 && (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j))
(declare-const i@288@01 Int)
(declare-const j@289@01 Int)
(set-option :timeout 0)
(push) ; 12
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6) && (j == i + 0 && (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j)
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6) && (j == i + 0 && (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7))))
; [eval] 0 <= i
(push) ; 13
; [then-branch: 36 | 0 <= i@288@01 | live]
; [else-branch: 36 | !(0 <= i@288@01) | live]
(push) ; 14
; [then-branch: 36 | 0 <= i@288@01]
(assert (<= 0 i@288@01))
; [eval] i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_6)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(set-option :timeout 0)
(push) ; 15
; [then-branch: 37 | i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01)) | live]
; [else-branch: 37 | !(i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01))) | live]
(push) ; 16
; [then-branch: 37 | i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01))]
(assert (<
  i@288@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
; [eval] j == i + 0
; [eval] i + 0
(push) ; 17
; [then-branch: 38 | j@289@01 == i@288@01 | live]
; [else-branch: 38 | j@289@01 != i@288@01 | live]
(push) ; 18
; [then-branch: 38 | j@289@01 == i@288@01]
(assert (= j@289@01 i@288@01))
; [eval] 0 <= j
(push) ; 19
; [then-branch: 39 | 0 <= j@289@01 | live]
; [else-branch: 39 | !(0 <= j@289@01) | live]
(push) ; 20
; [then-branch: 39 | 0 <= j@289@01]
(assert (<= 0 j@289@01))
; [eval] j < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_7)
(push) ; 21
; [eval] read$()
(push) ; 22
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
; Joined path conditions
(pop) ; 20
(set-option :timeout 0)
(push) ; 20
; [else-branch: 39 | !(0 <= j@289@01)]
(assert (not (<= 0 j@289@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j@289@01)) (<= 0 j@289@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 38 | j@289@01 != i@288@01]
(assert (not (= j@289@01 i@288@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (= j@289@01 i@288@01)
  (and (= j@289@01 i@288@01) (or (not (<= 0 j@289@01)) (<= 0 j@289@01)))))
; Joined path conditions
(assert (or (not (= j@289@01 i@288@01)) (= j@289@01 i@288@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 37 | !(i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01)))]
(assert (not
  (<
    i@288@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (<
    i@288@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
  (and
    (<
      i@288@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
    (=>
      (= j@289@01 i@288@01)
      (and (= j@289@01 i@288@01) (or (not (<= 0 j@289@01)) (<= 0 j@289@01))))
    (or (not (= j@289@01 i@288@01)) (= j@289@01 i@288@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i@288@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
  (<
    i@288@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))))
(pop) ; 14
(push) ; 14
; [else-branch: 36 | !(0 <= i@288@01)]
(assert (not (<= 0 i@288@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (<= 0 i@288@01)
  (and
    (<= 0 i@288@01)
    (=>
      (<
        i@288@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
      (and
        (<
          i@288@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
        (=>
          (= j@289@01 i@288@01)
          (and (= j@289@01 i@288@01) (or (not (<= 0 j@289@01)) (<= 0 j@289@01))))
        (or (not (= j@289@01 i@288@01)) (= j@289@01 i@288@01))))
    (or
      (not
        (<
          i@288@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
      (<
        i@288@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))))))
; Joined path conditions
(assert (or (not (<= 0 i@288@01)) (<= 0 i@288@01)))
(push) ; 13
; [then-branch: 40 | j@289@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@279@01, val_ref@277@01) && 0 <= j@289@01 && j@289@01 == i@288@01 && i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01)) && 0 <= i@288@01 | live]
; [else-branch: 40 | !(j@289@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@279@01, val_ref@277@01) && 0 <= j@289@01 && j@289@01 == i@288@01 && i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01)) && 0 <= i@288@01) | live]
(push) ; 14
; [then-branch: 40 | j@289@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@279@01, val_ref@277@01) && 0 <= j@289@01 && j@289@01 == i@288@01 && i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01)) && 0 <= i@288@01]
(assert (and
  (and
    (and
      (and
        (<
          j@289@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
        (<= 0 j@289@01))
      (= j@289@01 i@288@01))
    (<
      i@288@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
  (<= 0 i@288@01)))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_6, i)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@283@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) i@288@01))
(pop) ; 15
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@283@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) i@288@01))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_7, j)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@279@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@277@01 j@289@01))
(pop) ; 15
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@279@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@277@01 j@289@01))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 40 | !(j@289@01 < Slice$len__$TY$__i32$Slice$i32$$int$($t@279@01, val_ref@277@01) && 0 <= j@289@01 && j@289@01 == i@288@01 && i@288@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@283@01), First:($t@283@01)) && 0 <= i@288@01)]
(assert (not
  (and
    (and
      (and
        (and
          (<
            j@289@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
          (<= 0 j@289@01))
        (= j@289@01 i@288@01))
      (<
        i@288@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
    (<= 0 i@288@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (and
      (and
        (and
          (<
            j@289@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
          (<= 0 j@289@01))
        (= j@289@01 i@288@01))
      (<
        i@288@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
    (<= 0 i@288@01))
  (and
    (< j@289@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
    (<= 0 j@289@01)
    (= j@289@01 i@288@01)
    (<
      i@288@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
    (<= 0 i@288@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@283@01)
      ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) i@288@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      $t@279@01
      ($Snap.combine $Snap.unit $Snap.unit)) val_ref@277@01 j@289@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and
          (and
            (<
              j@289@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
            (<= 0 j@289@01))
          (= j@289@01 i@288@01))
        (<
          i@288@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
      (<= 0 i@288@01)))
  (and
    (and
      (and
        (and
          (<
            j@289@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
          (<= 0 j@289@01))
        (= j@289@01 i@288@01))
      (<
        i@288@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
    (<= 0 i@288@01))))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_51.val_ref, i)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 14
(assert (not (<= 0 i@288@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@232@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@283@01) $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@283@01) $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@283@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@283@01) $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@279@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@248@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@248@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@200@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ret@186@01 ret@138@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ret@138@01 ret@186@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ret@136@01 ret@234@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ret@234@01 ret@136@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@244@01 ret@227@01))
      (not (= ret@244@01 ret@188@01))
      (not (= ret@244@01 ret@148@01))
      (not (= ret@244@01 _1@55@01))
      (not (= ret@244@01 ret@129@01))
      (not (= ret@244@01 ret@140@01))
      (not (= ret@244@01 ret@179@01))
      (not (= ret@244@01 ret@196@01))
      (not (= ret@244@01 ret@236@01))
      (not (= ret@244@01 ret@275@01))
      (not (= ret@244@01 ret@282@01)))
    (and
      (not (= ret@227@01 ret@244@01))
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@236@01))
      (not (= ret@227@01 ret@275@01))
      (not (= ret@227@01 ret@282@01)))
    (and
      (not (= ret@188@01 ret@244@01))
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@196@01))
      (not (= ret@188@01 ret@275@01)))
    (and
      (not (= ret@148@01 ret@244@01))
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@236@01))
      (not (= ret@148@01 ret@275@01))
      (not (= ret@148@01 ret@282@01)))
    (and
      (not (= _1@55@01 ret@244@01))
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@236@01))
      (not (= _1@55@01 ret@275@01))
      (not (= _1@55@01 ret@282@01)))
    (and
      (not (= ret@129@01 ret@244@01))
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@236@01))
      (not (= ret@129@01 ret@275@01))
      (not (= ret@129@01 ret@282@01)))
    (and
      (not (= ret@140@01 ret@244@01))
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@196@01))
      (not (= ret@140@01 ret@275@01)))
    (and
      (not (= ret@179@01 ret@244@01))
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@236@01))
      (not (= ret@179@01 ret@275@01))
      (not (= ret@179@01 ret@282@01)))
    (and
      (not (= ret@196@01 ret@244@01))
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@236@01))
      (not (= ret@196@01 ret@275@01))
      (not (= ret@196@01 ret@282@01)))
    (and
      (not (= ret@236@01 ret@244@01))
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@196@01))
      (not (= ret@236@01 ret@275@01)))
    (and
      (not (= ret@275@01 ret@244@01))
      (not (= ret@275@01 ret@227@01))
      (not (= ret@275@01 ret@188@01))
      (not (= ret@275@01 ret@148@01))
      (not (= ret@275@01 _1@55@01))
      (not (= ret@275@01 ret@129@01))
      (not (= ret@275@01 ret@140@01))
      (not (= ret@275@01 ret@179@01))
      (not (= ret@275@01 ret@196@01))
      (not (= ret@275@01 ret@236@01))
      (not (= ret@275@01 ret@282@01)))
    (and
      (not (= ret@282@01 ret@244@01))
      (not (= ret@282@01 ret@227@01))
      (not (= ret@282@01 ret@148@01))
      (not (= ret@282@01 _1@55@01))
      (not (= ret@282@01 ret@129@01))
      (not (= ret@282@01 ret@179@01))
      (not (= ret@282@01 ret@196@01))
      (not (= ret@282@01 ret@275@01))))
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@176@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@272@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@252@01))
      (not (= ret@221@01 ret@262@01))
      (not (= ret@221@01 ret@269@01))
      (not (= ret@221@01 ret@272@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@252@01))
      (not (= ret@214@01 ret@262@01))
      (not (= ret@214@01 ret@269@01))
      (not (= ret@214@01 ret@272@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@252@01))
      (not (= ret@204@01 ret@262@01))
      (not (= ret@204@01 ret@269@01))
      (not (= ret@204@01 ret@272@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@252@01))
      (not (= ret@156@01 ret@262@01))
      (not (= ret@156@01 ret@269@01))
      (not (= ret@156@01 ret@272@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@252@01))
      (not (= ret@166@01 ret@262@01))
      (not (= ret@166@01 ret@269@01))
      (not (= ret@166@01 ret@272@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@252@01))
      (not (= ret@173@01 ret@262@01))
      (not (= ret@173@01 ret@269@01))
      (not (= ret@173@01 ret@272@01)))
    (and
      (not (= ret@176@01 ret@224@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@272@01)))
    (and
      (not (= ret@252@01 ret@224@01))
      (not (= ret@252@01 ret@221@01))
      (not (= ret@252@01 ret@214@01))
      (not (= ret@252@01 ret@204@01))
      (not (= ret@252@01 ret@156@01))
      (not (= ret@252@01 ret@166@01))
      (not (= ret@252@01 ret@173@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@262@01))
      (not (= ret@252@01 ret@269@01))
      (not (= ret@252@01 ret@272@01)))
    (and
      (not (= ret@262@01 ret@224@01))
      (not (= ret@262@01 ret@221@01))
      (not (= ret@262@01 ret@214@01))
      (not (= ret@262@01 ret@204@01))
      (not (= ret@262@01 ret@156@01))
      (not (= ret@262@01 ret@166@01))
      (not (= ret@262@01 ret@173@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@252@01))
      (not (= ret@262@01 ret@269@01))
      (not (= ret@262@01 ret@272@01)))
    (and
      (not (= ret@269@01 ret@224@01))
      (not (= ret@269@01 ret@221@01))
      (not (= ret@269@01 ret@214@01))
      (not (= ret@269@01 ret@204@01))
      (not (= ret@269@01 ret@156@01))
      (not (= ret@269@01 ret@166@01))
      (not (= ret@269@01 ret@173@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@252@01))
      (not (= ret@269@01 ret@262@01))
      (not (= ret@269@01 ret@272@01)))
    (and
      (not (= ret@272@01 ret@224@01))
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@176@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@269@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@234@01))
      (not (= ret@217@01 ret@255@01))
      (not (= ret@217@01 ret@265@01)))
    (and
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@234@01))
      (not (= ret@207@01 ret@255@01))
      (not (= ret@207@01 ret@265@01)))
    (and
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@255@01))
      (not (= ret@186@01 ret@265@01)))
    (and
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@234@01))
      (not (= ret@136@01 ret@255@01))
      (not (= ret@136@01 ret@265@01)))
    (and
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@255@01))
      (not (= ret@138@01 ret@265@01)))
    (and
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@234@01))
      (not (= ret@159@01 ret@255@01))
      (not (= ret@159@01 ret@265@01)))
    (and
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@234@01))
      (not (= ret@169@01 ret@255@01))
      (not (= ret@169@01 ret@265@01)))
    (and
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@169@01))
      (not (= ret@234@01 ret@255@01))
      (not (= ret@234@01 ret@265@01)))
    (and
      (not (= ret@255@01 ret@217@01))
      (not (= ret@255@01 ret@207@01))
      (not (= ret@255@01 ret@186@01))
      (not (= ret@255@01 ret@136@01))
      (not (= ret@255@01 ret@138@01))
      (not (= ret@255@01 ret@159@01))
      (not (= ret@255@01 ret@169@01))
      (not (= ret@255@01 ret@234@01))
      (not (= ret@255@01 ret@265@01)))
    (and
      (not (= ret@265@01 ret@217@01))
      (not (= ret@265@01 ret@207@01))
      (not (= ret@265@01 ret@186@01))
      (not (= ret@265@01 ret@136@01))
      (not (= ret@265@01 ret@138@01))
      (not (= ret@265@01 ret@159@01))
      (not (= ret@265@01 ret@169@01))
      (not (= ret@265@01 ret@234@01))
      (not (= ret@265@01 ret@255@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
(assert (and
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@269@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@272@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@272@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@272@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@272@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@272@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@272@01)))
    (and
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@269@01)))
    (and
      (not (= ret@252@01 ret@224@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@272@01)))
    (and
      (not (= ret@262@01 ret@224@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@272@01)))
    (and
      (not (= ret@269@01 ret@224@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@272@01)))
    (and
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@269@01))))
  (and
    (and
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@234@01)))
    (and (not (= ret@136@01 ret@186@01)) (not (= ret@136@01 ret@138@01)))
    (and
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@234@01)))
    (and (not (= ret@234@01 ret@186@01)) (not (= ret@234@01 ret@138@01))))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 14
(assert (not (<= 0 i@288@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@232@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@248@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@244@01 ret@227@01))
      (not (= ret@244@01 ret@188@01))
      (not (= ret@244@01 ret@148@01))
      (not (= ret@244@01 _1@55@01))
      (not (= ret@244@01 ret@129@01))
      (not (= ret@244@01 ret@140@01))
      (not (= ret@244@01 ret@179@01))
      (not (= ret@244@01 ret@196@01))
      (not (= ret@244@01 ret@236@01))
      (not (= ret@244@01 ret@275@01))
      (not (= ret@244@01 ret@282@01)))
    (and
      (not (= ret@227@01 ret@244@01))
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@236@01))
      (not (= ret@227@01 ret@275@01))
      (not (= ret@227@01 ret@282@01)))
    (and
      (not (= ret@188@01 ret@244@01))
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@196@01))
      (not (= ret@188@01 ret@275@01)))
    (and
      (not (= ret@148@01 ret@244@01))
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@236@01))
      (not (= ret@148@01 ret@275@01))
      (not (= ret@148@01 ret@282@01)))
    (and
      (not (= _1@55@01 ret@244@01))
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@236@01))
      (not (= _1@55@01 ret@275@01))
      (not (= _1@55@01 ret@282@01)))
    (and
      (not (= ret@129@01 ret@244@01))
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@236@01))
      (not (= ret@129@01 ret@275@01))
      (not (= ret@129@01 ret@282@01)))
    (and
      (not (= ret@140@01 ret@244@01))
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@196@01))
      (not (= ret@140@01 ret@275@01)))
    (and
      (not (= ret@179@01 ret@244@01))
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@236@01))
      (not (= ret@179@01 ret@275@01))
      (not (= ret@179@01 ret@282@01)))
    (and
      (not (= ret@196@01 ret@244@01))
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@236@01))
      (not (= ret@196@01 ret@275@01))
      (not (= ret@196@01 ret@282@01)))
    (and
      (not (= ret@236@01 ret@244@01))
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@196@01))
      (not (= ret@236@01 ret@275@01)))
    (and
      (not (= ret@275@01 ret@244@01))
      (not (= ret@275@01 ret@227@01))
      (not (= ret@275@01 ret@188@01))
      (not (= ret@275@01 ret@148@01))
      (not (= ret@275@01 _1@55@01))
      (not (= ret@275@01 ret@129@01))
      (not (= ret@275@01 ret@140@01))
      (not (= ret@275@01 ret@179@01))
      (not (= ret@275@01 ret@196@01))
      (not (= ret@275@01 ret@236@01))
      (not (= ret@275@01 ret@282@01)))
    (and
      (not (= ret@282@01 ret@244@01))
      (not (= ret@282@01 ret@227@01))
      (not (= ret@282@01 ret@148@01))
      (not (= ret@282@01 _1@55@01))
      (not (= ret@282@01 ret@129@01))
      (not (= ret@282@01 ret@179@01))
      (not (= ret@282@01 ret@196@01))
      (not (= ret@282@01 ret@275@01))))
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@176@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@272@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@252@01))
      (not (= ret@221@01 ret@262@01))
      (not (= ret@221@01 ret@269@01))
      (not (= ret@221@01 ret@272@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@252@01))
      (not (= ret@214@01 ret@262@01))
      (not (= ret@214@01 ret@269@01))
      (not (= ret@214@01 ret@272@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@252@01))
      (not (= ret@204@01 ret@262@01))
      (not (= ret@204@01 ret@269@01))
      (not (= ret@204@01 ret@272@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@252@01))
      (not (= ret@156@01 ret@262@01))
      (not (= ret@156@01 ret@269@01))
      (not (= ret@156@01 ret@272@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@252@01))
      (not (= ret@166@01 ret@262@01))
      (not (= ret@166@01 ret@269@01))
      (not (= ret@166@01 ret@272@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@252@01))
      (not (= ret@173@01 ret@262@01))
      (not (= ret@173@01 ret@269@01))
      (not (= ret@173@01 ret@272@01)))
    (and
      (not (= ret@176@01 ret@224@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@272@01)))
    (and
      (not (= ret@252@01 ret@224@01))
      (not (= ret@252@01 ret@221@01))
      (not (= ret@252@01 ret@214@01))
      (not (= ret@252@01 ret@204@01))
      (not (= ret@252@01 ret@156@01))
      (not (= ret@252@01 ret@166@01))
      (not (= ret@252@01 ret@173@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@262@01))
      (not (= ret@252@01 ret@269@01))
      (not (= ret@252@01 ret@272@01)))
    (and
      (not (= ret@262@01 ret@224@01))
      (not (= ret@262@01 ret@221@01))
      (not (= ret@262@01 ret@214@01))
      (not (= ret@262@01 ret@204@01))
      (not (= ret@262@01 ret@156@01))
      (not (= ret@262@01 ret@166@01))
      (not (= ret@262@01 ret@173@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@252@01))
      (not (= ret@262@01 ret@269@01))
      (not (= ret@262@01 ret@272@01)))
    (and
      (not (= ret@269@01 ret@224@01))
      (not (= ret@269@01 ret@221@01))
      (not (= ret@269@01 ret@214@01))
      (not (= ret@269@01 ret@204@01))
      (not (= ret@269@01 ret@156@01))
      (not (= ret@269@01 ret@166@01))
      (not (= ret@269@01 ret@173@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@252@01))
      (not (= ret@269@01 ret@262@01))
      (not (= ret@269@01 ret@272@01)))
    (and
      (not (= ret@272@01 ret@224@01))
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@176@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@269@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@234@01))
      (not (= ret@217@01 ret@255@01))
      (not (= ret@217@01 ret@265@01)))
    (and
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@234@01))
      (not (= ret@207@01 ret@255@01))
      (not (= ret@207@01 ret@265@01)))
    (and
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@255@01))
      (not (= ret@186@01 ret@265@01)))
    (and
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@234@01))
      (not (= ret@136@01 ret@255@01))
      (not (= ret@136@01 ret@265@01)))
    (and
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@255@01))
      (not (= ret@138@01 ret@265@01)))
    (and
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@234@01))
      (not (= ret@159@01 ret@255@01))
      (not (= ret@159@01 ret@265@01)))
    (and
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@234@01))
      (not (= ret@169@01 ret@255@01))
      (not (= ret@169@01 ret@265@01)))
    (and
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@169@01))
      (not (= ret@234@01 ret@255@01))
      (not (= ret@234@01 ret@265@01)))
    (and
      (not (= ret@255@01 ret@217@01))
      (not (= ret@255@01 ret@207@01))
      (not (= ret@255@01 ret@186@01))
      (not (= ret@255@01 ret@136@01))
      (not (= ret@255@01 ret@138@01))
      (not (= ret@255@01 ret@159@01))
      (not (= ret@255@01 ret@169@01))
      (not (= ret@255@01 ret@234@01))
      (not (= ret@255@01 ret@265@01)))
    (and
      (not (= ret@265@01 ret@217@01))
      (not (= ret@265@01 ret@207@01))
      (not (= ret@265@01 ret@186@01))
      (not (= ret@265@01 ret@136@01))
      (not (= ret@265@01 ret@138@01))
      (not (= ret@265@01 ret@159@01))
      (not (= ret@265@01 ret@169@01))
      (not (= ret@265@01 ret@234@01))
      (not (= ret@265@01 ret@255@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
(assert (and
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@269@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@272@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@272@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@272@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@272@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@272@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@272@01)))
    (and
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@269@01)))
    (and
      (not (= ret@252@01 ret@224@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@272@01)))
    (and
      (not (= ret@262@01 ret@224@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@272@01)))
    (and
      (not (= ret@269@01 ret@224@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@272@01)))
    (and
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@269@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@234@01)))
    (and (not (= ret@136@01 ret@186@01)) (not (= ret@136@01 ret@138@01)))
    (and
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@234@01)))
    (and (not (= ret@234@01 ret@186@01)) (not (= ret@234@01 ret@138@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 14
(assert (not (<= 0 i@288@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@232@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@224@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@283@01) $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@283@01) $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@283@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@283@01) $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@279@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@279@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@248@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@248@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@200@01 ($Snap.second $t@283@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@279@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 2 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 4 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 2))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 4))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@244@01 ret@227@01))
      (not (= ret@244@01 ret@188@01))
      (not (= ret@244@01 ret@148@01))
      (not (= ret@244@01 _1@55@01))
      (not (= ret@244@01 ret@129@01))
      (not (= ret@244@01 ret@140@01))
      (not (= ret@244@01 ret@179@01))
      (not (= ret@244@01 ret@196@01))
      (not (= ret@244@01 ret@236@01))
      (not (= ret@244@01 ret@275@01))
      (not (= ret@244@01 ret@282@01)))
    (and
      (not (= ret@227@01 ret@244@01))
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@236@01))
      (not (= ret@227@01 ret@275@01))
      (not (= ret@227@01 ret@282@01)))
    (and
      (not (= ret@188@01 ret@244@01))
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@196@01))
      (not (= ret@188@01 ret@275@01)))
    (and
      (not (= ret@148@01 ret@244@01))
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@236@01))
      (not (= ret@148@01 ret@275@01))
      (not (= ret@148@01 ret@282@01)))
    (and
      (not (= _1@55@01 ret@244@01))
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@236@01))
      (not (= _1@55@01 ret@275@01))
      (not (= _1@55@01 ret@282@01)))
    (and
      (not (= ret@129@01 ret@244@01))
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@236@01))
      (not (= ret@129@01 ret@275@01))
      (not (= ret@129@01 ret@282@01)))
    (and
      (not (= ret@140@01 ret@244@01))
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@196@01))
      (not (= ret@140@01 ret@275@01)))
    (and
      (not (= ret@179@01 ret@244@01))
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@236@01))
      (not (= ret@179@01 ret@275@01))
      (not (= ret@179@01 ret@282@01)))
    (and
      (not (= ret@196@01 ret@244@01))
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@236@01))
      (not (= ret@196@01 ret@275@01))
      (not (= ret@196@01 ret@282@01)))
    (and
      (not (= ret@236@01 ret@244@01))
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@196@01))
      (not (= ret@236@01 ret@275@01)))
    (and
      (not (= ret@275@01 ret@244@01))
      (not (= ret@275@01 ret@227@01))
      (not (= ret@275@01 ret@188@01))
      (not (= ret@275@01 ret@148@01))
      (not (= ret@275@01 _1@55@01))
      (not (= ret@275@01 ret@129@01))
      (not (= ret@275@01 ret@140@01))
      (not (= ret@275@01 ret@179@01))
      (not (= ret@275@01 ret@196@01))
      (not (= ret@275@01 ret@236@01))
      (not (= ret@275@01 ret@282@01)))
    (and
      (not (= ret@282@01 ret@244@01))
      (not (= ret@282@01 ret@227@01))
      (not (= ret@282@01 ret@148@01))
      (not (= ret@282@01 _1@55@01))
      (not (= ret@282@01 ret@129@01))
      (not (= ret@282@01 ret@179@01))
      (not (= ret@282@01 ret@196@01))
      (not (= ret@282@01 ret@275@01))))
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@176@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@272@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@252@01))
      (not (= ret@221@01 ret@262@01))
      (not (= ret@221@01 ret@269@01))
      (not (= ret@221@01 ret@272@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@252@01))
      (not (= ret@214@01 ret@262@01))
      (not (= ret@214@01 ret@269@01))
      (not (= ret@214@01 ret@272@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@252@01))
      (not (= ret@204@01 ret@262@01))
      (not (= ret@204@01 ret@269@01))
      (not (= ret@204@01 ret@272@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@252@01))
      (not (= ret@156@01 ret@262@01))
      (not (= ret@156@01 ret@269@01))
      (not (= ret@156@01 ret@272@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@252@01))
      (not (= ret@166@01 ret@262@01))
      (not (= ret@166@01 ret@269@01))
      (not (= ret@166@01 ret@272@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@252@01))
      (not (= ret@173@01 ret@262@01))
      (not (= ret@173@01 ret@269@01))
      (not (= ret@173@01 ret@272@01)))
    (and
      (not (= ret@176@01 ret@224@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@272@01)))
    (and
      (not (= ret@252@01 ret@224@01))
      (not (= ret@252@01 ret@221@01))
      (not (= ret@252@01 ret@214@01))
      (not (= ret@252@01 ret@204@01))
      (not (= ret@252@01 ret@156@01))
      (not (= ret@252@01 ret@166@01))
      (not (= ret@252@01 ret@173@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@262@01))
      (not (= ret@252@01 ret@269@01))
      (not (= ret@252@01 ret@272@01)))
    (and
      (not (= ret@262@01 ret@224@01))
      (not (= ret@262@01 ret@221@01))
      (not (= ret@262@01 ret@214@01))
      (not (= ret@262@01 ret@204@01))
      (not (= ret@262@01 ret@156@01))
      (not (= ret@262@01 ret@166@01))
      (not (= ret@262@01 ret@173@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@252@01))
      (not (= ret@262@01 ret@269@01))
      (not (= ret@262@01 ret@272@01)))
    (and
      (not (= ret@269@01 ret@224@01))
      (not (= ret@269@01 ret@221@01))
      (not (= ret@269@01 ret@214@01))
      (not (= ret@269@01 ret@204@01))
      (not (= ret@269@01 ret@156@01))
      (not (= ret@269@01 ret@166@01))
      (not (= ret@269@01 ret@173@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@252@01))
      (not (= ret@269@01 ret@262@01))
      (not (= ret@269@01 ret@272@01)))
    (and
      (not (= ret@272@01 ret@224@01))
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@176@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@269@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@234@01))
      (not (= ret@217@01 ret@255@01))
      (not (= ret@217@01 ret@265@01)))
    (and
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@234@01))
      (not (= ret@207@01 ret@255@01))
      (not (= ret@207@01 ret@265@01)))
    (and
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@255@01))
      (not (= ret@186@01 ret@265@01)))
    (and
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@234@01))
      (not (= ret@136@01 ret@255@01))
      (not (= ret@136@01 ret@265@01)))
    (and
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@255@01))
      (not (= ret@138@01 ret@265@01)))
    (and
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@234@01))
      (not (= ret@159@01 ret@255@01))
      (not (= ret@159@01 ret@265@01)))
    (and
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@234@01))
      (not (= ret@169@01 ret@255@01))
      (not (= ret@169@01 ret@265@01)))
    (and
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@169@01))
      (not (= ret@234@01 ret@255@01))
      (not (= ret@234@01 ret@265@01)))
    (and
      (not (= ret@255@01 ret@217@01))
      (not (= ret@255@01 ret@207@01))
      (not (= ret@255@01 ret@186@01))
      (not (= ret@255@01 ret@136@01))
      (not (= ret@255@01 ret@138@01))
      (not (= ret@255@01 ret@159@01))
      (not (= ret@255@01 ret@169@01))
      (not (= ret@255@01 ret@234@01))
      (not (= ret@255@01 ret@265@01)))
    (and
      (not (= ret@265@01 ret@217@01))
      (not (= ret@265@01 ret@207@01))
      (not (= ret@265@01 ret@186@01))
      (not (= ret@265@01 ret@136@01))
      (not (= ret@265@01 ret@138@01))
      (not (= ret@265@01 ret@159@01))
      (not (= ret@265@01 ret@169@01))
      (not (= ret@265@01 ret@234@01))
      (not (= ret@265@01 ret@255@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
(assert (and
  (and
    (and
      (not (= ret@224@01 ret@221@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@269@01)))
    (and
      (not (= ret@221@01 ret@224@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@272@01)))
    (and
      (not (= ret@214@01 ret@224@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@272@01)))
    (and
      (not (= ret@204@01 ret@224@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@272@01)))
    (and
      (not (= ret@156@01 ret@224@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@272@01)))
    (and
      (not (= ret@166@01 ret@224@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@272@01)))
    (and
      (not (= ret@173@01 ret@224@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@272@01)))
    (and
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@269@01)))
    (and
      (not (= ret@252@01 ret@224@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@272@01)))
    (and
      (not (= ret@262@01 ret@224@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@272@01)))
    (and
      (not (= ret@269@01 ret@224@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@272@01)))
    (and
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@269@01))))
  (and (not (= ret@184@01 ret@134@01)) (not (= ret@134@01 ret@184@01)))
  (and
    (and
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@234@01)))
    (and (not (= ret@136@01 ret@186@01)) (not (= ret@136@01 ret@138@01)))
    (and
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@234@01)))
    (and (not (= ret@234@01 ret@186@01)) (not (= ret@234@01 ret@138@01))))
  (and (not (= ret@134@01 ret@232@01)) (not (= ret@232@01 ret@134@01)))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 14
(assert (not (<= 0 i@288@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@288@01 Int) (j@289@01 Int)) (!
  (and
    (=>
      (<= 0 i@288@01)
      (and
        (<= 0 i@288@01)
        (=>
          (<
            i@288@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
          (and
            (<
              i@288@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
            (=>
              (= j@289@01 i@288@01)
              (and
                (= j@289@01 i@288@01)
                (or (not (<= 0 j@289@01)) (<= 0 j@289@01))))
            (or (not (= j@289@01 i@288@01)) (= j@289@01 i@288@01))))
        (or
          (not
            (<
              i@288@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
          (<
            i@288@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
    (or (not (<= 0 i@288@01)) (<= 0 i@288@01))
    (=>
      (and
        (and
          (and
            (and
              (<
                j@289@01
                (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
              (<= 0 j@289@01))
            (= j@289@01 i@288@01))
          (<
            i@288@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
        (<= 0 i@288@01))
      (and
        (<
          j@289@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
        (<= 0 j@289@01)
        (= j@289@01 i@288@01)
        (<
          i@288@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
        (<= 0 i@288@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@283@01)
          ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) i@288@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          $t@279@01
          ($Snap.combine $Snap.unit $Snap.unit)) val_ref@277@01 j@289@01)))
    (or
      (not
        (and
          (and
            (and
              (and
                (<
                  j@289@01
                  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
                (<= 0 j@289@01))
              (= j@289@01 i@288@01))
            (<
              i@288@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
          (<= 0 i@288@01)))
      (and
        (and
          (and
            (and
              (<
                j@289@01
                (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
              (<= 0 j@289@01))
            (= j@289@01 i@288@01))
          (<
            i@288@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
        (<= 0 i@288@01))))
  
  :qid |prog.l929-aux|)))
(assert (forall ((i@288@01 Int) (j@289@01 Int)) (!
  (=>
    (and
      (and
        (and
          (and
            (<
              j@289@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 val_ref@277@01))
            (<= 0 j@289@01))
          (= j@289@01 i@288@01))
        (<
          i@288@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@283@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
      (<= 0 i@288@01))
    (=
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        ($Snap.second $t@283@01)
        ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) i@288@01)
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        $t@279@01
        ($Snap.combine $Snap.unit $Snap.unit)) val_ref@277@01 j@289@01)))
  
  :qid |prog.l929|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __t16 := true
; [exec]
; _50 := builtin$havoc_ref()
(declare-const ret@290@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_50.val_ref, write)
(declare-const $t@291@01 $Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@290@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _50.val_ref := _51.val_ref
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const val_ref@292@01 $Ref)
(assert (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_50.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@293@01 $Snap)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@294@01 $Snap)
(assert (and
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@294@01 ($Snap.second $t@283@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@294@01 $t@293@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l23
; [exec]
; _58 := builtin$havoc_int()
(declare-const ret@295@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _58 := 3
; [exec]
; assert acc(Slice$i32(_50.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; _59 := builtin$havoc_int()
(declare-const ret@296@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _59 := Slice$len__$TY$__i32$Slice$i32$$int$(_50.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_50.val_ref)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@294@01 val_ref@292@01))
(pop) ; 12
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@294@01 val_ref@292@01))
(declare-const _59@297@01 Int)
(assert (= _59@297@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@294@01 val_ref@292@01)))
; [exec]
; _60 := builtin$havoc_ref()
(declare-const ret@298@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_60.val_bool, write)
(declare-const $t@299@01 Bool)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@298@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _60.val_bool := _58 < _59
; [eval] _58 < _59
(declare-const val_bool@300@01 Bool)
(assert (= val_bool@300@01 (< 3 _59@297@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t41 := _60.val_bool
; [exec]
; assert __t41
(set-option :timeout 0)
(push) ; 12
(assert (not val_bool@300@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert val_bool@300@01)
; [exec]
; __t17 := true
; [exec]
; __t42 := builtin$havoc_ref()
(declare-const ret@301@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t42), write)
(declare-const $t@302@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_50.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_50.val_ref, _58) ==
;   (unfolding acc(i32(__t42), write) in __t42.val_int)
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_50.val_ref, _58) == (unfolding acc(i32(__t42), write) in __t42.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_50.val_ref, _58)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
(assert (not (< 3 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@294@01 val_ref@292@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (< 3 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@294@01 val_ref@292@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@294@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@292@01 3))
(pop) ; 12
; Joined path conditions
(assert (and
  (< 3 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@294@01 val_ref@292@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@294@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@292@01 3)))
; [eval] (unfolding acc(i32(__t42), write) in __t42.val_int)
(push) ; 12
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@302@01) ret@301@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@301@01 $Ref.null)))
(pop) ; 12
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@302@01) ret@301@01)
  (not (= ret@301@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@294@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@292@01 3)
  $t@302@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _57 := builtin$havoc_int()
(declare-const ret@304@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t42), write)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _57 := __t42.val_int
; [exec]
; label l24
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | True | live]
; [else-branch: 41 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 41 | True]
; [exec]
; exhale acc(Slice$i32(_50.val_ref), read$())
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] __t15 && (__t15 && (__t15 && __t16))
(set-option :timeout 0)
(push) ; 13
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | live]
(push) ; 14
; [then-branch: 42 | True]
(push) ; 15
; [then-branch: 43 | True | live]
; [else-branch: 43 | False | live]
(push) ; 16
; [then-branch: 43 | True]
(push) ; 17
; [then-branch: 44 | True | live]
; [else-branch: 44 | False | live]
(push) ; 18
; [then-branch: 44 | True]
(pop) ; 18
(push) ; 18
; [else-branch: 44 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 43 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 42 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | True | live]
; [else-branch: 45 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 45 | True]
; [exec]
; exhale acc(Slice$i32(old[l21](_52.val_ref)), read$())
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] old[l21](_52.val_ref)
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                ($Perm.min
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; _62 := builtin$havoc_int()
(declare-const ret@305@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _62 := 3
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; _63 := builtin$havoc_int()
(declare-const ret@306@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _63 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@279@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(pop) ; 14
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@279@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(declare-const _63@307@01 Int)
(assert (=
  _63@307@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
; [exec]
; _64 := builtin$havoc_ref()
(declare-const ret@308@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_64.val_bool, write)
(declare-const $t@309@01 Bool)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@308@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _64.val_bool := _62 < _63
; [eval] _62 < _63
(declare-const val_bool@310@01 Bool)
(assert (= val_bool@310@01 (< 3 _63@307@01)))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t43 := _64.val_bool
; [exec]
; assert __t43
(set-option :timeout 0)
(push) ; 14
(assert (not val_bool@310@01))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert val_bool@310@01)
; [exec]
; __t18 := true
; [exec]
; __t44 := builtin$havoc_ref()
(declare-const ret@311@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t44), write)
(declare-const $t@312@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _62) ==
;   (unfolding acc(i32(__t44), write) in __t44.val_int)
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _62) == (unfolding acc(i32(__t44), write) in __t44.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _62)
(set-option :timeout 0)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(set-option :timeout 0)
(push) ; 15
(assert (not (<
  3
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<
  3
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@279@01
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 3))
(pop) ; 14
; Joined path conditions
(assert (and
  (<
    3
    (Slice$len__$TY$__i32$Slice$i32$$int$ $t@279@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@279@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 3)))
; [eval] (unfolding acc(i32(__t44), write) in __t44.val_int)
(push) ; 14
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@312@01) ret@311@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@311@01 $Ref.null)))
(pop) ; 14
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@312@01) ret@311@01)
  (not (= ret@311@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@279@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 3)
  $t@312@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _61 := builtin$havoc_int()
(declare-const ret@314@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t44), write)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _61 := __t44.val_int
; [exec]
; label l25
; [exec]
; _56 := builtin$havoc_ref()
(declare-const ret@315@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_56.val_bool, write)
(declare-const $t@316@01 Bool)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@315@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _56.val_bool := _57 == _61
; [eval] _57 == _61
(declare-const val_bool@317@01 Bool)
(assert (= val_bool@317@01 (= $t@302@01 $t@312@01)))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; _55 := builtin$havoc_ref()
(declare-const ret@318@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_55.val_bool, write)
(declare-const $t@319@01 Bool)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@318@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _55.val_bool := !_56.val_bool
; [eval] !_56.val_bool
(declare-const val_bool@320@01 Bool)
(assert (= val_bool@320@01 (not val_bool@317@01)))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t45 := _55.val_bool
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not val_bool@320@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | val_bool@320@01 | dead]
; [else-branch: 46 | !(val_bool@320@01) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 46 | !(val_bool@320@01)]
(assert (not val_bool@320@01))
(pop) ; 14
; [eval] !__t45
(push) ; 14
(set-option :timeout 10)
(assert (not val_bool@320@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not val_bool@320@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | !(val_bool@320@01) | live]
; [else-branch: 47 | val_bool@320@01 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 47 | !(val_bool@320@01)]
(assert (not val_bool@320@01))
; [exec]
; label bb2
; [exec]
; __t20 := true
; [exec]
; _68 := builtin$havoc_ref()
(declare-const ret@321@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_68.val_ref, write)
(declare-const $t@322@01 $Ref)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@321@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _68.val_ref := _1.val_ref
(declare-const val_ref@323@01 $Ref)
(assert (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_68.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const $t@324@01 $Snap)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const $t@325@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@325@01 $t@279@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@325@01 $t@324@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                  ($Perm.min
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l28
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@326@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(struct$m_std$$ops$$RangeToInclusive$usize(_69), write)
(declare-const $t@327@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _aux_havoc_usize := builtin$havoc_ref()
(declare-const ret@328@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(struct$m_std$$ops$$RangeToInclusive$usize(_69), write)
(assert (= $t@327@01 ($Snap.combine ($Snap.first $t@327@01) ($Snap.second $t@327@01))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@326@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@326@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@326@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (struct$m_std$$ops$$RangeToInclusive$usize%trigger $t@327@01 ret@326@01))
; [exec]
; _69.f$end := _aux_havoc_usize
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@326@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@326@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(_69.f$end.val_int, write)
(declare-const $t@329@01 Int)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@311@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@328@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _69.f$end.val_int := 5
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@311@01 ret@328@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l29
; [exec]
; _67 := builtin$havoc_ref()
(declare-const ret@330@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(ref$Slice$i32(_67), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const $t@331@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert _69.f$end.val_int + 1 <=
;   Slice$len__$TY$__i32$Slice$i32$$int$(_68.val_ref)
; [eval] _69.f$end.val_int + 1 <= Slice$len__$TY$__i32$Slice$i32$$int$(_68.val_ref)
; [eval] _69.f$end.val_int + 1
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_68.val_ref)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@325@01 val_ref@323@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (<=
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@325@01 val_ref@323@01)))
(set-option :timeout 0)
(push) ; 15
(assert (not (<= 6 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= 6 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01)))
; [exec]
; assert 0 <= _69.f$end.val_int + 1
; [eval] 0 <= _69.f$end.val_int + 1
; [eval] _69.f$end.val_int + 1
; [exec]
; unfold acc(ref$Slice$i32(_67), read$())
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@321@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=> (< $Perm.No (read$ $Snap.unit)) (not (= ret@330@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (ref$Slice$i32%trigger $t@331@01 ret@330@01))
; [exec]
; inhale Slice$len__$TY$__i32$Slice$i32$$int$(_67.val_ref) ==
;   _69.f$end.val_int + 1 - 0
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 $Snap.unit))
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_67.val_ref) == _69.f$end.val_int + 1 - 0
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_67.val_ref)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
(pop) ; 15
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
; [eval] _69.f$end.val_int + 1 - 0
; [eval] _69.f$end.val_int + 1
(assert (=
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))
  6))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (let _LET_9 ==
;     (_69.f$end.val_int + 1) in
;     (let _LET_10 ==
;       (_68.val_ref) in
;       (let _LET_8 ==
;         (_67.val_ref) in
;         (forall i: Int, j: Int ::
;           { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_67.val_ref,
;           i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_68.val_ref,
;           j) }
;           0 <= i &&
;           (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) &&
;           (j == i + 0 && (0 <= j && j < _LET_9))) ==>
;           lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) ==
;           lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j)))))
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 $Snap.unit))
; [eval] (let _LET_9 == (_69.f$end.val_int + 1) in (let _LET_10 == (_68.val_ref) in (let _LET_8 == (_67.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_67.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_68.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) && (j == i + 0 && (0 <= j && j < _LET_9))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j)))))
; [eval] _69.f$end.val_int + 1
(declare-const letvar@334@01 Int)
(assert (= (as letvar@334@01  Int) 6))
; [eval] (let _LET_10 == (_68.val_ref) in (let _LET_8 == (_67.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_67.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_68.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) && (j == i + 0 && (0 <= j && j < _LET_9))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j))))
(declare-const letvar@335@01 $Ref)
(assert (= (as letvar@335@01  $Ref) val_ref@323@01))
; [eval] (let _LET_8 == (_67.val_ref) in (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_67.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_68.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) && (j == i + 0 && (0 <= j && j < _LET_9))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j)))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const letvar@336@01 $Ref)
(assert (= (as letvar@336@01  $Ref) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
; [eval] (forall i: Int, j: Int :: { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_67.val_ref, i), lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_68.val_ref, j) } 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) && (j == i + 0 && (0 <= j && j < _LET_9))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j))
(declare-const i@337@01 Int)
(declare-const j@338@01 Int)
(set-option :timeout 0)
(push) ; 15
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) && (j == i + 0 && (0 <= j && j < _LET_9))) ==> lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j)
; [eval] 0 <= i && (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8) && (j == i + 0 && (0 <= j && j < _LET_9)))
; [eval] 0 <= i
(push) ; 16
; [then-branch: 48 | 0 <= i@337@01 | live]
; [else-branch: 48 | !(0 <= i@337@01) | live]
(push) ; 17
; [then-branch: 48 | 0 <= i@337@01]
(assert (<= 0 i@337@01))
; [eval] i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_LET_8)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(set-option :timeout 0)
(push) ; 18
; [then-branch: 49 | i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01)) | live]
; [else-branch: 49 | !(i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01))) | live]
(push) ; 19
; [then-branch: 49 | i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01))]
(assert (<
  i@337@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
; [eval] j == i + 0
; [eval] i + 0
(push) ; 20
; [then-branch: 50 | j@338@01 == i@337@01 | live]
; [else-branch: 50 | j@338@01 != i@337@01 | live]
(push) ; 21
; [then-branch: 50 | j@338@01 == i@337@01]
(assert (= j@338@01 i@337@01))
; [eval] 0 <= j
(push) ; 22
; [then-branch: 51 | 0 <= j@338@01 | live]
; [else-branch: 51 | !(0 <= j@338@01) | live]
(push) ; 23
; [then-branch: 51 | 0 <= j@338@01]
(assert (<= 0 j@338@01))
; [eval] j < _LET_9
(pop) ; 23
(push) ; 23
; [else-branch: 51 | !(0 <= j@338@01)]
(assert (not (<= 0 j@338@01)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j@338@01)) (<= 0 j@338@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 50 | j@338@01 != i@337@01]
(assert (not (= j@338@01 i@337@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  (= j@338@01 i@337@01)
  (and (= j@338@01 i@337@01) (or (not (<= 0 j@338@01)) (<= 0 j@338@01)))))
; Joined path conditions
(assert (or (not (= j@338@01 i@337@01)) (= j@338@01 i@337@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 49 | !(i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01)))]
(assert (not
  (<
    i@337@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (<
    i@337@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
  (and
    (<
      i@337@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
    (=>
      (= j@338@01 i@337@01)
      (and (= j@338@01 i@337@01) (or (not (<= 0 j@338@01)) (<= 0 j@338@01))))
    (or (not (= j@338@01 i@337@01)) (= j@338@01 i@337@01)))))
; Joined path conditions
(assert (or
  (not
    (<
      i@337@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
  (<
    i@337@01
    (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))))
(pop) ; 17
(push) ; 17
; [else-branch: 48 | !(0 <= i@337@01)]
(assert (not (<= 0 i@337@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (<= 0 i@337@01)
  (and
    (<= 0 i@337@01)
    (=>
      (<
        i@337@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
      (and
        (<
          i@337@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
        (=>
          (= j@338@01 i@337@01)
          (and (= j@338@01 i@337@01) (or (not (<= 0 j@338@01)) (<= 0 j@338@01))))
        (or (not (= j@338@01 i@337@01)) (= j@338@01 i@337@01))))
    (or
      (not
        (<
          i@337@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
      (<
        i@337@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))))))
; Joined path conditions
(assert (or (not (<= 0 i@337@01)) (<= 0 i@337@01)))
(push) ; 16
; [then-branch: 52 | j@338@01 < 6 && 0 <= j@338@01 && j@338@01 == i@337@01 && i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01)) && 0 <= i@337@01 | live]
; [else-branch: 52 | !(j@338@01 < 6 && 0 <= j@338@01 && j@338@01 == i@337@01 && i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01)) && 0 <= i@337@01) | live]
(push) ; 17
; [then-branch: 52 | j@338@01 < 6 && 0 <= j@338@01 && j@338@01 == i@337@01 && i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01)) && 0 <= i@337@01]
(assert (and
  (and
    (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
    (<
      i@337@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
  (<= 0 i@337@01)))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i) == lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_8, i)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@331@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) i@337@01))
(pop) ; 18
; Joined path conditions
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@331@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) i@337@01))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_10, j)
(set-option :timeout 0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@323@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (< j@338@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (< j@338@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@325@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@323@01 j@338@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (< j@338@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@325@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@323@01 j@338@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 52 | !(j@338@01 < 6 && 0 <= j@338@01 && j@338@01 == i@337@01 && i@337@01 < Slice$len__$TY$__i32$Slice$i32$$int$(Second:($t@331@01), First:($t@331@01)) && 0 <= i@337@01)]
(assert (not
  (and
    (and
      (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
      (<
        i@337@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
    (<= 0 i@337@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (and
      (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
      (<
        i@337@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
    (<= 0 i@337@01))
  (and
    (< j@338@01 6)
    (<= 0 j@338@01)
    (= j@338@01 i@337@01)
    (<
      i@337@01
      (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
    (<= 0 i@337@01)
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@331@01)
      ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) i@337@01)
    (< j@338@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01))
    (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
      $t@325@01
      ($Snap.combine $Snap.unit $Snap.unit)) val_ref@323@01 j@338@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (and
        (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
        (<
          i@337@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
      (<= 0 i@337@01)))
  (and
    (and
      (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
      (<
        i@337@01
        (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
    (<= 0 i@337@01))))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_67.val_ref, i)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 17
(assert (not (<= 0 i@337@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@326@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@326@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@232@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@327@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@331@01) $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@200@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@248@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@248@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@294@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@294@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@325@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@138@01 ret@186@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@138@01 ret@328@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@186@01 ret@138@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@186@01 ret@328@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@328@01 ret@138@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@328@01 ret@186@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@234@01 ret@136@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ret@136@01 ret@234@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@321@01 ret@282@01))
      (not (= ret@321@01 ret@275@01))
      (not (= ret@321@01 ret@236@01))
      (not (= ret@321@01 ret@196@01))
      (not (= ret@321@01 ret@179@01))
      (not (= ret@321@01 ret@140@01))
      (not (= ret@321@01 ret@129@01))
      (not (= ret@321@01 _1@55@01))
      (not (= ret@321@01 ret@148@01))
      (not (= ret@321@01 ret@188@01))
      (not (= ret@321@01 ret@227@01))
      (not (= ret@321@01 ret@244@01))
      (not (= ret@321@01 ret@290@01))
      (not (= ret@321@01 ret@330@01)))
    (and
      (not (= ret@282@01 ret@321@01))
      (not (= ret@282@01 ret@275@01))
      (not (= ret@282@01 ret@196@01))
      (not (= ret@282@01 ret@179@01))
      (not (= ret@282@01 ret@129@01))
      (not (= ret@282@01 _1@55@01))
      (not (= ret@282@01 ret@148@01))
      (not (= ret@282@01 ret@227@01))
      (not (= ret@282@01 ret@244@01))
      (not (= ret@282@01 ret@290@01)))
    (and
      (not (= ret@275@01 ret@321@01))
      (not (= ret@275@01 ret@282@01))
      (not (= ret@275@01 ret@236@01))
      (not (= ret@275@01 ret@196@01))
      (not (= ret@275@01 ret@179@01))
      (not (= ret@275@01 ret@140@01))
      (not (= ret@275@01 ret@129@01))
      (not (= ret@275@01 _1@55@01))
      (not (= ret@275@01 ret@148@01))
      (not (= ret@275@01 ret@188@01))
      (not (= ret@275@01 ret@227@01))
      (not (= ret@275@01 ret@244@01))
      (not (= ret@275@01 ret@290@01))
      (not (= ret@275@01 ret@330@01)))
    (and
      (not (= ret@236@01 ret@321@01))
      (not (= ret@236@01 ret@275@01))
      (not (= ret@236@01 ret@196@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@244@01))
      (not (= ret@236@01 ret@290@01)))
    (and
      (not (= ret@196@01 ret@321@01))
      (not (= ret@196@01 ret@282@01))
      (not (= ret@196@01 ret@275@01))
      (not (= ret@196@01 ret@236@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@244@01))
      (not (= ret@196@01 ret@290@01))
      (not (= ret@196@01 ret@330@01)))
    (and
      (not (= ret@179@01 ret@321@01))
      (not (= ret@179@01 ret@282@01))
      (not (= ret@179@01 ret@275@01))
      (not (= ret@179@01 ret@236@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@244@01))
      (not (= ret@179@01 ret@290@01))
      (not (= ret@179@01 ret@330@01)))
    (and
      (not (= ret@140@01 ret@321@01))
      (not (= ret@140@01 ret@275@01))
      (not (= ret@140@01 ret@196@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@244@01))
      (not (= ret@140@01 ret@290@01)))
    (and
      (not (= ret@129@01 ret@321@01))
      (not (= ret@129@01 ret@282@01))
      (not (= ret@129@01 ret@275@01))
      (not (= ret@129@01 ret@236@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@244@01))
      (not (= ret@129@01 ret@290@01))
      (not (= ret@129@01 ret@330@01)))
    (and
      (not (= _1@55@01 ret@321@01))
      (not (= _1@55@01 ret@282@01))
      (not (= _1@55@01 ret@275@01))
      (not (= _1@55@01 ret@236@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@244@01))
      (not (= _1@55@01 ret@290@01))
      (not (= _1@55@01 ret@330@01)))
    (and
      (not (= ret@148@01 ret@321@01))
      (not (= ret@148@01 ret@282@01))
      (not (= ret@148@01 ret@275@01))
      (not (= ret@148@01 ret@236@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@244@01))
      (not (= ret@148@01 ret@290@01))
      (not (= ret@148@01 ret@330@01)))
    (and
      (not (= ret@188@01 ret@321@01))
      (not (= ret@188@01 ret@275@01))
      (not (= ret@188@01 ret@196@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@244@01))
      (not (= ret@188@01 ret@290@01)))
    (and
      (not (= ret@227@01 ret@321@01))
      (not (= ret@227@01 ret@282@01))
      (not (= ret@227@01 ret@275@01))
      (not (= ret@227@01 ret@236@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@244@01))
      (not (= ret@227@01 ret@290@01))
      (not (= ret@227@01 ret@330@01)))
    (and
      (not (= ret@244@01 ret@321@01))
      (not (= ret@244@01 ret@282@01))
      (not (= ret@244@01 ret@275@01))
      (not (= ret@244@01 ret@236@01))
      (not (= ret@244@01 ret@196@01))
      (not (= ret@244@01 ret@179@01))
      (not (= ret@244@01 ret@140@01))
      (not (= ret@244@01 ret@129@01))
      (not (= ret@244@01 _1@55@01))
      (not (= ret@244@01 ret@148@01))
      (not (= ret@244@01 ret@188@01))
      (not (= ret@244@01 ret@227@01))
      (not (= ret@244@01 ret@290@01))
      (not (= ret@244@01 ret@330@01)))
    (and
      (not (= ret@290@01 ret@321@01))
      (not (= ret@290@01 ret@282@01))
      (not (= ret@290@01 ret@275@01))
      (not (= ret@290@01 ret@236@01))
      (not (= ret@290@01 ret@196@01))
      (not (= ret@290@01 ret@179@01))
      (not (= ret@290@01 ret@140@01))
      (not (= ret@290@01 ret@129@01))
      (not (= ret@290@01 _1@55@01))
      (not (= ret@290@01 ret@148@01))
      (not (= ret@290@01 ret@188@01))
      (not (= ret@290@01 ret@227@01))
      (not (= ret@290@01 ret@244@01))
      (not (= ret@290@01 ret@330@01)))
    (and
      (not (= ret@330@01 ret@321@01))
      (not (= ret@330@01 ret@275@01))
      (not (= ret@330@01 ret@196@01))
      (not (= ret@330@01 ret@179@01))
      (not (= ret@330@01 ret@129@01))
      (not (= ret@330@01 _1@55@01))
      (not (= ret@330@01 ret@148@01))
      (not (= ret@330@01 ret@227@01))
      (not (= ret@330@01 ret@244@01))
      (not (= ret@330@01 ret@290@01))))
  (and
    (and
      (not (= ret@318@01 ret@315@01))
      (not (= ret@318@01 ret@308@01))
      (not (= ret@318@01 ret@298@01))
      (not (= ret@318@01 ret@272@01))
      (not (= ret@318@01 ret@269@01))
      (not (= ret@318@01 ret@262@01))
      (not (= ret@318@01 ret@252@01))
      (not (= ret@318@01 ret@176@01))
      (not (= ret@318@01 ret@173@01))
      (not (= ret@318@01 ret@166@01))
      (not (= ret@318@01 ret@156@01))
      (not (= ret@318@01 ret@204@01))
      (not (= ret@318@01 ret@214@01))
      (not (= ret@318@01 ret@221@01))
      (not (= ret@318@01 ret@224@01)))
    (and
      (not (= ret@315@01 ret@318@01))
      (not (= ret@315@01 ret@308@01))
      (not (= ret@315@01 ret@298@01))
      (not (= ret@315@01 ret@272@01))
      (not (= ret@315@01 ret@269@01))
      (not (= ret@315@01 ret@262@01))
      (not (= ret@315@01 ret@252@01))
      (not (= ret@315@01 ret@176@01))
      (not (= ret@315@01 ret@173@01))
      (not (= ret@315@01 ret@166@01))
      (not (= ret@315@01 ret@156@01))
      (not (= ret@315@01 ret@204@01))
      (not (= ret@315@01 ret@214@01))
      (not (= ret@315@01 ret@221@01))
      (not (= ret@315@01 ret@224@01)))
    (and
      (not (= ret@308@01 ret@318@01))
      (not (= ret@308@01 ret@315@01))
      (not (= ret@308@01 ret@298@01))
      (not (= ret@308@01 ret@272@01))
      (not (= ret@308@01 ret@269@01))
      (not (= ret@308@01 ret@262@01))
      (not (= ret@308@01 ret@252@01))
      (not (= ret@308@01 ret@176@01))
      (not (= ret@308@01 ret@173@01))
      (not (= ret@308@01 ret@166@01))
      (not (= ret@308@01 ret@156@01))
      (not (= ret@308@01 ret@204@01))
      (not (= ret@308@01 ret@214@01))
      (not (= ret@308@01 ret@221@01))
      (not (= ret@308@01 ret@224@01)))
    (and
      (not (= ret@298@01 ret@318@01))
      (not (= ret@298@01 ret@315@01))
      (not (= ret@298@01 ret@308@01))
      (not (= ret@298@01 ret@272@01))
      (not (= ret@298@01 ret@269@01))
      (not (= ret@298@01 ret@262@01))
      (not (= ret@298@01 ret@252@01))
      (not (= ret@298@01 ret@176@01))
      (not (= ret@298@01 ret@173@01))
      (not (= ret@298@01 ret@166@01))
      (not (= ret@298@01 ret@156@01))
      (not (= ret@298@01 ret@204@01))
      (not (= ret@298@01 ret@214@01))
      (not (= ret@298@01 ret@221@01))
      (not (= ret@298@01 ret@224@01)))
    (and
      (not (= ret@272@01 ret@318@01))
      (not (= ret@272@01 ret@315@01))
      (not (= ret@272@01 ret@308@01))
      (not (= ret@272@01 ret@298@01))
      (not (= ret@272@01 ret@269@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@176@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@224@01)))
    (and
      (not (= ret@269@01 ret@318@01))
      (not (= ret@269@01 ret@315@01))
      (not (= ret@269@01 ret@308@01))
      (not (= ret@269@01 ret@298@01))
      (not (= ret@269@01 ret@272@01))
      (not (= ret@269@01 ret@262@01))
      (not (= ret@269@01 ret@252@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@173@01))
      (not (= ret@269@01 ret@166@01))
      (not (= ret@269@01 ret@156@01))
      (not (= ret@269@01 ret@204@01))
      (not (= ret@269@01 ret@214@01))
      (not (= ret@269@01 ret@221@01))
      (not (= ret@269@01 ret@224@01)))
    (and
      (not (= ret@262@01 ret@318@01))
      (not (= ret@262@01 ret@315@01))
      (not (= ret@262@01 ret@308@01))
      (not (= ret@262@01 ret@298@01))
      (not (= ret@262@01 ret@272@01))
      (not (= ret@262@01 ret@269@01))
      (not (= ret@262@01 ret@252@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@173@01))
      (not (= ret@262@01 ret@166@01))
      (not (= ret@262@01 ret@156@01))
      (not (= ret@262@01 ret@204@01))
      (not (= ret@262@01 ret@214@01))
      (not (= ret@262@01 ret@221@01))
      (not (= ret@262@01 ret@224@01)))
    (and
      (not (= ret@252@01 ret@318@01))
      (not (= ret@252@01 ret@315@01))
      (not (= ret@252@01 ret@308@01))
      (not (= ret@252@01 ret@298@01))
      (not (= ret@252@01 ret@272@01))
      (not (= ret@252@01 ret@269@01))
      (not (= ret@252@01 ret@262@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@173@01))
      (not (= ret@252@01 ret@166@01))
      (not (= ret@252@01 ret@156@01))
      (not (= ret@252@01 ret@204@01))
      (not (= ret@252@01 ret@214@01))
      (not (= ret@252@01 ret@221@01))
      (not (= ret@252@01 ret@224@01)))
    (and
      (not (= ret@176@01 ret@318@01))
      (not (= ret@176@01 ret@315@01))
      (not (= ret@176@01 ret@308@01))
      (not (= ret@176@01 ret@298@01))
      (not (= ret@176@01 ret@272@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@224@01)))
    (and
      (not (= ret@173@01 ret@318@01))
      (not (= ret@173@01 ret@315@01))
      (not (= ret@173@01 ret@308@01))
      (not (= ret@173@01 ret@298@01))
      (not (= ret@173@01 ret@272@01))
      (not (= ret@173@01 ret@269@01))
      (not (= ret@173@01 ret@262@01))
      (not (= ret@173@01 ret@252@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@224@01)))
    (and
      (not (= ret@166@01 ret@318@01))
      (not (= ret@166@01 ret@315@01))
      (not (= ret@166@01 ret@308@01))
      (not (= ret@166@01 ret@298@01))
      (not (= ret@166@01 ret@272@01))
      (not (= ret@166@01 ret@269@01))
      (not (= ret@166@01 ret@262@01))
      (not (= ret@166@01 ret@252@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@224@01)))
    (and
      (not (= ret@156@01 ret@318@01))
      (not (= ret@156@01 ret@315@01))
      (not (= ret@156@01 ret@308@01))
      (not (= ret@156@01 ret@298@01))
      (not (= ret@156@01 ret@272@01))
      (not (= ret@156@01 ret@269@01))
      (not (= ret@156@01 ret@262@01))
      (not (= ret@156@01 ret@252@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@224@01)))
    (and
      (not (= ret@204@01 ret@318@01))
      (not (= ret@204@01 ret@315@01))
      (not (= ret@204@01 ret@308@01))
      (not (= ret@204@01 ret@298@01))
      (not (= ret@204@01 ret@272@01))
      (not (= ret@204@01 ret@269@01))
      (not (= ret@204@01 ret@262@01))
      (not (= ret@204@01 ret@252@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@224@01)))
    (and
      (not (= ret@214@01 ret@318@01))
      (not (= ret@214@01 ret@315@01))
      (not (= ret@214@01 ret@308@01))
      (not (= ret@214@01 ret@298@01))
      (not (= ret@214@01 ret@272@01))
      (not (= ret@214@01 ret@269@01))
      (not (= ret@214@01 ret@262@01))
      (not (= ret@214@01 ret@252@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@224@01)))
    (and
      (not (= ret@221@01 ret@318@01))
      (not (= ret@221@01 ret@315@01))
      (not (= ret@221@01 ret@308@01))
      (not (= ret@221@01 ret@298@01))
      (not (= ret@221@01 ret@272@01))
      (not (= ret@221@01 ret@269@01))
      (not (= ret@221@01 ret@262@01))
      (not (= ret@221@01 ret@252@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@224@01)))
    (and
      (not (= ret@224@01 ret@318@01))
      (not (= ret@224@01 ret@315@01))
      (not (= ret@224@01 ret@308@01))
      (not (= ret@224@01 ret@298@01))
      (not (= ret@224@01 ret@272@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@176@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@221@01))))
  (and
    (and (not (= ret@134@01 ret@184@01)) (not (= ret@134@01 ret@326@01)))
    (and (not (= ret@184@01 ret@134@01)) (not (= ret@184@01 ret@326@01)))
    (and (not (= ret@326@01 ret@134@01)) (not (= ret@326@01 ret@184@01))))
  (and
    (and
      (not (= ret@311@01 ret@301@01))
      (not (= ret@311@01 ret@265@01))
      (not (= ret@311@01 ret@255@01))
      (not (= ret@311@01 ret@234@01))
      (not (= ret@311@01 ret@169@01))
      (not (= ret@311@01 ret@159@01))
      (not (= ret@311@01 ret@138@01))
      (not (= ret@311@01 ret@136@01))
      (not (= ret@311@01 ret@186@01))
      (not (= ret@311@01 ret@207@01))
      (not (= ret@311@01 ret@217@01))
      (not (= ret@311@01 ret@328@01)))
    (and
      (not (= ret@301@01 ret@311@01))
      (not (= ret@301@01 ret@265@01))
      (not (= ret@301@01 ret@255@01))
      (not (= ret@301@01 ret@234@01))
      (not (= ret@301@01 ret@169@01))
      (not (= ret@301@01 ret@159@01))
      (not (= ret@301@01 ret@138@01))
      (not (= ret@301@01 ret@136@01))
      (not (= ret@301@01 ret@186@01))
      (not (= ret@301@01 ret@207@01))
      (not (= ret@301@01 ret@217@01))
      (not (= ret@301@01 ret@328@01)))
    (and
      (not (= ret@265@01 ret@311@01))
      (not (= ret@265@01 ret@301@01))
      (not (= ret@265@01 ret@255@01))
      (not (= ret@265@01 ret@234@01))
      (not (= ret@265@01 ret@169@01))
      (not (= ret@265@01 ret@159@01))
      (not (= ret@265@01 ret@138@01))
      (not (= ret@265@01 ret@136@01))
      (not (= ret@265@01 ret@186@01))
      (not (= ret@265@01 ret@207@01))
      (not (= ret@265@01 ret@217@01))
      (not (= ret@265@01 ret@328@01)))
    (and
      (not (= ret@255@01 ret@311@01))
      (not (= ret@255@01 ret@301@01))
      (not (= ret@255@01 ret@265@01))
      (not (= ret@255@01 ret@234@01))
      (not (= ret@255@01 ret@169@01))
      (not (= ret@255@01 ret@159@01))
      (not (= ret@255@01 ret@138@01))
      (not (= ret@255@01 ret@136@01))
      (not (= ret@255@01 ret@186@01))
      (not (= ret@255@01 ret@207@01))
      (not (= ret@255@01 ret@217@01))
      (not (= ret@255@01 ret@328@01)))
    (and
      (not (= ret@234@01 ret@311@01))
      (not (= ret@234@01 ret@301@01))
      (not (= ret@234@01 ret@265@01))
      (not (= ret@234@01 ret@255@01))
      (not (= ret@234@01 ret@169@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@328@01)))
    (and
      (not (= ret@169@01 ret@311@01))
      (not (= ret@169@01 ret@301@01))
      (not (= ret@169@01 ret@265@01))
      (not (= ret@169@01 ret@255@01))
      (not (= ret@169@01 ret@234@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@328@01)))
    (and
      (not (= ret@159@01 ret@311@01))
      (not (= ret@159@01 ret@301@01))
      (not (= ret@159@01 ret@265@01))
      (not (= ret@159@01 ret@255@01))
      (not (= ret@159@01 ret@234@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@328@01)))
    (and
      (not (= ret@138@01 ret@311@01))
      (not (= ret@138@01 ret@301@01))
      (not (= ret@138@01 ret@265@01))
      (not (= ret@138@01 ret@255@01))
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@328@01)))
    (and
      (not (= ret@136@01 ret@311@01))
      (not (= ret@136@01 ret@301@01))
      (not (= ret@136@01 ret@265@01))
      (not (= ret@136@01 ret@255@01))
      (not (= ret@136@01 ret@234@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@328@01)))
    (and
      (not (= ret@186@01 ret@311@01))
      (not (= ret@186@01 ret@301@01))
      (not (= ret@186@01 ret@265@01))
      (not (= ret@186@01 ret@255@01))
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@328@01)))
    (and
      (not (= ret@207@01 ret@311@01))
      (not (= ret@207@01 ret@301@01))
      (not (= ret@207@01 ret@265@01))
      (not (= ret@207@01 ret@255@01))
      (not (= ret@207@01 ret@234@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@328@01)))
    (and
      (not (= ret@217@01 ret@311@01))
      (not (= ret@217@01 ret@301@01))
      (not (= ret@217@01 ret@265@01))
      (not (= ret@217@01 ret@255@01))
      (not (= ret@217@01 ret@234@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@328@01)))
    (and
      (not (= ret@328@01 ret@311@01))
      (not (= ret@328@01 ret@301@01))
      (not (= ret@328@01 ret@265@01))
      (not (= ret@328@01 ret@255@01))
      (not (= ret@328@01 ret@234@01))
      (not (= ret@328@01 ret@169@01))
      (not (= ret@328@01 ret@159@01))
      (not (= ret@328@01 ret@138@01))
      (not (= ret@328@01 ret@136@01))
      (not (= ret@328@01 ret@186@01))
      (not (= ret@328@01 ret@207@01))
      (not (= ret@328@01 ret@217@01))))
  (and (not (= ret@232@01 ret@134@01)) (not (= ret@134@01 ret@232@01)))))
(assert (and
  (and
    (and
      (not (= ret@318@01 ret@315@01))
      (not (= ret@318@01 ret@308@01))
      (not (= ret@318@01 ret@298@01))
      (not (= ret@318@01 ret@269@01))
      (not (= ret@318@01 ret@262@01))
      (not (= ret@318@01 ret@252@01))
      (not (= ret@318@01 ret@173@01))
      (not (= ret@318@01 ret@166@01))
      (not (= ret@318@01 ret@156@01))
      (not (= ret@318@01 ret@204@01))
      (not (= ret@318@01 ret@214@01))
      (not (= ret@318@01 ret@221@01)))
    (and
      (not (= ret@315@01 ret@318@01))
      (not (= ret@315@01 ret@272@01))
      (not (= ret@315@01 ret@176@01))
      (not (= ret@315@01 ret@224@01)))
    (and
      (not (= ret@308@01 ret@318@01))
      (not (= ret@308@01 ret@272@01))
      (not (= ret@308@01 ret@176@01))
      (not (= ret@308@01 ret@224@01)))
    (and
      (not (= ret@298@01 ret@318@01))
      (not (= ret@298@01 ret@272@01))
      (not (= ret@298@01 ret@176@01))
      (not (= ret@298@01 ret@224@01)))
    (and
      (not (= ret@272@01 ret@315@01))
      (not (= ret@272@01 ret@308@01))
      (not (= ret@272@01 ret@298@01))
      (not (= ret@272@01 ret@269@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@221@01)))
    (and
      (not (= ret@269@01 ret@318@01))
      (not (= ret@269@01 ret@272@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@224@01)))
    (and
      (not (= ret@262@01 ret@318@01))
      (not (= ret@262@01 ret@272@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@224@01)))
    (and
      (not (= ret@252@01 ret@318@01))
      (not (= ret@252@01 ret@272@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@224@01)))
    (and
      (not (= ret@176@01 ret@315@01))
      (not (= ret@176@01 ret@308@01))
      (not (= ret@176@01 ret@298@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@221@01)))
    (and
      (not (= ret@173@01 ret@318@01))
      (not (= ret@173@01 ret@272@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@224@01)))
    (and
      (not (= ret@166@01 ret@318@01))
      (not (= ret@166@01 ret@272@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@224@01)))
    (and
      (not (= ret@156@01 ret@318@01))
      (not (= ret@156@01 ret@272@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@224@01)))
    (and
      (not (= ret@204@01 ret@318@01))
      (not (= ret@204@01 ret@272@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@224@01)))
    (and
      (not (= ret@214@01 ret@318@01))
      (not (= ret@214@01 ret@272@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@224@01)))
    (and
      (not (= ret@221@01 ret@318@01))
      (not (= ret@221@01 ret@272@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@224@01)))
    (and
      (not (= ret@224@01 ret@315@01))
      (not (= ret@224@01 ret@308@01))
      (not (= ret@224@01 ret@298@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@221@01))))
  (and
    (and
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@328@01)))
    (and
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@328@01)))
    (and
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@328@01)))
    (and
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@328@01)))
    (and
      (not (= ret@328@01 ret@234@01))
      (not (= ret@328@01 ret@138@01))
      (not (= ret@328@01 ret@136@01))
      (not (= ret@328@01 ret@186@01))))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 17
(assert (not (<= 0 i@337@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@326@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@326@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@232@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@327@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@248@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@294@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@321@01 ret@282@01))
      (not (= ret@321@01 ret@275@01))
      (not (= ret@321@01 ret@236@01))
      (not (= ret@321@01 ret@196@01))
      (not (= ret@321@01 ret@179@01))
      (not (= ret@321@01 ret@140@01))
      (not (= ret@321@01 ret@129@01))
      (not (= ret@321@01 _1@55@01))
      (not (= ret@321@01 ret@148@01))
      (not (= ret@321@01 ret@188@01))
      (not (= ret@321@01 ret@227@01))
      (not (= ret@321@01 ret@244@01))
      (not (= ret@321@01 ret@290@01))
      (not (= ret@321@01 ret@330@01)))
    (and
      (not (= ret@282@01 ret@321@01))
      (not (= ret@282@01 ret@275@01))
      (not (= ret@282@01 ret@196@01))
      (not (= ret@282@01 ret@179@01))
      (not (= ret@282@01 ret@129@01))
      (not (= ret@282@01 _1@55@01))
      (not (= ret@282@01 ret@148@01))
      (not (= ret@282@01 ret@227@01))
      (not (= ret@282@01 ret@244@01))
      (not (= ret@282@01 ret@290@01)))
    (and
      (not (= ret@275@01 ret@321@01))
      (not (= ret@275@01 ret@282@01))
      (not (= ret@275@01 ret@236@01))
      (not (= ret@275@01 ret@196@01))
      (not (= ret@275@01 ret@179@01))
      (not (= ret@275@01 ret@140@01))
      (not (= ret@275@01 ret@129@01))
      (not (= ret@275@01 _1@55@01))
      (not (= ret@275@01 ret@148@01))
      (not (= ret@275@01 ret@188@01))
      (not (= ret@275@01 ret@227@01))
      (not (= ret@275@01 ret@244@01))
      (not (= ret@275@01 ret@290@01))
      (not (= ret@275@01 ret@330@01)))
    (and
      (not (= ret@236@01 ret@321@01))
      (not (= ret@236@01 ret@275@01))
      (not (= ret@236@01 ret@196@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@244@01))
      (not (= ret@236@01 ret@290@01)))
    (and
      (not (= ret@196@01 ret@321@01))
      (not (= ret@196@01 ret@282@01))
      (not (= ret@196@01 ret@275@01))
      (not (= ret@196@01 ret@236@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@244@01))
      (not (= ret@196@01 ret@290@01))
      (not (= ret@196@01 ret@330@01)))
    (and
      (not (= ret@179@01 ret@321@01))
      (not (= ret@179@01 ret@282@01))
      (not (= ret@179@01 ret@275@01))
      (not (= ret@179@01 ret@236@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@244@01))
      (not (= ret@179@01 ret@290@01))
      (not (= ret@179@01 ret@330@01)))
    (and
      (not (= ret@140@01 ret@321@01))
      (not (= ret@140@01 ret@275@01))
      (not (= ret@140@01 ret@196@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@244@01))
      (not (= ret@140@01 ret@290@01)))
    (and
      (not (= ret@129@01 ret@321@01))
      (not (= ret@129@01 ret@282@01))
      (not (= ret@129@01 ret@275@01))
      (not (= ret@129@01 ret@236@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@244@01))
      (not (= ret@129@01 ret@290@01))
      (not (= ret@129@01 ret@330@01)))
    (and
      (not (= _1@55@01 ret@321@01))
      (not (= _1@55@01 ret@282@01))
      (not (= _1@55@01 ret@275@01))
      (not (= _1@55@01 ret@236@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@244@01))
      (not (= _1@55@01 ret@290@01))
      (not (= _1@55@01 ret@330@01)))
    (and
      (not (= ret@148@01 ret@321@01))
      (not (= ret@148@01 ret@282@01))
      (not (= ret@148@01 ret@275@01))
      (not (= ret@148@01 ret@236@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@244@01))
      (not (= ret@148@01 ret@290@01))
      (not (= ret@148@01 ret@330@01)))
    (and
      (not (= ret@188@01 ret@321@01))
      (not (= ret@188@01 ret@275@01))
      (not (= ret@188@01 ret@196@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@244@01))
      (not (= ret@188@01 ret@290@01)))
    (and
      (not (= ret@227@01 ret@321@01))
      (not (= ret@227@01 ret@282@01))
      (not (= ret@227@01 ret@275@01))
      (not (= ret@227@01 ret@236@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@244@01))
      (not (= ret@227@01 ret@290@01))
      (not (= ret@227@01 ret@330@01)))
    (and
      (not (= ret@244@01 ret@321@01))
      (not (= ret@244@01 ret@282@01))
      (not (= ret@244@01 ret@275@01))
      (not (= ret@244@01 ret@236@01))
      (not (= ret@244@01 ret@196@01))
      (not (= ret@244@01 ret@179@01))
      (not (= ret@244@01 ret@140@01))
      (not (= ret@244@01 ret@129@01))
      (not (= ret@244@01 _1@55@01))
      (not (= ret@244@01 ret@148@01))
      (not (= ret@244@01 ret@188@01))
      (not (= ret@244@01 ret@227@01))
      (not (= ret@244@01 ret@290@01))
      (not (= ret@244@01 ret@330@01)))
    (and
      (not (= ret@290@01 ret@321@01))
      (not (= ret@290@01 ret@282@01))
      (not (= ret@290@01 ret@275@01))
      (not (= ret@290@01 ret@236@01))
      (not (= ret@290@01 ret@196@01))
      (not (= ret@290@01 ret@179@01))
      (not (= ret@290@01 ret@140@01))
      (not (= ret@290@01 ret@129@01))
      (not (= ret@290@01 _1@55@01))
      (not (= ret@290@01 ret@148@01))
      (not (= ret@290@01 ret@188@01))
      (not (= ret@290@01 ret@227@01))
      (not (= ret@290@01 ret@244@01))
      (not (= ret@290@01 ret@330@01)))
    (and
      (not (= ret@330@01 ret@321@01))
      (not (= ret@330@01 ret@275@01))
      (not (= ret@330@01 ret@196@01))
      (not (= ret@330@01 ret@179@01))
      (not (= ret@330@01 ret@129@01))
      (not (= ret@330@01 _1@55@01))
      (not (= ret@330@01 ret@148@01))
      (not (= ret@330@01 ret@227@01))
      (not (= ret@330@01 ret@244@01))
      (not (= ret@330@01 ret@290@01))))
  (and
    (and
      (not (= ret@318@01 ret@315@01))
      (not (= ret@318@01 ret@308@01))
      (not (= ret@318@01 ret@298@01))
      (not (= ret@318@01 ret@272@01))
      (not (= ret@318@01 ret@269@01))
      (not (= ret@318@01 ret@262@01))
      (not (= ret@318@01 ret@252@01))
      (not (= ret@318@01 ret@176@01))
      (not (= ret@318@01 ret@173@01))
      (not (= ret@318@01 ret@166@01))
      (not (= ret@318@01 ret@156@01))
      (not (= ret@318@01 ret@204@01))
      (not (= ret@318@01 ret@214@01))
      (not (= ret@318@01 ret@221@01))
      (not (= ret@318@01 ret@224@01)))
    (and
      (not (= ret@315@01 ret@318@01))
      (not (= ret@315@01 ret@308@01))
      (not (= ret@315@01 ret@298@01))
      (not (= ret@315@01 ret@272@01))
      (not (= ret@315@01 ret@269@01))
      (not (= ret@315@01 ret@262@01))
      (not (= ret@315@01 ret@252@01))
      (not (= ret@315@01 ret@176@01))
      (not (= ret@315@01 ret@173@01))
      (not (= ret@315@01 ret@166@01))
      (not (= ret@315@01 ret@156@01))
      (not (= ret@315@01 ret@204@01))
      (not (= ret@315@01 ret@214@01))
      (not (= ret@315@01 ret@221@01))
      (not (= ret@315@01 ret@224@01)))
    (and
      (not (= ret@308@01 ret@318@01))
      (not (= ret@308@01 ret@315@01))
      (not (= ret@308@01 ret@298@01))
      (not (= ret@308@01 ret@272@01))
      (not (= ret@308@01 ret@269@01))
      (not (= ret@308@01 ret@262@01))
      (not (= ret@308@01 ret@252@01))
      (not (= ret@308@01 ret@176@01))
      (not (= ret@308@01 ret@173@01))
      (not (= ret@308@01 ret@166@01))
      (not (= ret@308@01 ret@156@01))
      (not (= ret@308@01 ret@204@01))
      (not (= ret@308@01 ret@214@01))
      (not (= ret@308@01 ret@221@01))
      (not (= ret@308@01 ret@224@01)))
    (and
      (not (= ret@298@01 ret@318@01))
      (not (= ret@298@01 ret@315@01))
      (not (= ret@298@01 ret@308@01))
      (not (= ret@298@01 ret@272@01))
      (not (= ret@298@01 ret@269@01))
      (not (= ret@298@01 ret@262@01))
      (not (= ret@298@01 ret@252@01))
      (not (= ret@298@01 ret@176@01))
      (not (= ret@298@01 ret@173@01))
      (not (= ret@298@01 ret@166@01))
      (not (= ret@298@01 ret@156@01))
      (not (= ret@298@01 ret@204@01))
      (not (= ret@298@01 ret@214@01))
      (not (= ret@298@01 ret@221@01))
      (not (= ret@298@01 ret@224@01)))
    (and
      (not (= ret@272@01 ret@318@01))
      (not (= ret@272@01 ret@315@01))
      (not (= ret@272@01 ret@308@01))
      (not (= ret@272@01 ret@298@01))
      (not (= ret@272@01 ret@269@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@176@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@224@01)))
    (and
      (not (= ret@269@01 ret@318@01))
      (not (= ret@269@01 ret@315@01))
      (not (= ret@269@01 ret@308@01))
      (not (= ret@269@01 ret@298@01))
      (not (= ret@269@01 ret@272@01))
      (not (= ret@269@01 ret@262@01))
      (not (= ret@269@01 ret@252@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@173@01))
      (not (= ret@269@01 ret@166@01))
      (not (= ret@269@01 ret@156@01))
      (not (= ret@269@01 ret@204@01))
      (not (= ret@269@01 ret@214@01))
      (not (= ret@269@01 ret@221@01))
      (not (= ret@269@01 ret@224@01)))
    (and
      (not (= ret@262@01 ret@318@01))
      (not (= ret@262@01 ret@315@01))
      (not (= ret@262@01 ret@308@01))
      (not (= ret@262@01 ret@298@01))
      (not (= ret@262@01 ret@272@01))
      (not (= ret@262@01 ret@269@01))
      (not (= ret@262@01 ret@252@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@173@01))
      (not (= ret@262@01 ret@166@01))
      (not (= ret@262@01 ret@156@01))
      (not (= ret@262@01 ret@204@01))
      (not (= ret@262@01 ret@214@01))
      (not (= ret@262@01 ret@221@01))
      (not (= ret@262@01 ret@224@01)))
    (and
      (not (= ret@252@01 ret@318@01))
      (not (= ret@252@01 ret@315@01))
      (not (= ret@252@01 ret@308@01))
      (not (= ret@252@01 ret@298@01))
      (not (= ret@252@01 ret@272@01))
      (not (= ret@252@01 ret@269@01))
      (not (= ret@252@01 ret@262@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@173@01))
      (not (= ret@252@01 ret@166@01))
      (not (= ret@252@01 ret@156@01))
      (not (= ret@252@01 ret@204@01))
      (not (= ret@252@01 ret@214@01))
      (not (= ret@252@01 ret@221@01))
      (not (= ret@252@01 ret@224@01)))
    (and
      (not (= ret@176@01 ret@318@01))
      (not (= ret@176@01 ret@315@01))
      (not (= ret@176@01 ret@308@01))
      (not (= ret@176@01 ret@298@01))
      (not (= ret@176@01 ret@272@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@224@01)))
    (and
      (not (= ret@173@01 ret@318@01))
      (not (= ret@173@01 ret@315@01))
      (not (= ret@173@01 ret@308@01))
      (not (= ret@173@01 ret@298@01))
      (not (= ret@173@01 ret@272@01))
      (not (= ret@173@01 ret@269@01))
      (not (= ret@173@01 ret@262@01))
      (not (= ret@173@01 ret@252@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@224@01)))
    (and
      (not (= ret@166@01 ret@318@01))
      (not (= ret@166@01 ret@315@01))
      (not (= ret@166@01 ret@308@01))
      (not (= ret@166@01 ret@298@01))
      (not (= ret@166@01 ret@272@01))
      (not (= ret@166@01 ret@269@01))
      (not (= ret@166@01 ret@262@01))
      (not (= ret@166@01 ret@252@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@224@01)))
    (and
      (not (= ret@156@01 ret@318@01))
      (not (= ret@156@01 ret@315@01))
      (not (= ret@156@01 ret@308@01))
      (not (= ret@156@01 ret@298@01))
      (not (= ret@156@01 ret@272@01))
      (not (= ret@156@01 ret@269@01))
      (not (= ret@156@01 ret@262@01))
      (not (= ret@156@01 ret@252@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@224@01)))
    (and
      (not (= ret@204@01 ret@318@01))
      (not (= ret@204@01 ret@315@01))
      (not (= ret@204@01 ret@308@01))
      (not (= ret@204@01 ret@298@01))
      (not (= ret@204@01 ret@272@01))
      (not (= ret@204@01 ret@269@01))
      (not (= ret@204@01 ret@262@01))
      (not (= ret@204@01 ret@252@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@224@01)))
    (and
      (not (= ret@214@01 ret@318@01))
      (not (= ret@214@01 ret@315@01))
      (not (= ret@214@01 ret@308@01))
      (not (= ret@214@01 ret@298@01))
      (not (= ret@214@01 ret@272@01))
      (not (= ret@214@01 ret@269@01))
      (not (= ret@214@01 ret@262@01))
      (not (= ret@214@01 ret@252@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@224@01)))
    (and
      (not (= ret@221@01 ret@318@01))
      (not (= ret@221@01 ret@315@01))
      (not (= ret@221@01 ret@308@01))
      (not (= ret@221@01 ret@298@01))
      (not (= ret@221@01 ret@272@01))
      (not (= ret@221@01 ret@269@01))
      (not (= ret@221@01 ret@262@01))
      (not (= ret@221@01 ret@252@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@224@01)))
    (and
      (not (= ret@224@01 ret@318@01))
      (not (= ret@224@01 ret@315@01))
      (not (= ret@224@01 ret@308@01))
      (not (= ret@224@01 ret@298@01))
      (not (= ret@224@01 ret@272@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@176@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@221@01))))
  (and
    (and (not (= ret@134@01 ret@184@01)) (not (= ret@134@01 ret@326@01)))
    (and (not (= ret@184@01 ret@134@01)) (not (= ret@184@01 ret@326@01)))
    (and (not (= ret@326@01 ret@134@01)) (not (= ret@326@01 ret@184@01))))
  (and
    (and
      (not (= ret@311@01 ret@301@01))
      (not (= ret@311@01 ret@265@01))
      (not (= ret@311@01 ret@255@01))
      (not (= ret@311@01 ret@234@01))
      (not (= ret@311@01 ret@169@01))
      (not (= ret@311@01 ret@159@01))
      (not (= ret@311@01 ret@138@01))
      (not (= ret@311@01 ret@136@01))
      (not (= ret@311@01 ret@186@01))
      (not (= ret@311@01 ret@207@01))
      (not (= ret@311@01 ret@217@01))
      (not (= ret@311@01 ret@328@01)))
    (and
      (not (= ret@301@01 ret@311@01))
      (not (= ret@301@01 ret@265@01))
      (not (= ret@301@01 ret@255@01))
      (not (= ret@301@01 ret@234@01))
      (not (= ret@301@01 ret@169@01))
      (not (= ret@301@01 ret@159@01))
      (not (= ret@301@01 ret@138@01))
      (not (= ret@301@01 ret@136@01))
      (not (= ret@301@01 ret@186@01))
      (not (= ret@301@01 ret@207@01))
      (not (= ret@301@01 ret@217@01))
      (not (= ret@301@01 ret@328@01)))
    (and
      (not (= ret@265@01 ret@311@01))
      (not (= ret@265@01 ret@301@01))
      (not (= ret@265@01 ret@255@01))
      (not (= ret@265@01 ret@234@01))
      (not (= ret@265@01 ret@169@01))
      (not (= ret@265@01 ret@159@01))
      (not (= ret@265@01 ret@138@01))
      (not (= ret@265@01 ret@136@01))
      (not (= ret@265@01 ret@186@01))
      (not (= ret@265@01 ret@207@01))
      (not (= ret@265@01 ret@217@01))
      (not (= ret@265@01 ret@328@01)))
    (and
      (not (= ret@255@01 ret@311@01))
      (not (= ret@255@01 ret@301@01))
      (not (= ret@255@01 ret@265@01))
      (not (= ret@255@01 ret@234@01))
      (not (= ret@255@01 ret@169@01))
      (not (= ret@255@01 ret@159@01))
      (not (= ret@255@01 ret@138@01))
      (not (= ret@255@01 ret@136@01))
      (not (= ret@255@01 ret@186@01))
      (not (= ret@255@01 ret@207@01))
      (not (= ret@255@01 ret@217@01))
      (not (= ret@255@01 ret@328@01)))
    (and
      (not (= ret@234@01 ret@311@01))
      (not (= ret@234@01 ret@301@01))
      (not (= ret@234@01 ret@265@01))
      (not (= ret@234@01 ret@255@01))
      (not (= ret@234@01 ret@169@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@328@01)))
    (and
      (not (= ret@169@01 ret@311@01))
      (not (= ret@169@01 ret@301@01))
      (not (= ret@169@01 ret@265@01))
      (not (= ret@169@01 ret@255@01))
      (not (= ret@169@01 ret@234@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@328@01)))
    (and
      (not (= ret@159@01 ret@311@01))
      (not (= ret@159@01 ret@301@01))
      (not (= ret@159@01 ret@265@01))
      (not (= ret@159@01 ret@255@01))
      (not (= ret@159@01 ret@234@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@328@01)))
    (and
      (not (= ret@138@01 ret@311@01))
      (not (= ret@138@01 ret@301@01))
      (not (= ret@138@01 ret@265@01))
      (not (= ret@138@01 ret@255@01))
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@328@01)))
    (and
      (not (= ret@136@01 ret@311@01))
      (not (= ret@136@01 ret@301@01))
      (not (= ret@136@01 ret@265@01))
      (not (= ret@136@01 ret@255@01))
      (not (= ret@136@01 ret@234@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@328@01)))
    (and
      (not (= ret@186@01 ret@311@01))
      (not (= ret@186@01 ret@301@01))
      (not (= ret@186@01 ret@265@01))
      (not (= ret@186@01 ret@255@01))
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@328@01)))
    (and
      (not (= ret@207@01 ret@311@01))
      (not (= ret@207@01 ret@301@01))
      (not (= ret@207@01 ret@265@01))
      (not (= ret@207@01 ret@255@01))
      (not (= ret@207@01 ret@234@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@328@01)))
    (and
      (not (= ret@217@01 ret@311@01))
      (not (= ret@217@01 ret@301@01))
      (not (= ret@217@01 ret@265@01))
      (not (= ret@217@01 ret@255@01))
      (not (= ret@217@01 ret@234@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@328@01)))
    (and
      (not (= ret@328@01 ret@311@01))
      (not (= ret@328@01 ret@301@01))
      (not (= ret@328@01 ret@265@01))
      (not (= ret@328@01 ret@255@01))
      (not (= ret@328@01 ret@234@01))
      (not (= ret@328@01 ret@169@01))
      (not (= ret@328@01 ret@159@01))
      (not (= ret@328@01 ret@138@01))
      (not (= ret@328@01 ret@136@01))
      (not (= ret@328@01 ret@186@01))
      (not (= ret@328@01 ret@207@01))
      (not (= ret@328@01 ret@217@01))))
  (and (not (= ret@232@01 ret@134@01)) (not (= ret@134@01 ret@232@01)))))
(assert (and
  (and
    (and
      (not (= ret@318@01 ret@315@01))
      (not (= ret@318@01 ret@308@01))
      (not (= ret@318@01 ret@298@01))
      (not (= ret@318@01 ret@269@01))
      (not (= ret@318@01 ret@262@01))
      (not (= ret@318@01 ret@252@01))
      (not (= ret@318@01 ret@173@01))
      (not (= ret@318@01 ret@166@01))
      (not (= ret@318@01 ret@156@01))
      (not (= ret@318@01 ret@204@01))
      (not (= ret@318@01 ret@214@01))
      (not (= ret@318@01 ret@221@01)))
    (and
      (not (= ret@315@01 ret@318@01))
      (not (= ret@315@01 ret@272@01))
      (not (= ret@315@01 ret@176@01))
      (not (= ret@315@01 ret@224@01)))
    (and
      (not (= ret@308@01 ret@318@01))
      (not (= ret@308@01 ret@272@01))
      (not (= ret@308@01 ret@176@01))
      (not (= ret@308@01 ret@224@01)))
    (and
      (not (= ret@298@01 ret@318@01))
      (not (= ret@298@01 ret@272@01))
      (not (= ret@298@01 ret@176@01))
      (not (= ret@298@01 ret@224@01)))
    (and
      (not (= ret@272@01 ret@315@01))
      (not (= ret@272@01 ret@308@01))
      (not (= ret@272@01 ret@298@01))
      (not (= ret@272@01 ret@269@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@221@01)))
    (and
      (not (= ret@269@01 ret@318@01))
      (not (= ret@269@01 ret@272@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@224@01)))
    (and
      (not (= ret@262@01 ret@318@01))
      (not (= ret@262@01 ret@272@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@224@01)))
    (and
      (not (= ret@252@01 ret@318@01))
      (not (= ret@252@01 ret@272@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@224@01)))
    (and
      (not (= ret@176@01 ret@315@01))
      (not (= ret@176@01 ret@308@01))
      (not (= ret@176@01 ret@298@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@221@01)))
    (and
      (not (= ret@173@01 ret@318@01))
      (not (= ret@173@01 ret@272@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@224@01)))
    (and
      (not (= ret@166@01 ret@318@01))
      (not (= ret@166@01 ret@272@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@224@01)))
    (and
      (not (= ret@156@01 ret@318@01))
      (not (= ret@156@01 ret@272@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@224@01)))
    (and
      (not (= ret@204@01 ret@318@01))
      (not (= ret@204@01 ret@272@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@224@01)))
    (and
      (not (= ret@214@01 ret@318@01))
      (not (= ret@214@01 ret@272@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@224@01)))
    (and
      (not (= ret@221@01 ret@318@01))
      (not (= ret@221@01 ret@272@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@224@01)))
    (and
      (not (= ret@224@01 ret@315@01))
      (not (= ret@224@01 ret@308@01))
      (not (= ret@224@01 ret@298@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@221@01))))
  (and
    (and (not (= ret@134@01 ret@184@01)) (not (= ret@134@01 ret@326@01)))
    (and (not (= ret@184@01 ret@134@01)) (not (= ret@184@01 ret@326@01)))
    (and (not (= ret@326@01 ret@134@01)) (not (= ret@326@01 ret@184@01))))
  (and
    (and
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@328@01)))
    (and
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@328@01)))
    (and
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@328@01)))
    (and
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@328@01)))
    (and
      (not (= ret@328@01 ret@234@01))
      (not (= ret@328@01 ret@138@01))
      (not (= ret@328@01 ret@136@01))
      (not (= ret@328@01 ret@186@01))))
  (and (not (= ret@232@01 ret@134@01)) (not (= ret@134@01 ret@232@01)))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 17
(assert (not (<= 0 i@337@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@290@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@244@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@227@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@221@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@217@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@207@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@204@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@188@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@186@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@326@01 ret@184@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@148@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@136@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 _1@55@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@129@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@184@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@326@01 ret@134@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@138@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@140@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@156@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@159@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@166@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@169@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@173@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@196@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@134@01 ret@232@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@234@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@236@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@252@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@255@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@262@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@269@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@272@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@275@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@298@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@301@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@311@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@315@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@318@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@185@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@135@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@135@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@233@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@327@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@327@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@185@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@185@01) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.first ($Snap.second $t@135@01)) ($Snap.second $t@233@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@327@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.second $t@185@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($Snap.second $t@233@01)
    ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($Snap.second $t@233@01) ($Snap.first ($Snap.second $t@135@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= ($Snap.second $t@331@01) $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (< $Perm.No (read$ $Snap.unit))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= ($Snap.second $t@331@01) $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@200@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@200@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@200@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@152@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@152@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@152@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@248@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@248@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@248@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@294@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (-
      (+ (read$ $Snap.unit) (read$ $Snap.unit))
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
  (not (= $t@294@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit))))
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))))
  (not (= $t@294@01 $t@325@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (< $Perm.No (read$ $Snap.unit)))
  (not (= $t@325@01 ($Snap.second $t@331@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@200@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@152@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@248@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (and
    (<
      $Perm.No
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    (<
      $Perm.No
      (-
        (+ (read$ $Snap.unit) (read$ $Snap.unit))
        ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))))
  (not (= $t@325@01 $t@294@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ $Perm.Write (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) (read$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.Write (+ (read$ $Snap.unit) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@323@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@323@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@277@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@277@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@198@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@198@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@181@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@181@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@131@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@150@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@150@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@229@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@229@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@246@01 val_ref@292@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@246@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@323@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@277@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@198@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@181@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@131@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@150@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@229@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_ref@292@01 val_ref@246@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= val_ref@292@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@323@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@198@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@181@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@131@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@150@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))
      ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@229@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@246@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (< $Perm.No (read$ $Snap.unit))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@292@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@320@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@317@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@310@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@300@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@274@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@271@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@264@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@254@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@178@01 val_bool@226@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@168@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@158@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@206@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@223@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@216@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@320@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@317@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@310@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@300@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@274@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@271@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@264@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@254@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@178@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@175@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@168@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@158@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@206@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@216@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@223@01 val_bool@226@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@320@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@317@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@310@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@300@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@274@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@271@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@264@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@254@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@178@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@168@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@158@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@206@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@216@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= val_bool@226@01 val_bool@223@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@312@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@302@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@266@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@256@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@170@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@160@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 4 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 1 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 2 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@208@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 4))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 1))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 2))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= $t@218@01 5))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@312@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@302@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@266@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@256@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@170@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@160@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@208@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= 5 $t@218@01))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@321@01 ret@282@01))
      (not (= ret@321@01 ret@275@01))
      (not (= ret@321@01 ret@236@01))
      (not (= ret@321@01 ret@196@01))
      (not (= ret@321@01 ret@179@01))
      (not (= ret@321@01 ret@140@01))
      (not (= ret@321@01 ret@129@01))
      (not (= ret@321@01 _1@55@01))
      (not (= ret@321@01 ret@148@01))
      (not (= ret@321@01 ret@188@01))
      (not (= ret@321@01 ret@227@01))
      (not (= ret@321@01 ret@244@01))
      (not (= ret@321@01 ret@290@01))
      (not (= ret@321@01 ret@330@01)))
    (and
      (not (= ret@282@01 ret@321@01))
      (not (= ret@282@01 ret@275@01))
      (not (= ret@282@01 ret@196@01))
      (not (= ret@282@01 ret@179@01))
      (not (= ret@282@01 ret@129@01))
      (not (= ret@282@01 _1@55@01))
      (not (= ret@282@01 ret@148@01))
      (not (= ret@282@01 ret@227@01))
      (not (= ret@282@01 ret@244@01))
      (not (= ret@282@01 ret@290@01)))
    (and
      (not (= ret@275@01 ret@321@01))
      (not (= ret@275@01 ret@282@01))
      (not (= ret@275@01 ret@236@01))
      (not (= ret@275@01 ret@196@01))
      (not (= ret@275@01 ret@179@01))
      (not (= ret@275@01 ret@140@01))
      (not (= ret@275@01 ret@129@01))
      (not (= ret@275@01 _1@55@01))
      (not (= ret@275@01 ret@148@01))
      (not (= ret@275@01 ret@188@01))
      (not (= ret@275@01 ret@227@01))
      (not (= ret@275@01 ret@244@01))
      (not (= ret@275@01 ret@290@01))
      (not (= ret@275@01 ret@330@01)))
    (and
      (not (= ret@236@01 ret@321@01))
      (not (= ret@236@01 ret@275@01))
      (not (= ret@236@01 ret@196@01))
      (not (= ret@236@01 ret@179@01))
      (not (= ret@236@01 ret@129@01))
      (not (= ret@236@01 _1@55@01))
      (not (= ret@236@01 ret@148@01))
      (not (= ret@236@01 ret@227@01))
      (not (= ret@236@01 ret@244@01))
      (not (= ret@236@01 ret@290@01)))
    (and
      (not (= ret@196@01 ret@321@01))
      (not (= ret@196@01 ret@282@01))
      (not (= ret@196@01 ret@275@01))
      (not (= ret@196@01 ret@236@01))
      (not (= ret@196@01 ret@179@01))
      (not (= ret@196@01 ret@140@01))
      (not (= ret@196@01 ret@129@01))
      (not (= ret@196@01 _1@55@01))
      (not (= ret@196@01 ret@148@01))
      (not (= ret@196@01 ret@188@01))
      (not (= ret@196@01 ret@227@01))
      (not (= ret@196@01 ret@244@01))
      (not (= ret@196@01 ret@290@01))
      (not (= ret@196@01 ret@330@01)))
    (and
      (not (= ret@179@01 ret@321@01))
      (not (= ret@179@01 ret@282@01))
      (not (= ret@179@01 ret@275@01))
      (not (= ret@179@01 ret@236@01))
      (not (= ret@179@01 ret@196@01))
      (not (= ret@179@01 ret@140@01))
      (not (= ret@179@01 ret@129@01))
      (not (= ret@179@01 _1@55@01))
      (not (= ret@179@01 ret@148@01))
      (not (= ret@179@01 ret@188@01))
      (not (= ret@179@01 ret@227@01))
      (not (= ret@179@01 ret@244@01))
      (not (= ret@179@01 ret@290@01))
      (not (= ret@179@01 ret@330@01)))
    (and
      (not (= ret@140@01 ret@321@01))
      (not (= ret@140@01 ret@275@01))
      (not (= ret@140@01 ret@196@01))
      (not (= ret@140@01 ret@179@01))
      (not (= ret@140@01 ret@129@01))
      (not (= ret@140@01 _1@55@01))
      (not (= ret@140@01 ret@148@01))
      (not (= ret@140@01 ret@227@01))
      (not (= ret@140@01 ret@244@01))
      (not (= ret@140@01 ret@290@01)))
    (and
      (not (= ret@129@01 ret@321@01))
      (not (= ret@129@01 ret@282@01))
      (not (= ret@129@01 ret@275@01))
      (not (= ret@129@01 ret@236@01))
      (not (= ret@129@01 ret@196@01))
      (not (= ret@129@01 ret@179@01))
      (not (= ret@129@01 ret@140@01))
      (not (= ret@129@01 _1@55@01))
      (not (= ret@129@01 ret@148@01))
      (not (= ret@129@01 ret@188@01))
      (not (= ret@129@01 ret@227@01))
      (not (= ret@129@01 ret@244@01))
      (not (= ret@129@01 ret@290@01))
      (not (= ret@129@01 ret@330@01)))
    (and
      (not (= _1@55@01 ret@321@01))
      (not (= _1@55@01 ret@282@01))
      (not (= _1@55@01 ret@275@01))
      (not (= _1@55@01 ret@236@01))
      (not (= _1@55@01 ret@196@01))
      (not (= _1@55@01 ret@179@01))
      (not (= _1@55@01 ret@140@01))
      (not (= _1@55@01 ret@129@01))
      (not (= _1@55@01 ret@148@01))
      (not (= _1@55@01 ret@188@01))
      (not (= _1@55@01 ret@227@01))
      (not (= _1@55@01 ret@244@01))
      (not (= _1@55@01 ret@290@01))
      (not (= _1@55@01 ret@330@01)))
    (and
      (not (= ret@148@01 ret@321@01))
      (not (= ret@148@01 ret@282@01))
      (not (= ret@148@01 ret@275@01))
      (not (= ret@148@01 ret@236@01))
      (not (= ret@148@01 ret@196@01))
      (not (= ret@148@01 ret@179@01))
      (not (= ret@148@01 ret@140@01))
      (not (= ret@148@01 ret@129@01))
      (not (= ret@148@01 _1@55@01))
      (not (= ret@148@01 ret@188@01))
      (not (= ret@148@01 ret@227@01))
      (not (= ret@148@01 ret@244@01))
      (not (= ret@148@01 ret@290@01))
      (not (= ret@148@01 ret@330@01)))
    (and
      (not (= ret@188@01 ret@321@01))
      (not (= ret@188@01 ret@275@01))
      (not (= ret@188@01 ret@196@01))
      (not (= ret@188@01 ret@179@01))
      (not (= ret@188@01 ret@129@01))
      (not (= ret@188@01 _1@55@01))
      (not (= ret@188@01 ret@148@01))
      (not (= ret@188@01 ret@227@01))
      (not (= ret@188@01 ret@244@01))
      (not (= ret@188@01 ret@290@01)))
    (and
      (not (= ret@227@01 ret@321@01))
      (not (= ret@227@01 ret@282@01))
      (not (= ret@227@01 ret@275@01))
      (not (= ret@227@01 ret@236@01))
      (not (= ret@227@01 ret@196@01))
      (not (= ret@227@01 ret@179@01))
      (not (= ret@227@01 ret@140@01))
      (not (= ret@227@01 ret@129@01))
      (not (= ret@227@01 _1@55@01))
      (not (= ret@227@01 ret@148@01))
      (not (= ret@227@01 ret@188@01))
      (not (= ret@227@01 ret@244@01))
      (not (= ret@227@01 ret@290@01))
      (not (= ret@227@01 ret@330@01)))
    (and
      (not (= ret@244@01 ret@321@01))
      (not (= ret@244@01 ret@282@01))
      (not (= ret@244@01 ret@275@01))
      (not (= ret@244@01 ret@236@01))
      (not (= ret@244@01 ret@196@01))
      (not (= ret@244@01 ret@179@01))
      (not (= ret@244@01 ret@140@01))
      (not (= ret@244@01 ret@129@01))
      (not (= ret@244@01 _1@55@01))
      (not (= ret@244@01 ret@148@01))
      (not (= ret@244@01 ret@188@01))
      (not (= ret@244@01 ret@227@01))
      (not (= ret@244@01 ret@290@01))
      (not (= ret@244@01 ret@330@01)))
    (and
      (not (= ret@290@01 ret@321@01))
      (not (= ret@290@01 ret@282@01))
      (not (= ret@290@01 ret@275@01))
      (not (= ret@290@01 ret@236@01))
      (not (= ret@290@01 ret@196@01))
      (not (= ret@290@01 ret@179@01))
      (not (= ret@290@01 ret@140@01))
      (not (= ret@290@01 ret@129@01))
      (not (= ret@290@01 _1@55@01))
      (not (= ret@290@01 ret@148@01))
      (not (= ret@290@01 ret@188@01))
      (not (= ret@290@01 ret@227@01))
      (not (= ret@290@01 ret@244@01))
      (not (= ret@290@01 ret@330@01)))
    (and
      (not (= ret@330@01 ret@321@01))
      (not (= ret@330@01 ret@275@01))
      (not (= ret@330@01 ret@196@01))
      (not (= ret@330@01 ret@179@01))
      (not (= ret@330@01 ret@129@01))
      (not (= ret@330@01 _1@55@01))
      (not (= ret@330@01 ret@148@01))
      (not (= ret@330@01 ret@227@01))
      (not (= ret@330@01 ret@244@01))
      (not (= ret@330@01 ret@290@01))))
  (and
    (and
      (not (= ret@318@01 ret@315@01))
      (not (= ret@318@01 ret@308@01))
      (not (= ret@318@01 ret@298@01))
      (not (= ret@318@01 ret@272@01))
      (not (= ret@318@01 ret@269@01))
      (not (= ret@318@01 ret@262@01))
      (not (= ret@318@01 ret@252@01))
      (not (= ret@318@01 ret@176@01))
      (not (= ret@318@01 ret@173@01))
      (not (= ret@318@01 ret@166@01))
      (not (= ret@318@01 ret@156@01))
      (not (= ret@318@01 ret@204@01))
      (not (= ret@318@01 ret@214@01))
      (not (= ret@318@01 ret@221@01))
      (not (= ret@318@01 ret@224@01)))
    (and
      (not (= ret@315@01 ret@318@01))
      (not (= ret@315@01 ret@308@01))
      (not (= ret@315@01 ret@298@01))
      (not (= ret@315@01 ret@272@01))
      (not (= ret@315@01 ret@269@01))
      (not (= ret@315@01 ret@262@01))
      (not (= ret@315@01 ret@252@01))
      (not (= ret@315@01 ret@176@01))
      (not (= ret@315@01 ret@173@01))
      (not (= ret@315@01 ret@166@01))
      (not (= ret@315@01 ret@156@01))
      (not (= ret@315@01 ret@204@01))
      (not (= ret@315@01 ret@214@01))
      (not (= ret@315@01 ret@221@01))
      (not (= ret@315@01 ret@224@01)))
    (and
      (not (= ret@308@01 ret@318@01))
      (not (= ret@308@01 ret@315@01))
      (not (= ret@308@01 ret@298@01))
      (not (= ret@308@01 ret@272@01))
      (not (= ret@308@01 ret@269@01))
      (not (= ret@308@01 ret@262@01))
      (not (= ret@308@01 ret@252@01))
      (not (= ret@308@01 ret@176@01))
      (not (= ret@308@01 ret@173@01))
      (not (= ret@308@01 ret@166@01))
      (not (= ret@308@01 ret@156@01))
      (not (= ret@308@01 ret@204@01))
      (not (= ret@308@01 ret@214@01))
      (not (= ret@308@01 ret@221@01))
      (not (= ret@308@01 ret@224@01)))
    (and
      (not (= ret@298@01 ret@318@01))
      (not (= ret@298@01 ret@315@01))
      (not (= ret@298@01 ret@308@01))
      (not (= ret@298@01 ret@272@01))
      (not (= ret@298@01 ret@269@01))
      (not (= ret@298@01 ret@262@01))
      (not (= ret@298@01 ret@252@01))
      (not (= ret@298@01 ret@176@01))
      (not (= ret@298@01 ret@173@01))
      (not (= ret@298@01 ret@166@01))
      (not (= ret@298@01 ret@156@01))
      (not (= ret@298@01 ret@204@01))
      (not (= ret@298@01 ret@214@01))
      (not (= ret@298@01 ret@221@01))
      (not (= ret@298@01 ret@224@01)))
    (and
      (not (= ret@272@01 ret@318@01))
      (not (= ret@272@01 ret@315@01))
      (not (= ret@272@01 ret@308@01))
      (not (= ret@272@01 ret@298@01))
      (not (= ret@272@01 ret@269@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@176@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@221@01))
      (not (= ret@272@01 ret@224@01)))
    (and
      (not (= ret@269@01 ret@318@01))
      (not (= ret@269@01 ret@315@01))
      (not (= ret@269@01 ret@308@01))
      (not (= ret@269@01 ret@298@01))
      (not (= ret@269@01 ret@272@01))
      (not (= ret@269@01 ret@262@01))
      (not (= ret@269@01 ret@252@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@173@01))
      (not (= ret@269@01 ret@166@01))
      (not (= ret@269@01 ret@156@01))
      (not (= ret@269@01 ret@204@01))
      (not (= ret@269@01 ret@214@01))
      (not (= ret@269@01 ret@221@01))
      (not (= ret@269@01 ret@224@01)))
    (and
      (not (= ret@262@01 ret@318@01))
      (not (= ret@262@01 ret@315@01))
      (not (= ret@262@01 ret@308@01))
      (not (= ret@262@01 ret@298@01))
      (not (= ret@262@01 ret@272@01))
      (not (= ret@262@01 ret@269@01))
      (not (= ret@262@01 ret@252@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@173@01))
      (not (= ret@262@01 ret@166@01))
      (not (= ret@262@01 ret@156@01))
      (not (= ret@262@01 ret@204@01))
      (not (= ret@262@01 ret@214@01))
      (not (= ret@262@01 ret@221@01))
      (not (= ret@262@01 ret@224@01)))
    (and
      (not (= ret@252@01 ret@318@01))
      (not (= ret@252@01 ret@315@01))
      (not (= ret@252@01 ret@308@01))
      (not (= ret@252@01 ret@298@01))
      (not (= ret@252@01 ret@272@01))
      (not (= ret@252@01 ret@269@01))
      (not (= ret@252@01 ret@262@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@173@01))
      (not (= ret@252@01 ret@166@01))
      (not (= ret@252@01 ret@156@01))
      (not (= ret@252@01 ret@204@01))
      (not (= ret@252@01 ret@214@01))
      (not (= ret@252@01 ret@221@01))
      (not (= ret@252@01 ret@224@01)))
    (and
      (not (= ret@176@01 ret@318@01))
      (not (= ret@176@01 ret@315@01))
      (not (= ret@176@01 ret@308@01))
      (not (= ret@176@01 ret@298@01))
      (not (= ret@176@01 ret@272@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@221@01))
      (not (= ret@176@01 ret@224@01)))
    (and
      (not (= ret@173@01 ret@318@01))
      (not (= ret@173@01 ret@315@01))
      (not (= ret@173@01 ret@308@01))
      (not (= ret@173@01 ret@298@01))
      (not (= ret@173@01 ret@272@01))
      (not (= ret@173@01 ret@269@01))
      (not (= ret@173@01 ret@262@01))
      (not (= ret@173@01 ret@252@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@166@01))
      (not (= ret@173@01 ret@156@01))
      (not (= ret@173@01 ret@204@01))
      (not (= ret@173@01 ret@214@01))
      (not (= ret@173@01 ret@221@01))
      (not (= ret@173@01 ret@224@01)))
    (and
      (not (= ret@166@01 ret@318@01))
      (not (= ret@166@01 ret@315@01))
      (not (= ret@166@01 ret@308@01))
      (not (= ret@166@01 ret@298@01))
      (not (= ret@166@01 ret@272@01))
      (not (= ret@166@01 ret@269@01))
      (not (= ret@166@01 ret@262@01))
      (not (= ret@166@01 ret@252@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@173@01))
      (not (= ret@166@01 ret@156@01))
      (not (= ret@166@01 ret@204@01))
      (not (= ret@166@01 ret@214@01))
      (not (= ret@166@01 ret@221@01))
      (not (= ret@166@01 ret@224@01)))
    (and
      (not (= ret@156@01 ret@318@01))
      (not (= ret@156@01 ret@315@01))
      (not (= ret@156@01 ret@308@01))
      (not (= ret@156@01 ret@298@01))
      (not (= ret@156@01 ret@272@01))
      (not (= ret@156@01 ret@269@01))
      (not (= ret@156@01 ret@262@01))
      (not (= ret@156@01 ret@252@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@173@01))
      (not (= ret@156@01 ret@166@01))
      (not (= ret@156@01 ret@204@01))
      (not (= ret@156@01 ret@214@01))
      (not (= ret@156@01 ret@221@01))
      (not (= ret@156@01 ret@224@01)))
    (and
      (not (= ret@204@01 ret@318@01))
      (not (= ret@204@01 ret@315@01))
      (not (= ret@204@01 ret@308@01))
      (not (= ret@204@01 ret@298@01))
      (not (= ret@204@01 ret@272@01))
      (not (= ret@204@01 ret@269@01))
      (not (= ret@204@01 ret@262@01))
      (not (= ret@204@01 ret@252@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@173@01))
      (not (= ret@204@01 ret@166@01))
      (not (= ret@204@01 ret@156@01))
      (not (= ret@204@01 ret@214@01))
      (not (= ret@204@01 ret@221@01))
      (not (= ret@204@01 ret@224@01)))
    (and
      (not (= ret@214@01 ret@318@01))
      (not (= ret@214@01 ret@315@01))
      (not (= ret@214@01 ret@308@01))
      (not (= ret@214@01 ret@298@01))
      (not (= ret@214@01 ret@272@01))
      (not (= ret@214@01 ret@269@01))
      (not (= ret@214@01 ret@262@01))
      (not (= ret@214@01 ret@252@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@173@01))
      (not (= ret@214@01 ret@166@01))
      (not (= ret@214@01 ret@156@01))
      (not (= ret@214@01 ret@204@01))
      (not (= ret@214@01 ret@221@01))
      (not (= ret@214@01 ret@224@01)))
    (and
      (not (= ret@221@01 ret@318@01))
      (not (= ret@221@01 ret@315@01))
      (not (= ret@221@01 ret@308@01))
      (not (= ret@221@01 ret@298@01))
      (not (= ret@221@01 ret@272@01))
      (not (= ret@221@01 ret@269@01))
      (not (= ret@221@01 ret@262@01))
      (not (= ret@221@01 ret@252@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@173@01))
      (not (= ret@221@01 ret@166@01))
      (not (= ret@221@01 ret@156@01))
      (not (= ret@221@01 ret@204@01))
      (not (= ret@221@01 ret@214@01))
      (not (= ret@221@01 ret@224@01)))
    (and
      (not (= ret@224@01 ret@318@01))
      (not (= ret@224@01 ret@315@01))
      (not (= ret@224@01 ret@308@01))
      (not (= ret@224@01 ret@298@01))
      (not (= ret@224@01 ret@272@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@176@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@221@01))))
  (and
    (and (not (= ret@134@01 ret@184@01)) (not (= ret@134@01 ret@326@01)))
    (and (not (= ret@184@01 ret@134@01)) (not (= ret@184@01 ret@326@01)))
    (and (not (= ret@326@01 ret@134@01)) (not (= ret@326@01 ret@184@01))))
  (and
    (and
      (not (= ret@311@01 ret@301@01))
      (not (= ret@311@01 ret@265@01))
      (not (= ret@311@01 ret@255@01))
      (not (= ret@311@01 ret@234@01))
      (not (= ret@311@01 ret@169@01))
      (not (= ret@311@01 ret@159@01))
      (not (= ret@311@01 ret@138@01))
      (not (= ret@311@01 ret@136@01))
      (not (= ret@311@01 ret@186@01))
      (not (= ret@311@01 ret@207@01))
      (not (= ret@311@01 ret@217@01))
      (not (= ret@311@01 ret@328@01)))
    (and
      (not (= ret@301@01 ret@311@01))
      (not (= ret@301@01 ret@265@01))
      (not (= ret@301@01 ret@255@01))
      (not (= ret@301@01 ret@234@01))
      (not (= ret@301@01 ret@169@01))
      (not (= ret@301@01 ret@159@01))
      (not (= ret@301@01 ret@138@01))
      (not (= ret@301@01 ret@136@01))
      (not (= ret@301@01 ret@186@01))
      (not (= ret@301@01 ret@207@01))
      (not (= ret@301@01 ret@217@01))
      (not (= ret@301@01 ret@328@01)))
    (and
      (not (= ret@265@01 ret@311@01))
      (not (= ret@265@01 ret@301@01))
      (not (= ret@265@01 ret@255@01))
      (not (= ret@265@01 ret@234@01))
      (not (= ret@265@01 ret@169@01))
      (not (= ret@265@01 ret@159@01))
      (not (= ret@265@01 ret@138@01))
      (not (= ret@265@01 ret@136@01))
      (not (= ret@265@01 ret@186@01))
      (not (= ret@265@01 ret@207@01))
      (not (= ret@265@01 ret@217@01))
      (not (= ret@265@01 ret@328@01)))
    (and
      (not (= ret@255@01 ret@311@01))
      (not (= ret@255@01 ret@301@01))
      (not (= ret@255@01 ret@265@01))
      (not (= ret@255@01 ret@234@01))
      (not (= ret@255@01 ret@169@01))
      (not (= ret@255@01 ret@159@01))
      (not (= ret@255@01 ret@138@01))
      (not (= ret@255@01 ret@136@01))
      (not (= ret@255@01 ret@186@01))
      (not (= ret@255@01 ret@207@01))
      (not (= ret@255@01 ret@217@01))
      (not (= ret@255@01 ret@328@01)))
    (and
      (not (= ret@234@01 ret@311@01))
      (not (= ret@234@01 ret@301@01))
      (not (= ret@234@01 ret@265@01))
      (not (= ret@234@01 ret@255@01))
      (not (= ret@234@01 ret@169@01))
      (not (= ret@234@01 ret@159@01))
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@136@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@207@01))
      (not (= ret@234@01 ret@217@01))
      (not (= ret@234@01 ret@328@01)))
    (and
      (not (= ret@169@01 ret@311@01))
      (not (= ret@169@01 ret@301@01))
      (not (= ret@169@01 ret@265@01))
      (not (= ret@169@01 ret@255@01))
      (not (= ret@169@01 ret@234@01))
      (not (= ret@169@01 ret@159@01))
      (not (= ret@169@01 ret@138@01))
      (not (= ret@169@01 ret@136@01))
      (not (= ret@169@01 ret@186@01))
      (not (= ret@169@01 ret@207@01))
      (not (= ret@169@01 ret@217@01))
      (not (= ret@169@01 ret@328@01)))
    (and
      (not (= ret@159@01 ret@311@01))
      (not (= ret@159@01 ret@301@01))
      (not (= ret@159@01 ret@265@01))
      (not (= ret@159@01 ret@255@01))
      (not (= ret@159@01 ret@234@01))
      (not (= ret@159@01 ret@169@01))
      (not (= ret@159@01 ret@138@01))
      (not (= ret@159@01 ret@136@01))
      (not (= ret@159@01 ret@186@01))
      (not (= ret@159@01 ret@207@01))
      (not (= ret@159@01 ret@217@01))
      (not (= ret@159@01 ret@328@01)))
    (and
      (not (= ret@138@01 ret@311@01))
      (not (= ret@138@01 ret@301@01))
      (not (= ret@138@01 ret@265@01))
      (not (= ret@138@01 ret@255@01))
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@169@01))
      (not (= ret@138@01 ret@159@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@207@01))
      (not (= ret@138@01 ret@217@01))
      (not (= ret@138@01 ret@328@01)))
    (and
      (not (= ret@136@01 ret@311@01))
      (not (= ret@136@01 ret@301@01))
      (not (= ret@136@01 ret@265@01))
      (not (= ret@136@01 ret@255@01))
      (not (= ret@136@01 ret@234@01))
      (not (= ret@136@01 ret@169@01))
      (not (= ret@136@01 ret@159@01))
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@207@01))
      (not (= ret@136@01 ret@217@01))
      (not (= ret@136@01 ret@328@01)))
    (and
      (not (= ret@186@01 ret@311@01))
      (not (= ret@186@01 ret@301@01))
      (not (= ret@186@01 ret@265@01))
      (not (= ret@186@01 ret@255@01))
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@169@01))
      (not (= ret@186@01 ret@159@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@207@01))
      (not (= ret@186@01 ret@217@01))
      (not (= ret@186@01 ret@328@01)))
    (and
      (not (= ret@207@01 ret@311@01))
      (not (= ret@207@01 ret@301@01))
      (not (= ret@207@01 ret@265@01))
      (not (= ret@207@01 ret@255@01))
      (not (= ret@207@01 ret@234@01))
      (not (= ret@207@01 ret@169@01))
      (not (= ret@207@01 ret@159@01))
      (not (= ret@207@01 ret@138@01))
      (not (= ret@207@01 ret@136@01))
      (not (= ret@207@01 ret@186@01))
      (not (= ret@207@01 ret@217@01))
      (not (= ret@207@01 ret@328@01)))
    (and
      (not (= ret@217@01 ret@311@01))
      (not (= ret@217@01 ret@301@01))
      (not (= ret@217@01 ret@265@01))
      (not (= ret@217@01 ret@255@01))
      (not (= ret@217@01 ret@234@01))
      (not (= ret@217@01 ret@169@01))
      (not (= ret@217@01 ret@159@01))
      (not (= ret@217@01 ret@138@01))
      (not (= ret@217@01 ret@136@01))
      (not (= ret@217@01 ret@186@01))
      (not (= ret@217@01 ret@207@01))
      (not (= ret@217@01 ret@328@01)))
    (and
      (not (= ret@328@01 ret@311@01))
      (not (= ret@328@01 ret@301@01))
      (not (= ret@328@01 ret@265@01))
      (not (= ret@328@01 ret@255@01))
      (not (= ret@328@01 ret@234@01))
      (not (= ret@328@01 ret@169@01))
      (not (= ret@328@01 ret@159@01))
      (not (= ret@328@01 ret@138@01))
      (not (= ret@328@01 ret@136@01))
      (not (= ret@328@01 ret@186@01))
      (not (= ret@328@01 ret@207@01))
      (not (= ret@328@01 ret@217@01))))
  (and (not (= ret@232@01 ret@134@01)) (not (= ret@134@01 ret@232@01)))))
(assert (and
  (and
    (and
      (not (= ret@318@01 ret@315@01))
      (not (= ret@318@01 ret@308@01))
      (not (= ret@318@01 ret@298@01))
      (not (= ret@318@01 ret@269@01))
      (not (= ret@318@01 ret@262@01))
      (not (= ret@318@01 ret@252@01))
      (not (= ret@318@01 ret@173@01))
      (not (= ret@318@01 ret@166@01))
      (not (= ret@318@01 ret@156@01))
      (not (= ret@318@01 ret@204@01))
      (not (= ret@318@01 ret@214@01))
      (not (= ret@318@01 ret@221@01)))
    (and
      (not (= ret@315@01 ret@318@01))
      (not (= ret@315@01 ret@272@01))
      (not (= ret@315@01 ret@176@01))
      (not (= ret@315@01 ret@224@01)))
    (and
      (not (= ret@308@01 ret@318@01))
      (not (= ret@308@01 ret@272@01))
      (not (= ret@308@01 ret@176@01))
      (not (= ret@308@01 ret@224@01)))
    (and
      (not (= ret@298@01 ret@318@01))
      (not (= ret@298@01 ret@272@01))
      (not (= ret@298@01 ret@176@01))
      (not (= ret@298@01 ret@224@01)))
    (and
      (not (= ret@272@01 ret@315@01))
      (not (= ret@272@01 ret@308@01))
      (not (= ret@272@01 ret@298@01))
      (not (= ret@272@01 ret@269@01))
      (not (= ret@272@01 ret@262@01))
      (not (= ret@272@01 ret@252@01))
      (not (= ret@272@01 ret@173@01))
      (not (= ret@272@01 ret@166@01))
      (not (= ret@272@01 ret@156@01))
      (not (= ret@272@01 ret@204@01))
      (not (= ret@272@01 ret@214@01))
      (not (= ret@272@01 ret@221@01)))
    (and
      (not (= ret@269@01 ret@318@01))
      (not (= ret@269@01 ret@272@01))
      (not (= ret@269@01 ret@176@01))
      (not (= ret@269@01 ret@224@01)))
    (and
      (not (= ret@262@01 ret@318@01))
      (not (= ret@262@01 ret@272@01))
      (not (= ret@262@01 ret@176@01))
      (not (= ret@262@01 ret@224@01)))
    (and
      (not (= ret@252@01 ret@318@01))
      (not (= ret@252@01 ret@272@01))
      (not (= ret@252@01 ret@176@01))
      (not (= ret@252@01 ret@224@01)))
    (and
      (not (= ret@176@01 ret@315@01))
      (not (= ret@176@01 ret@308@01))
      (not (= ret@176@01 ret@298@01))
      (not (= ret@176@01 ret@269@01))
      (not (= ret@176@01 ret@262@01))
      (not (= ret@176@01 ret@252@01))
      (not (= ret@176@01 ret@173@01))
      (not (= ret@176@01 ret@166@01))
      (not (= ret@176@01 ret@156@01))
      (not (= ret@176@01 ret@204@01))
      (not (= ret@176@01 ret@214@01))
      (not (= ret@176@01 ret@221@01)))
    (and
      (not (= ret@173@01 ret@318@01))
      (not (= ret@173@01 ret@272@01))
      (not (= ret@173@01 ret@176@01))
      (not (= ret@173@01 ret@224@01)))
    (and
      (not (= ret@166@01 ret@318@01))
      (not (= ret@166@01 ret@272@01))
      (not (= ret@166@01 ret@176@01))
      (not (= ret@166@01 ret@224@01)))
    (and
      (not (= ret@156@01 ret@318@01))
      (not (= ret@156@01 ret@272@01))
      (not (= ret@156@01 ret@176@01))
      (not (= ret@156@01 ret@224@01)))
    (and
      (not (= ret@204@01 ret@318@01))
      (not (= ret@204@01 ret@272@01))
      (not (= ret@204@01 ret@176@01))
      (not (= ret@204@01 ret@224@01)))
    (and
      (not (= ret@214@01 ret@318@01))
      (not (= ret@214@01 ret@272@01))
      (not (= ret@214@01 ret@176@01))
      (not (= ret@214@01 ret@224@01)))
    (and
      (not (= ret@221@01 ret@318@01))
      (not (= ret@221@01 ret@272@01))
      (not (= ret@221@01 ret@176@01))
      (not (= ret@221@01 ret@224@01)))
    (and
      (not (= ret@224@01 ret@315@01))
      (not (= ret@224@01 ret@308@01))
      (not (= ret@224@01 ret@298@01))
      (not (= ret@224@01 ret@269@01))
      (not (= ret@224@01 ret@262@01))
      (not (= ret@224@01 ret@252@01))
      (not (= ret@224@01 ret@173@01))
      (not (= ret@224@01 ret@166@01))
      (not (= ret@224@01 ret@156@01))
      (not (= ret@224@01 ret@204@01))
      (not (= ret@224@01 ret@214@01))
      (not (= ret@224@01 ret@221@01))))
  (and
    (and (not (= ret@134@01 ret@184@01)) (not (= ret@134@01 ret@326@01)))
    (and (not (= ret@184@01 ret@134@01)) (not (= ret@184@01 ret@326@01)))
    (and (not (= ret@326@01 ret@134@01)) (not (= ret@326@01 ret@184@01))))
  (and
    (and
      (not (= ret@234@01 ret@138@01))
      (not (= ret@234@01 ret@186@01))
      (not (= ret@234@01 ret@328@01)))
    (and
      (not (= ret@138@01 ret@234@01))
      (not (= ret@138@01 ret@136@01))
      (not (= ret@138@01 ret@186@01))
      (not (= ret@138@01 ret@328@01)))
    (and
      (not (= ret@136@01 ret@138@01))
      (not (= ret@136@01 ret@186@01))
      (not (= ret@136@01 ret@328@01)))
    (and
      (not (= ret@186@01 ret@234@01))
      (not (= ret@186@01 ret@138@01))
      (not (= ret@186@01 ret@136@01))
      (not (= ret@186@01 ret@328@01)))
    (and
      (not (= ret@328@01 ret@234@01))
      (not (= ret@328@01 ret@138@01))
      (not (= ret@328@01 ret@136@01))
      (not (= ret@328@01 ret@186@01))))
  (and (not (= ret@232@01 ret@134@01)) (not (= ret@134@01 ret@232@01)))))
; [eval] 0 <= idx
(set-option :timeout 0)
(push) ; 17
(assert (not (<= 0 i@337@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@337@01 Int) (j@338@01 Int)) (!
  (and
    (=>
      (<= 0 i@337@01)
      (and
        (<= 0 i@337@01)
        (=>
          (<
            i@337@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
          (and
            (<
              i@337@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
            (=>
              (= j@338@01 i@337@01)
              (and
                (= j@338@01 i@337@01)
                (or (not (<= 0 j@338@01)) (<= 0 j@338@01))))
            (or (not (= j@338@01 i@337@01)) (= j@338@01 i@337@01))))
        (or
          (not
            (<
              i@337@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
          (<
            i@337@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))))
    (or (not (<= 0 i@337@01)) (<= 0 i@337@01))
    (=>
      (and
        (and
          (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
          (<
            i@337@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
        (<= 0 i@337@01))
      (and
        (< j@338@01 6)
        (<= 0 j@338@01)
        (= j@338@01 i@337@01)
        (<
          i@337@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
        (<= 0 i@337@01)
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@331@01)
          ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) i@337@01)
        (<
          j@338@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 val_ref@323@01))
        (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
          $t@325@01
          ($Snap.combine $Snap.unit $Snap.unit)) val_ref@323@01 j@338@01)))
    (or
      (not
        (and
          (and
            (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
            (<
              i@337@01
              (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
          (<= 0 i@337@01)))
      (and
        (and
          (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
          (<
            i@337@01
            (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
        (<= 0 i@337@01))))
  
  :qid |prog.l1087-aux|)))
(assert (forall ((i@337@01 Int) (j@338@01 Int)) (!
  (=>
    (and
      (and
        (and (and (< j@338@01 6) (<= 0 j@338@01)) (= j@338@01 i@337@01))
        (<
          i@337@01
          (Slice$len__$TY$__i32$Slice$i32$$int$ ($Snap.second $t@331@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)))))
      (<= 0 i@337@01))
    (=
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        ($Snap.second $t@331@01)
        ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) i@337@01)
      (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
        $t@325@01
        ($Snap.combine $Snap.unit $Snap.unit)) val_ref@323@01 j@338@01)))
  
  :qid |prog.l1087|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __t21 := true
; [exec]
; _66 := builtin$havoc_ref()
(declare-const ret@339@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_66.val_ref, write)
(declare-const $t@340@01 $Ref)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@321@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@339@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _66.val_ref := _67.val_ref
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const val_ref@341@01 $Ref)
(assert (= val_ref@341@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01))))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@321@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@282@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@236@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@196@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@179@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@140@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@129@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@55@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@148@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@188@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@227@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@244@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@290@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@339@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(Slice$i32(_66.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const $t@342@01 $Snap)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const $t@343@01 $Snap)
(assert (and
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@343@01 ($Snap.second $t@331@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@343@01 $t@342@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l30
; [exec]
; _74 := builtin$havoc_int()
(declare-const ret@344@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _74 := 5
; [exec]
; assert acc(Slice$i32(_66.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; _75 := builtin$havoc_int()
(declare-const ret@345@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _75 := Slice$len__$TY$__i32$Slice$i32$$int$(_66.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_66.val_ref)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@343@01 val_ref@341@01))
(pop) ; 15
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@343@01 val_ref@341@01))
(declare-const _75@346@01 Int)
(assert (= _75@346@01 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@343@01 val_ref@341@01)))
; [exec]
; _76 := builtin$havoc_ref()
(declare-const ret@347@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_76.val_bool, write)
(declare-const $t@348@01 Bool)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@347@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _76.val_bool := _74 < _75
; [eval] _74 < _75
(declare-const val_bool@349@01 Bool)
(assert (= val_bool@349@01 (< 5 _75@346@01)))
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@347@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t46 := _76.val_bool
; [exec]
; assert __t46
(set-option :timeout 0)
(push) ; 15
(assert (not val_bool@349@01))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert val_bool@349@01)
; [exec]
; __t22 := true
; [exec]
; __t47 := builtin$havoc_ref()
(declare-const ret@350@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t47), write)
(declare-const $t@351@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_66.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_66.val_ref, _74) ==
;   (unfolding acc(i32(__t47), write) in __t47.val_int)
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_66.val_ref, _74) == (unfolding acc(i32(__t47), write) in __t47.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_66.val_ref, _74)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@189@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@141@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@237@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@283@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@341@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(set-option :timeout 0)
(push) ; 16
(assert (not (< 5 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@343@01 val_ref@341@01))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (< 5 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@343@01 val_ref@341@01)))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@343@01
  ($Snap.combine $Snap.unit $Snap.unit)) val_ref@341@01 5))
(pop) ; 15
; Joined path conditions
(assert (and
  (< 5 (Slice$len__$TY$__i32$Slice$i32$$int$ $t@343@01 val_ref@341@01))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@343@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@341@01 5)))
; [eval] (unfolding acc(i32(__t47), write) in __t47.val_int)
(push) ; 15
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@351@01) ret@350@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@311@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@350@01 $Ref.null)))
(pop) ; 15
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@351@01) ret@350@01)
  (not (= ret@350@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@343@01
    ($Snap.combine $Snap.unit $Snap.unit)) val_ref@341@01 5)
  $t@351@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _73 := builtin$havoc_int()
(declare-const ret@353@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t47), write)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@311@01 ret@350@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _73 := __t47.val_int
; [exec]
; label l31
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | True | live]
; [else-branch: 53 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 53 | True]
; [exec]
; exhale acc(Slice$i32(_66.val_ref), read$())
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@331@01)) val_ref@341@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+ (read$ $Snap.unit) (read$ $Snap.unit))
    ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min (+ (read$ $Snap.unit) (read$ $Snap.unit)) (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] __t20 && (__t20 && (__t20 && __t21))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 54 | True | live]
; [else-branch: 54 | False | live]
(push) ; 17
; [then-branch: 54 | True]
(push) ; 18
; [then-branch: 55 | True | live]
; [else-branch: 55 | False | live]
(push) ; 19
; [then-branch: 55 | True]
(push) ; 20
; [then-branch: 56 | True | live]
; [else-branch: 56 | False | live]
(push) ; 21
; [then-branch: 56 | True]
(pop) ; 21
(push) ; 21
; [else-branch: 56 | False]
(assert false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 55 | False]
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 54 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | True | live]
; [else-branch: 57 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 57 | True]
; [exec]
; exhale acc(Slice$i32(old[l28](_68.val_ref)), read$())
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] old[l28](_68.val_ref)
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) val_ref@323@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                    ($Perm.min
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; _78 := builtin$havoc_int()
(declare-const ret@354@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _78 := 5
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; _79 := builtin$havoc_int()
(declare-const ret@355@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _79 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@325@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(pop) ; 17
; Joined path conditions
(assert (Slice$len__$TY$__i32$Slice$i32$$int$%precondition $t@325@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
(declare-const _79@356@01 Int)
(assert (=
  _79@356@01
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
; [exec]
; _80 := builtin$havoc_ref()
(declare-const ret@357@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_80.val_bool, write)
(declare-const $t@358@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@347@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@357@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _80.val_bool := _78 < _79
; [eval] _78 < _79
(declare-const val_bool@359@01 Bool)
(assert (= val_bool@359@01 (< 5 _79@356@01)))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@347@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@357@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t48 := _80.val_bool
; [exec]
; assert __t48
(set-option :timeout 0)
(push) ; 17
(assert (not val_bool@359@01))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert val_bool@359@01)
; [exec]
; __t23 := true
; [exec]
; __t49 := builtin$havoc_ref()
(declare-const ret@360@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(__t49), write)
(declare-const $t@361@01 Int)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acc(Slice$i32(_1.val_ref), read$())
; [eval] read$()
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _78) ==
;   (unfolding acc(i32(__t49), write) in __t49.val_int)
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _78) == (unfolding acc(i32(__t49), write) in __t49.val_int)
; [eval] lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref, _78)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= idx
; [eval] idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)
; [eval] Slice$len__$TY$__i32$Slice$i32$$int$(self)
(set-option :timeout 0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(set-option :timeout 0)
(push) ; 18
(assert (not (<
  5
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<
  5
  (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)))))
(assert (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
  $t@325@01
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 5))
(pop) ; 17
; Joined path conditions
(assert (and
  (<
    5
    (Slice$len__$TY$__i32$Slice$i32$$int$ $t@325@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$%precondition ($Snap.combine
    $t@325@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 5)))
; [eval] (unfolding acc(i32(__t49), write) in __t49.val_int)
(push) ; 17
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@361@01) ret@360@01))
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@350@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@311@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@360@01 $Ref.null)))
(pop) ; 17
; Joined path conditions
(assert (and
  (i32%trigger ($SortWrappers.IntTo$Snap $t@361@01) ret@360@01)
  (not (= ret@360@01 $Ref.null))))
(assert (=
  (lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$ ($Snap.combine
    $t@325@01
    ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) 5)
  $t@361@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _77 := builtin$havoc_int()
(declare-const ret@363@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(__t49), write)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@350@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@328@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@217@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@207@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@186@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@136@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@138@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@159@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@169@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@234@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@255@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@301@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@311@01 ret@360@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _77 := __t49.val_int
; [exec]
; label l32
; [exec]
; _72 := builtin$havoc_ref()
(declare-const ret@364@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_72.val_bool, write)
(declare-const $t@365@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@347@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@357@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@364@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _72.val_bool := _73 == _77
; [eval] _73 == _77
(declare-const val_bool@366@01 Bool)
(assert (= val_bool@366@01 (= $t@351@01 $t@361@01)))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@357@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@347@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@364@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@367@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_71.val_bool, write)
(declare-const $t@368@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@347@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@357@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@364@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@367@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _71.val_bool := !_72.val_bool
; [eval] !_72.val_bool
(declare-const val_bool@369@01 Bool)
(assert (= val_bool@369@01 (not val_bool@366@01)))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@364@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@357@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@347@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@224@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@221@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@204@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@156@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@166@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@252@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@262@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@269@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@272@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@298@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@315@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@318@01 ret@367@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t50 := _71.val_bool
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not val_bool@369@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | val_bool@369@01 | dead]
; [else-branch: 58 | !(val_bool@369@01) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 58 | !(val_bool@369@01)]
(assert (not val_bool@369@01))
(pop) ; 17
; [eval] !__t50
(push) ; 17
(set-option :timeout 10)
(assert (not val_bool@369@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not val_bool@369@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | !(val_bool@369@01) | live]
; [else-branch: 59 | val_bool@369@01 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 59 | !(val_bool@369@01)]
(assert (not val_bool@369@01))
; [exec]
; label bb3
; [exec]
; __t25 := true
; [exec]
; label l36
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@370@01 $Ref)
(assert (= _old$pre$0@370@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01))))
; [exec]
; fold acc(tuple0$(_0), write)
(assert (tuple0$%trigger $Snap.unit _0@1@01))
; [exec]
; assert true
; [exec]
; exhale acc(Slice$i32(_old$pre$0), read$())
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@126@01)) _old$pre$0@370@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (=
  (-
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (read$ $Snap.unit) (read$ $Snap.unit))
                      ($Perm.min
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    ($Perm.min
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (read$ $Snap.unit) (read$ $Snap.unit))
                        ($Perm.min
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+
                        (-
                          (+ (read$ $Snap.unit) (read$ $Snap.unit))
                          ($Perm.min
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  ($Perm.min
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    (read$ $Snap.unit)))
                (read$ $Snap.unit))
              ($Perm.min
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                (read$ $Snap.unit)))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+
                          (-
                            (+ (read$ $Snap.unit) (read$ $Snap.unit))
                            ($Perm.min
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        ($Perm.min
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          (read$ $Snap.unit)))
                      (read$ $Snap.unit))
                    ($Perm.min
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      (read$ $Snap.unit)))
                  (read$ $Snap.unit))
                ($Perm.min
                  (+
                    (-
                      (+
                        (-
                          (+
                            (-
                              (+ (read$ $Snap.unit) (read$ $Snap.unit))
                              ($Perm.min
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                (read$ $Snap.unit)))
                            (read$ $Snap.unit))
                          ($Perm.min
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            (read$ $Snap.unit)))
                        (read$ $Snap.unit))
                      ($Perm.min
                        (+
                          (-
                            (+
                              (-
                                (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                ($Perm.min
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  (read$ $Snap.unit)))
                              (read$ $Snap.unit))
                            ($Perm.min
                              (+
                                (-
                                  (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                  ($Perm.min
                                    (+ (read$ $Snap.unit) (read$ $Snap.unit))
                                    (read$ $Snap.unit)))
                                (read$ $Snap.unit))
                              (read$ $Snap.unit)))
                          (read$ $Snap.unit))
                        (read$ $Snap.unit)))
                    (read$ $Snap.unit))
                  (read$ $Snap.unit)))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(tuple0$(_0), write)
; [exec]
; label end_of_method
(pop) ; 17
(pop) ; 16
; [eval] !(__t20 && (__t20 && (__t20 && __t21)))
; [eval] __t20 && (__t20 && (__t20 && __t21))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | live]
(push) ; 17
; [then-branch: 60 | True]
(push) ; 18
; [then-branch: 61 | True | live]
; [else-branch: 61 | False | live]
(push) ; 19
; [then-branch: 61 | True]
(push) ; 20
; [then-branch: 62 | True | live]
; [else-branch: 62 | False | live]
(push) ; 21
; [then-branch: 62 | True]
(pop) ; 21
(push) ; 21
; [else-branch: 62 | False]
(assert false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 61 | False]
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 60 | False]
(assert false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [then-branch: 63 | False | dead]
; [else-branch: 63 | True | live]
(push) ; 16
; [else-branch: 63 | True]
(pop) ; 16
(pop) ; 15
; [eval] !__t21
; [then-branch: 64 | False | dead]
; [else-branch: 64 | True | live]
(push) ; 15
; [else-branch: 64 | True]
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !(__t15 && (__t15 && (__t15 && __t16)))
; [eval] __t15 && (__t15 && (__t15 && __t16))
(push) ; 13
; [then-branch: 65 | True | live]
; [else-branch: 65 | False | live]
(push) ; 14
; [then-branch: 65 | True]
(push) ; 15
; [then-branch: 66 | True | live]
; [else-branch: 66 | False | live]
(push) ; 16
; [then-branch: 66 | True]
(push) ; 17
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | live]
(push) ; 18
; [then-branch: 67 | True]
(pop) ; 18
(push) ; 18
; [else-branch: 67 | False]
(assert false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 66 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 65 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 68 | False | dead]
; [else-branch: 68 | True | live]
(push) ; 13
; [else-branch: 68 | True]
(pop) ; 13
(pop) ; 12
; [eval] !__t16
; [then-branch: 69 | False | dead]
; [else-branch: 69 | True | live]
(push) ; 12
; [else-branch: 69 | True]
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(__t10 && (__t10 && (__t10 && __t11)))
; [eval] __t10 && (__t10 && (__t10 && __t11))
(push) ; 10
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | live]
(push) ; 11
; [then-branch: 70 | True]
(push) ; 12
; [then-branch: 71 | True | live]
; [else-branch: 71 | False | live]
(push) ; 13
; [then-branch: 71 | True]
(push) ; 14
; [then-branch: 72 | True | live]
; [else-branch: 72 | False | live]
(push) ; 15
; [then-branch: 72 | True]
(pop) ; 15
(push) ; 15
; [else-branch: 72 | False]
(assert false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 71 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 70 | False]
(assert false)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(push) ; 10
; [else-branch: 73 | True]
(pop) ; 10
(pop) ; 9
; [eval] !__t11
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 9
; [else-branch: 74 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(__t5 && (__t5 && (__t5 && __t6)))
; [eval] __t5 && (__t5 && (__t5 && __t6))
(push) ; 7
; [then-branch: 75 | True | live]
; [else-branch: 75 | False | live]
(push) ; 8
; [then-branch: 75 | True]
(push) ; 9
; [then-branch: 76 | True | live]
; [else-branch: 76 | False | live]
(push) ; 10
; [then-branch: 76 | True]
(push) ; 11
; [then-branch: 77 | True | live]
; [else-branch: 77 | False | live]
(push) ; 12
; [then-branch: 77 | True]
(pop) ; 12
(push) ; 12
; [else-branch: 77 | False]
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 76 | False]
(assert false)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 75 | False]
(assert false)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 78 | False | dead]
; [else-branch: 78 | True | live]
(push) ; 7
; [else-branch: 78 | True]
(pop) ; 7
(pop) ; 6
; [eval] !__t6
; [then-branch: 79 | False | dead]
; [else-branch: 79 | True | live]
(push) ; 6
; [else-branch: 79 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !(__t0 && (__t0 && (__t0 && __t1)))
; [eval] __t0 && (__t0 && (__t0 && __t1))
(push) ; 4
; [then-branch: 80 | True | live]
; [else-branch: 80 | False | live]
(push) ; 5
; [then-branch: 80 | True]
(push) ; 6
; [then-branch: 81 | True | live]
; [else-branch: 81 | False | live]
(push) ; 7
; [then-branch: 81 | True]
(push) ; 8
; [then-branch: 82 | True | live]
; [else-branch: 82 | False | live]
(push) ; 9
; [then-branch: 82 | True]
(pop) ; 9
(push) ; 9
; [else-branch: 82 | False]
(assert false)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 81 | False]
(assert false)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 80 | False]
(assert false)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [then-branch: 83 | False | dead]
; [else-branch: 83 | True | live]
(push) ; 4
; [else-branch: 83 | True]
(pop) ; 4
(pop) ; 3
; [eval] !__t1
; [then-branch: 84 | False | dead]
; [else-branch: 84 | True | live]
(push) ; 3
; [else-branch: 84 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- builtin$havoc_bool ----------
(declare-const ret@371@01 Bool)
(declare-const ret@372@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- builtin$havoc_int ----------
(declare-const ret@373@01 Int)
(declare-const ret@374@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- builtin$havoc_ref ----------
(declare-const ret@375@01 $Ref)
(declare-const ret@376@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
