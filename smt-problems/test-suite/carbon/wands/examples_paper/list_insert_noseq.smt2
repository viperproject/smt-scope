(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun val () T@U)
(declare-fun next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U Real T@U Real) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wandType () T@T)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun List (T@U) T@U)
(declare-fun PredicateType_ListType () T@T)
(declare-fun |head'| (T@U T@U) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |head#triggerStateless| (T@U) Int)
(declare-fun |List#trigger| (T@U T@U) Bool)
(declare-fun |List#everUsed| (T@U) Bool)
(declare-fun head (T@U T@U) Int)
(declare-fun |List#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun |wand#ft| (T@U Real T@U Real) T@U)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |wand#sm| (T@U Real T@U Real) T@U)
(declare-fun FullPerm () Real)
(declare-fun |head#frame| (T@U T@U) Int)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type val) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated val next)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val@@0 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val@@0) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val@@0) x0 x1) val@@0)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@1 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@1) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@2 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@2) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@3 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@3) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@18 T@U) (arg1@@4 Real) (arg2@@1 T@U) (arg3@@0 Real) ) (! (= (type (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@18 arg1@@4 arg2@@1 arg3@@0))
))))
(assert (forall ((arg1@@5 T@U) (arg2@@2 Real) (arg3@@1 T@U) (arg4 Real) ) (!  (=> (and (= (type arg1@@5) RefType) (= (type arg3@@1) RefType)) (= (getPredWandId (wand arg1@@5 arg2@@2 arg3@@1 arg4)) 1))
 :qid |stdinbpl.206:15|
 :skolemid |27|
 :pattern ( (wand arg1@@5 arg2@@2 arg3@@1 arg4))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@19 T@T) (arg1@@6 T@T) ) (! (= (Ctor (MapType1Type arg0@@19 arg1@@6)) 11)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@20 T@T) (arg1@@7 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@20 arg1@@7)) arg0@@20)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@20 arg1@@7))
))) (forall ((arg0@@21 T@T) (arg1@@8 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@21 arg1@@8)) arg1@@8)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@21 arg1@@8))
))) (forall ((arg0@@22 T@U) (arg1@@9 T@U) (arg2@@3 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@22))))
(= (type (MapType1Select arg0@@22 arg1@@9 arg2@@3)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@22 arg1@@9 arg2@@3))
))) (forall ((arg0@@23 T@U) (arg1@@10 T@U) (arg2@@4 T@U) (arg3@@2 T@U) ) (! (let ((aVar1@@0 (type arg3@@2)))
(let ((aVar0@@0 (type arg1@@10)))
(= (type (MapType1Store arg0@@23 arg1@@10 arg2@@4 arg3@@2)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@23 arg1@@10 arg2@@4 arg3@@2))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@4 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@4) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@4) x0@@3 x1@@3) val@@4)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@5 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@5) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@6 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@6) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@7 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@7) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 12) (= (type null) RefType)) (forall ((arg0@@24 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@24))))
(= (type (PredicateMaskField arg0@@24)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@25 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@25))))
(= (type (WandMaskField arg0@@25)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@25))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_ListType) 13) (forall ((arg0@@26 T@U) ) (! (= (type (List arg0@@26)) (FieldType PredicateType_ListType FrameTypeType))
 :qid |funType:List|
 :pattern ( (List arg0@@26))
))))
(assert (forall ((xs T@U) ) (!  (=> (= (type xs) RefType) (IsPredicateField (List xs)))
 :qid |stdinbpl.347:15|
 :skolemid |35|
 :pattern ( (List xs))
)))
(assert (forall ((Heap@@2 T@U) (xs@@0 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type xs@@0) RefType)) (dummyFunction (int_2_U (|head#triggerStateless| xs@@0))))
 :qid |stdinbpl.237:15|
 :skolemid |30|
 :pattern ( (|head'| Heap@@2 xs@@0))
)))
(assert (forall ((Heap@@3 T@U) (xs@@1 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType0Type RefType)) (= (type xs@@1) RefType)) (|List#everUsed| (List xs@@1)))
 :qid |stdinbpl.366:15|
 :skolemid |39|
 :pattern ( (|List#trigger| Heap@@3 (List xs@@1)))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@4 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@5 T@U) (xs@@2 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType0Type RefType)) (= (type xs@@2) RefType)) (and (= (head Heap@@5 xs@@2) (|head'| Heap@@5 xs@@2)) (dummyFunction (int_2_U (|head#triggerStateless| xs@@2)))))
 :qid |stdinbpl.233:15|
 :skolemid |29|
 :pattern ( (head Heap@@5 xs@@2))
)))
(assert (forall ((xs@@3 T@U) (xs2 T@U) ) (!  (=> (and (and (= (type xs@@3) RefType) (= (type xs2) RefType)) (= (List xs@@3) (List xs2))) (= xs@@3 xs2))
 :qid |stdinbpl.357:15|
 :skolemid |37|
 :pattern ( (List xs@@3) (List xs2))
)))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (|List#sm| arg0@@27)) (FieldType PredicateType_ListType (MapType1Type RefType boolType)))
 :qid |funType:List#sm|
 :pattern ( (|List#sm| arg0@@27))
)))
(assert (forall ((xs@@4 T@U) (xs2@@0 T@U) ) (!  (=> (and (and (= (type xs@@4) RefType) (= (type xs2@@0) RefType)) (= (|List#sm| xs@@4) (|List#sm| xs2@@0))) (= xs@@4 xs2@@0))
 :qid |stdinbpl.361:15|
 :skolemid |38|
 :pattern ( (|List#sm| xs@@4) (|List#sm| xs2@@0))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@6 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.173:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField val)))
(assert  (not (IsWandField val)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@7 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg1@@11 T@U) (arg2@@5 Real) (arg3@@3 T@U) (arg4@@0 Real) ) (!  (=> (and (= (type arg1@@11) RefType) (= (type arg3@@3) RefType)) (IsWandField (wand arg1@@11 arg2@@5 arg3@@3 arg4@@0)))
 :qid |stdinbpl.186:15|
 :skolemid |22|
 :pattern ( (wand arg1@@11 arg2@@5 arg3@@3 arg4@@0))
)))
(assert (forall ((arg0@@28 T@U) (arg1@@12 Real) (arg2@@6 T@U) (arg3@@4 Real) ) (! (= (type (|wand#ft| arg0@@28 arg1@@12 arg2@@6 arg3@@4)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@28 arg1@@12 arg2@@6 arg3@@4))
)))
(assert (forall ((arg1@@13 T@U) (arg2@@7 Real) (arg3@@5 T@U) (arg4@@1 Real) ) (!  (=> (and (= (type arg1@@13) RefType) (= (type arg3@@5) RefType)) (IsWandField (|wand#ft| arg1@@13 arg2@@7 arg3@@5 arg4@@1)))
 :qid |stdinbpl.190:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@13 arg2@@7 arg3@@5 arg4@@1))
)))
(assert  (and (forall ((arg0@@29 Real) (arg1@@14 T@U) ) (! (= (type (ConditionalFrame arg0@@29 arg1@@14)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@29 arg1@@14))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.161:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((arg1@@15 T@U) (arg2@@8 Real) (arg3@@6 T@U) (arg4@@2 Real) ) (!  (=> (and (= (type arg1@@15) RefType) (= (type arg3@@6) RefType)) (not (IsPredicateField (wand arg1@@15 arg2@@8 arg3@@6 arg4@@2))))
 :qid |stdinbpl.194:15|
 :skolemid |24|
 :pattern ( (wand arg1@@15 arg2@@8 arg3@@6 arg4@@2))
)))
(assert (forall ((arg1@@16 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@3 Real) ) (!  (=> (and (= (type arg1@@16) RefType) (= (type arg3@@7) RefType)) (not (IsPredicateField (|wand#ft| arg1@@16 arg2@@9 arg3@@7 arg4@@3))))
 :qid |stdinbpl.198:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@16 arg2@@9 arg3@@7 arg4@@3))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((arg0@@30 T@U) (arg1@@17 Real) (arg2@@10 T@U) (arg3@@8 Real) ) (! (= (type (|wand#sm| arg0@@30 arg1@@17 arg2@@10 arg3@@8)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@30 arg1@@17 arg2@@10 arg3@@8))
)))
(assert (forall ((arg1@@18 T@U) (arg2@@11 Real) (arg3@@9 T@U) (arg4@@4 Real) ) (!  (=> (and (= (type arg1@@18) RefType) (= (type arg3@@9) RefType)) (= (|wand#sm| arg1@@18 arg2@@11 arg3@@9 arg4@@4) (WandMaskField (|wand#ft| arg1@@18 arg2@@11 arg3@@9 arg4@@4))))
 :qid |stdinbpl.202:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@18 arg2@@11 arg3@@9 arg4@@4)))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@8 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@8 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@9 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@9 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((xs@@5 T@U) ) (!  (=> (= (type xs@@5) RefType) (= (getPredWandId (List xs@@5)) 0))
 :qid |stdinbpl.351:15|
 :skolemid |36|
 :pattern ( (List xs@@5))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@10 T@U) (Mask@@9 T@U) (xs@@6 T@U) ) (!  (=> (and (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type xs@@6) RefType)) (state Heap@@10 Mask@@9)) (= (|head'| Heap@@10 xs@@6) (|head#frame| (MapType0Select Heap@@10 null (List xs@@6)) xs@@6)))
 :qid |stdinbpl.250:15|
 :skolemid |32|
 :pattern ( (state Heap@@10 Mask@@9) (|head'| Heap@@10 xs@@6))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@11 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@11) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@11 o $allocated))) (U_2_bool (MapType0Select Heap@@11 (MapType0Select Heap@@11 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@11 o f))
)))
(assert (forall ((xs@@7 T@U) ) (!  (=> (= (type xs@@7) RefType) (= (PredicateMaskField (List xs@@7)) (|List#sm| xs@@7)))
 :qid |stdinbpl.343:15|
 :skolemid |34|
 :pattern ( (PredicateMaskField (List xs@@7)))
)))
(assert (forall ((Heap@@12 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@12 (MapType0Store Heap@@12 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@12 o@@0 f_3 v))
)))
(assert (forall ((Heap@@13 T@U) (Mask@@10 T@U) (xs@@8 T@U) ) (!  (=> (and (and (and (= (type Heap@@13) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type xs@@8) RefType)) (and (state Heap@@13 Mask@@10) (< AssumeFunctionsAbove 0))) (= (head Heap@@13 xs@@8) (U_2_int (MapType0Select Heap@@13 xs@@8 val))))
 :qid |stdinbpl.243:15|
 :skolemid |31|
 :pattern ( (state Heap@@13 Mask@@10) (head Heap@@13 xs@@8))
 :pattern ( (state Heap@@13 Mask@@10) (|head#triggerStateless| xs@@8) (|List#trigger| Heap@@13 (List xs@@8)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.168:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@19 T@U) (arg2@@12 Real) (arg3@@10 T@U) (arg4@@5 Real) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) ) (!  (=> (and (and (and (and (= (type arg1@@19) RefType) (= (type arg3@@10) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (wand arg1@@19 arg2@@12 arg3@@10 arg4@@5) (wand arg1_2 arg2_2 arg3_2 arg4_2))) (and (= arg1@@19 arg1_2) (and (= arg2@@12 arg2_2) (and (= arg3@@10 arg3_2) (= arg4@@5 arg4_2)))))
 :qid |stdinbpl.210:15|
 :skolemid |28|
 :pattern ( (wand arg1@@19 arg2@@12 arg3@@10 arg4@@5) (wand arg1_2 arg2_2 arg3_2 arg4_2))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun nxt@1 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun crt@0 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun xs@@9 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun nxt@2 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun b_5@32 () Bool)
(declare-fun b_15@6 () Bool)
(declare-fun neededTransfer@27 () Real)
(declare-fun Used_6Mask@3 () T@U)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_16@0 () Bool)
(declare-fun b_16@1 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun b_16@2 () Bool)
(declare-fun Ops_3Mask () T@U)
(declare-fun b_16@3 () Bool)
(declare-fun Ops_3Heap@9 () T@U)
(declare-fun Used_6Heap@0 () T@U)
(declare-fun b_16@4 () Bool)
(declare-fun b_5@33 () Bool)
(declare-fun Mask@61 () T@U)
(declare-fun takeTransfer@13 () Real)
(declare-fun Mask@59 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun b_15@3 () Bool)
(declare-fun Used_6Mask@1 () T@U)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_6Mask@2 () T@U)
(declare-fun b_15@4 () Bool)
(declare-fun TempMask@7 () T@U)
(declare-fun b_15@5 () Bool)
(declare-fun Mask@60 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun b_15@0 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun Used_6Mask@0 () T@U)
(declare-fun b_15@1 () Bool)
(declare-fun TempMask@6 () T@U)
(declare-fun b_15@2 () Bool)
(declare-fun Ops_3Mask@17 () T@U)
(declare-fun Ops_3Mask@16 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun b_15 () Bool)
(declare-fun b_5@23 () Bool)
(declare-fun b_13@6 () Bool)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_5Mask@3 () T@U)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_14@0 () Bool)
(declare-fun b_14@1 () Bool)
(declare-fun Result_6Heap () T@U)
(declare-fun Result_6Mask () T@U)
(declare-fun b_14@2 () Bool)
(declare-fun Ops_3Mask@14 () T@U)
(declare-fun b_14@3 () Bool)
(declare-fun Ops_3Heap@8 () T@U)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun b_14@4 () Bool)
(declare-fun b_5@24 () Bool)
(declare-fun b_5@25 () Bool)
(declare-fun b_5@26 () Bool)
(declare-fun b_5@27 () Bool)
(declare-fun Ops_3Mask@15 () T@U)
(declare-fun b_5@28 () Bool)
(declare-fun b_5@29 () Bool)
(declare-fun ExhaleHeap@3 () T@U)
(declare-fun b_5@30 () Bool)
(declare-fun b_5@31 () Bool)
(declare-fun Mask@58 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun takeTransfer@11 () Real)
(declare-fun Heap@31 () T@U)
(declare-fun b_13@3 () Bool)
(declare-fun Mask@56 () T@U)
(declare-fun Used_5Mask@1 () T@U)
(declare-fun neededTransfer@21 () Real)
(declare-fun neededTransfer@22 () Real)
(declare-fun Used_5Mask@2 () T@U)
(declare-fun b_13@4 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_13@5 () Bool)
(declare-fun Mask@57 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun b_13@0 () Bool)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_5Mask@0 () T@U)
(declare-fun b_13@1 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_13@2 () Bool)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun b_5@19 () Bool)
(declare-fun b_11@4 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_12@0 () Bool)
(declare-fun b_12@1 () Bool)
(declare-fun Result_5Heap () T@U)
(declare-fun Result_5Mask () T@U)
(declare-fun b_12@2 () Bool)
(declare-fun b_12@3 () Bool)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_12@4 () Bool)
(declare-fun b_5@20 () Bool)
(declare-fun b_5@21 () Bool)
(declare-fun b_5@22 () Bool)
(declare-fun b_13 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun Mask@54 () T@U)
(declare-fun neededTransfer@17 () Real)
(declare-fun b_11@2 () Bool)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_11@3 () Bool)
(declare-fun Mask@55 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun b_11@0 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_11@1 () Bool)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_11 () Bool)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun b_5@18 () Bool)
(declare-fun b_5@17 () Bool)
(declare-fun Heap@30 () T@U)
(declare-fun Mask@53 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun b_10@0 () Bool)
(declare-fun b_5@14 () Bool)
(declare-fun b_6@19 () Bool)
(declare-fun b_10@1 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun Used_3Mask@12 () T@U)
(declare-fun b_10@3 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun b_5@15 () Bool)
(declare-fun b_5@16 () Bool)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun b_5@10 () Bool)
(declare-fun b_6@18 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_3Mask@11 () T@U)
(declare-fun arg_1@0 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_9@0 () Bool)
(declare-fun b_9@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun b_9@3 () Bool)
(declare-fun b_9@4 () Bool)
(declare-fun b_5@11 () Bool)
(declare-fun b_5@12 () Bool)
(declare-fun b_5@13 () Bool)
(declare-fun Mask@52 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun takeTransfer@7 () Real)
(declare-fun b_6@15 () Bool)
(declare-fun Used_3Mask@9 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_3Mask@10 () T@U)
(declare-fun b_6@16 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_6@17 () Bool)
(declare-fun Mask@51 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun Used_3Mask@7 () T@U)
(declare-fun b_6@12 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_3Mask@8 () T@U)
(declare-fun b_6@13 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_6@14 () Bool)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_5@7 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_8@0 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun b_8@2 () Bool)
(declare-fun b_8@3 () Bool)
(declare-fun b_8@4 () Bool)
(declare-fun b_5@8 () Bool)
(declare-fun b_5@9 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun b_6@9 () Bool)
(declare-fun Mask@48 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Used_3Mask@5 () T@U)
(declare-fun neededTransfer@9 () Real)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_3Mask@6 () T@U)
(declare-fun b_6@10 () Bool)
(declare-fun b_6@11 () Bool)
(declare-fun Mask@49 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Used_3Mask@3 () T@U)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun b_6@6 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_3Mask@4 () T@U)
(declare-fun b_6@7 () Bool)
(declare-fun b_6@8 () Bool)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_5@4 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun b_7@4 () Bool)
(declare-fun b_5@5 () Bool)
(declare-fun b_5@6 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun b_6@3 () Bool)
(declare-fun Heap@23 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Used_3Mask@1 () T@U)
(declare-fun neededTransfer@5 () Real)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_3Mask@2 () T@U)
(declare-fun b_6@4 () Bool)
(declare-fun b_6@5 () Bool)
(declare-fun Mask@47 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_6@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_3Mask@0 () T@U)
(declare-fun b_6@1 () Bool)
(declare-fun b_6@2 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_6 () Bool)
(declare-fun b_5@3 () Bool)
(declare-fun b_5@2 () Bool)
(declare-fun b_5@0 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_5@1 () Bool)
(declare-fun i@1 () Int)
(declare-fun i@0 () Int)
(declare-fun b_5 () Bool)
(declare-fun b_4@0 () Bool)
(declare-fun b_4 () Bool)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun x@@8 () Int)
(declare-fun oldCrt () T@U)
(declare-fun prev () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun nxt@0 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun b_1_1@4 () Bool)
(declare-fun b_2_1@6 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_3@2 () Bool)
(declare-fun Ops_1Mask () T@U)
(declare-fun b_3@3 () Bool)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_3@4 () Bool)
(declare-fun b_1_1@5 () Bool)
(declare-fun Mask@7 () T@U)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@5 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@6 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_1_1@3 () Bool)
(declare-fun b_1_1@2 () Bool)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@1 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@@14 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun crt () T@U)
(declare-fun nxt () T@U)
(declare-fun node () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@0) (MapType1Type RefType realType)) (= (type xs@@9) RefType)) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type crt@0) RefType)) (= (type Heap@21) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type Heap@19) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@33) (MapType1Type RefType realType))) (forall ((arg0@@31 T@U) (arg1@@20 T@U) ) (! (= (type (CombineFrames arg0@@31 arg1@@20)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@31 arg1@@20))
))) (forall ((arg0@@32 T@U) ) (! (= (type (FrameFragment arg0@@32)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@32))
))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Heap@13) (MapType0Type RefType))) (= (type freshObj@0) RefType)) (= (type Heap@11) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type nxt@1) RefType)) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type nxt@2) RefType)) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Heap@36) (MapType0Type RefType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Used_6Mask@3) (MapType1Type RefType realType))) (= (type Result_7Heap) (MapType0Type RefType))) (= (type Result_7Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask) (MapType1Type RefType realType))) (= (type Ops_3Heap@9) (MapType0Type RefType))) (= (type Used_6Heap@0) (MapType0Type RefType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Used_6Mask@1) (MapType1Type RefType realType))) (= (type Used_6Mask@2) (MapType1Type RefType realType))) (= (type TempMask@7) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Used_6Mask@0) (MapType1Type RefType realType))) (= (type TempMask@6) (MapType1Type RefType realType))) (= (type Ops_3Mask@17) (MapType1Type RefType realType))) (= (type Ops_3Mask@16) (MapType1Type RefType realType))) (= (type Ops_3Heap@8) (MapType0Type RefType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Ops_3Mask@10) (MapType1Type RefType realType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Used_5Mask@3) (MapType1Type RefType realType))) (= (type Result_6Heap) (MapType0Type RefType))) (= (type Result_6Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@14) (MapType1Type RefType realType))) (= (type Used_5Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@15) (MapType1Type RefType realType))) (= (type ExhaleHeap@3) (MapType0Type RefType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Used_5Mask@1) (MapType1Type RefType realType))) (= (type Used_5Mask@2) (MapType1Type RefType realType))) (= (type TempMask@5) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Ops_3Mask@12) (MapType1Type RefType realType))) (= (type Used_5Mask@0) (MapType1Type RefType realType))) (= (type TempMask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@13) (MapType1Type RefType realType))) (= (type Used_4Mask@3) (MapType1Type RefType realType))) (= (type Result_5Heap) (MapType0Type RefType))) (= (type Result_5Mask) (MapType1Type RefType realType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Used_4Mask@1) (MapType1Type RefType realType))) (= (type Used_4Mask@2) (MapType1Type RefType realType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Used_4Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@11) (MapType1Type RefType realType))) (= (type Ops_3Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@1) (MapType1Type RefType realType))) (= (type Heap@23) (MapType0Type RefType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Ops_3Heap@7) (MapType0Type RefType))) (= (type Ops_3Mask@9) (MapType1Type RefType realType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Ops_3Heap@5) (MapType0Type RefType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Ops_3Heap@6) (MapType0Type RefType))) (= (type Ops_3Heap@4) (MapType0Type RefType))) (= (type Ops_3Heap@3) (MapType0Type RefType))) (= (type Ops_3Heap@1) (MapType0Type RefType))) (= (type Ops_3Heap@2) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@8) (MapType1Type RefType realType))) (= (type Used_3Mask@12) (MapType1Type RefType realType))) (= (type Used_3Heap@0) (MapType0Type RefType))) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Ops_3Mask@5) (MapType1Type RefType realType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Used_3Mask@7) (MapType1Type RefType realType))) (= (type Used_3Mask@11) (MapType1Type RefType realType))) (= (type arg_1@0) RefType)) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Ops_3Mask@7) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Used_3Mask@9) (MapType1Type RefType realType))) (= (type Used_3Mask@10) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Used_3Mask@8) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@6) (MapType1Type RefType realType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Used_3Mask@5) (MapType1Type RefType realType))) (= (type Used_3Mask@6) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Used_3Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@3) (MapType1Type RefType realType))) (= (type Used_3Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@4) (MapType1Type RefType realType))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Used_3Mask@1) (MapType1Type RefType realType))) (= (type Used_3Mask@2) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Used_3Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@0) (MapType1Type RefType realType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Heap@22) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@41) (MapType1Type RefType realType))) (= (type oldCrt) RefType)) (= (type prev) RefType)) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type nxt@0) RefType)) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Ops_1Mask) (MapType1Type RefType realType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type UsedHeap@0) (MapType0Type RefType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@@14) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type crt) RefType)) (= (type nxt) RefType)) (= (type node) RefType)))
(set-info :boogie-vc-id insert)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 278) (let ((anon204_Else_correct true))
(let ((anon204_Then_correct true))
(let ((anon37_correct  (=> (state ExhaleHeap@0 Mask@70) (and (=> (= (ControlFlow 0 224) 222) anon204_Then_correct) (=> (= (ControlFlow 0 224) 223) anon204_Else_correct)))))
(let ((anon203_Else_correct  (=> (= nxt@1 null) (=> (and (= Mask@70 Mask@15) (= (ControlFlow 0 226) 224)) anon37_correct))))
(let ((anon203_Then_correct  (=> (not (= nxt@1 null)) (=> (and (and (= Mask@69 (MapType1Store Mask@15 null (List nxt@1) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (List nxt@1))) FullPerm)))) (state ExhaleHeap@0 Mask@69)) (and (= Mask@70 Mask@69) (= (ControlFlow 0 225) 224))) anon37_correct))))
(let ((anon202_Then_correct  (=> (not (= crt@0 null)) (=> (and (= Mask@14 (MapType1Store Mask@13 crt@0 val (real_2_U (+ (U_2_real (MapType1Select Mask@13 crt@0 val)) FullPerm)))) (state ExhaleHeap@0 Mask@14)) (=> (and (and (not (= crt@0 null)) (= Mask@15 (MapType1Store Mask@14 crt@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@14 crt@0 next)) FullPerm))))) (and (state ExhaleHeap@0 Mask@15) (state ExhaleHeap@0 Mask@15))) (and (=> (= (ControlFlow 0 227) (- 0 228)) (HasDirectPerm Mask@15 crt@0 next)) (=> (HasDirectPerm Mask@15 crt@0 next) (=> (and (= nxt@1 (MapType0Select ExhaleHeap@0 crt@0 next)) (state ExhaleHeap@0 Mask@15)) (and (=> (= (ControlFlow 0 227) 225) anon203_Then_correct) (=> (= (ControlFlow 0 227) 226) anon203_Else_correct))))))))))
(let ((anon47_correct true))
(let ((anon209_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 216) 213)) anon47_correct)))
(let ((anon209_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 214) (- 0 215)) (<= FullPerm (U_2_real (MapType1Select Mask@41 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 null (List nxt@1)))) (=> (= (ControlFlow 0 214) 213) anon47_correct))))))
(let ((anon241_Then_correct true))
(let ((anon153_correct  (=> (= (ControlFlow 0 65) (- 0 64)) (<= FullPerm (U_2_real (MapType1Select Mask@66 null (wand nxt@1 FullPerm xs@@9 FullPerm)))))))
(let ((anon152_correct  (=> (= Mask@65 (MapType1Store Mask@64 null (List nxt@2) (real_2_U (- (U_2_real (MapType1Select Mask@64 null (List nxt@2))) FullPerm)))) (=> (and (= Mask@66 Mask@65) (= (ControlFlow 0 67) 65)) anon153_correct))))
(let ((anon263_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 70) 67)) anon152_correct)))
(let ((anon263_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 68) (- 0 69)) (<= FullPerm (U_2_real (MapType1Select Mask@64 null (List nxt@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@64 null (List nxt@2)))) (=> (= (ControlFlow 0 68) 67) anon152_correct))))))
(let ((anon262_Then_correct  (=> (not (= nxt@2 null)) (and (=> (= (ControlFlow 0 71) 68) anon263_Then_correct) (=> (= (ControlFlow 0 71) 70) anon263_Else_correct)))))
(let ((anon262_Else_correct  (=> (= nxt@2 null) (=> (and (= Mask@66 Mask@64) (= (ControlFlow 0 66) 65)) anon153_correct))))
(let ((anon149_correct  (=> (= Mask@64 (MapType1Store Mask@63 nxt@1 next (real_2_U (- (U_2_real (MapType1Select Mask@63 nxt@1 next)) FullPerm)))) (and (=> (= (ControlFlow 0 72) (- 0 73)) (= nxt@2 (MapType0Select Heap@36 nxt@1 next))) (=> (= nxt@2 (MapType0Select Heap@36 nxt@1 next)) (and (=> (= (ControlFlow 0 72) 71) anon262_Then_correct) (=> (= (ControlFlow 0 72) 66) anon262_Else_correct)))))))
(let ((anon261_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 76) 72)) anon149_correct)))
(let ((anon261_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 74) (- 0 75)) (<= FullPerm (U_2_real (MapType1Select Mask@63 nxt@1 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@63 nxt@1 next))) (=> (= (ControlFlow 0 74) 72) anon149_correct))))))
(let ((anon147_correct  (=> (= Mask@63 (MapType1Store Mask@62 nxt@1 val (real_2_U (- (U_2_real (MapType1Select Mask@62 nxt@1 val)) FullPerm)))) (and (=> (= (ControlFlow 0 77) 74) anon261_Then_correct) (=> (= (ControlFlow 0 77) 76) anon261_Else_correct)))))
(let ((anon260_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 80) 77)) anon147_correct)))
(let ((anon260_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 78) (- 0 79)) (<= FullPerm (U_2_real (MapType1Select Mask@62 nxt@1 val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@62 nxt@1 val))) (=> (= (ControlFlow 0 78) 77) anon147_correct))))))
(let ((anon145_correct  (and (=> (= (ControlFlow 0 81) (- 0 82)) (=> (and (and b_5@32 b_5@32) b_15@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_6Mask@3 null (List xs@@9))) initNeededTransfer@6)))) (=> (=> (and (and b_5@32 b_5@32) b_15@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_6Mask@3 null (List xs@@9))) initNeededTransfer@6))) (=> (and (= b_16@0  (and b_5@32 b_15@6)) (= b_16@1  (and b_16@0 (state Result_7Heap Result_7Mask)))) (=> (and (and (and (= b_16@2  (and b_16@1 (sumMask Result_7Mask Ops_3Mask Used_6Mask@3))) (= b_16@3  (and (and b_16@2 (IdenticalOnKnownLocations Ops_3Heap@9 Result_7Heap Ops_3Mask)) (IdenticalOnKnownLocations Used_6Heap@0 Result_7Heap Used_6Mask@3)))) (and (= b_16@4  (and b_16@3 (state Result_7Heap Result_7Mask))) (= b_5@33  (and b_5@32 b_16@4)))) (and (and (= Mask@62 (MapType1Store Mask@61 null (wand nxt@1 FullPerm xs@@9 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@61 null (wand nxt@1 FullPerm xs@@9 FullPerm))) FullPerm)))) (state Heap@36 Mask@62)) (and (state Heap@36 Mask@62) (state Heap@36 Mask@62)))) (and (=> (= (ControlFlow 0 81) 78) anon260_Then_correct) (=> (= (ControlFlow 0 81) 80) anon260_Else_correct))))))))
(let ((anon259_Else_correct  (=> (>= 0.0 takeTransfer@13) (=> (and (= Mask@61 Mask@59) (= Heap@36 Heap@34)) (=> (and (and (= neededTransfer@27 neededTransfer@25) (= b_15@6 b_15@3)) (and (= Used_6Mask@3 Used_6Mask@1) (= (ControlFlow 0 85) 81))) anon145_correct)))))
(let ((anon259_Then_correct  (=> (> takeTransfer@13 0.0) (=> (and (= neededTransfer@26 (- neededTransfer@25 takeTransfer@13)) (= Used_6Mask@2 (MapType1Store Used_6Mask@1 null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select Used_6Mask@1 null (List xs@@9))) takeTransfer@13))))) (=> (and (and (= b_15@4  (and b_15@3 (state Used_6Heap@0 Used_6Mask@2))) (= TempMask@7 (MapType1Store ZeroMask null (List xs@@9) (real_2_U FullPerm)))) (and (= b_15@5  (and b_15@4 (IdenticalOnKnownLocations Heap@34 Used_6Heap@0 TempMask@7))) (= Mask@60 (MapType1Store Mask@59 null (List xs@@9) (real_2_U (- (U_2_real (MapType1Select Mask@59 null (List xs@@9))) takeTransfer@13)))))) (=> (and (and (and (forall ((o_8 T@U) (f_12 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_12))))
(let ((A@@12 (FieldTypeInv0 (type f_12))))
 (=> (and (and (= (type o_8) RefType) (= (type f_12) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@34 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm)) o_8 f_12)) (U_2_bool (MapType1Select (MapType0Select Heap@34 null (|List#sm| xs@@9)) o_8 f_12)))) (U_2_bool (MapType1Select newPMask@6 o_8 f_12)))))
 :qid |stdinbpl.1430:43|
 :skolemid |44|
 :pattern ( (MapType1Select newPMask@6 o_8 f_12))
)) (= Heap@35 (MapType0Store Heap@34 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm) newPMask@6))) (and (= Mask@61 Mask@60) (= Heap@36 Heap@35))) (and (and (= neededTransfer@27 neededTransfer@26) (= b_15@6 b_15@5)) (and (= Used_6Mask@3 Used_6Mask@2) (= (ControlFlow 0 84) 81)))) anon145_correct))))))
(let ((anon258_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@25) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 87) 84) anon259_Then_correct) (=> (= (ControlFlow 0 87) 85) anon259_Else_correct)))))
(let ((anon258_Then_correct  (=> (and (<= neededTransfer@25 maskTransfer@13) (= takeTransfer@13 neededTransfer@25)) (and (=> (= (ControlFlow 0 86) 84) anon259_Then_correct) (=> (= (ControlFlow 0 86) 85) anon259_Else_correct)))))
(let ((anon257_Then_correct  (=> (and (and (and (and (and b_5@32 b_5@32) b_15@3) true) (> neededTransfer@25 0.0)) (= maskTransfer@13 (U_2_real (MapType1Select Mask@59 null (List xs@@9))))) (and (=> (= (ControlFlow 0 88) 86) anon258_Then_correct) (=> (= (ControlFlow 0 88) 87) anon258_Else_correct)))))
(let ((anon257_Else_correct  (=> (not (and (and (and (and b_5@32 b_5@32) b_15@3) true) (> neededTransfer@25 0.0))) (=> (and (= Mask@61 Mask@59) (= Heap@36 Heap@34)) (=> (and (and (= neededTransfer@27 neededTransfer@25) (= b_15@6 b_15@3)) (and (= Used_6Mask@3 Used_6Mask@1) (= (ControlFlow 0 83) 81))) anon145_correct)))))
(let ((anon256_Else_correct  (=> (and (and (>= 0.0 takeTransfer@12) (= Used_6Mask@1 ZeroMask)) (and (= b_15@3 b_15@0) (= neededTransfer@25 FullPerm))) (and (=> (= (ControlFlow 0 91) 88) anon257_Then_correct) (=> (= (ControlFlow 0 91) 83) anon257_Else_correct)))))
(let ((anon256_Then_correct  (=> (and (> takeTransfer@12 0.0) (= neededTransfer@24 (- FullPerm takeTransfer@12))) (=> (and (and (and (= Used_6Mask@0 (MapType1Store ZeroMask null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List xs@@9))) takeTransfer@12)))) (= b_15@1  (and b_15@0 (state Used_6Heap@0 Used_6Mask@0)))) (and (= TempMask@6 (MapType1Store ZeroMask null (List xs@@9) (real_2_U FullPerm))) (= b_15@2  (and b_15@1 (IdenticalOnKnownLocations Ops_3Heap@9 Used_6Heap@0 TempMask@6))))) (and (and (= Ops_3Mask@17 (MapType1Store Ops_3Mask@16 null (List xs@@9) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@16 null (List xs@@9))) takeTransfer@12)))) (= Used_6Mask@1 Used_6Mask@0)) (and (= b_15@3 b_15@2) (= neededTransfer@25 neededTransfer@24)))) (and (=> (= (ControlFlow 0 90) 88) anon257_Then_correct) (=> (= (ControlFlow 0 90) 83) anon257_Else_correct))))))
(let ((anon255_Else_correct  (=> (and (< maskTransfer@12 FullPerm) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 93) 90) anon256_Then_correct) (=> (= (ControlFlow 0 93) 91) anon256_Else_correct)))))
(let ((anon255_Then_correct  (=> (and (<= FullPerm maskTransfer@12) (= takeTransfer@12 FullPerm)) (and (=> (= (ControlFlow 0 92) 90) anon256_Then_correct) (=> (= (ControlFlow 0 92) 91) anon256_Else_correct)))))
(let ((anon254_Then_correct  (=> (and (and (and (and (and b_5@32 b_5@32) b_15@0) true) (> FullPerm 0.0)) (= maskTransfer@12 (U_2_real (MapType1Select Ops_3Mask@16 null (List xs@@9))))) (and (=> (= (ControlFlow 0 94) 92) anon255_Then_correct) (=> (= (ControlFlow 0 94) 93) anon255_Else_correct)))))
(let ((anon254_Else_correct  (=> (and (and (not (and (and (and (and b_5@32 b_5@32) b_15@0) true) (> FullPerm 0.0))) (= Used_6Mask@1 ZeroMask)) (and (= b_15@3 b_15@0) (= neededTransfer@25 FullPerm))) (and (=> (= (ControlFlow 0 89) 88) anon257_Then_correct) (=> (= (ControlFlow 0 89) 83) anon257_Else_correct)))))
(let ((anon133_correct  (=> (and (= b_15@0  (and b_15 (state Used_6Heap@0 ZeroMask))) (= initNeededTransfer@6 (+ (U_2_real (MapType1Select ZeroMask null (List xs@@9))) FullPerm))) (and (=> (= (ControlFlow 0 95) (- 0 96)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 95) 94) anon254_Then_correct) (=> (= (ControlFlow 0 95) 89) anon254_Else_correct)))))))
(let ((anon132_correct  (and (=> (= (ControlFlow 0 98) (- 0 99)) (=> (and b_5@23 b_13@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (List crt@0))) initNeededTransfer@5)))) (=> (=> (and b_5@23 b_13@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (List crt@0))) initNeededTransfer@5))) (=> (= b_14@0  (and b_5@23 b_13@6)) (=> (and (and (= b_14@1  (and b_14@0 (state Result_6Heap Result_6Mask))) (= b_14@2  (and b_14@1 (sumMask Result_6Mask Ops_3Mask@14 Used_5Mask@3)))) (and (= b_14@3  (and (and b_14@2 (IdenticalOnKnownLocations Ops_3Heap@8 Result_6Heap Ops_3Mask@14)) (IdenticalOnKnownLocations Used_5Heap@0 Result_6Heap Used_5Mask@3))) (= b_14@4  (and b_14@3 (state Result_6Heap Result_6Mask))))) (=> (and (and (and (and (= b_5@24  (and b_5@23 b_14@4)) (= b_5@25  (and b_5@24 b_13@6))) (and (= b_5@26  (and b_5@25 (= Used_5Heap@0 Ops_3Heap@8))) (= b_5@27  (and b_5@26 (state Ops_3Heap@8 Ops_3Mask@14))))) (and (and (= Ops_3Mask@15 (MapType1Store Ops_3Mask@14 null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@14 null (List xs@@9))) FullPerm)))) (= b_5@28  (and b_5@27 (state Ops_3Heap@8 Ops_3Mask@15)))) (and (= b_5@29  (and b_5@28 (state Ops_3Heap@8 Ops_3Mask@15))) (IdenticalOnKnownLocations Ops_3Heap@8 ExhaleHeap@3 Ops_3Mask@15)))) (and (and (and (= b_5@30  (and b_5@29 (state ExhaleHeap@3 Ops_3Mask@15))) (= b_5@31  (and b_5@30 (state ExhaleHeap@3 Ops_3Mask@15)))) (and (= Ops_3Heap@9 ExhaleHeap@3) (= b_5@32 b_5@31))) (and (and (= Mask@59 Mask@58) (= Ops_3Mask@16 Ops_3Mask@15)) (and (= Heap@34 Heap@33) (= (ControlFlow 0 98) 95))))) anon133_correct)))))))
(let ((anon253_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= Heap@33 Heap@31) (= b_13@6 b_13@3)) (=> (and (and (= Mask@58 Mask@56) (= Used_5Mask@3 Used_5Mask@1)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 102) 98))) anon132_correct)))))
(let ((anon253_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (= neededTransfer@22 (- neededTransfer@21 takeTransfer@11)) (= Used_5Mask@2 (MapType1Store Used_5Mask@1 null (List crt@0) (real_2_U (+ (U_2_real (MapType1Select Used_5Mask@1 null (List crt@0))) takeTransfer@11))))) (=> (and (and (= b_13@4  (and b_13@3 (state Used_5Heap@0 Used_5Mask@2))) (= TempMask@5 (MapType1Store ZeroMask null (List crt@0) (real_2_U FullPerm)))) (and (= b_13@5  (and b_13@4 (IdenticalOnKnownLocations Heap@31 Used_5Heap@0 TempMask@5))) (= Mask@57 (MapType1Store Mask@56 null (List crt@0) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (List crt@0))) takeTransfer@11)))))) (=> (and (and (and (forall ((o_7 T@U) (f_11 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_11))))
(let ((A@@13 (FieldTypeInv0 (type f_11))))
 (=> (and (and (= (type o_7) RefType) (= (type f_11) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm)) o_7 f_11)) (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|List#sm| crt@0)) o_7 f_11)))) (U_2_bool (MapType1Select newPMask@5 o_7 f_11)))))
 :qid |stdinbpl.1345:49|
 :skolemid |43|
 :pattern ( (MapType1Select newPMask@5 o_7 f_11))
)) (= Heap@32 (MapType0Store Heap@31 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm) newPMask@5))) (and (= Heap@33 Heap@32) (= b_13@6 b_13@5))) (and (and (= Mask@58 Mask@57) (= Used_5Mask@3 Used_5Mask@2)) (and (= neededTransfer@23 neededTransfer@22) (= (ControlFlow 0 101) 98)))) anon132_correct))))))
(let ((anon252_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@21) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 104) 101) anon253_Then_correct) (=> (= (ControlFlow 0 104) 102) anon253_Else_correct)))))
(let ((anon252_Then_correct  (=> (and (<= neededTransfer@21 maskTransfer@11) (= takeTransfer@11 neededTransfer@21)) (and (=> (= (ControlFlow 0 103) 101) anon253_Then_correct) (=> (= (ControlFlow 0 103) 102) anon253_Else_correct)))))
(let ((anon251_Then_correct  (=> (and (and (and (and b_5@23 b_13@3) true) (> neededTransfer@21 0.0)) (= maskTransfer@11 (U_2_real (MapType1Select Mask@56 null (List crt@0))))) (and (=> (= (ControlFlow 0 105) 103) anon252_Then_correct) (=> (= (ControlFlow 0 105) 104) anon252_Else_correct)))))
(let ((anon251_Else_correct  (=> (not (and (and (and b_5@23 b_13@3) true) (> neededTransfer@21 0.0))) (=> (and (= Heap@33 Heap@31) (= b_13@6 b_13@3)) (=> (and (and (= Mask@58 Mask@56) (= Used_5Mask@3 Used_5Mask@1)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 100) 98))) anon132_correct)))))
(let ((anon250_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (and (= neededTransfer@21 FullPerm) (= Ops_3Mask@14 Ops_3Mask@12)) (and (= Used_5Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 108) 105) anon251_Then_correct) (=> (= (ControlFlow 0 108) 100) anon251_Else_correct))))))
(let ((anon250_Then_correct  (=> (> takeTransfer@10 0.0) (=> (and (= neededTransfer@20 (- FullPerm takeTransfer@10)) (= Used_5Mask@0 (MapType1Store ZeroMask null (List crt@0) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List crt@0))) takeTransfer@10))))) (=> (and (and (and (= b_13@1  (and b_13@0 (state Used_5Heap@0 Used_5Mask@0))) (= TempMask@4 (MapType1Store ZeroMask null (List crt@0) (real_2_U FullPerm)))) (and (= b_13@2  (and b_13@1 (IdenticalOnKnownLocations Ops_3Heap@8 Used_5Heap@0 TempMask@4))) (= Ops_3Mask@13 (MapType1Store Ops_3Mask@12 null (List crt@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@12 null (List crt@0))) takeTransfer@10)))))) (and (and (= neededTransfer@21 neededTransfer@20) (= Ops_3Mask@14 Ops_3Mask@13)) (and (= Used_5Mask@1 Used_5Mask@0) (= b_13@3 b_13@2)))) (and (=> (= (ControlFlow 0 107) 105) anon251_Then_correct) (=> (= (ControlFlow 0 107) 100) anon251_Else_correct)))))))
(let ((anon249_Else_correct  (=> (and (< maskTransfer@10 FullPerm) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 110) 107) anon250_Then_correct) (=> (= (ControlFlow 0 110) 108) anon250_Else_correct)))))
(let ((anon249_Then_correct  (=> (and (<= FullPerm maskTransfer@10) (= takeTransfer@10 FullPerm)) (and (=> (= (ControlFlow 0 109) 107) anon250_Then_correct) (=> (= (ControlFlow 0 109) 108) anon250_Else_correct)))))
(let ((anon248_Then_correct  (=> (and (and (and (and b_5@23 b_13@0) true) (> FullPerm 0.0)) (= maskTransfer@10 (U_2_real (MapType1Select Ops_3Mask@12 null (List crt@0))))) (and (=> (= (ControlFlow 0 111) 109) anon249_Then_correct) (=> (= (ControlFlow 0 111) 110) anon249_Else_correct)))))
(let ((anon248_Else_correct  (=> (not (and (and (and b_5@23 b_13@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@21 FullPerm) (= Ops_3Mask@14 Ops_3Mask@12)) (and (= Used_5Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 106) 105) anon251_Then_correct) (=> (= (ControlFlow 0 106) 100) anon251_Else_correct))))))
(let ((anon120_correct  (and (=> (= (ControlFlow 0 112) (- 0 114)) (=> (and b_5@19 b_11@4) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 null (wand crt@0 FullPerm xs@@9 FullPerm))) initNeededTransfer@4)))) (=> (=> (and b_5@19 b_11@4) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 null (wand crt@0 FullPerm xs@@9 FullPerm))) initNeededTransfer@4))) (=> (= b_12@0  (and b_5@19 b_11@4)) (=> (and (= b_12@1  (and b_12@0 (state Result_5Heap Result_5Mask))) (= b_12@2  (and b_12@1 (sumMask Result_5Mask Ops_3Mask@12 Used_4Mask@3)))) (=> (and (and (and (= b_12@3  (and (and b_12@2 (IdenticalOnKnownLocations Ops_3Heap@8 Result_5Heap Ops_3Mask@12)) (IdenticalOnKnownLocations Used_4Heap@0 Result_5Heap Used_4Mask@3))) (= b_12@4  (and b_12@3 (state Result_5Heap Result_5Mask)))) (and (= b_5@20  (and b_5@19 b_12@4)) (= b_5@21  (and b_5@20 b_11@4)))) (and (and (= b_5@22  (and b_5@21 (= Used_4Heap@0 Ops_3Heap@8))) (= b_5@23  (and b_5@22 (state Ops_3Heap@8 Ops_3Mask@12)))) (and (= b_13@0  (and b_13 (state Used_5Heap@0 ZeroMask))) (= initNeededTransfer@5 (+ (U_2_real (MapType1Select ZeroMask null (List crt@0))) FullPerm))))) (and (=> (= (ControlFlow 0 112) (- 0 113)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 112) 111) anon248_Then_correct) (=> (= (ControlFlow 0 112) 106) anon248_Else_correct)))))))))))
(let ((anon247_Else_correct  (=> (and (>= 0.0 takeTransfer@9) (= Mask@56 Mask@54)) (=> (and (and (= neededTransfer@19 neededTransfer@17) (= b_11@4 b_11@2)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 117) 112))) anon120_correct))))
(let ((anon247_Then_correct  (=> (and (> takeTransfer@9 0.0) (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9))) (=> (and (and (and (= Used_4Mask@2 (MapType1Store Used_4Mask@1 null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@1 null (wand crt@0 FullPerm xs@@9 FullPerm))) takeTransfer@9)))) (= b_11@3  (and b_11@2 (state Used_4Heap@0 Used_4Mask@2)))) (and (= Mask@55 (MapType1Store Mask@54 null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@54 null (wand crt@0 FullPerm xs@@9 FullPerm))) takeTransfer@9)))) (= Mask@56 Mask@55))) (and (and (= neededTransfer@19 neededTransfer@18) (= b_11@4 b_11@3)) (and (= Used_4Mask@3 Used_4Mask@2) (= (ControlFlow 0 116) 112)))) anon120_correct))))
(let ((anon246_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 119) 116) anon247_Then_correct) (=> (= (ControlFlow 0 119) 117) anon247_Else_correct)))))
(let ((anon246_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 118) 116) anon247_Then_correct) (=> (= (ControlFlow 0 118) 117) anon247_Else_correct)))))
(let ((anon245_Then_correct  (=> (and (and (and (and b_5@19 b_11@2) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Mask@54 null (wand crt@0 FullPerm xs@@9 FullPerm))))) (and (=> (= (ControlFlow 0 120) 118) anon246_Then_correct) (=> (= (ControlFlow 0 120) 119) anon246_Else_correct)))))
(let ((anon245_Else_correct  (=> (and (not (and (and (and b_5@19 b_11@2) true) (> neededTransfer@17 0.0))) (= Mask@56 Mask@54)) (=> (and (and (= neededTransfer@19 neededTransfer@17) (= b_11@4 b_11@2)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 115) 112))) anon120_correct))))
(let ((anon244_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Ops_3Mask@12 Ops_3Mask@10) (= Used_4Mask@1 ZeroMask)) (and (= b_11@2 b_11@0) (= neededTransfer@17 1.0))) (and (=> (= (ControlFlow 0 123) 120) anon245_Then_correct) (=> (= (ControlFlow 0 123) 115) anon245_Else_correct))))))
(let ((anon244_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (and (and (= neededTransfer@16 (- 1.0 takeTransfer@8)) (= Used_4Mask@0 (MapType1Store ZeroMask null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand crt@0 FullPerm xs@@9 FullPerm))) takeTransfer@8))))) (and (= b_11@1  (and b_11@0 (state Used_4Heap@0 Used_4Mask@0))) (= Ops_3Mask@11 (MapType1Store Ops_3Mask@10 null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@10 null (wand crt@0 FullPerm xs@@9 FullPerm))) takeTransfer@8)))))) (and (and (= Ops_3Mask@12 Ops_3Mask@11) (= Used_4Mask@1 Used_4Mask@0)) (and (= b_11@2 b_11@1) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 122) 120) anon245_Then_correct) (=> (= (ControlFlow 0 122) 115) anon245_Else_correct))))))
(let ((anon243_Else_correct  (=> (and (< maskTransfer@8 1.0) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 125) 122) anon244_Then_correct) (=> (= (ControlFlow 0 125) 123) anon244_Else_correct)))))
(let ((anon243_Then_correct  (=> (and (<= 1.0 maskTransfer@8) (= takeTransfer@8 1.0)) (and (=> (= (ControlFlow 0 124) 122) anon244_Then_correct) (=> (= (ControlFlow 0 124) 123) anon244_Else_correct)))))
(let ((anon242_Then_correct  (=> (and (and (and (and b_5@19 b_11@0) true) (> 1.0 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Ops_3Mask@10 null (wand crt@0 FullPerm xs@@9 FullPerm))))) (and (=> (= (ControlFlow 0 126) 124) anon243_Then_correct) (=> (= (ControlFlow 0 126) 125) anon243_Else_correct)))))
(let ((anon242_Else_correct  (=> (not (and (and (and b_5@19 b_11@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_3Mask@12 Ops_3Mask@10) (= Used_4Mask@1 ZeroMask)) (and (= b_11@2 b_11@0) (= neededTransfer@17 1.0))) (and (=> (= (ControlFlow 0 121) 120) anon245_Then_correct) (=> (= (ControlFlow 0 121) 115) anon245_Else_correct))))))
(let ((anon108_correct  (=> (= initNeededTransfer@4 (+ (U_2_real (MapType1Select ZeroMask null (wand crt@0 FullPerm xs@@9 FullPerm))) 1.0)) (and (=> (= (ControlFlow 0 127) (- 0 128)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 127) 126) anon242_Then_correct) (=> (= (ControlFlow 0 127) 121) anon242_Else_correct)))))))
(let ((anon240_Then_correct  (=> b_5@19 (and (=> (= (ControlFlow 0 132) 131) anon241_Then_correct) (=> (= (ControlFlow 0 132) 127) anon108_correct)))))
(let ((anon240_Else_correct  (=> (and (not b_5@19) (= (ControlFlow 0 130) 127)) anon108_correct)))
(let ((anon239_Then_correct  (=> (and b_5@19 b_11@0) (and (=> (= (ControlFlow 0 133) 132) anon240_Then_correct) (=> (= (ControlFlow 0 133) 130) anon240_Else_correct)))))
(let ((anon239_Else_correct  (=> (and (not (and b_5@19 b_11@0)) (= (ControlFlow 0 129) 127)) anon108_correct)))
(let ((anon238_Then_correct  (=> (and b_5@19 (= b_11@0  (and b_11 (state Used_4Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 134) 133) anon239_Then_correct) (=> (= (ControlFlow 0 134) 129) anon239_Else_correct)))))
(let ((anon238_Else_correct  (=> (not b_5@19) (=> (and (= Ops_3Heap@9 Ops_3Heap@8) (= b_5@32 b_5@19)) (=> (and (and (= Mask@59 Mask@54) (= Ops_3Mask@16 Ops_3Mask@10)) (and (= Heap@34 Heap@31) (= (ControlFlow 0 97) 95))) anon133_correct)))))
(let ((anon102_correct  (=> (state Ops_3Heap@7 Ops_3Mask@9) (=> (and (= b_5@18  (and b_5@17 (state Ops_3Heap@7 Ops_3Mask@9))) (= Ops_3Heap@8 Ops_3Heap@7)) (=> (and (and (= Ops_3Mask@10 Ops_3Mask@9) (= Heap@31 Heap@30)) (and (= b_5@19 b_5@18) (= Mask@54 Mask@53))) (and (=> (= (ControlFlow 0 136) 134) anon238_Then_correct) (=> (= (ControlFlow 0 136) 97) anon238_Else_correct)))))))
(let ((anon237_Else_correct  (=> (= (MapType0Select Ops_3Heap@5 crt@0 next) null) (=> (and (= Ops_3Heap@7 Ops_3Heap@5) (= (ControlFlow 0 138) 136)) anon102_correct))))
(let ((anon237_Then_correct  (=> (not (= (MapType0Select Ops_3Heap@5 crt@0 next) null)) (=> (and (and (forall ((o_6 T@U) (f_10 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_10))))
(let ((A@@14 (FieldTypeInv0 (type f_10))))
 (=> (and (and (= (type o_6) RefType) (= (type f_10) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@5 null (|List#sm| crt@0)) o_6 f_10)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@5 null (|List#sm| (MapType0Select Ops_3Heap@5 crt@0 next))) o_6 f_10)))) (U_2_bool (MapType1Select newPMask@4 o_6 f_10)))))
 :qid |stdinbpl.1185:41|
 :skolemid |42|
 :pattern ( (MapType1Select newPMask@4 o_6 f_10))
)) (= Ops_3Heap@6 (MapType0Store Ops_3Heap@5 null (|List#sm| crt@0) newPMask@4))) (and (= Ops_3Heap@7 Ops_3Heap@6) (= (ControlFlow 0 137) 136))) anon102_correct))))
(let ((anon100_correct  (=> (and (= Ops_3Heap@4 (MapType0Store Ops_3Heap@3 null (|List#sm| crt@0) (MapType1Store (MapType0Select Ops_3Heap@3 null (|List#sm| crt@0)) crt@0 val (bool_2_U true)))) (= Ops_3Heap@5 (MapType0Store Ops_3Heap@4 null (|List#sm| crt@0) (MapType1Store (MapType0Select Ops_3Heap@4 null (|List#sm| crt@0)) crt@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 139) 137) anon237_Then_correct) (=> (= (ControlFlow 0 139) 138) anon237_Else_correct)))))
(let ((anon236_Else_correct  (=> (HasDirectPerm Ops_3Mask@9 null (List crt@0)) (=> (and (= Ops_3Heap@3 Ops_3Heap@0) (= (ControlFlow 0 141) 139)) anon100_correct))))
(let ((anon236_Then_correct  (=> (not (HasDirectPerm Ops_3Mask@9 null (List crt@0))) (=> (and (and (= Ops_3Heap@1 (MapType0Store Ops_3Heap@0 null (|List#sm| crt@0) ZeroPMask)) (= Ops_3Heap@2 (MapType0Store Ops_3Heap@1 null (List crt@0) freshVersion@2))) (and (= Ops_3Heap@3 Ops_3Heap@2) (= (ControlFlow 0 140) 139))) anon100_correct))))
(let ((anon98_correct  (=> (= b_10@0  (and b_5@14 b_6@19)) (=> (and (= b_10@1  (and b_10@0 (state Result_4Heap Result_4Mask))) (= b_10@2  (and b_10@1 (sumMask Result_4Mask Ops_3Mask@8 Used_3Mask@12)))) (=> (and (and (and (= b_10@3  (and (and b_10@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_4Heap Ops_3Mask@8)) (IdenticalOnKnownLocations Used_3Heap@0 Result_4Heap Used_3Mask@12))) (= b_10@4  (and b_10@3 (state Result_4Heap Result_4Mask)))) (and (= b_5@15  (and b_5@14 b_10@4)) (= Ops_3Mask@9 (MapType1Store Ops_3Mask@8 null (List crt@0) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@8 null (List crt@0))) FullPerm)))))) (and (and (= b_5@16  (and b_5@15 (state Ops_3Heap@0 Ops_3Mask@9))) (= b_5@17  (and b_5@16 (state Ops_3Heap@0 Ops_3Mask@9)))) (and (|List#trigger| Ops_3Heap@0 (List crt@0)) (= (MapType0Select Ops_3Heap@0 null (List crt@0)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 crt@0 val)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@0 crt@0 next)) (FrameFragment (ite (not (= (MapType0Select Ops_3Heap@0 crt@0 next) null)) (MapType0Select Ops_3Heap@0 null (List (MapType0Select Ops_3Heap@0 crt@0 next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 142) 140) anon236_Then_correct) (=> (= (ControlFlow 0 142) 141) anon236_Else_correct)))))))
(let ((anon97_correct  (and (=> (= (ControlFlow 0 144) (- 0 145)) (=> (and b_5@10 b_6@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_3Mask@11 null (List arg_1@0))) initNeededTransfer@3)))) (=> (=> (and b_5@10 b_6@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_3Mask@11 null (List arg_1@0))) initNeededTransfer@3))) (=> (= b_9@0  (and b_5@10 b_6@18)) (=> (and (= b_9@1  (and b_9@0 (state Result_3Heap Result_3Mask))) (= b_9@2  (and b_9@1 (sumMask Result_3Mask Ops_3Mask@7 Used_3Mask@11)))) (=> (and (and (= b_9@3  (and (and b_9@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_3Heap Ops_3Mask@7)) (IdenticalOnKnownLocations Used_3Heap@0 Result_3Heap Used_3Mask@11))) (= b_9@4  (and b_9@3 (state Result_3Heap Result_3Mask)))) (and (= b_5@11  (and b_5@10 b_9@4)) (= b_5@12  (and b_5@11 b_6@18)))) (=> (and (and (and (= b_5@13  (and b_5@12 (= Used_3Heap@0 Ops_3Heap@0))) (= Mask@53 Mask@52)) (and (= Ops_3Mask@8 Ops_3Mask@7) (= b_5@14 b_5@13))) (and (and (= Heap@30 Heap@29) (= Used_3Mask@12 Used_3Mask@11)) (and (= b_6@19 b_6@18) (= (ControlFlow 0 144) 142)))) anon98_correct))))))))
(let ((anon235_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= b_6@18 b_6@15) (= Used_3Mask@11 Used_3Mask@9)) (=> (and (and (= Heap@29 Heap@27) (= Mask@52 Mask@50)) (and (= neededTransfer@15 neededTransfer@13) (= (ControlFlow 0 148) 144))) anon97_correct)))))
(let ((anon235_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_3Mask@10 (MapType1Store Used_3Mask@9 null (List arg_1@0) (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@9 null (List arg_1@0))) takeTransfer@7))))) (=> (and (and (= b_6@16  (and b_6@15 (state Used_3Heap@0 Used_3Mask@10))) (= TempMask@3 (MapType1Store ZeroMask null (List arg_1@0) (real_2_U FullPerm)))) (and (= b_6@17  (and b_6@16 (IdenticalOnKnownLocations Heap@27 Used_3Heap@0 TempMask@3))) (= Mask@51 (MapType1Store Mask@50 null (List arg_1@0) (real_2_U (- (U_2_real (MapType1Select Mask@50 null (List arg_1@0))) takeTransfer@7)))))) (=> (and (and (and (forall ((o_5 T@U) (f_9 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_9))))
(let ((A@@15 (FieldTypeInv0 (type f_9))))
 (=> (and (and (= (type o_5) RefType) (= (type f_9) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm)) o_5 f_9)) (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|List#sm| (MapType0Select Heap@27 crt@0 next))) o_5 f_9)))) (U_2_bool (MapType1Select newPMask@3 o_5 f_9)))))
 :qid |stdinbpl.1141:49|
 :skolemid |41|
 :pattern ( (MapType1Select newPMask@3 o_5 f_9))
)) (= Heap@28 (MapType0Store Heap@27 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm) newPMask@3))) (and (= b_6@18 b_6@17) (= Used_3Mask@11 Used_3Mask@10))) (and (and (= Heap@29 Heap@28) (= Mask@52 Mask@51)) (and (= neededTransfer@15 neededTransfer@14) (= (ControlFlow 0 147) 144)))) anon97_correct))))))
(let ((anon234_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 150) 147) anon235_Then_correct) (=> (= (ControlFlow 0 150) 148) anon235_Else_correct)))))
(let ((anon234_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 149) 147) anon235_Then_correct) (=> (= (ControlFlow 0 149) 148) anon235_Else_correct)))))
(let ((anon233_Then_correct  (=> (and (and (and (and b_5@10 b_6@15) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@50 null (List arg_1@0))))) (and (=> (= (ControlFlow 0 151) 149) anon234_Then_correct) (=> (= (ControlFlow 0 151) 150) anon234_Else_correct)))))
(let ((anon233_Else_correct  (=> (not (and (and (and b_5@10 b_6@15) true) (> neededTransfer@13 0.0))) (=> (and (= b_6@18 b_6@15) (= Used_3Mask@11 Used_3Mask@9)) (=> (and (and (= Heap@29 Heap@27) (= Mask@52 Mask@50)) (and (= neededTransfer@15 neededTransfer@13) (= (ControlFlow 0 146) 144))) anon97_correct)))))
(let ((anon232_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= neededTransfer@13 FullPerm) (= Ops_3Mask@7 Ops_3Mask@5)) (and (= Used_3Mask@9 Used_3Mask@7) (= b_6@15 b_6@12))) (and (=> (= (ControlFlow 0 154) 151) anon233_Then_correct) (=> (= (ControlFlow 0 154) 146) anon233_Else_correct))))))
(let ((anon232_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Used_3Mask@8 (MapType1Store Used_3Mask@7 null (List arg_1@0) (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@7 null (List arg_1@0))) takeTransfer@6))))) (=> (and (and (and (= b_6@13  (and b_6@12 (state Used_3Heap@0 Used_3Mask@8))) (= TempMask@2 (MapType1Store ZeroMask null (List arg_1@0) (real_2_U FullPerm)))) (and (= b_6@14  (and b_6@13 (IdenticalOnKnownLocations Ops_3Heap@0 Used_3Heap@0 TempMask@2))) (= Ops_3Mask@6 (MapType1Store Ops_3Mask@5 null (List arg_1@0) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@5 null (List arg_1@0))) takeTransfer@6)))))) (and (and (= neededTransfer@13 neededTransfer@12) (= Ops_3Mask@7 Ops_3Mask@6)) (and (= Used_3Mask@9 Used_3Mask@8) (= b_6@15 b_6@14)))) (and (=> (= (ControlFlow 0 153) 151) anon233_Then_correct) (=> (= (ControlFlow 0 153) 146) anon233_Else_correct)))))))
(let ((anon231_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 156) 153) anon232_Then_correct) (=> (= (ControlFlow 0 156) 154) anon232_Else_correct)))))
(let ((anon231_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 155) 153) anon232_Then_correct) (=> (= (ControlFlow 0 155) 154) anon232_Else_correct)))))
(let ((anon230_Then_correct  (=> (and (and (and (and b_5@10 b_6@12) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_3Mask@5 null (List arg_1@0))))) (and (=> (= (ControlFlow 0 157) 155) anon231_Then_correct) (=> (= (ControlFlow 0 157) 156) anon231_Else_correct)))))
(let ((anon230_Else_correct  (=> (not (and (and (and b_5@10 b_6@12) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@13 FullPerm) (= Ops_3Mask@7 Ops_3Mask@5)) (and (= Used_3Mask@9 Used_3Mask@7) (= b_6@15 b_6@12))) (and (=> (= (ControlFlow 0 152) 151) anon233_Then_correct) (=> (= (ControlFlow 0 152) 146) anon233_Else_correct))))))
(let ((anon85_correct  (=> (and (= arg_1@0 (MapType0Select Result_2Heap crt@0 next)) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select Used_3Mask@7 null (List arg_1@0))) FullPerm))) (and (=> (= (ControlFlow 0 158) (- 0 159)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 158) 157) anon230_Then_correct) (=> (= (ControlFlow 0 158) 152) anon230_Else_correct)))))))
(let ((anon229_Else_correct  (=> (and (not b_5@10) (= (ControlFlow 0 163) 158)) anon85_correct)))
(let ((anon229_Then_correct  (=> b_5@10 (and (=> (= (ControlFlow 0 161) (- 0 162)) (HasDirectPerm Result_2Mask crt@0 next)) (=> (HasDirectPerm Result_2Mask crt@0 next) (=> (= (ControlFlow 0 161) 158) anon85_correct))))))
(let ((anon228_Then_correct  (=> (and b_5@10 b_6@12) (and (=> (= (ControlFlow 0 164) 161) anon229_Then_correct) (=> (= (ControlFlow 0 164) 163) anon229_Else_correct)))))
(let ((anon228_Else_correct  (=> (and (not (and b_5@10 b_6@12)) (= (ControlFlow 0 160) 158)) anon85_correct)))
(let ((anon227_Then_correct  (=> (=> b_5@10 (not (= (MapType0Select Result_2Heap crt@0 next) null))) (and (=> (= (ControlFlow 0 165) 164) anon228_Then_correct) (=> (= (ControlFlow 0 165) 160) anon228_Else_correct)))))
(let ((anon227_Else_correct  (=> (and (and (and (not (=> b_5@10 (not (= (MapType0Select Result_2Heap crt@0 next) null)))) (= Mask@53 Mask@50)) (and (= Ops_3Mask@8 Ops_3Mask@5) (= b_5@14 b_5@10))) (and (and (= Heap@30 Heap@27) (= Used_3Mask@12 Used_3Mask@7)) (and (= b_6@19 b_6@12) (= (ControlFlow 0 143) 142)))) anon98_correct)))
(let ((anon81_correct  (and (=> (= (ControlFlow 0 166) (- 0 167)) (=> (and b_5@7 b_6@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@7 crt@0 next)) initNeededTransfer@2)))) (=> (=> (and b_5@7 b_6@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@7 crt@0 next)) initNeededTransfer@2))) (=> (and (and (and (= b_8@0  (and b_5@7 b_6@12)) (= b_8@1  (and b_8@0 (state Result_2Heap Result_2Mask)))) (and (= b_8@2  (and b_8@1 (sumMask Result_2Mask Ops_3Mask@5 Used_3Mask@7))) (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_2Heap Ops_3Mask@5)) (IdenticalOnKnownLocations Used_3Heap@0 Result_2Heap Used_3Mask@7))))) (and (and (= b_8@4  (and b_8@3 (state Result_2Heap Result_2Mask))) (= b_5@8  (and b_5@7 b_8@4))) (and (= b_5@9  (and b_5@8 b_6@12)) (= b_5@10  (and b_5@9 (= Used_3Heap@0 Ops_3Heap@0)))))) (and (=> (= (ControlFlow 0 166) 165) anon227_Then_correct) (=> (= (ControlFlow 0 166) 143) anon227_Else_correct)))))))
(let ((anon226_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= b_6@12 b_6@9) (= Mask@50 Mask@48)) (=> (and (and (= Heap@27 Heap@25) (= Used_3Mask@7 Used_3Mask@5)) (and (= neededTransfer@11 neededTransfer@9) (= (ControlFlow 0 170) 166))) anon81_correct)))))
(let ((anon226_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_3Mask@6 (MapType1Store Used_3Mask@5 crt@0 next (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@5 crt@0 next)) takeTransfer@5))))) (and (= b_6@10  (and b_6@9 (state Used_3Heap@0 Used_3Mask@6))) (= b_6@11  (and b_6@10 (= (MapType0Select Heap@25 crt@0 next) (MapType0Select Used_3Heap@0 crt@0 next)))))) (=> (and (and (and (= Mask@49 (MapType1Store Mask@48 crt@0 next (real_2_U (- (U_2_real (MapType1Select Mask@48 crt@0 next)) takeTransfer@5)))) (= Heap@26 (MapType0Store Heap@25 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm) (MapType1Store (MapType0Select Heap@25 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm)) crt@0 next (bool_2_U true))))) (and (= b_6@12 b_6@11) (= Mask@50 Mask@49))) (and (and (= Heap@27 Heap@26) (= Used_3Mask@7 Used_3Mask@6)) (and (= neededTransfer@11 neededTransfer@10) (= (ControlFlow 0 169) 166)))) anon81_correct)))))
(let ((anon225_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 172) 169) anon226_Then_correct) (=> (= (ControlFlow 0 172) 170) anon226_Else_correct)))))
(let ((anon225_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 171) 169) anon226_Then_correct) (=> (= (ControlFlow 0 171) 170) anon226_Else_correct)))))
(let ((anon224_Then_correct  (=> (and (and (and (and b_5@7 b_6@9) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@48 crt@0 next)))) (and (=> (= (ControlFlow 0 173) 171) anon225_Then_correct) (=> (= (ControlFlow 0 173) 172) anon225_Else_correct)))))
(let ((anon224_Else_correct  (=> (not (and (and (and b_5@7 b_6@9) true) (> neededTransfer@9 0.0))) (=> (and (= b_6@12 b_6@9) (= Mask@50 Mask@48)) (=> (and (and (= Heap@27 Heap@25) (= Used_3Mask@7 Used_3Mask@5)) (and (= neededTransfer@11 neededTransfer@9) (= (ControlFlow 0 168) 166))) anon81_correct)))))
(let ((anon223_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= neededTransfer@9 FullPerm) (= Used_3Mask@5 Used_3Mask@3)) (and (= Ops_3Mask@5 Ops_3Mask@3) (= b_6@9 b_6@6))) (and (=> (= (ControlFlow 0 176) 173) anon224_Then_correct) (=> (= (ControlFlow 0 176) 168) anon224_Else_correct))))))
(let ((anon223_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_3Mask@4 (MapType1Store Used_3Mask@3 crt@0 next (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@3 crt@0 next)) takeTransfer@4)))) (= b_6@7  (and b_6@6 (state Used_3Heap@0 Used_3Mask@4)))) (and (= b_6@8  (and b_6@7 (= (MapType0Select Ops_3Heap@0 crt@0 next) (MapType0Select Used_3Heap@0 crt@0 next)))) (= Ops_3Mask@4 (MapType1Store Ops_3Mask@3 crt@0 next (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@3 crt@0 next)) takeTransfer@4)))))) (and (and (= neededTransfer@9 neededTransfer@8) (= Used_3Mask@5 Used_3Mask@4)) (and (= Ops_3Mask@5 Ops_3Mask@4) (= b_6@9 b_6@8)))) (and (=> (= (ControlFlow 0 175) 173) anon224_Then_correct) (=> (= (ControlFlow 0 175) 168) anon224_Else_correct))))))
(let ((anon222_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 178) 175) anon223_Then_correct) (=> (= (ControlFlow 0 178) 176) anon223_Else_correct)))))
(let ((anon222_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 177) 175) anon223_Then_correct) (=> (= (ControlFlow 0 177) 176) anon223_Else_correct)))))
(let ((anon221_Then_correct  (=> (and (and (and (and b_5@7 b_6@6) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_3Mask@3 crt@0 next)))) (and (=> (= (ControlFlow 0 179) 177) anon222_Then_correct) (=> (= (ControlFlow 0 179) 178) anon222_Else_correct)))))
(let ((anon221_Else_correct  (=> (not (and (and (and b_5@7 b_6@6) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@9 FullPerm) (= Used_3Mask@5 Used_3Mask@3)) (and (= Ops_3Mask@5 Ops_3Mask@3) (= b_6@9 b_6@6))) (and (=> (= (ControlFlow 0 174) 173) anon224_Then_correct) (=> (= (ControlFlow 0 174) 168) anon224_Else_correct))))))
(let ((anon69_correct  (and (=> (= (ControlFlow 0 180) (- 0 182)) (=> (and b_5@4 b_6@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 crt@0 val)) initNeededTransfer@1)))) (=> (=> (and b_5@4 b_6@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 crt@0 val)) initNeededTransfer@1))) (=> (= b_7@0  (and b_5@4 b_6@6)) (=> (and (and (and (= b_7@1  (and b_7@0 (state Result_1Heap Result_1Mask))) (= b_7@2  (and b_7@1 (sumMask Result_1Mask Ops_3Mask@3 Used_3Mask@3)))) (and (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_3Heap@0 Result_1Heap Ops_3Mask@3)) (IdenticalOnKnownLocations Used_3Heap@0 Result_1Heap Used_3Mask@3))) (= b_7@4  (and b_7@3 (state Result_1Heap Result_1Mask))))) (and (and (= b_5@5  (and b_5@4 b_7@4)) (= b_5@6  (and b_5@5 b_6@6))) (and (= b_5@7  (and b_5@6 (= Used_3Heap@0 Ops_3Heap@0))) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select Used_3Mask@3 crt@0 next)) FullPerm))))) (and (=> (= (ControlFlow 0 180) (- 0 181)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 180) 179) anon221_Then_correct) (=> (= (ControlFlow 0 180) 174) anon221_Else_correct))))))))))
(let ((anon220_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= b_6@6 b_6@3) (= Heap@25 Heap@23)) (=> (and (and (= Mask@48 Mask@46) (= Used_3Mask@3 Used_3Mask@1)) (and (= neededTransfer@7 neededTransfer@5) (= (ControlFlow 0 185) 180))) anon69_correct)))))
(let ((anon220_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_3Mask@2 (MapType1Store Used_3Mask@1 crt@0 val (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@1 crt@0 val)) takeTransfer@3))))) (and (= b_6@4  (and b_6@3 (state Used_3Heap@0 Used_3Mask@2))) (= b_6@5  (and b_6@4 (= (U_2_int (MapType0Select Heap@23 crt@0 val)) (U_2_int (MapType0Select Used_3Heap@0 crt@0 val))))))) (=> (and (and (and (= Mask@47 (MapType1Store Mask@46 crt@0 val (real_2_U (- (U_2_real (MapType1Select Mask@46 crt@0 val)) takeTransfer@3)))) (= Heap@24 (MapType0Store Heap@23 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm) (MapType1Store (MapType0Select Heap@23 null (|wand#sm| nxt@1 FullPerm xs@@9 FullPerm)) crt@0 val (bool_2_U true))))) (and (= b_6@6 b_6@5) (= Heap@25 Heap@24))) (and (and (= Mask@48 Mask@47) (= Used_3Mask@3 Used_3Mask@2)) (and (= neededTransfer@7 neededTransfer@6) (= (ControlFlow 0 184) 180)))) anon69_correct)))))
(let ((anon219_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 187) 184) anon220_Then_correct) (=> (= (ControlFlow 0 187) 185) anon220_Else_correct)))))
(let ((anon219_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 186) 184) anon220_Then_correct) (=> (= (ControlFlow 0 186) 185) anon220_Else_correct)))))
(let ((anon218_Then_correct  (=> (and (and (and (and b_5@4 b_6@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@46 crt@0 val)))) (and (=> (= (ControlFlow 0 188) 186) anon219_Then_correct) (=> (= (ControlFlow 0 188) 187) anon219_Else_correct)))))
(let ((anon218_Else_correct  (=> (not (and (and (and b_5@4 b_6@3) true) (> neededTransfer@5 0.0))) (=> (and (= b_6@6 b_6@3) (= Heap@25 Heap@23)) (=> (and (and (= Mask@48 Mask@46) (= Used_3Mask@3 Used_3Mask@1)) (and (= neededTransfer@7 neededTransfer@5) (= (ControlFlow 0 183) 180))) anon69_correct)))))
(let ((anon217_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@3 Ops_3Mask@1)) (and (= Used_3Mask@1 ZeroMask) (= b_6@3 b_6@0))) (and (=> (= (ControlFlow 0 191) 188) anon218_Then_correct) (=> (= (ControlFlow 0 191) 183) anon218_Else_correct))))))
(let ((anon217_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_3Mask@0 (MapType1Store ZeroMask crt@0 val (real_2_U (+ (U_2_real (MapType1Select ZeroMask crt@0 val)) takeTransfer@2)))) (= b_6@1  (and b_6@0 (state Used_3Heap@0 Used_3Mask@0)))) (and (= b_6@2  (and b_6@1 (= (U_2_int (MapType0Select Ops_3Heap@0 crt@0 val)) (U_2_int (MapType0Select Used_3Heap@0 crt@0 val))))) (= Ops_3Mask@2 (MapType1Store Ops_3Mask@1 crt@0 val (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@1 crt@0 val)) takeTransfer@2)))))) (and (and (= neededTransfer@5 neededTransfer@4) (= Ops_3Mask@3 Ops_3Mask@2)) (and (= Used_3Mask@1 Used_3Mask@0) (= b_6@3 b_6@2)))) (and (=> (= (ControlFlow 0 190) 188) anon218_Then_correct) (=> (= (ControlFlow 0 190) 183) anon218_Else_correct))))))
(let ((anon216_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 193) 190) anon217_Then_correct) (=> (= (ControlFlow 0 193) 191) anon217_Else_correct)))))
(let ((anon216_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 192) 190) anon217_Then_correct) (=> (= (ControlFlow 0 192) 191) anon217_Else_correct)))))
(let ((anon215_Then_correct  (=> (and (and (and (and b_5@4 b_6@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_3Mask@1 crt@0 val)))) (and (=> (= (ControlFlow 0 194) 192) anon216_Then_correct) (=> (= (ControlFlow 0 194) 193) anon216_Else_correct)))))
(let ((anon215_Else_correct  (=> (not (and (and (and b_5@4 b_6@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@3 Ops_3Mask@1)) (and (= Used_3Mask@1 ZeroMask) (= b_6@3 b_6@0))) (and (=> (= (ControlFlow 0 189) 188) anon218_Then_correct) (=> (= (ControlFlow 0 189) 183) anon218_Else_correct))))))
(let ((anon214_Then_correct  (=> b_5@4 (=> (and (= b_6@0  (and b_6 (state Used_3Heap@0 ZeroMask))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask crt@0 val)) FullPerm))) (and (=> (= (ControlFlow 0 195) (- 0 196)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 195) 194) anon215_Then_correct) (=> (= (ControlFlow 0 195) 189) anon215_Else_correct))))))))
(let ((anon214_Else_correct  (=> (and (not b_5@4) (= Ops_3Heap@8 Ops_3Heap@0)) (=> (and (and (= Ops_3Mask@10 Ops_3Mask@1) (= Heap@31 Heap@23)) (and (= b_5@19 b_5@4) (= Mask@54 Mask@46))) (and (=> (= (ControlFlow 0 135) 134) anon238_Then_correct) (=> (= (ControlFlow 0 135) 97) anon238_Else_correct))))))
(let ((anon56_correct  (=> (and (= b_5@3  (and b_5@2 (state Ops_3Heap@0 Ops_3Mask@1))) (= b_5@4  (and b_5@3 (state Ops_3Heap@0 Ops_3Mask@1)))) (and (=> (= (ControlFlow 0 197) 195) anon214_Then_correct) (=> (= (ControlFlow 0 197) 135) anon214_Else_correct)))))
(let ((anon213_Else_correct  (=> (and (and (not b_5@0) (= Ops_3Mask@1 ZeroMask)) (and (= b_5@2 b_5@0) (= (ControlFlow 0 199) 197))) anon56_correct)))
(let ((anon213_Then_correct  (=> (and b_5@0 (= Ops_3Mask@0 (MapType1Store ZeroMask null (List nxt@1) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List nxt@1))) FullPerm))))) (=> (and (and (= b_5@1  (and b_5@0 (state Ops_3Heap@0 Ops_3Mask@0))) (= Ops_3Mask@1 Ops_3Mask@0)) (and (= b_5@2 b_5@1) (= (ControlFlow 0 198) 197))) anon56_correct))))
(let ((anon54_correct  (=> (state Heap@23 Mask@46) (=> (and (state Heap@23 Mask@46) (state Heap@23 Mask@46)) (and (=> (= (ControlFlow 0 200) (- 0 201)) (HasDirectPerm Mask@46 nxt@1 next)) (=> (HasDirectPerm Mask@46 nxt@1 next) (=> (and (= nxt@2 (MapType0Select Heap@23 nxt@1 next)) (state Heap@23 Mask@46)) (=> (and (and (= i@1 (+ i@0 1)) (state Heap@23 Mask@46)) (and (= b_5@0  (and b_5 (state Ops_3Heap@0 ZeroMask))) (= b_4@0  (and b_4 (state Used_2Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 200) 198) anon213_Then_correct) (=> (= (ControlFlow 0 200) 199) anon213_Else_correct))))))))))
(let ((anon212_Else_correct  (=> (= (MapType0Select Heap@23 nxt@1 next) null) (=> (and (= Mask@46 Mask@44) (= (ControlFlow 0 203) 200)) anon54_correct))))
(let ((anon212_Then_correct  (=> (and (not (= (MapType0Select Heap@23 nxt@1 next) null)) (= Mask@45 (MapType1Store Mask@44 null (List (MapType0Select Heap@23 nxt@1 next)) (real_2_U (+ (U_2_real (MapType1Select Mask@44 null (List (MapType0Select Heap@23 nxt@1 next)))) FullPerm))))) (=> (and (and (InsidePredicate (List nxt@1) (MapType0Select Heap@23 null (List nxt@1)) (List (MapType0Select Heap@23 nxt@1 next)) (MapType0Select Heap@23 null (List (MapType0Select Heap@23 nxt@1 next)))) (state Heap@23 Mask@45)) (and (= Mask@46 Mask@45) (= (ControlFlow 0 202) 200))) anon54_correct))))
(let ((anon52_correct  (=> (and (not (= nxt@1 null)) (= Mask@43 (MapType1Store Mask@42 nxt@1 val (real_2_U (+ (U_2_real (MapType1Select Mask@42 nxt@1 val)) FullPerm))))) (=> (and (and (state Heap@23 Mask@43) (not (= nxt@1 null))) (and (= Mask@44 (MapType1Store Mask@43 nxt@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@43 nxt@1 next)) FullPerm)))) (state Heap@23 Mask@44))) (and (=> (= (ControlFlow 0 204) 202) anon212_Then_correct) (=> (= (ControlFlow 0 204) 203) anon212_Else_correct))))))
(let ((anon211_Else_correct  (=> (HasDirectPerm Mask@42 null (List nxt@1)) (=> (and (= Heap@23 ExhaleHeap@0) (= (ControlFlow 0 206) 204)) anon52_correct))))
(let ((anon211_Then_correct  (=> (and (and (not (HasDirectPerm Mask@42 null (List nxt@1))) (= Heap@22 (MapType0Store ExhaleHeap@0 null (List nxt@1) newVersion@1))) (and (= Heap@23 Heap@22) (= (ControlFlow 0 205) 204))) anon52_correct)))
(let ((anon50_correct  (=> (= Mask@42 (MapType1Store Mask@41 null (List nxt@1) (real_2_U (- (U_2_real (MapType1Select Mask@41 null (List nxt@1))) FullPerm)))) (and (=> (= (ControlFlow 0 207) 205) anon211_Then_correct) (=> (= (ControlFlow 0 207) 206) anon211_Else_correct)))))
(let ((anon210_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 210) 207)) anon50_correct)))
(let ((anon210_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 208) (- 0 209)) (<= FullPerm (U_2_real (MapType1Select Mask@41 null (List nxt@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 null (List nxt@1)))) (=> (= (ControlFlow 0 208) 207) anon50_correct))))))
(let ((anon48_correct  (=> (and (and (and (and (not (= nxt@1 null)) (< (head ExhaleHeap@0 nxt@1) x@@8)) (state ExhaleHeap@0 Mask@41)) (and (U_2_bool (MapType0Select ExhaleHeap@0 oldCrt $allocated)) (U_2_bool (MapType0Select ExhaleHeap@0 prev $allocated)))) (and (and (state ExhaleHeap@0 Mask@41) (state ExhaleHeap@0 Mask@41)) (and (|List#trigger| ExhaleHeap@0 (List nxt@1)) (= (MapType0Select ExhaleHeap@0 null (List nxt@1)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 nxt@1 val)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 nxt@1 next)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 nxt@1 next) null)) (MapType0Select ExhaleHeap@0 null (List (MapType0Select ExhaleHeap@0 nxt@1 next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 211) 208) anon210_Then_correct) (=> (= (ControlFlow 0 211) 210) anon210_Else_correct)))))
(let ((anon207_Then_correct  (=> (not (= nxt@1 null)) (and (and (=> (= (ControlFlow 0 217) 211) anon48_correct) (=> (= (ControlFlow 0 217) 214) anon209_Then_correct)) (=> (= (ControlFlow 0 217) 216) anon209_Else_correct)))))
(let ((anon207_Else_correct  (=> (and (= nxt@1 null) (= (ControlFlow 0 212) 211)) anon48_correct)))
(let ((anon43_correct  (=> (= Mask@41 (MapType1Store Mask@40 null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@40 null (wand crt@0 FullPerm xs@@9 FullPerm))) FullPerm)))) (=> (and (state ExhaleHeap@0 Mask@41) (state ExhaleHeap@0 Mask@41)) (and (=> (= (ControlFlow 0 218) 217) anon207_Then_correct) (=> (= (ControlFlow 0 218) 212) anon207_Else_correct))))))
(let ((anon206_Else_correct  (=> (= nxt@1 null) (=> (and (= Mask@40 Mask@17) (= (ControlFlow 0 220) 218)) anon43_correct))))
(let ((anon206_Then_correct  (=> (not (= nxt@1 null)) (=> (and (and (= Mask@39 (MapType1Store Mask@17 null (List nxt@1) (real_2_U (+ (U_2_real (MapType1Select Mask@17 null (List nxt@1))) FullPerm)))) (state ExhaleHeap@0 Mask@39)) (and (= Mask@40 Mask@39) (= (ControlFlow 0 219) 218))) anon43_correct))))
(let ((anon205_Then_correct  (=> (and (and (and (state ExhaleHeap@0 ZeroMask) (not (= crt@0 null))) (and (= Mask@16 (MapType1Store ZeroMask crt@0 val (real_2_U (+ (U_2_real (MapType1Select ZeroMask crt@0 val)) FullPerm)))) (state ExhaleHeap@0 Mask@16))) (and (and (not (= crt@0 null)) (= Mask@17 (MapType1Store Mask@16 crt@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@16 crt@0 next)) FullPerm))))) (and (state ExhaleHeap@0 Mask@17) (= nxt@1 (MapType0Select ExhaleHeap@0 crt@0 next))))) (and (=> (= (ControlFlow 0 221) 219) anon206_Then_correct) (=> (= (ControlFlow 0 221) 220) anon206_Else_correct)))))
(let ((anon184_correct true))
(let ((anon278_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 9) 6)) anon184_correct)))
(let ((anon278_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (<= FullPerm (U_2_real (MapType1Select Mask@37 null (List xs@@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@37 null (List xs@@9)))) (=> (= (ControlFlow 0 7) 6) anon184_correct))))))
(let ((anon182_correct  (=> (and (and (and (= Mask@36 (MapType1Store Mask@35 null (List crt@0) (real_2_U (- (U_2_real (MapType1Select Mask@35 null (List crt@0))) FullPerm)))) (state Heap@21 Mask@36)) (and (= Mask@37 (MapType1Store Mask@36 null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select Mask@36 null (List xs@@9))) FullPerm)))) (state Heap@21 Mask@37))) (and (and (state Heap@21 Mask@37) (IdenticalOnKnownLocations Heap@21 ExhaleHeap@1 Mask@37)) (and (state ExhaleHeap@1 Mask@37) (state ExhaleHeap@1 Mask@37)))) (and (=> (= (ControlFlow 0 10) 7) anon278_Then_correct) (=> (= (ControlFlow 0 10) 9) anon278_Else_correct)))))
(let ((anon277_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 13) 10)) anon182_correct)))
(let ((anon277_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= FullPerm (U_2_real (MapType1Select Mask@35 null (List crt@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@35 null (List crt@0)))) (=> (= (ControlFlow 0 11) 10) anon182_correct))))))
(let ((anon180_correct  (=> (and (state Heap@21 Mask@34) (state Heap@21 Mask@34)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (wand crt@0 FullPerm xs@@9 FullPerm))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (wand crt@0 FullPerm xs@@9 FullPerm)))) (=> (and (= Mask@35 (MapType1Store Mask@34 null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (wand crt@0 FullPerm xs@@9 FullPerm))) FullPerm)))) (state Heap@21 Mask@35)) (and (=> (= (ControlFlow 0 14) 11) anon277_Then_correct) (=> (= (ControlFlow 0 14) 13) anon277_Else_correct))))))))
(let ((anon276_Else_correct  (=> (= (MapType0Select Heap@19 crt@0 next) null) (=> (and (= Heap@21 Heap@19) (= (ControlFlow 0 17) 14)) anon180_correct))))
(let ((anon276_Then_correct  (=> (not (= (MapType0Select Heap@19 crt@0 next) null)) (=> (and (and (forall ((o_10 T@U) (f_14 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_14))))
(let ((A@@16 (FieldTypeInv0 (type f_14))))
 (=> (and (and (= (type o_10) RefType) (= (type f_14) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|List#sm| crt@0)) o_10 f_14)) (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|List#sm| (MapType0Select Heap@19 crt@0 next))) o_10 f_14)))) (U_2_bool (MapType1Select newPMask@2 o_10 f_14)))))
 :qid |stdinbpl.1628:29|
 :skolemid |46|
 :pattern ( (MapType1Select newPMask@2 o_10 f_14))
)) (= Heap@20 (MapType0Store Heap@19 null (|List#sm| crt@0) newPMask@2))) (and (= Heap@21 Heap@20) (= (ControlFlow 0 16) 14))) anon180_correct))))
(let ((anon178_correct  (=> (and (= Heap@18 (MapType0Store Heap@17 null (|List#sm| crt@0) (MapType1Store (MapType0Select Heap@17 null (|List#sm| crt@0)) crt@0 val (bool_2_U true)))) (= Heap@19 (MapType0Store Heap@18 null (|List#sm| crt@0) (MapType1Store (MapType0Select Heap@18 null (|List#sm| crt@0)) crt@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 18) 16) anon276_Then_correct) (=> (= (ControlFlow 0 18) 17) anon276_Else_correct)))))
(let ((anon275_Else_correct  (=> (HasDirectPerm Mask@34 null (List crt@0)) (=> (and (= Heap@17 Heap@14) (= (ControlFlow 0 20) 18)) anon178_correct))))
(let ((anon275_Then_correct  (=> (not (HasDirectPerm Mask@34 null (List crt@0))) (=> (and (and (= Heap@15 (MapType0Store Heap@14 null (|List#sm| crt@0) ZeroPMask)) (= Heap@16 (MapType0Store Heap@15 null (List crt@0) freshVersion@1))) (and (= Heap@17 Heap@16) (= (ControlFlow 0 19) 18))) anon178_correct))))
(let ((anon176_correct  (=> (= Mask@34 (MapType1Store Mask@33 null (List crt@0) (real_2_U (+ (U_2_real (MapType1Select Mask@33 null (List crt@0))) FullPerm)))) (=> (and (and (state Heap@14 Mask@34) (state Heap@14 Mask@34)) (and (|List#trigger| Heap@14 (List crt@0)) (= (MapType0Select Heap@14 null (List crt@0)) (CombineFrames (FrameFragment (MapType0Select Heap@14 crt@0 val)) (CombineFrames (FrameFragment (MapType0Select Heap@14 crt@0 next)) (FrameFragment (ite (not (= (MapType0Select Heap@14 crt@0 next) null)) (MapType0Select Heap@14 null (List (MapType0Select Heap@14 crt@0 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 21) 19) anon275_Then_correct) (=> (= (ControlFlow 0 21) 20) anon275_Else_correct))))))
(let ((anon175_correct  (=> (and (and (= Mask@32 (MapType1Store Mask@31 null (List (MapType0Select Heap@14 crt@0 next)) (real_2_U (- (U_2_real (MapType1Select Mask@31 null (List (MapType0Select Heap@14 crt@0 next)))) FullPerm)))) (InsidePredicate (List crt@0) (MapType0Select Heap@14 null (List crt@0)) (List (MapType0Select Heap@14 crt@0 next)) (MapType0Select Heap@14 null (List (MapType0Select Heap@14 crt@0 next))))) (and (= Mask@33 Mask@32) (= (ControlFlow 0 23) 21))) anon176_correct)))
(let ((anon274_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 26) 23)) anon175_correct)))
(let ((anon274_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (<= FullPerm (U_2_real (MapType1Select Mask@31 null (List (MapType0Select Heap@14 crt@0 next)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@31 null (List (MapType0Select Heap@14 crt@0 next))))) (=> (= (ControlFlow 0 24) 23) anon175_correct))))))
(let ((anon273_Then_correct  (=> (not (= (MapType0Select Heap@14 crt@0 next) null)) (and (=> (= (ControlFlow 0 27) 24) anon274_Then_correct) (=> (= (ControlFlow 0 27) 26) anon274_Else_correct)))))
(let ((anon273_Else_correct  (=> (= (MapType0Select Heap@14 crt@0 next) null) (=> (and (= Mask@33 Mask@31) (= (ControlFlow 0 22) 21)) anon176_correct))))
(let ((anon172_correct  (=> (= Mask@31 (MapType1Store Mask@30 crt@0 next (real_2_U (- (U_2_real (MapType1Select Mask@30 crt@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 28) 27) anon273_Then_correct) (=> (= (ControlFlow 0 28) 22) anon273_Else_correct)))))
(let ((anon272_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 31) 28)) anon172_correct)))
(let ((anon272_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (<= FullPerm (U_2_real (MapType1Select Mask@30 crt@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@30 crt@0 next))) (=> (= (ControlFlow 0 29) 28) anon172_correct))))))
(let ((anon170_correct  (=> (= Mask@30 (MapType1Store Mask@29 crt@0 val (real_2_U (- (U_2_real (MapType1Select Mask@29 crt@0 val)) FullPerm)))) (and (=> (= (ControlFlow 0 32) 29) anon272_Then_correct) (=> (= (ControlFlow 0 32) 31) anon272_Else_correct)))))
(let ((anon271_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 35) 32)) anon170_correct)))
(let ((anon271_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (<= FullPerm (U_2_real (MapType1Select Mask@29 crt@0 val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 crt@0 val))) (=> (= (ControlFlow 0 33) 32) anon170_correct))))))
(let ((anon168_correct  (=> (and (state Heap@13 Mask@29) (state Heap@13 Mask@29)) (and (=> (= (ControlFlow 0 36) (- 0 37)) (= FullPerm (U_2_real (MapType1Select Mask@29 crt@0 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@29 crt@0 next))) (=> (and (= Heap@14 (MapType0Store Heap@13 crt@0 next freshObj@0)) (state Heap@14 Mask@29)) (and (=> (= (ControlFlow 0 36) 33) anon271_Then_correct) (=> (= (ControlFlow 0 36) 35) anon271_Else_correct))))))))
(let ((anon270_Else_correct  (=> (= (MapType0Select Heap@11 freshObj@0 next) null) (=> (and (= Heap@13 Heap@11) (= (ControlFlow 0 39) 36)) anon168_correct))))
(let ((anon270_Then_correct  (=> (not (= (MapType0Select Heap@11 freshObj@0 next) null)) (=> (and (and (forall ((o_9 T@U) (f_13 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_13))))
(let ((A@@17 (FieldTypeInv0 (type f_13))))
 (=> (and (and (= (type o_9) RefType) (= (type f_13) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@11 null (|List#sm| freshObj@0)) o_9 f_13)) (U_2_bool (MapType1Select (MapType0Select Heap@11 null (|List#sm| (MapType0Select Heap@11 freshObj@0 next))) o_9 f_13)))) (U_2_bool (MapType1Select newPMask@1 o_9 f_13)))))
 :qid |stdinbpl.1572:29|
 :skolemid |45|
 :pattern ( (MapType1Select newPMask@1 o_9 f_13))
)) (= Heap@12 (MapType0Store Heap@11 null (|List#sm| freshObj@0) newPMask@1))) (and (= Heap@13 Heap@12) (= (ControlFlow 0 38) 36))) anon168_correct))))
(let ((anon166_correct  (=> (and (= Heap@10 (MapType0Store Heap@9 null (|List#sm| freshObj@0) (MapType1Store (MapType0Select Heap@9 null (|List#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Heap@11 (MapType0Store Heap@10 null (|List#sm| freshObj@0) (MapType1Store (MapType0Select Heap@10 null (|List#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 40) 38) anon270_Then_correct) (=> (= (ControlFlow 0 40) 39) anon270_Else_correct)))))
(let ((anon269_Else_correct  (=> (HasDirectPerm Mask@29 null (List freshObj@0)) (=> (and (= Heap@9 Heap@6) (= (ControlFlow 0 42) 40)) anon166_correct))))
(let ((anon269_Then_correct  (=> (not (HasDirectPerm Mask@29 null (List freshObj@0))) (=> (and (and (= Heap@7 (MapType0Store Heap@6 null (|List#sm| freshObj@0) ZeroPMask)) (= Heap@8 (MapType0Store Heap@7 null (List freshObj@0) freshVersion@0))) (and (= Heap@9 Heap@8) (= (ControlFlow 0 41) 40))) anon166_correct))))
(let ((anon164_correct  (=> (= Mask@29 (MapType1Store Mask@28 null (List freshObj@0) (real_2_U (+ (U_2_real (MapType1Select Mask@28 null (List freshObj@0))) FullPerm)))) (=> (and (and (state Heap@6 Mask@29) (state Heap@6 Mask@29)) (and (|List#trigger| Heap@6 (List freshObj@0)) (= (MapType0Select Heap@6 null (List freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Heap@6 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Heap@6 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Heap@6 freshObj@0 next) null)) (MapType0Select Heap@6 null (List (MapType0Select Heap@6 freshObj@0 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 43) 41) anon269_Then_correct) (=> (= (ControlFlow 0 43) 42) anon269_Else_correct))))))
(let ((anon163_correct  (=> (and (and (= Mask@27 (MapType1Store Mask@26 null (List (MapType0Select Heap@6 freshObj@0 next)) (real_2_U (- (U_2_real (MapType1Select Mask@26 null (List (MapType0Select Heap@6 freshObj@0 next)))) FullPerm)))) (InsidePredicate (List freshObj@0) (MapType0Select Heap@6 null (List freshObj@0)) (List (MapType0Select Heap@6 freshObj@0 next)) (MapType0Select Heap@6 null (List (MapType0Select Heap@6 freshObj@0 next))))) (and (= Mask@28 Mask@27) (= (ControlFlow 0 45) 43))) anon164_correct)))
(let ((anon268_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 48) 45)) anon163_correct)))
(let ((anon268_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (<= FullPerm (U_2_real (MapType1Select Mask@26 null (List (MapType0Select Heap@6 freshObj@0 next)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@26 null (List (MapType0Select Heap@6 freshObj@0 next))))) (=> (= (ControlFlow 0 46) 45) anon163_correct))))))
(let ((anon267_Then_correct  (=> (not (= (MapType0Select Heap@6 freshObj@0 next) null)) (and (=> (= (ControlFlow 0 49) 46) anon268_Then_correct) (=> (= (ControlFlow 0 49) 48) anon268_Else_correct)))))
(let ((anon267_Else_correct  (=> (= (MapType0Select Heap@6 freshObj@0 next) null) (=> (and (= Mask@28 Mask@26) (= (ControlFlow 0 44) 43)) anon164_correct))))
(let ((anon160_correct  (=> (= Mask@26 (MapType1Store Mask@25 freshObj@0 next (real_2_U (- (U_2_real (MapType1Select Mask@25 freshObj@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 50) 49) anon267_Then_correct) (=> (= (ControlFlow 0 50) 44) anon267_Else_correct)))))
(let ((anon266_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 53) 50)) anon160_correct)))
(let ((anon266_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 51) (- 0 52)) (<= FullPerm (U_2_real (MapType1Select Mask@25 freshObj@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@25 freshObj@0 next))) (=> (= (ControlFlow 0 51) 50) anon160_correct))))))
(let ((anon158_correct  (=> (= Mask@25 (MapType1Store Mask@24 freshObj@0 val (real_2_U (- (U_2_real (MapType1Select Mask@24 freshObj@0 val)) FullPerm)))) (and (=> (= (ControlFlow 0 54) 51) anon266_Then_correct) (=> (= (ControlFlow 0 54) 53) anon266_Else_correct)))))
(let ((anon265_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 57) 54)) anon158_correct)))
(let ((anon265_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 55) (- 0 56)) (<= FullPerm (U_2_real (MapType1Select Mask@24 freshObj@0 val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@24 freshObj@0 val))) (=> (= (ControlFlow 0 55) 54) anon158_correct))))))
(let ((anon156_correct  (=> (and (= Mask@22 (MapType1Store Mask@21 null (wand crt@0 FullPerm xs@@9 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@21 null (wand crt@0 FullPerm xs@@9 FullPerm))) FullPerm)))) (state ExhaleHeap@0 Mask@22)) (=> (and (and (and (state ExhaleHeap@0 Mask@22) (state ExhaleHeap@0 Mask@22)) (and (not (= freshObj@0 null)) (not (U_2_bool (MapType0Select ExhaleHeap@0 freshObj@0 $allocated))))) (and (and (= Heap@4 (MapType0Store ExhaleHeap@0 freshObj@0 $allocated (bool_2_U true))) (= Mask@23 (MapType1Store Mask@22 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select Mask@22 freshObj@0 val)) FullPerm))))) (and (= Mask@24 (MapType1Store Mask@23 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@23 freshObj@0 next)) FullPerm)))) (state Heap@4 Mask@24)))) (and (=> (= (ControlFlow 0 58) (- 0 60)) (= FullPerm (U_2_real (MapType1Select Mask@24 freshObj@0 val)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@24 freshObj@0 val))) (=> (and (= Heap@5 (MapType0Store Heap@4 freshObj@0 val (int_2_U x@@8))) (state Heap@5 Mask@24)) (and (=> (= (ControlFlow 0 58) (- 0 59)) (= FullPerm (U_2_real (MapType1Select Mask@24 freshObj@0 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@24 freshObj@0 next))) (=> (and (= Heap@6 (MapType0Store Heap@5 freshObj@0 next nxt@1)) (state Heap@6 Mask@24)) (and (=> (= (ControlFlow 0 58) 55) anon265_Then_correct) (=> (= (ControlFlow 0 58) 57) anon265_Else_correct))))))))))))
(let ((anon264_Else_correct  (=> (= nxt@1 null) (=> (and (= Mask@21 Mask@19) (= (ControlFlow 0 62) 58)) anon156_correct))))
(let ((anon264_Then_correct  (=> (not (= nxt@1 null)) (=> (and (and (= Mask@20 (MapType1Store Mask@19 null (List nxt@1) (real_2_U (+ (U_2_real (MapType1Select Mask@19 null (List nxt@1))) FullPerm)))) (state ExhaleHeap@0 Mask@20)) (and (= Mask@21 Mask@20) (= (ControlFlow 0 61) 58))) anon156_correct))))
(let ((anon205_Else_correct  (=> (not (and (not (= nxt@1 null)) (< (head ExhaleHeap@0 nxt@1) x@@8))) (=> (and (and (and (state ExhaleHeap@0 Mask@13) (not (= crt@0 null))) (and (= Mask@18 (MapType1Store Mask@13 crt@0 val (real_2_U (+ (U_2_real (MapType1Select Mask@13 crt@0 val)) FullPerm)))) (state ExhaleHeap@0 Mask@18))) (and (and (not (= crt@0 null)) (= Mask@19 (MapType1Store Mask@18 crt@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@18 crt@0 next)) FullPerm))))) (and (state ExhaleHeap@0 Mask@19) (= nxt@1 (MapType0Select ExhaleHeap@0 crt@0 next))))) (and (=> (= (ControlFlow 0 63) 61) anon264_Then_correct) (=> (= (ControlFlow 0 63) 62) anon264_Else_correct))))))
(let ((anon34_correct  (and (=> (= (ControlFlow 0 229) (- 0 230)) (<= FullPerm (U_2_real (MapType1Select Mask@12 null (wand xs@@9 FullPerm xs@@9 FullPerm))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@12 null (wand xs@@9 FullPerm xs@@9 FullPerm)))) (=> (and (and (= Mask@13 (MapType1Store Mask@12 null (wand xs@@9 FullPerm xs@@9 FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@12 null (wand xs@@9 FullPerm xs@@9 FullPerm))) FullPerm)))) (IdenticalOnKnownLocations Heap@3 ExhaleHeap@0 Mask@13)) (and (U_2_bool (MapType0Select ExhaleHeap@0 nxt@1 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@0 crt@0 $allocated)))) (and (and (=> (= (ControlFlow 0 229) 227) anon202_Then_correct) (=> (= (ControlFlow 0 229) 221) anon205_Then_correct)) (=> (= (ControlFlow 0 229) 63) anon205_Else_correct)))))))
(let ((anon33_correct  (=> (= Mask@11 (MapType1Store Mask@10 null (List nxt@0) (real_2_U (- (U_2_real (MapType1Select Mask@10 null (List nxt@0))) FullPerm)))) (=> (and (= Mask@12 Mask@11) (= (ControlFlow 0 232) 229)) anon34_correct))))
(let ((anon201_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 235) 232)) anon33_correct)))
(let ((anon201_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 233) (- 0 234)) (<= FullPerm (U_2_real (MapType1Select Mask@10 null (List nxt@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@10 null (List nxt@0)))) (=> (= (ControlFlow 0 233) 232) anon33_correct))))))
(let ((anon200_Then_correct  (=> (not (= nxt@0 null)) (and (=> (= (ControlFlow 0 236) 233) anon201_Then_correct) (=> (= (ControlFlow 0 236) 235) anon201_Else_correct)))))
(let ((anon200_Else_correct  (=> (= nxt@0 null) (=> (and (= Mask@12 Mask@10) (= (ControlFlow 0 231) 229)) anon34_correct))))
(let ((anon30_correct  (=> (= Mask@10 (MapType1Store Mask@9 xs@@9 next (real_2_U (- (U_2_real (MapType1Select Mask@9 xs@@9 next)) FullPerm)))) (and (=> (= (ControlFlow 0 237) (- 0 238)) (= nxt@0 (MapType0Select Heap@3 xs@@9 next))) (=> (= nxt@0 (MapType0Select Heap@3 xs@@9 next)) (and (=> (= (ControlFlow 0 237) 236) anon200_Then_correct) (=> (= (ControlFlow 0 237) 231) anon200_Else_correct)))))))
(let ((anon199_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 241) 237)) anon30_correct)))
(let ((anon199_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 239) (- 0 240)) (<= FullPerm (U_2_real (MapType1Select Mask@9 xs@@9 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 xs@@9 next))) (=> (= (ControlFlow 0 239) 237) anon30_correct))))))
(let ((anon28_correct  (=> (= Mask@9 (MapType1Store Mask@8 xs@@9 val (real_2_U (- (U_2_real (MapType1Select Mask@8 xs@@9 val)) FullPerm)))) (and (=> (= (ControlFlow 0 242) 239) anon199_Then_correct) (=> (= (ControlFlow 0 242) 241) anon199_Else_correct)))))
(let ((anon198_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 245) 242)) anon28_correct)))
(let ((anon198_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 243) (- 0 244)) (<= FullPerm (U_2_real (MapType1Select Mask@8 xs@@9 val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 xs@@9 val))) (=> (= (ControlFlow 0 243) 242) anon28_correct))))))
(let ((anon26_correct  (and (=> (= (ControlFlow 0 246) (- 0 247)) (=> (and (and b_1_1@4 b_1_1@4) b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (List xs@@9))) initNeededTransfer@0)))) (=> (=> (and (and b_1_1@4 b_1_1@4) b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (List xs@@9))) initNeededTransfer@0))) (=> (and (= b_3@0  (and b_1_1@4 b_2_1@6)) (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0)))) (=> (and (and (and (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask Used_1Mask@3))) (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@0 ResultHeap Ops_1Mask)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3)))) (and (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0))) (= b_1_1@5  (and b_1_1@4 b_3@4)))) (and (and (= Mask@8 (MapType1Store Mask@7 null (wand xs@@9 FullPerm xs@@9 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@7 null (wand xs@@9 FullPerm xs@@9 FullPerm))) FullPerm)))) (state Heap@3 Mask@8)) (and (state Heap@3 Mask@8) (state Heap@3 Mask@8)))) (and (=> (= (ControlFlow 0 246) 243) anon198_Then_correct) (=> (= (ControlFlow 0 246) 245) anon198_Else_correct))))))))
(let ((anon197_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@7 Mask@5) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 250) 246))) anon26_correct)))))
(let ((anon197_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType1Store Used_1Mask@1 null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 null (List xs@@9))) takeTransfer@1))))) (=> (and (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= TempMask@1 (MapType1Store ZeroMask null (List xs@@9) (real_2_U FullPerm)))) (and (= b_2_1@5  (and b_2_1@4 (IdenticalOnKnownLocations Heap@1 Used_1Heap@0 TempMask@1))) (= Mask@6 (MapType1Store Mask@5 null (List xs@@9) (real_2_U (- (U_2_real (MapType1Select Mask@5 null (List xs@@9))) takeTransfer@1)))))) (=> (and (and (and (forall ((o_4 T@U) (f_8 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_8))))
(let ((A@@18 (FieldTypeInv0 (type f_8))))
 (=> (and (and (= (type o_4) RefType) (= (type f_8) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@1 null (|wand#sm| xs@@9 FullPerm xs@@9 FullPerm)) o_4 f_8)) (U_2_bool (MapType1Select (MapType0Select Heap@1 null (|List#sm| xs@@9)) o_4 f_8)))) (U_2_bool (MapType1Select newPMask@0 o_4 f_8)))))
 :qid |stdinbpl.696:35|
 :skolemid |40|
 :pattern ( (MapType1Select newPMask@0 o_4 f_8))
)) (= Heap@2 (MapType0Store Heap@1 null (|wand#sm| xs@@9 FullPerm xs@@9 FullPerm) newPMask@0))) (and (= Mask@7 Mask@6) (= Heap@3 Heap@2))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_2_1@6 b_2_1@5)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 249) 246)))) anon26_correct))))))
(let ((anon196_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 252) 249) anon197_Then_correct) (=> (= (ControlFlow 0 252) 250) anon197_Else_correct)))))
(let ((anon196_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 251) 249) anon197_Then_correct) (=> (= (ControlFlow 0 251) 250) anon197_Else_correct)))))
(let ((anon195_Then_correct  (=> (and (and (and (and (and b_1_1@4 b_1_1@4) b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@5 null (List xs@@9))))) (and (=> (= (ControlFlow 0 253) 251) anon196_Then_correct) (=> (= (ControlFlow 0 253) 252) anon196_Else_correct)))))
(let ((anon195_Else_correct  (=> (not (and (and (and (and b_1_1@4 b_1_1@4) b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@7 Mask@5) (= Heap@3 Heap@1)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 248) 246))) anon26_correct)))))
(let ((anon194_Else_correct  (=> (and (and (>= 0.0 takeTransfer@0) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 256) 253) anon195_Then_correct) (=> (= (ControlFlow 0 256) 248) anon195_Else_correct)))))
(let ((anon194_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@0 (- FullPerm takeTransfer@0))) (=> (and (and (and (= Used_1Mask@0 (MapType1Store ZeroMask null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List xs@@9))) takeTransfer@0)))) (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0)))) (and (= TempMask@0 (MapType1Store ZeroMask null (List xs@@9) (real_2_U FullPerm))) (= b_2_1@2  (and b_2_1@1 (IdenticalOnKnownLocations Ops_1Heap@0 Used_1Heap@0 TempMask@0))))) (and (and (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 null (List xs@@9) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@1 null (List xs@@9))) takeTransfer@0)))) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 255) 253) anon195_Then_correct) (=> (= (ControlFlow 0 255) 248) anon195_Else_correct))))))
(let ((anon193_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 258) 255) anon194_Then_correct) (=> (= (ControlFlow 0 258) 256) anon194_Else_correct)))))
(let ((anon193_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 257) 255) anon194_Then_correct) (=> (= (ControlFlow 0 257) 256) anon194_Else_correct)))))
(let ((anon192_Then_correct  (=> (and (and (and (and (and b_1_1@4 b_1_1@4) b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_1Mask@1 null (List xs@@9))))) (and (=> (= (ControlFlow 0 259) 257) anon193_Then_correct) (=> (= (ControlFlow 0 259) 258) anon193_Else_correct)))))
(let ((anon192_Else_correct  (=> (and (and (not (and (and (and (and b_1_1@4 b_1_1@4) b_2_1@0) true) (> FullPerm 0.0))) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 254) 253) anon195_Then_correct) (=> (= (ControlFlow 0 254) 248) anon195_Else_correct)))))
(let ((anon14_correct  (=> (and (and (= b_1_1@3  (and b_1_1@2 (state Ops_1Heap@0 Ops_1Mask@1))) (= b_1_1@4  (and b_1_1@3 (state Ops_1Heap@0 Ops_1Mask@1)))) (and (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (List xs@@9))) FullPerm)))) (and (=> (= (ControlFlow 0 260) (- 0 261)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 260) 259) anon192_Then_correct) (=> (= (ControlFlow 0 260) 254) anon192_Else_correct)))))))
(let ((anon191_Else_correct  (=> (and (and (not b_1_1@0) (= Ops_1Mask@1 ZeroMask)) (and (= b_1_1@2 b_1_1@0) (= (ControlFlow 0 263) 260))) anon14_correct)))
(let ((anon191_Then_correct  (=> (and b_1_1@0 (= Ops_1Mask@0 (MapType1Store ZeroMask null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List xs@@9))) FullPerm))))) (=> (and (and (= b_1_1@1  (and b_1_1@0 (state Ops_1Heap@0 Ops_1Mask@0))) (= Ops_1Mask@1 Ops_1Mask@0)) (and (= b_1_1@2 b_1_1@1) (= (ControlFlow 0 262) 260))) anon14_correct))))
(let ((anon12_correct  (=> (state Heap@1 Mask@5) (=> (and (state Heap@1 Mask@5) (state Heap@1 Mask@5)) (and (=> (= (ControlFlow 0 264) (- 0 265)) (HasDirectPerm Mask@5 xs@@9 next)) (=> (HasDirectPerm Mask@5 xs@@9 next) (=> (and (and (= nxt@0 (MapType0Select Heap@1 xs@@9 next)) (state Heap@1 Mask@5)) (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 264) 262) anon191_Then_correct) (=> (= (ControlFlow 0 264) 263) anon191_Else_correct)))))))))
(let ((anon190_Else_correct  (=> (= (MapType0Select Heap@1 xs@@9 next) null) (=> (and (= Mask@5 Mask@3) (= (ControlFlow 0 267) 264)) anon12_correct))))
(let ((anon190_Then_correct  (=> (and (not (= (MapType0Select Heap@1 xs@@9 next) null)) (= Mask@4 (MapType1Store Mask@3 null (List (MapType0Select Heap@1 xs@@9 next)) (real_2_U (+ (U_2_real (MapType1Select Mask@3 null (List (MapType0Select Heap@1 xs@@9 next)))) FullPerm))))) (=> (and (and (InsidePredicate (List xs@@9) (MapType0Select Heap@1 null (List xs@@9)) (List (MapType0Select Heap@1 xs@@9 next)) (MapType0Select Heap@1 null (List (MapType0Select Heap@1 xs@@9 next)))) (state Heap@1 Mask@4)) (and (= Mask@5 Mask@4) (= (ControlFlow 0 266) 264))) anon12_correct))))
(let ((anon10_correct  (=> (and (not (= xs@@9 null)) (= Mask@2 (MapType1Store Mask@1 xs@@9 val (real_2_U (+ (U_2_real (MapType1Select Mask@1 xs@@9 val)) FullPerm))))) (=> (and (and (state Heap@1 Mask@2) (not (= xs@@9 null))) (and (= Mask@3 (MapType1Store Mask@2 xs@@9 next (real_2_U (+ (U_2_real (MapType1Select Mask@2 xs@@9 next)) FullPerm)))) (state Heap@1 Mask@3))) (and (=> (= (ControlFlow 0 268) 266) anon190_Then_correct) (=> (= (ControlFlow 0 268) 267) anon190_Else_correct))))))
(let ((anon189_Else_correct  (=> (HasDirectPerm Mask@1 null (List xs@@9)) (=> (and (= Heap@1 Heap@@14) (= (ControlFlow 0 270) 268)) anon10_correct))))
(let ((anon189_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (List xs@@9))) (= Heap@0 (MapType0Store Heap@@14 null (List xs@@9) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 269) 268))) anon10_correct)))
(let ((anon8_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (List xs@@9) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (List xs@@9))) FullPerm)))) (and (=> (= (ControlFlow 0 271) 269) anon189_Then_correct) (=> (= (ControlFlow 0 271) 270) anon189_Else_correct)))))
(let ((anon188_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 274) 271)) anon8_correct)))
(let ((anon188_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 272) (- 0 273)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs@@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs@@9)))) (=> (= (ControlFlow 0 272) 271) anon8_correct))))))
(let ((anon187_Else_correct  (=> (and (U_2_bool (MapType0Select Heap@@14 crt $allocated)) (U_2_bool (MapType0Select Heap@@14 nxt $allocated))) (=> (and (and (U_2_bool (MapType0Select Heap@@14 node $allocated)) (state Heap@@14 Mask@0)) (and (|List#trigger| Heap@@14 (List xs@@9)) (= (MapType0Select Heap@@14 null (List xs@@9)) (CombineFrames (FrameFragment (MapType0Select Heap@@14 xs@@9 val)) (CombineFrames (FrameFragment (MapType0Select Heap@@14 xs@@9 next)) (FrameFragment (ite (not (= (MapType0Select Heap@@14 xs@@9 next) null)) (MapType0Select Heap@@14 null (List (MapType0Select Heap@@14 xs@@9 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 275) 272) anon188_Then_correct) (=> (= (ControlFlow 0 275) 274) anon188_Else_correct))))))
(let ((anon187_Then_correct true))
(let ((anon185_Else_correct  (=> (and (< (head Heap@@14 xs@@9) x@@8) (state Heap@@14 Mask@0)) (and (=> (= (ControlFlow 0 276) 5) anon187_Then_correct) (=> (= (ControlFlow 0 276) 275) anon187_Else_correct)))))
(let ((anon3_correct true))
(let ((anon186_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon186_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs@@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List xs@@9)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (state Heap@@14 ZeroMask) (=> (and (= AssumeFunctionsAbove (- 0 1)) (U_2_bool (MapType0Select Heap@@14 xs@@9 $allocated))) (=> (and (and (= Mask@0 (MapType1Store ZeroMask null (List xs@@9) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List xs@@9))) FullPerm)))) (state Heap@@14 Mask@0)) (and (state Heap@@14 Mask@0) (state Heap@@14 Mask@0))) (and (and (=> (= (ControlFlow 0 277) 276) anon185_Else_correct) (=> (= (ControlFlow 0 277) 2) anon186_Then_correct)) (=> (= (ControlFlow 0 277) 4) anon186_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 278) 277) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
