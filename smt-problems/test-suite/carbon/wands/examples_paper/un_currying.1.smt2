(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun RefType () T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (Real Real Real) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand#ft| (Real Real Real) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun wand_2 (Real Real Real) T@U)
(declare-fun WandType_wand_2Type () T@T)
(declare-fun |wand_2#ft| (Real Real Real) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun wand_1 (Real Real) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun |wand_1#ft| (Real Real) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun P () T@U)
(declare-fun PredicateType_PType () T@T)
(declare-fun Q () T@U)
(declare-fun PredicateType_QType () T@T)
(declare-fun R () T@U)
(declare-fun PredicateType_RType () T@T)
(declare-fun |wand#sm| (Real Real Real) T@U)
(declare-fun |wand_2#sm| (Real Real Real) T@U)
(declare-fun $allocated () T@U)
(declare-fun NormalFieldType () T@T)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun FullPerm () Real)
(declare-fun |P#trigger| (T@U T@U) Bool)
(declare-fun |P#everUsed| (T@U) Bool)
(declare-fun |Q#trigger| (T@U T@U) Bool)
(declare-fun |Q#everUsed| (T@U) Bool)
(declare-fun |R#trigger| (T@U T@U) Bool)
(declare-fun |R#everUsed| (T@U) Bool)
(declare-fun |wand_1#sm| (Real Real) T@U)
(declare-fun |P#sm| () T@U)
(declare-fun |Q#sm| () T@U)
(declare-fun |R#sm| () T@U)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) ) (! (= (Ctor (MapType0Type arg0@@11)) 6)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@12 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@12)) arg0@@12)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@12))
))) (forall ((arg0@@13 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@13 arg1)) 7)
 :qid |ctor:FieldType|
))) (forall ((arg0@@14 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@14 arg1@@0)) arg0@@14)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@14 arg1@@0))
))) (forall ((arg0@@15 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@15 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@15 arg1@@1))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (Ctor RefType) 8)))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 9)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (Ctor WandType_wandType) 10) (forall ((arg0@@23 Real) (arg1@@9 Real) (arg2@@3 Real) ) (! (= (type (wand arg0@@23 arg1@@9 arg2@@3)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@23 arg1@@9 arg2@@3))
))))
(assert (forall ((arg1@@10 Real) (arg2@@4 Real) (arg3@@1 Real) ) (! (IsWandField (wand arg1@@10 arg2@@4 arg3@@1))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand arg1@@10 arg2@@4 arg3@@1))
)))
(assert  (and (= (Ctor FrameTypeType) 11) (forall ((arg0@@24 Real) (arg1@@11 Real) (arg2@@5 Real) ) (! (= (type (|wand#ft| arg0@@24 arg1@@11 arg2@@5)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@24 arg1@@11 arg2@@5))
))))
(assert (forall ((arg1@@12 Real) (arg2@@6 Real) (arg3@@2 Real) ) (! (IsWandField (|wand#ft| arg1@@12 arg2@@6 arg3@@2))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@12 arg2@@6 arg3@@2))
)))
(assert  (and (= (Ctor WandType_wand_2Type) 12) (forall ((arg0@@25 Real) (arg1@@13 Real) (arg2@@7 Real) ) (! (= (type (wand_2 arg0@@25 arg1@@13 arg2@@7)) (FieldType WandType_wand_2Type intType))
 :qid |funType:wand_2|
 :pattern ( (wand_2 arg0@@25 arg1@@13 arg2@@7))
))))
(assert (forall ((arg1@@14 Real) (arg2@@8 Real) (arg3@@3 Real) ) (! (IsWandField (wand_2 arg1@@14 arg2@@8 arg3@@3))
 :qid |stdinbpl.247:15|
 :skolemid |36|
 :pattern ( (wand_2 arg1@@14 arg2@@8 arg3@@3))
)))
(assert (forall ((arg0@@26 Real) (arg1@@15 Real) (arg2@@9 Real) ) (! (= (type (|wand_2#ft| arg0@@26 arg1@@15 arg2@@9)) (FieldType WandType_wand_2Type FrameTypeType))
 :qid |funType:wand_2#ft|
 :pattern ( (|wand_2#ft| arg0@@26 arg1@@15 arg2@@9))
)))
(assert (forall ((arg1@@16 Real) (arg2@@10 Real) (arg3@@4 Real) ) (! (IsWandField (|wand_2#ft| arg1@@16 arg2@@10 arg3@@4))
 :qid |stdinbpl.251:15|
 :skolemid |37|
 :pattern ( (|wand_2#ft| arg1@@16 arg2@@10 arg3@@4))
)))
(assert (forall ((arg1@@17 Real) (arg2@@11 Real) (arg3@@5 Real) ) (! (= (getPredWandId (wand arg1@@17 arg2@@11 arg3@@5)) 3)
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand arg1@@17 arg2@@11 arg3@@5))
)))
(assert (forall ((arg1@@18 Real) (arg2@@12 Real) (arg3@@6 Real) ) (! (= (getPredWandId (wand_2 arg1@@18 arg2@@12 arg3@@6)) 5)
 :qid |stdinbpl.267:15|
 :skolemid |41|
 :pattern ( (wand_2 arg1@@18 arg2@@12 arg3@@6))
)))
(assert (forall ((arg1@@19 Real) (arg2@@13 Real) (arg3@@7 Real) ) (!  (not (IsPredicateField (wand arg1@@19 arg2@@13 arg3@@7)))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand arg1@@19 arg2@@13 arg3@@7))
)))
(assert (forall ((arg1@@20 Real) (arg2@@14 Real) (arg3@@8 Real) ) (!  (not (IsPredicateField (|wand#ft| arg1@@20 arg2@@14 arg3@@8)))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@20 arg2@@14 arg3@@8))
)))
(assert (forall ((arg1@@21 Real) (arg2@@15 Real) (arg3@@9 Real) ) (!  (not (IsPredicateField (wand_2 arg1@@21 arg2@@15 arg3@@9)))
 :qid |stdinbpl.255:15|
 :skolemid |38|
 :pattern ( (wand_2 arg1@@21 arg2@@15 arg3@@9))
)))
(assert (forall ((arg1@@22 Real) (arg2@@16 Real) (arg3@@10 Real) ) (!  (not (IsPredicateField (|wand_2#ft| arg1@@22 arg2@@16 arg3@@10)))
 :qid |stdinbpl.259:15|
 :skolemid |39|
 :pattern ( (|wand_2#ft| arg1@@22 arg2@@16 arg3@@10))
)))
(assert  (and (= (Ctor WandType_wand_1Type) 13) (forall ((arg0@@27 Real) (arg1@@23 Real) ) (! (= (type (wand_1 arg0@@27 arg1@@23)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@27 arg1@@23))
))))
(assert (forall ((arg1@@24 Real) (arg2@@17 Real) ) (! (IsWandField (wand_1 arg1@@24 arg2@@17))
 :qid |stdinbpl.215:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@24 arg2@@17))
)))
(assert (forall ((arg0@@28 Real) (arg1@@25 Real) ) (! (= (type (|wand_1#ft| arg0@@28 arg1@@25)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@28 arg1@@25))
)))
(assert (forall ((arg1@@26 Real) (arg2@@18 Real) ) (! (IsWandField (|wand_1#ft| arg1@@26 arg2@@18))
 :qid |stdinbpl.219:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@26 arg2@@18))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@29 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@29))))
(= (type (PredicateMaskField arg0@@29)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@29))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@30 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@30))))
(= (type (WandMaskField arg0@@30)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@30))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_PType) 14) (= (type P) (FieldType PredicateType_PType FrameTypeType))))
(assert (IsPredicateField P))
(assert  (and (= (Ctor PredicateType_QType) 15) (= (type Q) (FieldType PredicateType_QType FrameTypeType))))
(assert (IsPredicateField Q))
(assert  (and (= (Ctor PredicateType_RType) 16) (= (type R) (FieldType PredicateType_RType FrameTypeType))))
(assert (IsPredicateField R))
(assert (forall ((arg1@@27 Real) (arg2@@19 Real) ) (!  (not (IsPredicateField (wand_1 arg1@@27 arg2@@19)))
 :qid |stdinbpl.223:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@27 arg2@@19))
)))
(assert (forall ((arg1@@28 Real) (arg2@@20 Real) ) (!  (not (IsPredicateField (|wand_1#ft| arg1@@28 arg2@@20)))
 :qid |stdinbpl.227:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@28 arg2@@20))
)))
(assert (= (getPredWandId P) 0))
(assert (= (getPredWandId Q) 1))
(assert (= (getPredWandId R) 2))
(assert (forall ((arg0@@31 Real) (arg1@@29 Real) (arg2@@21 Real) ) (! (= (type (|wand#sm| arg0@@31 arg1@@29 arg2@@21)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@31 arg1@@29 arg2@@21))
)))
(assert (forall ((arg1@@30 Real) (arg2@@22 Real) (arg3@@11 Real) ) (! (= (|wand#sm| arg1@@30 arg2@@22 arg3@@11) (WandMaskField (|wand#ft| arg1@@30 arg2@@22 arg3@@11)))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@30 arg2@@22 arg3@@11)))
)))
(assert (forall ((arg0@@32 Real) (arg1@@31 Real) (arg2@@23 Real) ) (! (= (type (|wand_2#sm| arg0@@32 arg1@@31 arg2@@23)) (FieldType WandType_wand_2Type (MapType1Type RefType boolType)))
 :qid |funType:wand_2#sm|
 :pattern ( (|wand_2#sm| arg0@@32 arg1@@31 arg2@@23))
)))
(assert (forall ((arg1@@32 Real) (arg2@@24 Real) (arg3@@12 Real) ) (! (= (|wand_2#sm| arg1@@32 arg2@@24 arg3@@12) (WandMaskField (|wand_2#ft| arg1@@32 arg2@@24 arg3@@12)))
 :qid |stdinbpl.263:15|
 :skolemid |40|
 :pattern ( (WandMaskField (|wand_2#ft| arg1@@32 arg2@@24 arg3@@12)))
)))
(assert  (and (= (Ctor NormalFieldType) 17) (= (type $allocated) (FieldType NormalFieldType boolType))))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@2 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((arg1@@33 Real) (arg2@@25 Real) (arg3@@13 Real) (arg1_2 Real) (arg2_2 Real) (arg3_2 Real) ) (!  (=> (= (wand arg1@@33 arg2@@25 arg3@@13) (wand arg1_2 arg2_2 arg3_2)) (and (= arg1@@33 arg1_2) (and (= arg2@@25 arg2_2) (= arg3@@13 arg3_2))))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand arg1@@33 arg2@@25 arg3@@13) (wand arg1_2 arg2_2 arg3_2))
)))
(assert (forall ((arg1@@34 Real) (arg2@@26 Real) (arg3@@14 Real) (arg1_2@@0 Real) (arg2_2@@0 Real) (arg3_2@@0 Real) ) (!  (=> (= (wand_2 arg1@@34 arg2@@26 arg3@@14) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0)) (and (= arg1@@34 arg1_2@@0) (and (= arg2@@26 arg2_2@@0) (= arg3@@14 arg3_2@@0))))
 :qid |stdinbpl.271:15|
 :skolemid |42|
 :pattern ( (wand_2 arg1@@34 arg2@@26 arg3@@14) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0))
)))
(assert (forall ((arg1@@35 Real) (arg2@@27 Real) (arg1_2@@1 Real) (arg2_2@@1 Real) ) (!  (=> (= (wand_1 arg1@@35 arg2@@27) (wand_1 arg1_2@@1 arg2_2@@1)) (and (= arg1@@35 arg1_2@@1) (= arg2@@27 arg2_2@@1)))
 :qid |stdinbpl.239:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@35 arg2@@27) (wand_1 arg1_2@@1 arg2_2@@1))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@3 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@4 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@33 Real) (arg1@@36 T@U) ) (! (= (type (ConditionalFrame arg0@@33 arg1@@36)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@33 arg1@@36))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@37 Real) (arg2@@28 Real) ) (! (= (getPredWandId (wand_1 arg1@@37 arg2@@28)) 4)
 :qid |stdinbpl.235:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@37 arg2@@28))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@5 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@5 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@6 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@7 T@U) ) (!  (=> (= (type Heap@@7) (MapType0Type RefType)) (|P#everUsed| P))
 :qid |stdinbpl.289:15|
 :skolemid |43|
 :pattern ( (|P#trigger| Heap@@7 P))
)))
(assert (forall ((Heap@@8 T@U) ) (!  (=> (= (type Heap@@8) (MapType0Type RefType)) (|Q#everUsed| Q))
 :qid |stdinbpl.307:15|
 :skolemid |44|
 :pattern ( (|Q#trigger| Heap@@8 Q))
)))
(assert (forall ((Heap@@9 T@U) ) (!  (=> (= (type Heap@@9) (MapType0Type RefType)) (|R#everUsed| R))
 :qid |stdinbpl.325:15|
 :skolemid |45|
 :pattern ( (|R#trigger| Heap@@9 R))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@10 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@10) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@10 o $allocated))) (U_2_bool (MapType0Select Heap@@10 (MapType0Select Heap@@10 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@10 o f))
)))
(assert (forall ((arg0@@34 Real) (arg1@@38 Real) ) (! (= (type (|wand_1#sm| arg0@@34 arg1@@38)) (FieldType WandType_wand_1Type (MapType1Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@34 arg1@@38))
)))
(assert (forall ((arg1@@39 Real) (arg2@@29 Real) ) (! (= (|wand_1#sm| arg1@@39 arg2@@29) (WandMaskField (|wand_1#ft| arg1@@39 arg2@@29)))
 :qid |stdinbpl.231:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@39 arg2@@29)))
)))
(assert (= (type |P#sm|) (FieldType PredicateType_PType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField P) |P#sm|))
(assert (= (type |Q#sm|) (FieldType PredicateType_QType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField Q) |Q#sm|))
(assert (= (type |R#sm|) (FieldType PredicateType_RType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField R) |R#sm|))
(assert (forall ((Heap@@11 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@11 (MapType0Store Heap@@11 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@11 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun WandDefLHSMask@1 () T@U)
(declare-fun WandDefLHSHeap@1 () T@U)
(declare-fun b_1_1@32 () Bool)
(declare-fun b_10@6 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_5Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_11@0 () Bool)
(declare-fun b_11@1 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun b_11@2 () Bool)
(declare-fun Ops_1Mask () T@U)
(declare-fun b_11@3 () Bool)
(declare-fun Ops_1Heap@2 () T@U)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun b_11@4 () Bool)
(declare-fun b_1_1@33 () Bool)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun takeTransfer@9 () Real)
(declare-fun Heap@5 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun neededTransfer@17 () Real)
(declare-fun b_10@3 () Bool)
(declare-fun Used_5Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_5Mask@2 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_10@5 () Bool)
(declare-fun Mask@11 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun b_10@0 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_5Mask@0 () T@U)
(declare-fun b_10@1 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_1Mask@16 () T@U)
(declare-fun Ops_1Mask@15 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_10 () Bool)
(declare-fun b_1_1@23 () Bool)
(declare-fun b_8@6 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_9@0 () Bool)
(declare-fun b_9@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_1Mask@13 () T@U)
(declare-fun b_9@3 () Bool)
(declare-fun Ops_1Heap@1 () T@U)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_9@4 () Bool)
(declare-fun b_1_1@24 () Bool)
(declare-fun b_1_1@25 () Bool)
(declare-fun b_1_1@26 () Bool)
(declare-fun b_1_1@27 () Bool)
(declare-fun Ops_1Mask@14 () T@U)
(declare-fun b_1_1@28 () Bool)
(declare-fun b_1_1@29 () Bool)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun b_1_1@30 () Bool)
(declare-fun b_1_1@31 () Bool)
(declare-fun Mask@9 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun takeTransfer@7 () Real)
(declare-fun Heap@2 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun b_8@3 () Bool)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_8@4 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_8@5 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_1Mask@11 () T@U)
(declare-fun b_8@0 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_8@1 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_8@2 () Bool)
(declare-fun Ops_1Mask@12 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun b_1_1@19 () Bool)
(declare-fun b_6@4 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun Used_3Mask@3 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun b_7@4 () Bool)
(declare-fun b_1_1@20 () Bool)
(declare-fun b_1_1@21 () Bool)
(declare-fun b_1_1@22 () Bool)
(declare-fun b_8 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun Mask@5 () T@U)
(declare-fun b_6@2 () Bool)
(declare-fun Used_3Mask@1 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_3Mask@2 () T@U)
(declare-fun b_6@3 () Bool)
(declare-fun Mask@6 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_1Mask@9 () T@U)
(declare-fun b_6@0 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_3Mask@0 () T@U)
(declare-fun b_6@1 () Bool)
(declare-fun Ops_1Mask@10 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_6 () Bool)
(declare-fun b_1_1@10 () Bool)
(declare-fun b_4@6 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun Used_2Mask@3 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_5@0 () Bool)
(declare-fun b_5@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun Ops_1Mask@7 () T@U)
(declare-fun b_5@3 () Bool)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun b_5@4 () Bool)
(declare-fun b_1_1@11 () Bool)
(declare-fun b_1_1@12 () Bool)
(declare-fun b_1_1@13 () Bool)
(declare-fun b_1_1@14 () Bool)
(declare-fun Ops_1Mask@8 () T@U)
(declare-fun b_1_1@15 () Bool)
(declare-fun b_1_1@16 () Bool)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_1_1@17 () Bool)
(declare-fun b_1_1@18 () Bool)
(declare-fun Mask@4 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun takeTransfer@3 () Real)
(declare-fun b_4@3 () Bool)
(declare-fun Mask@2 () T@U)
(declare-fun Used_2Mask@1 () T@U)
(declare-fun neededTransfer@5 () Real)
(declare-fun Heap@@12 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_2Mask@2 () T@U)
(declare-fun b_4@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_4@5 () Bool)
(declare-fun Mask@3 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun b_4@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_2Mask@0 () T@U)
(declare-fun b_4@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_4@2 () Bool)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_1_1@6 () Bool)
(declare-fun b_2_1@4 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_3@2 () Bool)
(declare-fun b_3@3 () Bool)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_3@4 () Bool)
(declare-fun b_1_1@7 () Bool)
(declare-fun b_1_1@8 () Bool)
(declare-fun b_1_1@9 () Bool)
(declare-fun b_4 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@0 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@2 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@3 () Bool)
(declare-fun Mask@1 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@5 () Bool)
(declare-fun b_1_1@4 () Bool)
(declare-fun b_1_1@2 () Bool)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun b_1_1@3 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@1 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Used_5Mask@3) (MapType1Type RefType realType)) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask) (MapType1Type RefType realType))) (= (type Ops_1Heap@2) (MapType0Type RefType))) (= (type Used_5Heap@0) (MapType0Type RefType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Used_5Mask@1) (MapType1Type RefType realType))) (= (type Used_5Mask@2) (MapType1Type RefType realType))) (= (type TempMask@5) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Used_5Mask@0) (MapType1Type RefType realType))) (= (type TempMask@4) (MapType1Type RefType realType))) (= (type Ops_1Mask@16) (MapType1Type RefType realType))) (= (type Ops_1Mask@15) (MapType1Type RefType realType))) (= (type Ops_1Heap@1) (MapType0Type RefType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Ops_1Mask@9) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Used_4Mask@3) (MapType1Type RefType realType))) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@13) (MapType1Type RefType realType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@14) (MapType1Type RefType realType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Used_4Mask@1) (MapType1Type RefType realType))) (= (type Used_4Mask@2) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Ops_1Mask@11) (MapType1Type RefType realType))) (= (type Used_4Mask@0) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@12) (MapType1Type RefType realType))) (= (type Used_3Mask@3) (MapType1Type RefType realType))) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type Used_3Heap@0) (MapType0Type RefType))) (= (type Used_3Mask@1) (MapType1Type RefType realType))) (= (type Used_3Mask@2) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Used_3Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@10) (MapType1Type RefType realType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@3) (MapType1Type RefType realType))) (= (type Heap@@12) (MapType0Type RefType))) (= (type Used_2Mask@3) (MapType1Type RefType realType))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@7) (MapType1Type RefType realType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@8) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Used_2Mask@1) (MapType1Type RefType realType))) (= (type Used_2Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@5) (MapType1Type RefType realType))) (= (type Used_2Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@6) (MapType1Type RefType realType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@4) (MapType1Type RefType realType))) (= (type WandDefLHSMask@1) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@1) (MapType0Type RefType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type UsedHeap@0) (MapType0Type RefType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type WandDefLHSMask@0) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id uncurry)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 112) (let ((anon89_Else_correct true))
(let ((anon89_Then_correct true))
(let ((anon88_Then_correct  (=> (and (and (= WandDefLHSMask@0 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (state WandDefLHSHeap@0 WandDefLHSMask@0))) (and (=> (= (ControlFlow 0 110) 108) anon89_Then_correct) (=> (= (ControlFlow 0 110) 109) anon89_Else_correct)))))
(let ((anon91_Else_correct true))
(let ((anon91_Then_correct true))
(let ((anon90_Then_correct  (=> (state PostHeap@0 ZeroMask) (and (=> (= (ControlFlow 0 106) 104) anon91_Then_correct) (=> (= (ControlFlow 0 106) 105) anon91_Else_correct)))))
(let ((anon99_Else_correct true))
(let ((anon99_Then_correct true))
(let ((anon98_Then_correct  (=> (and (and (= WandDefLHSMask@1 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm)))) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (and (state WandDefLHSHeap@1 WandDefLHSMask@1) (state WandDefLHSHeap@1 WandDefLHSMask@1))) (and (=> (= (ControlFlow 0 92) 90) anon99_Then_correct) (=> (= (ControlFlow 0 92) 91) anon99_Else_correct)))))
(let ((anon115_Then_correct true))
(let ((anon87_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (and (and b_1_1@32 b_1_1@32) b_10@6) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null R)) initNeededTransfer@4)))) (=> (=> (and (and b_1_1@32 b_1_1@32) b_10@6) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null R)) initNeededTransfer@4))) (=> (= b_11@0  (and b_1_1@32 b_10@6)) (=> (and (= b_11@1  (and b_11@0 (state Result_4Heap Result_4Mask))) (= b_11@2  (and b_11@1 (sumMask Result_4Mask Ops_1Mask Used_5Mask@3)))) (=> (and (and (and (= b_11@3  (and (and b_11@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_4Heap Ops_1Mask)) (IdenticalOnKnownLocations Used_5Heap@0 Result_4Heap Used_5Mask@3))) (= b_11@4  (and b_11@3 (state Result_4Heap Result_4Mask)))) (and (= b_1_1@33  (and b_1_1@32 b_11@4)) (= Mask@13 (MapType1Store Mask@12 null (wand_2 FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@12 null (wand_2 FullPerm FullPerm FullPerm))) FullPerm)))))) (and (and (state Heap@7 Mask@13) (state Heap@7 Mask@13)) (and (state Heap@7 Mask@13) (= (ControlFlow 0 2) (- 0 1))))) (<= FullPerm (U_2_real (MapType1Select Mask@13 null (wand_2 FullPerm FullPerm FullPerm)))))))))))
(let ((anon133_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (= Heap@7 Heap@5) (= Mask@12 Mask@10)) (=> (and (and (= neededTransfer@19 neededTransfer@17) (= b_10@6 b_10@3)) (and (= Used_5Mask@3 Used_5Mask@1) (= (ControlFlow 0 6) 2))) anon87_correct)))))
(let ((anon133_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9)) (= Used_5Mask@2 (MapType1Store Used_5Mask@1 null R (real_2_U (+ (U_2_real (MapType1Select Used_5Mask@1 null R)) takeTransfer@9))))) (=> (and (and (= b_10@4  (and b_10@3 (state Used_5Heap@0 Used_5Mask@2))) (= TempMask@5 (MapType1Store ZeroMask null R (real_2_U FullPerm)))) (and (= b_10@5  (and b_10@4 (IdenticalOnKnownLocations Heap@5 Used_5Heap@0 TempMask@5))) (= Mask@11 (MapType1Store Mask@10 null R (real_2_U (- (U_2_real (MapType1Select Mask@10 null R)) takeTransfer@9)))))) (=> (and (and (and (forall ((o_5 T@U) (f_9 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_9))))
(let ((A@@12 (FieldTypeInv0 (type f_9))))
 (=> (and (and (= (type o_5) RefType) (= (type f_9) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|wand_2#sm| FullPerm FullPerm FullPerm)) o_5 f_9)) (U_2_bool (MapType1Select (MapType0Select Heap@5 null |R#sm|) o_5 f_9)))) (U_2_bool (MapType1Select newPMask@2 o_5 f_9)))))
 :qid |stdinbpl.975:35|
 :skolemid |48|
 :pattern ( (MapType1Select newPMask@2 o_5 f_9))
)) (= Heap@6 (MapType0Store Heap@5 null (|wand_2#sm| FullPerm FullPerm FullPerm) newPMask@2))) (and (= Heap@7 Heap@6) (= Mask@12 Mask@11))) (and (and (= neededTransfer@19 neededTransfer@18) (= b_10@6 b_10@5)) (and (= Used_5Mask@3 Used_5Mask@2) (= (ControlFlow 0 5) 2)))) anon87_correct))))))
(let ((anon132_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 8) 5) anon133_Then_correct) (=> (= (ControlFlow 0 8) 6) anon133_Else_correct)))))
(let ((anon132_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 7) 5) anon133_Then_correct) (=> (= (ControlFlow 0 7) 6) anon133_Else_correct)))))
(let ((anon131_Then_correct  (=> (and (and (and (and (and b_1_1@32 b_1_1@32) b_10@3) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Mask@10 null R)))) (and (=> (= (ControlFlow 0 9) 7) anon132_Then_correct) (=> (= (ControlFlow 0 9) 8) anon132_Else_correct)))))
(let ((anon131_Else_correct  (=> (not (and (and (and (and b_1_1@32 b_1_1@32) b_10@3) true) (> neededTransfer@17 0.0))) (=> (and (= Heap@7 Heap@5) (= Mask@12 Mask@10)) (=> (and (and (= neededTransfer@19 neededTransfer@17) (= b_10@6 b_10@3)) (and (= Used_5Mask@3 Used_5Mask@1) (= (ControlFlow 0 4) 2))) anon87_correct)))))
(let ((anon130_Else_correct  (=> (and (and (>= 0.0 takeTransfer@8) (= Used_5Mask@1 ZeroMask)) (and (= b_10@3 b_10@0) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 12) 9) anon131_Then_correct) (=> (= (ControlFlow 0 12) 4) anon131_Else_correct)))))
(let ((anon130_Then_correct  (=> (and (> takeTransfer@8 0.0) (= neededTransfer@16 (- FullPerm takeTransfer@8))) (=> (and (and (and (= Used_5Mask@0 (MapType1Store ZeroMask null R (real_2_U (+ (U_2_real (MapType1Select ZeroMask null R)) takeTransfer@8)))) (= b_10@1  (and b_10@0 (state Used_5Heap@0 Used_5Mask@0)))) (and (= TempMask@4 (MapType1Store ZeroMask null R (real_2_U FullPerm))) (= b_10@2  (and b_10@1 (IdenticalOnKnownLocations Ops_1Heap@2 Used_5Heap@0 TempMask@4))))) (and (and (= Ops_1Mask@16 (MapType1Store Ops_1Mask@15 null R (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@15 null R)) takeTransfer@8)))) (= Used_5Mask@1 Used_5Mask@0)) (and (= b_10@3 b_10@2) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 11) 9) anon131_Then_correct) (=> (= (ControlFlow 0 11) 4) anon131_Else_correct))))))
(let ((anon129_Else_correct  (=> (and (< maskTransfer@8 FullPerm) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 14) 11) anon130_Then_correct) (=> (= (ControlFlow 0 14) 12) anon130_Else_correct)))))
(let ((anon129_Then_correct  (=> (and (<= FullPerm maskTransfer@8) (= takeTransfer@8 FullPerm)) (and (=> (= (ControlFlow 0 13) 11) anon130_Then_correct) (=> (= (ControlFlow 0 13) 12) anon130_Else_correct)))))
(let ((anon128_Then_correct  (=> (and (and (and (and (and b_1_1@32 b_1_1@32) b_10@0) true) (> FullPerm 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Ops_1Mask@15 null R)))) (and (=> (= (ControlFlow 0 15) 13) anon129_Then_correct) (=> (= (ControlFlow 0 15) 14) anon129_Else_correct)))))
(let ((anon128_Else_correct  (=> (and (and (not (and (and (and (and b_1_1@32 b_1_1@32) b_10@0) true) (> FullPerm 0.0))) (= Used_5Mask@1 ZeroMask)) (and (= b_10@3 b_10@0) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 10) 9) anon131_Then_correct) (=> (= (ControlFlow 0 10) 4) anon131_Else_correct)))))
(let ((anon75_correct  (=> (and (= b_10@0  (and b_10 (state Used_5Heap@0 ZeroMask))) (= initNeededTransfer@4 (+ (U_2_real (MapType1Select ZeroMask null R)) FullPerm))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 16) 15) anon128_Then_correct) (=> (= (ControlFlow 0 16) 10) anon128_Else_correct)))))))
(let ((anon74_correct  (and (=> (= (ControlFlow 0 19) (- 0 20)) (=> (and b_1_1@23 b_8@6) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 null Q)) initNeededTransfer@3)))) (=> (=> (and b_1_1@23 b_8@6) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 null Q)) initNeededTransfer@3))) (=> (= b_9@0  (and b_1_1@23 b_8@6)) (=> (and (and (= b_9@1  (and b_9@0 (state Result_3Heap Result_3Mask))) (= b_9@2  (and b_9@1 (sumMask Result_3Mask Ops_1Mask@13 Used_4Mask@3)))) (and (= b_9@3  (and (and b_9@2 (IdenticalOnKnownLocations Ops_1Heap@1 Result_3Heap Ops_1Mask@13)) (IdenticalOnKnownLocations Used_4Heap@0 Result_3Heap Used_4Mask@3))) (= b_9@4  (and b_9@3 (state Result_3Heap Result_3Mask))))) (=> (and (and (and (and (= b_1_1@24  (and b_1_1@23 b_9@4)) (= b_1_1@25  (and b_1_1@24 b_8@6))) (and (= b_1_1@26  (and b_1_1@25 (= Used_4Heap@0 Ops_1Heap@1))) (= b_1_1@27  (and b_1_1@26 (state Ops_1Heap@1 Ops_1Mask@13))))) (and (and (= Ops_1Mask@14 (MapType1Store Ops_1Mask@13 null R (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@13 null R)) FullPerm)))) (= b_1_1@28  (and b_1_1@27 (state Ops_1Heap@1 Ops_1Mask@14)))) (and (= b_1_1@29  (and b_1_1@28 (state Ops_1Heap@1 Ops_1Mask@14))) (IdenticalOnKnownLocations Ops_1Heap@1 ExhaleHeap@1 Ops_1Mask@14)))) (and (and (and (= b_1_1@30  (and b_1_1@29 (state ExhaleHeap@1 Ops_1Mask@14))) (= b_1_1@31  (and b_1_1@30 (state ExhaleHeap@1 Ops_1Mask@14)))) (and (= b_1_1@32 b_1_1@31) (= Ops_1Heap@2 ExhaleHeap@1))) (and (and (= Mask@10 Mask@9) (= Ops_1Mask@15 Ops_1Mask@14)) (and (= Heap@5 Heap@4) (= (ControlFlow 0 19) 16))))) anon75_correct)))))))
(let ((anon127_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= Heap@4 Heap@2) (= Mask@9 Mask@7)) (=> (and (and (= b_8@6 b_8@3) (= Used_4Mask@3 Used_4Mask@1)) (and (= neededTransfer@15 neededTransfer@13) (= (ControlFlow 0 23) 19))) anon74_correct)))))
(let ((anon127_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_4Mask@2 (MapType1Store Used_4Mask@1 null Q (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@1 null Q)) takeTransfer@7))))) (=> (and (and (= b_8@4  (and b_8@3 (state Used_4Heap@0 Used_4Mask@2))) (= TempMask@3 (MapType1Store ZeroMask null Q (real_2_U FullPerm)))) (and (= b_8@5  (and b_8@4 (IdenticalOnKnownLocations Heap@2 Used_4Heap@0 TempMask@3))) (= Mask@8 (MapType1Store Mask@7 null Q (real_2_U (- (U_2_real (MapType1Select Mask@7 null Q)) takeTransfer@7)))))) (=> (and (and (and (forall ((o_4 T@U) (f_8 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_8))))
(let ((A@@13 (FieldTypeInv0 (type f_8))))
 (=> (and (and (= (type o_4) RefType) (= (type f_8) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|wand_2#sm| FullPerm FullPerm FullPerm)) o_4 f_8)) (U_2_bool (MapType1Select (MapType0Select Heap@2 null |Q#sm|) o_4 f_8)))) (U_2_bool (MapType1Select newPMask@1 o_4 f_8)))))
 :qid |stdinbpl.891:41|
 :skolemid |47|
 :pattern ( (MapType1Select newPMask@1 o_4 f_8))
)) (= Heap@3 (MapType0Store Heap@2 null (|wand_2#sm| FullPerm FullPerm FullPerm) newPMask@1))) (and (= Heap@4 Heap@3) (= Mask@9 Mask@8))) (and (and (= b_8@6 b_8@5) (= Used_4Mask@3 Used_4Mask@2)) (and (= neededTransfer@15 neededTransfer@14) (= (ControlFlow 0 22) 19)))) anon74_correct))))))
(let ((anon126_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 25) 22) anon127_Then_correct) (=> (= (ControlFlow 0 25) 23) anon127_Else_correct)))))
(let ((anon126_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 24) 22) anon127_Then_correct) (=> (= (ControlFlow 0 24) 23) anon127_Else_correct)))))
(let ((anon125_Then_correct  (=> (and (and (and (and b_1_1@23 b_8@3) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@7 null Q)))) (and (=> (= (ControlFlow 0 26) 24) anon126_Then_correct) (=> (= (ControlFlow 0 26) 25) anon126_Else_correct)))))
(let ((anon125_Else_correct  (=> (not (and (and (and b_1_1@23 b_8@3) true) (> neededTransfer@13 0.0))) (=> (and (= Heap@4 Heap@2) (= Mask@9 Mask@7)) (=> (and (and (= b_8@6 b_8@3) (= Used_4Mask@3 Used_4Mask@1)) (and (= neededTransfer@15 neededTransfer@13) (= (ControlFlow 0 21) 19))) anon74_correct)))))
(let ((anon124_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= neededTransfer@13 FullPerm) (= Ops_1Mask@13 Ops_1Mask@11)) (and (= Used_4Mask@1 ZeroMask) (= b_8@3 b_8@0))) (and (=> (= (ControlFlow 0 29) 26) anon125_Then_correct) (=> (= (ControlFlow 0 29) 21) anon125_Else_correct))))))
(let ((anon124_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Used_4Mask@0 (MapType1Store ZeroMask null Q (real_2_U (+ (U_2_real (MapType1Select ZeroMask null Q)) takeTransfer@6))))) (=> (and (and (and (= b_8@1  (and b_8@0 (state Used_4Heap@0 Used_4Mask@0))) (= TempMask@2 (MapType1Store ZeroMask null Q (real_2_U FullPerm)))) (and (= b_8@2  (and b_8@1 (IdenticalOnKnownLocations Ops_1Heap@1 Used_4Heap@0 TempMask@2))) (= Ops_1Mask@12 (MapType1Store Ops_1Mask@11 null Q (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@11 null Q)) takeTransfer@6)))))) (and (and (= neededTransfer@13 neededTransfer@12) (= Ops_1Mask@13 Ops_1Mask@12)) (and (= Used_4Mask@1 Used_4Mask@0) (= b_8@3 b_8@2)))) (and (=> (= (ControlFlow 0 28) 26) anon125_Then_correct) (=> (= (ControlFlow 0 28) 21) anon125_Else_correct)))))))
(let ((anon123_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 31) 28) anon124_Then_correct) (=> (= (ControlFlow 0 31) 29) anon124_Else_correct)))))
(let ((anon123_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 30) 28) anon124_Then_correct) (=> (= (ControlFlow 0 30) 29) anon124_Else_correct)))))
(let ((anon122_Then_correct  (=> (and (and (and (and b_1_1@23 b_8@0) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_1Mask@11 null Q)))) (and (=> (= (ControlFlow 0 32) 30) anon123_Then_correct) (=> (= (ControlFlow 0 32) 31) anon123_Else_correct)))))
(let ((anon122_Else_correct  (=> (not (and (and (and b_1_1@23 b_8@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@13 FullPerm) (= Ops_1Mask@13 Ops_1Mask@11)) (and (= Used_4Mask@1 ZeroMask) (= b_8@3 b_8@0))) (and (=> (= (ControlFlow 0 27) 26) anon125_Then_correct) (=> (= (ControlFlow 0 27) 21) anon125_Else_correct))))))
(let ((anon62_correct  (and (=> (= (ControlFlow 0 33) (- 0 35)) (=> (and b_1_1@19 b_6@4) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 null (wand_1 FullPerm FullPerm))) initNeededTransfer@2)))) (=> (=> (and b_1_1@19 b_6@4) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 null (wand_1 FullPerm FullPerm))) initNeededTransfer@2))) (=> (= b_7@0  (and b_1_1@19 b_6@4)) (=> (and (= b_7@1  (and b_7@0 (state Result_2Heap Result_2Mask))) (= b_7@2  (and b_7@1 (sumMask Result_2Mask Ops_1Mask@11 Used_3Mask@3)))) (=> (and (and (and (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_1Heap@1 Result_2Heap Ops_1Mask@11)) (IdenticalOnKnownLocations Used_3Heap@0 Result_2Heap Used_3Mask@3))) (= b_7@4  (and b_7@3 (state Result_2Heap Result_2Mask)))) (and (= b_1_1@20  (and b_1_1@19 b_7@4)) (= b_1_1@21  (and b_1_1@20 b_6@4)))) (and (and (= b_1_1@22  (and b_1_1@21 (= Used_3Heap@0 Ops_1Heap@1))) (= b_1_1@23  (and b_1_1@22 (state Ops_1Heap@1 Ops_1Mask@11)))) (and (= b_8@0  (and b_8 (state Used_4Heap@0 ZeroMask))) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select ZeroMask null Q)) FullPerm))))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 33) 32) anon122_Then_correct) (=> (= (ControlFlow 0 33) 27) anon122_Else_correct)))))))))))
(let ((anon121_Else_correct  (=> (and (>= 0.0 takeTransfer@5) (= neededTransfer@11 neededTransfer@9)) (=> (and (and (= Mask@7 Mask@5) (= b_6@4 b_6@2)) (and (= Used_3Mask@3 Used_3Mask@1) (= (ControlFlow 0 38) 33))) anon62_correct))))
(let ((anon121_Then_correct  (=> (and (> takeTransfer@5 0.0) (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5))) (=> (and (and (and (= Used_3Mask@2 (MapType1Store Used_3Mask@1 null (wand_1 FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@1 null (wand_1 FullPerm FullPerm))) takeTransfer@5)))) (= b_6@3  (and b_6@2 (state Used_3Heap@0 Used_3Mask@2)))) (and (= Mask@6 (MapType1Store Mask@5 null (wand_1 FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@5 null (wand_1 FullPerm FullPerm))) takeTransfer@5)))) (= neededTransfer@11 neededTransfer@10))) (and (and (= Mask@7 Mask@6) (= b_6@4 b_6@3)) (and (= Used_3Mask@3 Used_3Mask@2) (= (ControlFlow 0 37) 33)))) anon62_correct))))
(let ((anon120_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 40) 37) anon121_Then_correct) (=> (= (ControlFlow 0 40) 38) anon121_Else_correct)))))
(let ((anon120_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 39) 37) anon121_Then_correct) (=> (= (ControlFlow 0 39) 38) anon121_Else_correct)))))
(let ((anon119_Then_correct  (=> (and (and (and (and b_1_1@19 b_6@2) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@5 null (wand_1 FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 41) 39) anon120_Then_correct) (=> (= (ControlFlow 0 41) 40) anon120_Else_correct)))))
(let ((anon119_Else_correct  (=> (and (not (and (and (and b_1_1@19 b_6@2) true) (> neededTransfer@9 0.0))) (= neededTransfer@11 neededTransfer@9)) (=> (and (and (= Mask@7 Mask@5) (= b_6@4 b_6@2)) (and (= Used_3Mask@3 Used_3Mask@1) (= (ControlFlow 0 36) 33))) anon62_correct))))
(let ((anon118_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_1Mask@11 Ops_1Mask@9) (= Used_3Mask@1 ZeroMask)) (and (= b_6@2 b_6@0) (= neededTransfer@9 1.0))) (and (=> (= (ControlFlow 0 44) 41) anon119_Then_correct) (=> (= (ControlFlow 0 44) 36) anon119_Else_correct))))))
(let ((anon118_Then_correct  (=> (> takeTransfer@4 0.0) (=> (and (and (and (= neededTransfer@8 (- 1.0 takeTransfer@4)) (= Used_3Mask@0 (MapType1Store ZeroMask null (wand_1 FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand_1 FullPerm FullPerm))) takeTransfer@4))))) (and (= b_6@1  (and b_6@0 (state Used_3Heap@0 Used_3Mask@0))) (= Ops_1Mask@10 (MapType1Store Ops_1Mask@9 null (wand_1 FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@9 null (wand_1 FullPerm FullPerm))) takeTransfer@4)))))) (and (and (= Ops_1Mask@11 Ops_1Mask@10) (= Used_3Mask@1 Used_3Mask@0)) (and (= b_6@2 b_6@1) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 43) 41) anon119_Then_correct) (=> (= (ControlFlow 0 43) 36) anon119_Else_correct))))))
(let ((anon117_Else_correct  (=> (and (< maskTransfer@4 1.0) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 46) 43) anon118_Then_correct) (=> (= (ControlFlow 0 46) 44) anon118_Else_correct)))))
(let ((anon117_Then_correct  (=> (and (<= 1.0 maskTransfer@4) (= takeTransfer@4 1.0)) (and (=> (= (ControlFlow 0 45) 43) anon118_Then_correct) (=> (= (ControlFlow 0 45) 44) anon118_Else_correct)))))
(let ((anon116_Then_correct  (=> (and (and (and (and b_1_1@19 b_6@0) true) (> 1.0 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_1Mask@9 null (wand_1 FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 47) 45) anon117_Then_correct) (=> (= (ControlFlow 0 47) 46) anon117_Else_correct)))))
(let ((anon116_Else_correct  (=> (not (and (and (and b_1_1@19 b_6@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_1Mask@11 Ops_1Mask@9) (= Used_3Mask@1 ZeroMask)) (and (= b_6@2 b_6@0) (= neededTransfer@9 1.0))) (and (=> (= (ControlFlow 0 42) 41) anon119_Then_correct) (=> (= (ControlFlow 0 42) 36) anon119_Else_correct))))))
(let ((anon50_correct  (=> (= initNeededTransfer@2 (+ (U_2_real (MapType1Select ZeroMask null (wand_1 FullPerm FullPerm))) 1.0)) (and (=> (= (ControlFlow 0 48) (- 0 49)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 48) 47) anon116_Then_correct) (=> (= (ControlFlow 0 48) 42) anon116_Else_correct)))))))
(let ((anon114_Then_correct  (=> b_1_1@19 (and (=> (= (ControlFlow 0 53) 52) anon115_Then_correct) (=> (= (ControlFlow 0 53) 48) anon50_correct)))))
(let ((anon114_Else_correct  (=> (and (not b_1_1@19) (= (ControlFlow 0 51) 48)) anon50_correct)))
(let ((anon113_Then_correct  (=> (and b_1_1@19 b_6@0) (and (=> (= (ControlFlow 0 54) 53) anon114_Then_correct) (=> (= (ControlFlow 0 54) 51) anon114_Else_correct)))))
(let ((anon113_Else_correct  (=> (and (not (and b_1_1@19 b_6@0)) (= (ControlFlow 0 50) 48)) anon50_correct)))
(let ((anon112_Then_correct  (=> (and b_1_1@19 (= b_6@0  (and b_6 (state Used_3Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 55) 54) anon113_Then_correct) (=> (= (ControlFlow 0 55) 50) anon113_Else_correct)))))
(let ((anon112_Else_correct  (=> (not b_1_1@19) (=> (and (= b_1_1@32 b_1_1@19) (= Ops_1Heap@2 Ops_1Heap@1)) (=> (and (and (= Mask@10 Mask@5) (= Ops_1Mask@15 Ops_1Mask@9)) (and (= Heap@5 Heap@2) (= (ControlFlow 0 18) 16))) anon75_correct)))))
(let ((anon44_correct  (and (=> (= (ControlFlow 0 57) (- 0 58)) (=> (and b_1_1@10 b_4@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null P)) initNeededTransfer@1)))) (=> (=> (and b_1_1@10 b_4@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 null P)) initNeededTransfer@1))) (=> (and (and (= b_5@0  (and b_1_1@10 b_4@6)) (= b_5@1  (and b_5@0 (state Result_1Heap Result_1Mask)))) (and (= b_5@2  (and b_5@1 (sumMask Result_1Mask Ops_1Mask@7 Used_2Mask@3))) (= b_5@3  (and (and b_5@2 (IdenticalOnKnownLocations Ops_1Heap@0 Result_1Heap Ops_1Mask@7)) (IdenticalOnKnownLocations Used_2Heap@0 Result_1Heap Used_2Mask@3))))) (=> (and (and (and (and (= b_5@4  (and b_5@3 (state Result_1Heap Result_1Mask))) (= b_1_1@11  (and b_1_1@10 b_5@4))) (and (= b_1_1@12  (and b_1_1@11 b_4@6)) (= b_1_1@13  (and b_1_1@12 (= Used_2Heap@0 Ops_1Heap@0))))) (and (and (= b_1_1@14  (and b_1_1@13 (state Ops_1Heap@0 Ops_1Mask@7))) (= Ops_1Mask@8 (MapType1Store Ops_1Mask@7 null (wand_1 FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@7 null (wand_1 FullPerm FullPerm))) FullPerm))))) (and (= b_1_1@15  (and b_1_1@14 (state Ops_1Heap@0 Ops_1Mask@8))) (= b_1_1@16  (and b_1_1@15 (state Ops_1Heap@0 Ops_1Mask@8)))))) (and (and (and (IdenticalOnKnownLocations Ops_1Heap@0 ExhaleHeap@0 Ops_1Mask@8) (= b_1_1@17  (and b_1_1@16 (state ExhaleHeap@0 Ops_1Mask@8)))) (and (= b_1_1@18  (and b_1_1@17 (state ExhaleHeap@0 Ops_1Mask@8))) (= Ops_1Heap@1 ExhaleHeap@0))) (and (and (= b_1_1@19 b_1_1@18) (= Mask@5 Mask@4)) (and (= Ops_1Mask@9 Ops_1Mask@8) (= Heap@2 Heap@1))))) (and (=> (= (ControlFlow 0 57) 55) anon112_Then_correct) (=> (= (ControlFlow 0 57) 18) anon112_Else_correct))))))))
(let ((anon111_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= b_4@6 b_4@3) (= Mask@4 Mask@2)) (=> (and (and (= Used_2Mask@3 Used_2Mask@1) (= neededTransfer@7 neededTransfer@5)) (and (= Heap@1 Heap@@12) (= (ControlFlow 0 61) 57))) anon44_correct)))))
(let ((anon111_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_2Mask@2 (MapType1Store Used_2Mask@1 null P (real_2_U (+ (U_2_real (MapType1Select Used_2Mask@1 null P)) takeTransfer@3))))) (=> (and (and (= b_4@4  (and b_4@3 (state Used_2Heap@0 Used_2Mask@2))) (= TempMask@1 (MapType1Store ZeroMask null P (real_2_U FullPerm)))) (and (= b_4@5  (and b_4@4 (IdenticalOnKnownLocations Heap@@12 Used_2Heap@0 TempMask@1))) (= Mask@3 (MapType1Store Mask@2 null P (real_2_U (- (U_2_real (MapType1Select Mask@2 null P)) takeTransfer@3)))))) (=> (and (and (and (forall ((o_3 T@U) (f_7 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_7))))
(let ((A@@14 (FieldTypeInv0 (type f_7))))
 (=> (and (and (= (type o_3) RefType) (= (type f_7) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@@12 null (|wand_2#sm| FullPerm FullPerm FullPerm)) o_3 f_7)) (U_2_bool (MapType1Select (MapType0Select Heap@@12 null |P#sm|) o_3 f_7)))) (U_2_bool (MapType1Select newPMask@0 o_3 f_7)))))
 :qid |stdinbpl.710:41|
 :skolemid |46|
 :pattern ( (MapType1Select newPMask@0 o_3 f_7))
)) (= Heap@0 (MapType0Store Heap@@12 null (|wand_2#sm| FullPerm FullPerm FullPerm) newPMask@0))) (and (= b_4@6 b_4@5) (= Mask@4 Mask@3))) (and (and (= Used_2Mask@3 Used_2Mask@2) (= neededTransfer@7 neededTransfer@6)) (and (= Heap@1 Heap@0) (= (ControlFlow 0 60) 57)))) anon44_correct))))))
(let ((anon110_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 63) 60) anon111_Then_correct) (=> (= (ControlFlow 0 63) 61) anon111_Else_correct)))))
(let ((anon110_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 62) 60) anon111_Then_correct) (=> (= (ControlFlow 0 62) 61) anon111_Else_correct)))))
(let ((anon109_Then_correct  (=> (and (and (and (and b_1_1@10 b_4@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@2 null P)))) (and (=> (= (ControlFlow 0 64) 62) anon110_Then_correct) (=> (= (ControlFlow 0 64) 63) anon110_Else_correct)))))
(let ((anon109_Else_correct  (=> (not (and (and (and b_1_1@10 b_4@3) true) (> neededTransfer@5 0.0))) (=> (and (= b_4@6 b_4@3) (= Mask@4 Mask@2)) (=> (and (and (= Used_2Mask@3 Used_2Mask@1) (= neededTransfer@7 neededTransfer@5)) (and (= Heap@1 Heap@@12) (= (ControlFlow 0 59) 57))) anon44_correct)))))
(let ((anon108_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_1Mask@7 Ops_1Mask@5)) (and (= Used_2Mask@1 ZeroMask) (= b_4@3 b_4@0))) (and (=> (= (ControlFlow 0 67) 64) anon109_Then_correct) (=> (= (ControlFlow 0 67) 59) anon109_Else_correct))))))
(let ((anon108_Then_correct  (=> (> takeTransfer@2 0.0) (=> (and (= neededTransfer@4 (- FullPerm takeTransfer@2)) (= Used_2Mask@0 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) takeTransfer@2))))) (=> (and (and (and (= b_4@1  (and b_4@0 (state Used_2Heap@0 Used_2Mask@0))) (= TempMask@0 (MapType1Store ZeroMask null P (real_2_U FullPerm)))) (and (= b_4@2  (and b_4@1 (IdenticalOnKnownLocations Ops_1Heap@0 Used_2Heap@0 TempMask@0))) (= Ops_1Mask@6 (MapType1Store Ops_1Mask@5 null P (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@5 null P)) takeTransfer@2)))))) (and (and (= neededTransfer@5 neededTransfer@4) (= Ops_1Mask@7 Ops_1Mask@6)) (and (= Used_2Mask@1 Used_2Mask@0) (= b_4@3 b_4@2)))) (and (=> (= (ControlFlow 0 66) 64) anon109_Then_correct) (=> (= (ControlFlow 0 66) 59) anon109_Else_correct)))))))
(let ((anon107_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 69) 66) anon108_Then_correct) (=> (= (ControlFlow 0 69) 67) anon108_Else_correct)))))
(let ((anon107_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 68) 66) anon108_Then_correct) (=> (= (ControlFlow 0 68) 67) anon108_Else_correct)))))
(let ((anon106_Then_correct  (=> (and (and (and (and b_1_1@10 b_4@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_1Mask@5 null P)))) (and (=> (= (ControlFlow 0 70) 68) anon107_Then_correct) (=> (= (ControlFlow 0 70) 69) anon107_Else_correct)))))
(let ((anon106_Else_correct  (=> (not (and (and (and b_1_1@10 b_4@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_1Mask@7 Ops_1Mask@5)) (and (= Used_2Mask@1 ZeroMask) (= b_4@3 b_4@0))) (and (=> (= (ControlFlow 0 65) 64) anon109_Then_correct) (=> (= (ControlFlow 0 65) 59) anon109_Else_correct))))))
(let ((anon32_correct  (and (=> (= (ControlFlow 0 71) (- 0 73)) (=> (and b_1_1@6 b_2_1@4) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (wand FullPerm FullPerm FullPerm))) initNeededTransfer@0)))) (=> (=> (and b_1_1@6 b_2_1@4) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (wand FullPerm FullPerm FullPerm))) initNeededTransfer@0))) (=> (= b_3@0  (and b_1_1@6 b_2_1@4)) (=> (and (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0))) (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask@5 Used_1Mask@3)))) (=> (and (and (and (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@0 ResultHeap Ops_1Mask@5)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3))) (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0)))) (and (= b_1_1@7  (and b_1_1@6 b_3@4)) (= b_1_1@8  (and b_1_1@7 b_2_1@4)))) (and (and (= b_1_1@9  (and b_1_1@8 (= Used_1Heap@0 Ops_1Heap@0))) (= b_1_1@10  (and b_1_1@9 (state Ops_1Heap@0 Ops_1Mask@5)))) (and (= b_4@0  (and b_4 (state Used_2Heap@0 ZeroMask))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm))))) (and (=> (= (ControlFlow 0 71) (- 0 72)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 71) 70) anon106_Then_correct) (=> (= (ControlFlow 0 71) 65) anon106_Else_correct)))))))))))
(let ((anon105_Else_correct  (=> (and (>= 0.0 takeTransfer@1) (= Mask@2 Mask@0)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@4 b_2_1@2)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 76) 71))) anon32_correct))))
(let ((anon105_Then_correct  (=> (and (> takeTransfer@1 0.0) (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1))) (=> (and (and (and (= Used_1Mask@2 (MapType1Store Used_1Mask@1 null (wand FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 null (wand FullPerm FullPerm FullPerm))) takeTransfer@1)))) (= b_2_1@3  (and b_2_1@2 (state Used_1Heap@0 Used_1Mask@2)))) (and (= Mask@1 (MapType1Store Mask@0 null (wand FullPerm FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (wand FullPerm FullPerm FullPerm))) takeTransfer@1)))) (= Mask@2 Mask@1))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_2_1@4 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 75) 71)))) anon32_correct))))
(let ((anon104_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 78) 75) anon105_Then_correct) (=> (= (ControlFlow 0 78) 76) anon105_Else_correct)))))
(let ((anon104_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 77) 75) anon105_Then_correct) (=> (= (ControlFlow 0 77) 76) anon105_Else_correct)))))
(let ((anon103_Then_correct  (=> (and (and (and (and b_1_1@6 b_2_1@2) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@0 null (wand FullPerm FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 79) 77) anon104_Then_correct) (=> (= (ControlFlow 0 79) 78) anon104_Else_correct)))))
(let ((anon103_Else_correct  (=> (and (not (and (and (and b_1_1@6 b_2_1@2) true) (> neededTransfer@1 0.0))) (= Mask@2 Mask@0)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@4 b_2_1@2)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 74) 71))) anon32_correct))))
(let ((anon102_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@5 Ops_1Mask@3) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@2 b_2_1@0) (= neededTransfer@1 1.0))) (and (=> (= (ControlFlow 0 82) 79) anon103_Then_correct) (=> (= (ControlFlow 0 82) 74) anon103_Else_correct))))))
(let ((anon102_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (and (and (= neededTransfer@0 (- 1.0 takeTransfer@0)) (= Used_1Mask@0 (MapType1Store ZeroMask null (wand FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand FullPerm FullPerm FullPerm))) takeTransfer@0))))) (and (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0))) (= Ops_1Mask@4 (MapType1Store Ops_1Mask@3 null (wand FullPerm FullPerm FullPerm) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@3 null (wand FullPerm FullPerm FullPerm))) takeTransfer@0)))))) (and (and (= Ops_1Mask@5 Ops_1Mask@4) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@2 b_2_1@1) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 81) 79) anon103_Then_correct) (=> (= (ControlFlow 0 81) 74) anon103_Else_correct))))))
(let ((anon101_Else_correct  (=> (and (< maskTransfer@0 1.0) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 84) 81) anon102_Then_correct) (=> (= (ControlFlow 0 84) 82) anon102_Else_correct)))))
(let ((anon101_Then_correct  (=> (and (<= 1.0 maskTransfer@0) (= takeTransfer@0 1.0)) (and (=> (= (ControlFlow 0 83) 81) anon102_Then_correct) (=> (= (ControlFlow 0 83) 82) anon102_Else_correct)))))
(let ((anon100_Then_correct  (=> (and (and (and (and b_1_1@6 b_2_1@0) true) (> 1.0 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_1Mask@3 null (wand FullPerm FullPerm FullPerm))))) (and (=> (= (ControlFlow 0 85) 83) anon101_Then_correct) (=> (= (ControlFlow 0 85) 84) anon101_Else_correct)))))
(let ((anon100_Else_correct  (=> (not (and (and (and b_1_1@6 b_2_1@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_1Mask@5 Ops_1Mask@3) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@2 b_2_1@0) (= neededTransfer@1 1.0))) (and (=> (= (ControlFlow 0 80) 79) anon103_Then_correct) (=> (= (ControlFlow 0 80) 74) anon103_Else_correct))))))
(let ((anon20_correct  (=> (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (wand FullPerm FullPerm FullPerm))) 1.0)) (and (=> (= (ControlFlow 0 86) (- 0 87)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 86) 85) anon100_Then_correct) (=> (= (ControlFlow 0 86) 80) anon100_Else_correct)))))))
(let ((anon97_Then_correct  (=> b_1_1@6 (and (=> (= (ControlFlow 0 93) 92) anon98_Then_correct) (=> (= (ControlFlow 0 93) 86) anon20_correct)))))
(let ((anon97_Else_correct  (=> (and (not b_1_1@6) (= (ControlFlow 0 89) 86)) anon20_correct)))
(let ((anon96_Then_correct  (=> (and b_1_1@6 b_2_1@0) (and (=> (= (ControlFlow 0 94) 93) anon97_Then_correct) (=> (= (ControlFlow 0 94) 89) anon97_Else_correct)))))
(let ((anon96_Else_correct  (=> (and (not (and b_1_1@6 b_2_1@0)) (= (ControlFlow 0 88) 86)) anon20_correct)))
(let ((anon95_Then_correct  (=> (and b_1_1@6 (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 95) 94) anon96_Then_correct) (=> (= (ControlFlow 0 95) 88) anon96_Else_correct)))))
(let ((anon95_Else_correct  (=> (and (not b_1_1@6) (= Ops_1Heap@1 Ops_1Heap@0)) (=> (and (and (= b_1_1@19 b_1_1@6) (= Mask@5 Mask@0)) (and (= Ops_1Mask@9 Ops_1Mask@3) (= Heap@2 Heap@@12))) (and (=> (= (ControlFlow 0 56) 55) anon112_Then_correct) (=> (= (ControlFlow 0 56) 18) anon112_Else_correct))))))
(let ((anon13_correct  (=> (and (= b_1_1@5  (and b_1_1@4 (state Ops_1Heap@0 Ops_1Mask@3))) (= b_1_1@6  (and b_1_1@5 (state Ops_1Heap@0 Ops_1Mask@3)))) (and (=> (= (ControlFlow 0 96) 95) anon95_Then_correct) (=> (= (ControlFlow 0 96) 56) anon95_Else_correct)))))
(let ((anon94_Else_correct  (=> (and (and (not b_1_1@2) (= b_1_1@4 b_1_1@2)) (and (= Ops_1Mask@3 Ops_1Mask@1) (= (ControlFlow 0 99) 96))) anon13_correct)))
(let ((anon94_Then_correct  (=> (and b_1_1@2 (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 null Q (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@1 null Q)) FullPerm))))) (=> (and (and (= b_1_1@3  (and b_1_1@2 (state Ops_1Heap@0 Ops_1Mask@2))) (= b_1_1@4 b_1_1@3)) (and (= Ops_1Mask@3 Ops_1Mask@2) (= (ControlFlow 0 98) 96))) anon13_correct))))
(let ((anon93_Else_correct  (=> (not b_1_1@0) (=> (and (= Ops_1Mask@1 ZeroMask) (= b_1_1@2 b_1_1@0)) (and (=> (= (ControlFlow 0 101) 98) anon94_Then_correct) (=> (= (ControlFlow 0 101) 99) anon94_Else_correct))))))
(let ((anon93_Then_correct  (=> b_1_1@0 (=> (and (and (= Ops_1Mask@0 (MapType1Store ZeroMask null P (real_2_U (+ (U_2_real (MapType1Select ZeroMask null P)) FullPerm)))) (= b_1_1@1  (and b_1_1@0 (state Ops_1Heap@0 Ops_1Mask@0)))) (and (= Ops_1Mask@1 Ops_1Mask@0) (= b_1_1@2 b_1_1@1))) (and (=> (= (ControlFlow 0 100) 98) anon94_Then_correct) (=> (= (ControlFlow 0 100) 99) anon94_Else_correct))))))
(let ((anon92_Then_correct  (=> b_1_1@0 (and (=> (= (ControlFlow 0 102) 100) anon93_Then_correct) (=> (= (ControlFlow 0 102) 101) anon93_Else_correct)))))
(let ((anon92_Else_correct  (=> (and (and (not b_1_1@0) (= b_1_1@4 b_1_1@0)) (and (= Ops_1Mask@3 ZeroMask) (= (ControlFlow 0 97) 96))) anon13_correct)))
(let ((anon90_Else_correct  (=> (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 103) 102) anon92_Then_correct) (=> (= (ControlFlow 0 103) 97) anon92_Else_correct)))))
(let ((anon88_Else_correct  (=> (= Mask@0 (MapType1Store ZeroMask null (wand FullPerm FullPerm FullPerm) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand FullPerm FullPerm FullPerm))) FullPerm)))) (=> (and (state Heap@@12 Mask@0) (state Heap@@12 Mask@0)) (and (=> (= (ControlFlow 0 107) 106) anon90_Then_correct) (=> (= (ControlFlow 0 107) 103) anon90_Else_correct))))))
(let ((anon0_correct  (=> (state Heap@@12 ZeroMask) (and (=> (= (ControlFlow 0 111) 110) anon88_Then_correct) (=> (= (ControlFlow 0 111) 107) anon88_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 112) 111) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
