(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun demo__ar () T@U)
(declare-fun demo__tmp () T@U)
(declare-fun Ref__Integer_value () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun RefType () T@T)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun |demo__bin'| (T@U Int Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |demo__bin#triggerStateless| (Int Int) Int)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Sub| (Int Int) Int)
(declare-fun |Seq#Add| (Int Int) Int)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |demo__bin#frame| (T@U Int Int) Int)
(declare-fun EmptyFrame () T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Range| (Int Int) T@U)
(declare-fun |Seq#Skolem| (T@U T@U) Int)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun NoPerm () Real)
(declare-fun demo__bin (T@U Int Int) Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#ContainsTrigger| (T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun ZeroPMask () T@U)
(declare-fun |Seq#SkolemDiff| (T@U T@U) Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (forall ((arg0@@14 T@T) ) (! (= (Ctor (SeqType arg0@@14)) 8)
 :qid |ctor:SeqType|
))) (forall ((arg0@@15 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@15)) arg0@@15)
 :qid |typeInv:SeqTypeInv0|
 :pattern ( (SeqType arg0@@15))
))) (= (Ctor RefType) 9)) (= (type demo__ar) (FieldType NormalFieldType (SeqType RefType)))) (= (type demo__tmp) (FieldType NormalFieldType (SeqType RefType)))) (= (type Ref__Integer_value) (FieldType NormalFieldType intType))))
(assert (distinct $allocated demo__ar demo__tmp Ref__Integer_value)
)
(assert (forall ((arg0@@16 T@U) (arg1@@2 Int) ) (! (let ((T (SeqTypeInv0 (type arg0@@16))))
(= (type (|Seq#Drop| arg0@@16 arg1@@2)) (SeqType T)))
 :qid |funType:Seq#Drop|
 :pattern ( (|Seq#Drop| arg0@@16 arg1@@2))
)))
(assert (forall ((s T@U) (n Int) ) (! (let ((T@@0 (SeqTypeInv0 (type s))))
 (=> (= (type s) (SeqType T@@0)) (and (=> (<= 0 n) (and (=> (<= n (|Seq#Length| s)) (= (|Seq#Length| (|Seq#Drop| s n)) (- (|Seq#Length| s) n))) (=> (< (|Seq#Length| s) n) (= (|Seq#Length| (|Seq#Drop| s n)) 0)))) (=> (< n 0) (= (|Seq#Length| (|Seq#Drop| s n)) (|Seq#Length| s))))))
 :qid |stdinbpl.334:18|
 :skolemid |38|
 :pattern ( (|Seq#Length| (|Seq#Drop| s n)))
 :pattern ( (|Seq#Length| s) (|Seq#Drop| s n))
)))
(assert  (and (and (and (and (and (forall ((arg0@@17 T@T) ) (! (= (Ctor (MapType0Type arg0@@17)) 10)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@18 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@18)) arg0@@18)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@18))
))) (forall ((arg0@@19 T@U) (arg1@@3 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@19 arg1@@3 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@19 arg1@@3 arg2))
))) (forall ((arg0@@20 T@U) (arg1@@4 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@4)))
(= (type (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@21 T@T) (arg1@@5 T@T) ) (! (= (Ctor (MapType1Type arg0@@21 arg1@@5)) 11)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@22 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@22 arg1@@6)) arg0@@22)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@22 arg1@@6))
))) (forall ((arg0@@23 T@T) (arg1@@7 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@23 arg1@@7)) arg1@@7)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@23 arg1@@7))
))) (forall ((arg0@@24 T@U) (arg1@@8 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@24))))
(= (type (MapType1Select arg0@@24 arg1@@8 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@24 arg1@@8 arg2@@1))
))) (forall ((arg0@@25 T@U) (arg1@@9 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@9)))
(= (type (MapType1Store arg0@@25 arg1@@9 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@25 arg1@@9 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@0 T@U) (N Int) (k Int) ) (!  (=> (= (type Heap@@0) (MapType0Type RefType)) (dummyFunction (int_2_U (|demo__bin#triggerStateless| N k))))
 :qid |stdinbpl.625:15|
 :skolemid |59|
 :pattern ( (|demo__bin'| Heap@@0 N k))
)))
(assert (forall ((arg0@@26 T@U) (arg1@@10 Int) ) (! (let ((T@@1 (SeqTypeInv0 (type arg0@@26))))
(= (type (|Seq#Index| arg0@@26 arg1@@10)) T@@1))
 :qid |funType:Seq#Index|
 :pattern ( (|Seq#Index| arg0@@26 arg1@@10))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) (j Int) ) (! (let ((T@@2 (SeqTypeInv0 (type s@@0))))
 (=> (= (type s@@0) (SeqType T@@2)) (=> (and (and (< 0 n@@0) (<= 0 j)) (< j (- (|Seq#Length| s@@0) n@@0))) (and (= (|Seq#Sub| (|Seq#Add| j n@@0) n@@0) j) (= (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j) (|Seq#Index| s@@0 (|Seq#Add| j n@@0)))))))
 :qid |stdinbpl.355:18|
 :skolemid |39|
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j))
)))
(assert  (and (and (= (Ctor FrameTypeType) 12) (= (type null) RefType)) (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
))))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@1 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@2 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (= (type EmptyFrame) FrameTypeType))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (N@@0 Int) (k@@0 Int) ) (!  (=> (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (state Heap@@3 Mask@@2)) (= (|demo__bin'| Heap@@3 N@@0 k@@0) (|demo__bin#frame| EmptyFrame N@@0 k@@0)))
 :qid |stdinbpl.638:15|
 :skolemid |61|
 :pattern ( (state Heap@@3 Mask@@2) (|demo__bin'| Heap@@3 N@@0 k@@0))
)))
(assert (forall ((arg0@@29 T@U) (arg1@@11 Int) (arg2@@3 T@U) ) (! (let ((T@@3 (type arg2@@3)))
(= (type (|Seq#Update| arg0@@29 arg1@@11 arg2@@3)) (SeqType T@@3)))
 :qid |funType:Seq#Update|
 :pattern ( (|Seq#Update| arg0@@29 arg1@@11 arg2@@3))
)))
(assert (forall ((s@@1 T@U) (i Int) (v T@U) (n@@1 Int) ) (! (let ((T@@4 (type v)))
 (=> (= (type s@@1) (SeqType T@@4)) (=> (and (<= 0 n@@1) (< n@@1 (|Seq#Length| s@@1))) (and (=> (= i n@@1) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) v)) (=> (not (= i n@@1)) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) (|Seq#Index| s@@1 n@@1)))))))
 :qid |stdinbpl.310:18|
 :skolemid |35|
 :pattern ( (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1))
 :pattern ( (|Seq#Index| s@@1 n@@1) (|Seq#Update| s@@1 i v))
)))
(assert (forall ((arg0@@30 T@U) (arg1@@12 Int) ) (! (let ((T@@5 (SeqTypeInv0 (type arg0@@30))))
(= (type (|Seq#Take| arg0@@30 arg1@@12)) (SeqType T@@5)))
 :qid |funType:Seq#Take|
 :pattern ( (|Seq#Take| arg0@@30 arg1@@12))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (! (let ((T@@6 (SeqTypeInv0 (type s@@2))))
 (=> (= (type s@@2) (SeqType T@@6)) (and (=> (<= 0 n@@2) (and (=> (<= n@@2 (|Seq#Length| s@@2)) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) n@@2)) (=> (< (|Seq#Length| s@@2) n@@2) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) (|Seq#Length| s@@2))))) (=> (< n@@2 0) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) 0)))))
 :qid |stdinbpl.321:18|
 :skolemid |36|
 :pattern ( (|Seq#Length| (|Seq#Take| s@@2 n@@2)))
 :pattern ( (|Seq#Take| s@@2 n@@2) (|Seq#Length| s@@2))
)))
(assert (forall ((arg0@@31 Int) (arg1@@13 Int) ) (! (= (type (|Seq#Range| arg0@@31 arg1@@13)) (SeqType intType))
 :qid |funType:Seq#Range|
 :pattern ( (|Seq#Range| arg0@@31 arg1@@13))
)))
(assert (forall ((q@min Int) (q@max Int) (v@@0 T@U) ) (!  (=> (= (type v@@0) intType) (= (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0)  (and (<= q@min (U_2_int v@@0)) (< (U_2_int v@@0) q@max))))
 :qid |stdinbpl.594:15|
 :skolemid |57|
 :pattern ( (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0))
)))
(assert (forall ((s@@3 T@U) (x@@8 T@U) ) (! (let ((T@@7 (type x@@8)))
 (=> (and (= (type s@@3) (SeqType T@@7)) (|Seq#Contains| s@@3 x@@8)) (and (and (<= 0 (|Seq#Skolem| s@@3 x@@8)) (< (|Seq#Skolem| s@@3 x@@8) (|Seq#Length| s@@3))) (= (|Seq#Index| s@@3 (|Seq#Skolem| s@@3 x@@8)) x@@8))))
 :qid |stdinbpl.452:18|
 :skolemid |47|
 :pattern ( (|Seq#Contains| s@@3 x@@8))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@1 T@U) (Mask@@3 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@3)) (U_2_bool (MapType0Select Heap@@4 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@3) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (! (let ((T@@8 (SeqTypeInv0 (type s@@4))))
 (=> (and (= (type s@@4) (SeqType T@@8)) (<= n@@3 0)) (= (|Seq#Drop| s@@4 n@@3) s@@4)))
 :qid |stdinbpl.436:18|
 :skolemid |45|
 :pattern ( (|Seq#Drop| s@@4 n@@3))
)))
(assert (forall ((i@@0 Int) (j@@0 Int) ) (! (= (|Seq#Sub| i@@0 j@@0) (- i@@0 j@@0))
 :qid |stdinbpl.290:15|
 :skolemid |30|
 :pattern ( (|Seq#Sub| i@@0 j@@0))
)))
(assert (forall ((i@@1 Int) (j@@1 Int) ) (! (= (|Seq#Add| i@@1 j@@1) (+ i@@1 j@@1))
 :qid |stdinbpl.288:15|
 :skolemid |29|
 :pattern ( (|Seq#Add| i@@1 j@@1))
)))
(assert (forall ((arg0@@32 T@U) ) (! (let ((T@@9 (type arg0@@32)))
(= (type (|Seq#Singleton| arg0@@32)) (SeqType T@@9)))
 :qid |funType:Seq#Singleton|
 :pattern ( (|Seq#Singleton| arg0@@32))
)))
(assert (forall ((x@@9 T@U) (y@@1 T@U) ) (! (let ((T@@10 (type x@@9)))
 (=> (= (type y@@1) T@@10) (= (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1) (= x@@9 y@@1))))
 :qid |stdinbpl.577:18|
 :skolemid |54|
 :pattern ( (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (j@@2 Int) ) (! (let ((T@@11 (SeqTypeInv0 (type s@@5))))
 (=> (= (type s@@5) (SeqType T@@11)) (=> (and (and (<= 0 j@@2) (< j@@2 n@@4)) (< j@@2 (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@2) (|Seq#Index| s@@5 j@@2)))))
 :qid |stdinbpl.329:18|
 :skolemid |37|
 :pattern ( (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@2))
 :pattern ( (|Seq#Index| s@@5 j@@2) (|Seq#Take| s@@5 n@@4))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@2 T@U) (Mask@@4 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@2 Mask@@4)) (HasDirectPerm Mask@@4 o_1@@0 f_2)) (= (MapType0Select Heap@@5 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@2 Mask@@4) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((T@@12 T@T) ) (! (= (type (|Seq#Empty| T@@12)) (SeqType T@@12))
 :qid |funType:Seq#Empty|
 :pattern ( (|Seq#Empty| T@@12))
)))
(assert (forall ((T@@13 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@13)) 0)
 :skolemid |23|
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.233:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (let ((T@@14 (SeqTypeInv0 (type arg0@@33))))
(= (type (|Seq#Append| arg0@@33 arg1@@14)) (SeqType T@@14)))
 :qid |funType:Seq#Append|
 :pattern ( (|Seq#Append| arg0@@33 arg1@@14))
)))
(assert (forall ((s0 T@U) (s1 T@U) (n@@5 Int) ) (! (let ((T@@15 (SeqTypeInv0 (type s0))))
 (=> (and (= (type s0) (SeqType T@@15)) (= (type s1) (SeqType T@@15))) (=> (and (and (and (not (= s0 (|Seq#Empty| T@@15))) (not (= s1 (|Seq#Empty| T@@15)))) (<= (|Seq#Length| s0) n@@5)) (< n@@5 (|Seq#Length| (|Seq#Append| s0 s1)))) (and (= (|Seq#Add| (|Seq#Sub| n@@5 (|Seq#Length| s0)) (|Seq#Length| s0)) n@@5) (= (|Seq#Index| (|Seq#Append| s0 s1) n@@5) (|Seq#Index| s1 (|Seq#Sub| n@@5 (|Seq#Length| s0))))))))
 :qid |stdinbpl.301:18|
 :skolemid |32|
 :pattern ( (|Seq#Index| (|Seq#Append| s0 s1) n@@5))
)))
(assert  (not (IsPredicateField demo__ar)))
(assert  (not (IsWandField demo__ar)))
(assert  (not (IsPredicateField demo__tmp)))
(assert  (not (IsWandField demo__tmp)))
(assert  (not (IsPredicateField Ref__Integer_value)))
(assert  (not (IsWandField Ref__Integer_value)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@3 T@U) (Mask@@5 T@U) ) (!  (=> (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@5) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@3 Mask@@5)) (succHeap Heap@@6 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@3 Mask@@5))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg0@@34 Real) (arg1@@15 T@U) ) (! (= (type (ConditionalFrame arg0@@34 arg1@@15)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@34 arg1@@15))
)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.221:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((q@min@@0 Int) (q@max@@0 Int) (j@@3 Int) ) (!  (=> (and (<= 0 j@@3) (< j@@3 (- q@max@@0 q@min@@0))) (= (U_2_int (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@3)) (+ q@min@@0 j@@3)))
 :qid |stdinbpl.592:15|
 :skolemid |56|
 :pattern ( (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@3))
)))
(assert (forall ((Mask@@6 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@6) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@6 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@6 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@6 o_2@@0 f_4@@0))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (let ((T@@16 (SeqTypeInv0 (type s0@@0))))
 (=> (and (and (= (type s0@@0) (SeqType T@@16)) (= (type s1@@0) (SeqType T@@16))) (and (not (= s0@@0 (|Seq#Empty| T@@16))) (not (= s1@@0 (|Seq#Empty| T@@16))))) (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))))
 :qid |stdinbpl.270:18|
 :skolemid |26|
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((s@@6 T@U) (t T@U) (n@@6 Int) ) (! (let ((T@@17 (SeqTypeInv0 (type s@@6))))
 (=> (and (and (= (type s@@6) (SeqType T@@17)) (= (type t) (SeqType T@@17))) (and (> n@@6 0) (> n@@6 (|Seq#Length| s@@6)))) (and (= (|Seq#Add| (|Seq#Sub| n@@6 (|Seq#Length| s@@6)) (|Seq#Length| s@@6)) n@@6) (= (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6) (|Seq#Drop| t (|Seq#Sub| n@@6 (|Seq#Length| s@@6)))))))
 :qid |stdinbpl.426:18|
 :skolemid |44|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6))
)))
(assert (forall ((Heap@@7 T@U) (N@@1 Int) (k@@1 Int) ) (!  (=> (= (type Heap@@7) (MapType0Type RefType)) (and (= (demo__bin Heap@@7 N@@1 k@@1) (|demo__bin'| Heap@@7 N@@1 k@@1)) (dummyFunction (int_2_U (|demo__bin#triggerStateless| N@@1 k@@1)))))
 :qid |stdinbpl.621:15|
 :skolemid |58|
 :pattern ( (demo__bin Heap@@7 N@@1 k@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((s@@7 T@U) (t@@0 T@U) (n@@7 Int) ) (! (let ((T@@18 (SeqTypeInv0 (type s@@7))))
 (=> (and (and (= (type s@@7) (SeqType T@@18)) (= (type t@@0) (SeqType T@@18))) (and (> n@@7 0) (> n@@7 (|Seq#Length| s@@7)))) (and (= (|Seq#Add| (|Seq#Sub| n@@7 (|Seq#Length| s@@7)) (|Seq#Length| s@@7)) n@@7) (= (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7) (|Seq#Append| s@@7 (|Seq#Take| t@@0 (|Seq#Sub| n@@7 (|Seq#Length| s@@7))))))))
 :qid |stdinbpl.413:18|
 :skolemid |42|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7))
)))
(assert (forall ((q@min@@1 Int) (q@max@@1 Int) ) (!  (and (=> (< q@min@@1 q@max@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) (- q@max@@1 q@min@@1))) (=> (<= q@max@@1 q@min@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) 0)))
 :qid |stdinbpl.591:15|
 :skolemid |55|
 :pattern ( (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (let ((T@@19 (SeqTypeInv0 (type a))))
 (=> (and (and (= (type a) (SeqType T@@19)) (= (type b) (SeqType T@@19))) (|Seq#Equal| a b)) (= a b)))
 :qid |stdinbpl.564:18|
 :skolemid |53|
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@8 T@U) (i@@2 Int) ) (! (let ((T@@20 (SeqTypeInv0 (type s@@8))))
 (=> (= (type s@@8) (SeqType T@@20)) (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@8))) (|Seq#ContainsTrigger| s@@8 (|Seq#Index| s@@8 i@@2)))))
 :qid |stdinbpl.457:18|
 :skolemid |49|
 :pattern ( (|Seq#Index| s@@8 i@@2))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) ) (! (let ((T@@21 (SeqTypeInv0 (type s0@@1))))
 (=> (and (= (type s0@@1) (SeqType T@@21)) (= (type s1@@1) (SeqType T@@21))) (and (=> (= s0@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s1@@1)) (=> (= s1@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s0@@1)))))
 :qid |stdinbpl.276:18|
 :skolemid |27|
 :pattern ( (|Seq#Append| s0@@1 s1@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@1) 0) t@@1)
 :qid |stdinbpl.280:18|
 :skolemid |28|
 :pattern ( (|Seq#Singleton| t@@1))
)))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@22 (SeqTypeInv0 (type s@@9))))
 (=> (= (type s@@9) (SeqType T@@22)) (<= 0 (|Seq#Length| s@@9))))
 :qid |stdinbpl.259:18|
 :skolemid |22|
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@23 (SeqTypeInv0 (type s0@@2))))
 (=> (and (and (= (type s0@@2) (SeqType T@@23)) (= (type s1@@2) (SeqType T@@23))) (|Seq#Equal| s0@@2 s1@@2)) (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j@@4 Int) ) (!  (=> (and (<= 0 j@@4) (< j@@4 (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j@@4) (|Seq#Index| s1@@2 j@@4)))
 :qid |stdinbpl.554:13|
 :skolemid |50|
 :pattern ( (|Seq#Index| s0@@2 j@@4))
 :pattern ( (|Seq#Index| s1@@2 j@@4))
)))))
 :qid |stdinbpl.551:18|
 :skolemid |51|
 :pattern ( (|Seq#Equal| s0@@2 s1@@2))
)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@4 T@U) (Mask@@7 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@4 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@8 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@8 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@4 Mask@@7) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@5 T@U) (Mask@@8 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@5 Mask@@8)) (and (HasDirectPerm Mask@@8 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@9 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@9 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@5 Mask@@8) (IsWandField pm_f@@2))
)))
(assert (forall ((t@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@2)) 1)
 :qid |stdinbpl.267:18|
 :skolemid |25|
 :pattern ( (|Seq#Singleton| t@@2))
)))
(assert (forall ((Mask@@9 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@9) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@9)) (and (>= (U_2_real (MapType1Select Mask@@9 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@9) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@9 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@9) (MapType1Select Mask@@9 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@10 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@10) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@10 o $allocated))) (U_2_bool (MapType0Select Heap@@10 (MapType0Select Heap@@10 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@10 o f))
)))
(assert (forall ((s@@10 T@U) (t@@3 T@U) (n@@8 Int) ) (! (let ((T@@24 (SeqTypeInv0 (type s@@10))))
 (=> (and (and (= (type s@@10) (SeqType T@@24)) (= (type t@@3) (SeqType T@@24))) (and (< 0 n@@8) (<= n@@8 (|Seq#Length| s@@10)))) (= (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8) (|Seq#Take| s@@10 n@@8))))
 :qid |stdinbpl.409:18|
 :skolemid |41|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8))
)))
(assert (forall ((s@@11 T@U) (i@@3 Int) (v@@1 T@U) ) (! (let ((T@@25 (type v@@1)))
 (=> (= (type s@@11) (SeqType T@@25)) (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Update| s@@11 i@@3 v@@1)) (|Seq#Length| s@@11)))))
 :qid |stdinbpl.308:18|
 :skolemid |34|
 :pattern ( (|Seq#Length| (|Seq#Update| s@@11 i@@3 v@@1)))
 :pattern ( (|Seq#Length| s@@11) (|Seq#Update| s@@11 i@@3 v@@1))
)))
(assert (forall ((Heap@@11 T@U) (Mask@@10 T@U) (N@@2 Int) (k@@2 Int) ) (!  (=> (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (and (state Heap@@11 Mask@@10) (< AssumeFunctionsAbove 0))) (and (and (>= N@@2 0) (<= 0 k@@2)) (<= k@@2 N@@2))) (= (demo__bin Heap@@11 N@@2 k@@2) (ite  (or (= k@@2 0) (or (= k@@2 N@@2) (<= N@@2 0))) 1 (+ (|demo__bin'| Heap@@11 (- N@@2 1) (- k@@2 1)) (|demo__bin'| Heap@@11 (- N@@2 1) k@@2)))))
 :qid |stdinbpl.631:15|
 :skolemid |60|
 :pattern ( (state Heap@@11 Mask@@10) (demo__bin Heap@@11 N@@2 k@@2))
)))
(assert (forall ((s@@12 T@U) (t@@4 T@U) (n@@9 Int) ) (! (let ((T@@26 (SeqTypeInv0 (type s@@12))))
 (=> (and (and (= (type s@@12) (SeqType T@@26)) (= (type t@@4) (SeqType T@@26))) (and (< 0 n@@9) (<= n@@9 (|Seq#Length| s@@12)))) (= (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9) (|Seq#Append| (|Seq#Drop| s@@12 n@@9) t@@4))))
 :qid |stdinbpl.422:18|
 :skolemid |43|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9))
)))
(assert (forall ((s@@13 T@U) (n@@10 Int) (i@@4 Int) ) (! (let ((T@@27 (SeqTypeInv0 (type s@@13))))
 (=> (= (type s@@13) (SeqType T@@27)) (=> (and (and (< 0 n@@10) (<= n@@10 i@@4)) (< i@@4 (|Seq#Length| s@@13))) (and (= (|Seq#Add| (|Seq#Sub| i@@4 n@@10) n@@10) i@@4) (= (|Seq#Index| (|Seq#Drop| s@@13 n@@10) (|Seq#Sub| i@@4 n@@10)) (|Seq#Index| s@@13 i@@4))))))
 :qid |stdinbpl.359:18|
 :skolemid |40|
 :pattern ( (|Seq#Drop| s@@13 n@@10) (|Seq#Index| s@@13 i@@4))
)))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@11 Int) ) (! (let ((T@@28 (SeqTypeInv0 (type s0@@3))))
 (=> (and (= (type s0@@3) (SeqType T@@28)) (= (type s1@@3) (SeqType T@@28))) (=> (and (and (and (not (= s0@@3 (|Seq#Empty| T@@28))) (not (= s1@@3 (|Seq#Empty| T@@28)))) (<= 0 n@@11)) (< n@@11 (|Seq#Length| s0@@3))) (= (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11) (|Seq#Index| s0@@3 n@@11)))))
 :qid |stdinbpl.299:18|
 :skolemid |31|
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11))
 :pattern ( (|Seq#Index| s0@@3 n@@11) (|Seq#Append| s0@@3 s1@@3))
)))
(assert (forall ((Heap@@12 T@U) (o@@0 T@U) (f_3 T@U) (v@@2 T@U) ) (! (let ((B@@8 (type v@@2)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@12 (MapType0Store Heap@@12 o@@0 f_3 v@@2)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@12 o@@0 f_3 v@@2))
)))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (m@@7 Int) ) (! (let ((T@@29 (SeqTypeInv0 (type s0@@4))))
 (=> (and (= (type s0@@4) (SeqType T@@29)) (= (type s1@@4) (SeqType T@@29))) (=> (and (and (and (not (= s0@@4 (|Seq#Empty| T@@29))) (not (= s1@@4 (|Seq#Empty| T@@29)))) (<= 0 m@@7)) (< m@@7 (|Seq#Length| s1@@4))) (and (= (|Seq#Sub| (|Seq#Add| m@@7 (|Seq#Length| s0@@4)) (|Seq#Length| s0@@4)) m@@7) (= (|Seq#Index| (|Seq#Append| s0@@4 s1@@4) (|Seq#Add| m@@7 (|Seq#Length| s0@@4))) (|Seq#Index| s1@@4 m@@7))))))
 :qid |stdinbpl.304:18|
 :skolemid |33|
 :pattern ( (|Seq#Index| s1@@4 m@@7) (|Seq#Append| s0@@4 s1@@4))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((s@@14 T@U) (x@@10 T@U) (i@@5 Int) ) (! (let ((T@@30 (type x@@10)))
 (=> (= (type s@@14) (SeqType T@@30)) (=> (and (and (<= 0 i@@5) (< i@@5 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@5) x@@10)) (|Seq#Contains| s@@14 x@@10))))
 :qid |stdinbpl.455:18|
 :skolemid |48|
 :pattern ( (|Seq#Contains| s@@14 x@@10) (|Seq#Index| s@@14 i@@5))
)))
(assert (forall ((s0@@5 T@U) (s1@@5 T@U) ) (! (let ((T@@31 (SeqTypeInv0 (type s0@@5))))
 (=> (and (= (type s0@@5) (SeqType T@@31)) (= (type s1@@5) (SeqType T@@31))) (or (or (and (= s0@@5 s1@@5) (|Seq#Equal| s0@@5 s1@@5)) (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (not (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))))) (and (and (and (and (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))) (= (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#SkolemDiff| s1@@5 s0@@5))) (<= 0 (|Seq#SkolemDiff| s0@@5 s1@@5))) (< (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#Length| s0@@5))) (not (= (|Seq#Index| s0@@5 (|Seq#SkolemDiff| s0@@5 s1@@5)) (|Seq#Index| s1@@5 (|Seq#SkolemDiff| s0@@5 s1@@5))))))))
 :qid |stdinbpl.559:18|
 :skolemid |52|
 :pattern ( (|Seq#Equal| s0@@5 s1@@5))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.228:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@32 (SeqTypeInv0 (type s@@15))))
 (=> (and (= (type s@@15) (SeqType T@@32)) (= (|Seq#Length| s@@15) 0)) (= s@@15 (|Seq#Empty| T@@32))))
 :qid |stdinbpl.263:18|
 :skolemid |24|
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((s@@16 T@U) (n@@12 Int) ) (! (let ((T@@33 (SeqTypeInv0 (type s@@16))))
 (=> (and (= (type s@@16) (SeqType T@@33)) (<= n@@12 0)) (= (|Seq#Take| s@@16 n@@12) (|Seq#Empty| T@@33))))
 :qid |stdinbpl.438:18|
 :skolemid |46|
 :pattern ( (|Seq#Take| s@@16 n@@12))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun gsize () Int)
(declare-fun tid () Int)
(declare-fun PostHeap@0 () T@U)
(declare-fun tcount () Int)
(declare-fun lid () Int)
(declare-fun gid () Int)
(declare-fun wildcard@2 () Real)
(declare-fun diz () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun wildcard@3 () Real)
(declare-fun PostMask@1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Heap@@13 () T@U)
(declare-fun PostMask@2 () T@U)
(declare-fun N@0 () Int)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun Mask@105 () T@U)
(declare-fun __last_barrier@0 () Int)
(declare-fun Mask@102 () T@U)
(declare-fun Mask@103 () T@U)
(declare-fun Mask@104 () T@U)
(declare-fun Mask@100 () T@U)
(declare-fun Mask@101 () T@U)
(declare-fun Mask@99 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@97 () T@U)
(declare-fun Mask@98 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun wildcard@6 () Real)
(declare-fun Mask@15 () T@U)
(declare-fun wildcard@7 () Real)
(declare-fun N@1 () Int)
(declare-fun ExhaleHeap@3 () T@U)
(declare-fun Mask@95 () T@U)
(declare-fun Mask@94 () T@U)
(declare-fun Mask@96 () T@U)
(declare-fun Mask@93 () T@U)
(declare-fun __flatten_2@1 () Int)
(declare-fun Mask@92 () T@U)
(declare-fun Mask@91 () T@U)
(declare-fun Mask@90 () T@U)
(declare-fun Mask@89 () T@U)
(declare-fun Mask@88 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun wildcard@22 () Real)
(declare-fun Mask@86 () T@U)
(declare-fun wildcard@23 () Real)
(declare-fun Mask@82 () T@U)
(declare-fun Mask@83 () T@U)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@78 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun wildcard@20 () Real)
(declare-fun Mask@75 () T@U)
(declare-fun wildcard@21 () Real)
(declare-fun Mask@73 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun __flatten_1@1 () Int)
(declare-fun Mask@70 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun Mask@67 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun current_thread_id () Int)
(declare-fun wildcard@18 () Real)
(declare-fun Mask@64 () T@U)
(declare-fun wildcard@19 () Real)
(declare-fun Heap@2 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun __flatten_9@1 () T@U)
(declare-fun __flatten_11@1 () T@U)
(declare-fun __flatten_12@1 () T@U)
(declare-fun __flatten_10@1 () Int)
(declare-fun Mask@60 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun Mask@58 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun wildcard@16 () Real)
(declare-fun Mask@53 () T@U)
(declare-fun wildcard@17 () Real)
(declare-fun Mask@51 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun __flatten_5@1 () T@U)
(declare-fun __flatten_7@1 () T@U)
(declare-fun __flatten_6@1 () Int)
(declare-fun wildcard@14 () Real)
(declare-fun Mask@42 () T@U)
(declare-fun wildcard@15 () Real)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun wildcard@8 () Real)
(declare-fun Mask@17 () T@U)
(declare-fun wildcard@9 () Real)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun wildcard@12 () Real)
(declare-fun Mask@30 () T@U)
(declare-fun wildcard@13 () Real)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun wildcard@10 () Real)
(declare-fun Mask@19 () T@U)
(declare-fun wildcard@11 () Real)
(declare-fun Heap@0 () T@U)
(declare-fun __flatten_12@0 () T@U)
(declare-fun __flatten_11@0 () T@U)
(declare-fun __flatten_9@0 () T@U)
(declare-fun __flatten_7@0 () T@U)
(declare-fun __flatten_5@0 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun __flatten_3 () T@U)
(declare-fun __flatten_5 () T@U)
(declare-fun __flatten_7 () T@U)
(declare-fun __flatten_9 () T@U)
(declare-fun __flatten_11 () T@U)
(declare-fun __flatten_12 () T@U)
(declare-fun __flatten_3@0 () T@U)
(declare-fun wildcard@4 () Real)
(declare-fun Mask@4 () T@U)
(declare-fun wildcard@5 () Real)
(declare-fun wildcard@0 () Real)
(declare-fun Mask@0 () T@U)
(declare-fun wildcard@1 () Real)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun wildcard () Real)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@32) (MapType1Type RefType realType)) (= (type Mask@31) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type diz) RefType)) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Heap@@13) (MapType0Type RefType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type ExhaleHeap@3) (MapType0Type RefType))) (= (type Mask@96) (MapType1Type RefType realType))) (= (type Mask@93) (MapType1Type RefType realType))) (= (type Mask@95) (MapType1Type RefType realType))) (= (type Mask@94) (MapType1Type RefType realType))) (= (type Mask@90) (MapType1Type RefType realType))) (= (type Mask@91) (MapType1Type RefType realType))) (= (type Mask@92) (MapType1Type RefType realType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@89) (MapType1Type RefType realType))) (= (type Mask@88) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type Mask@86) (MapType1Type RefType realType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type Mask@82) (MapType1Type RefType realType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@81) (MapType1Type RefType realType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type Mask@73) (MapType1Type RefType realType))) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Heap@2) (MapType0Type RefType))) (= (type __flatten_9@1) RefType)) (= (type __flatten_11@1) RefType)) (= (type __flatten_12@1) RefType)) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type __flatten_5@1) RefType)) (= (type __flatten_7@1) RefType)) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@105) (MapType1Type RefType realType))) (= (type Mask@102) (MapType1Type RefType realType))) (= (type Mask@103) (MapType1Type RefType realType))) (= (type Mask@104) (MapType1Type RefType realType))) (= (type Mask@99) (MapType1Type RefType realType))) (= (type Mask@100) (MapType1Type RefType realType))) (= (type Mask@101) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@97) (MapType1Type RefType realType))) (= (type Mask@98) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type __flatten_12@0) RefType)) (= (type __flatten_11@0) RefType)) (= (type __flatten_9@0) RefType)) (= (type __flatten_7@0) RefType)) (= (type __flatten_5@0) RefType)) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type __flatten_3) RefType)) (= (type __flatten_5) RefType)) (= (type __flatten_7) RefType)) (= (type __flatten_9) RefType)) (= (type __flatten_11) RefType)) (= (type __flatten_12) RefType)) (= (type Mask@3) (MapType1Type RefType realType))) (= (type __flatten_3@0) RefType)) (= (type Mask@4) (MapType1Type RefType realType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type PostMask@0) (MapType1Type RefType realType))) (= (type PostMask@1) (MapType1Type RefType realType))) (= (type PostMask@2) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))))
(set-info :boogie-vc-id demo__main_main)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 381) (let ((anon136_Else_correct true))
(let ((anon136_Then_correct  (and (=> (= (ControlFlow 0 354) (- 0 356)) (>= (- gsize 1) 0)) (=> (>= (- gsize 1) 0) (and (=> (= (ControlFlow 0 354) (- 0 355)) (<= 0 tid)) (=> (<= 0 tid) (=> (= (ControlFlow 0 354) (- 0 353)) (<= tid (- gsize 1)))))))))
(let ((anon135_Then_correct  (=> (and (and (and (and (state PostHeap@0 ZeroMask) (<= 0 tid)) (and (state PostHeap@0 ZeroMask) (< tid tcount))) (and (and (state PostHeap@0 ZeroMask) (= tid lid)) (and (state PostHeap@0 ZeroMask) (= tcount gsize)))) (and (and (and (state PostHeap@0 ZeroMask) (= gid 0)) (and (state PostHeap@0 ZeroMask) (> wildcard@2 NoPerm))) (and (and (not (= diz null)) (= PostMask@0 (MapType1Store ZeroMask diz demo__ar (real_2_U (+ (U_2_real (MapType1Select ZeroMask diz demo__ar)) wildcard@2))))) (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0))))) (and (=> (= (ControlFlow 0 358) (- 0 371)) (HasDirectPerm PostMask@0 diz demo__ar)) (=> (HasDirectPerm PostMask@0 diz demo__ar) (=> (= (|Seq#Length| (MapType0Select PostHeap@0 diz demo__ar)) gsize) (=> (and (state PostHeap@0 PostMask@0) (> wildcard@3 NoPerm)) (=> (and (and (not (= diz null)) (= PostMask@1 (MapType1Store PostMask@0 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select PostMask@0 diz demo__tmp)) wildcard@3))))) (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1))) (and (=> (= (ControlFlow 0 358) (- 0 370)) (HasDirectPerm PostMask@1 diz demo__tmp)) (=> (HasDirectPerm PostMask@1 diz demo__tmp) (=> (and (= (|Seq#Length| (MapType0Select PostHeap@0 diz demo__tmp)) gsize) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 358) (- 0 369)) (HasDirectPerm PostMask@1 diz demo__ar)) (=> (HasDirectPerm PostMask@1 diz demo__ar) (and (=> (= (ControlFlow 0 358) (- 0 368)) (HasDirectPerm Mask@3 diz demo__ar)) (=> (HasDirectPerm Mask@3 diz demo__ar) (=> (and (|Seq#Equal| (MapType0Select PostHeap@0 diz demo__ar) (MapType0Select Heap@@13 diz demo__ar)) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 358) (- 0 367)) (HasDirectPerm PostMask@1 diz demo__tmp)) (=> (HasDirectPerm PostMask@1 diz demo__tmp) (and (=> (= (ControlFlow 0 358) (- 0 366)) (HasDirectPerm Mask@3 diz demo__tmp)) (=> (HasDirectPerm Mask@3 diz demo__tmp) (=> (and (and (|Seq#Equal| (MapType0Select PostHeap@0 diz demo__tmp) (MapType0Select Heap@@13 diz demo__tmp)) (state PostHeap@0 PostMask@1)) (and (> gsize 1) (state PostHeap@0 PostMask@1))) (and (=> (= (ControlFlow 0 358) (- 0 365)) (HasDirectPerm PostMask@1 diz demo__ar)) (=> (HasDirectPerm PostMask@1 diz demo__ar) (and (=> (= (ControlFlow 0 358) (- 0 364)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 358) (- 0 363)) (< tid (|Seq#Length| (MapType0Select PostHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select PostHeap@0 diz demo__ar))) (=> (not (= (|Seq#Index| (MapType0Select PostHeap@0 diz demo__ar) tid) null)) (=> (and (and (= PostMask@2 (MapType1Store PostMask@1 (|Seq#Index| (MapType0Select PostHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select PostMask@1 (|Seq#Index| (MapType0Select PostHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state PostHeap@0 PostMask@2)) (and (state PostHeap@0 PostMask@2) (state PostHeap@0 PostMask@2))) (and (=> (= (ControlFlow 0 358) (- 0 362)) (HasDirectPerm PostMask@2 diz demo__ar)) (=> (HasDirectPerm PostMask@2 diz demo__ar) (and (=> (= (ControlFlow 0 358) (- 0 361)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 358) (- 0 360)) (< tid (|Seq#Length| (MapType0Select PostHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select PostHeap@0 diz demo__ar))) (and (=> (= (ControlFlow 0 358) (- 0 359)) (HasDirectPerm PostMask@2 (|Seq#Index| (MapType0Select PostHeap@0 diz demo__ar) tid) Ref__Integer_value)) (=> (HasDirectPerm PostMask@2 (|Seq#Index| (MapType0Select PostHeap@0 diz demo__ar) tid) Ref__Integer_value) (and (=> (= (ControlFlow 0 358) 354) anon136_Then_correct) (=> (= (ControlFlow 0 358) 357) anon136_Else_correct)))))))))))))))))))))))))))))))))))))))
(let ((anon153_Then_correct  (and (=> (= (ControlFlow 0 261) (- 0 263)) (>= N@0 0)) (=> (>= N@0 0) (and (=> (= (ControlFlow 0 261) (- 0 262)) (<= 0 tid)) (=> (<= 0 tid) (=> (= (ControlFlow 0 261) (- 0 260)) (<= tid N@0))))))))
(let ((anon34_correct true))
(let ((anon152_Then_correct  (=> (< tid N@0) (and (=> (= (ControlFlow 0 264) 261) anon153_Then_correct) (=> (= (ControlFlow 0 264) 258) anon34_correct)))))
(let ((anon152_Else_correct  (=> (and (<= N@0 tid) (= (ControlFlow 0 259) 258)) anon34_correct)))
(let ((anon31_correct  (=> (and (and (and (state ExhaleHeap@0 Mask@105) (> gsize 1)) (and (state ExhaleHeap@0 Mask@105) (< 0 N@0))) (and (and (state ExhaleHeap@0 Mask@105) (< N@0 gsize)) (and (state ExhaleHeap@0 Mask@105) (state ExhaleHeap@0 Mask@105)))) (and (=> (= (ControlFlow 0 265) (- 0 269)) (HasDirectPerm Mask@105 diz demo__ar)) (=> (HasDirectPerm Mask@105 diz demo__ar) (and (=> (= (ControlFlow 0 265) (- 0 268)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 265) (- 0 267)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar))) (and (=> (= (ControlFlow 0 265) (- 0 266)) (HasDirectPerm Mask@105 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) (=> (HasDirectPerm Mask@105 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value) (and (=> (= (ControlFlow 0 265) 264) anon152_Then_correct) (=> (= (ControlFlow 0 265) 259) anon152_Else_correct)))))))))))))
(let ((anon151_Else_correct  (=> (not (= __last_barrier@0 0)) (=> (and (= Mask@105 Mask@102) (= (ControlFlow 0 277) 265)) anon31_correct))))
(let ((anon151_Then_correct  (=> (= __last_barrier@0 0) (and (=> (= (ControlFlow 0 270) (- 0 276)) (HasDirectPerm Mask@102 diz demo__ar)) (=> (HasDirectPerm Mask@102 diz demo__ar) (and (=> (= (ControlFlow 0 270) (- 0 275)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 270) (- 0 274)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar))) (=> (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null)) (=> (and (= Mask@103 (MapType1Store Mask@102 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@102 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@103)) (and (=> (= (ControlFlow 0 270) (- 0 273)) (HasDirectPerm Mask@103 diz demo__tmp)) (=> (HasDirectPerm Mask@103 diz demo__tmp) (and (=> (= (ControlFlow 0 270) (- 0 272)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 270) (- 0 271)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp))) (=> (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) null)) (=> (and (and (= Mask@104 (MapType1Store Mask@103 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@103 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@104)) (and (= Mask@105 Mask@104) (= (ControlFlow 0 270) 265))) anon31_correct)))))))))))))))))))
(let ((anon29_correct  (=> (state ExhaleHeap@0 Mask@102) (and (=> (= (ControlFlow 0 278) 270) anon151_Then_correct) (=> (= (ControlFlow 0 278) 277) anon151_Else_correct)))))
(let ((anon150_Else_correct  (=> (>= 0 tid) (=> (and (= Mask@102 Mask@100) (= (ControlFlow 0 284) 278)) anon29_correct))))
(let ((anon150_Then_correct  (=> (> tid 0) (and (=> (= (ControlFlow 0 280) (- 0 283)) (HasDirectPerm Mask@100 diz demo__tmp)) (=> (HasDirectPerm Mask@100 diz demo__tmp) (and (=> (= (ControlFlow 0 280) (- 0 282)) (>= (- tid 1) 0)) (=> (>= (- tid 1) 0) (and (=> (= (ControlFlow 0 280) (- 0 281)) (< (- tid 1) (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)))) (=> (< (- tid 1) (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp))) (=> (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) null)) (=> (and (and (= Mask@101 (MapType1Store Mask@100 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@100 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@101)) (and (= Mask@102 Mask@101) (= (ControlFlow 0 280) 278))) anon29_correct)))))))))))
(let ((anon149_Then_correct  (=> (= __last_barrier@0 1) (and (=> (= (ControlFlow 0 285) (- 0 288)) (HasDirectPerm Mask@99 diz demo__ar)) (=> (HasDirectPerm Mask@99 diz demo__ar) (and (=> (= (ControlFlow 0 285) (- 0 287)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 285) (- 0 286)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar))) (=> (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null)) (=> (and (= Mask@100 (MapType1Store Mask@99 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@99 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@100)) (and (=> (= (ControlFlow 0 285) 280) anon150_Then_correct) (=> (= (ControlFlow 0 285) 284) anon150_Else_correct)))))))))))))
(let ((anon149_Else_correct  (=> (not (= __last_barrier@0 1)) (=> (and (= Mask@102 Mask@99) (= (ControlFlow 0 279) 278)) anon29_correct))))
(let ((anon26_correct  (=> (state ExhaleHeap@0 Mask@99) (and (=> (= (ControlFlow 0 289) 285) anon149_Then_correct) (=> (= (ControlFlow 0 289) 279) anon149_Else_correct)))))
(let ((anon148_Else_correct  (=> (not (= __last_barrier@0 2)) (=> (and (= Mask@99 Mask@16) (= (ControlFlow 0 297) 289)) anon26_correct))))
(let ((anon148_Then_correct  (=> (= __last_barrier@0 2) (and (=> (= (ControlFlow 0 290) (- 0 296)) (HasDirectPerm Mask@16 diz demo__ar)) (=> (HasDirectPerm Mask@16 diz demo__ar) (and (=> (= (ControlFlow 0 290) (- 0 295)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 290) (- 0 294)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar))) (=> (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null)) (=> (and (= Mask@97 (MapType1Store Mask@16 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@16 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@97)) (and (=> (= (ControlFlow 0 290) (- 0 293)) (HasDirectPerm Mask@97 diz demo__tmp)) (=> (HasDirectPerm Mask@97 diz demo__tmp) (and (=> (= (ControlFlow 0 290) (- 0 292)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 290) (- 0 291)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp))) (=> (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) null)) (=> (and (and (= Mask@98 (MapType1Store Mask@97 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@97 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@98)) (and (= Mask@99 Mask@98) (= (ControlFlow 0 290) 289))) anon26_correct)))))))))))))))))))
(let ((anon147_Then_correct  (=> (<= 0 tid) (=> (and (state ExhaleHeap@0 Mask@14) (< tid tcount)) (=> (and (and (state ExhaleHeap@0 Mask@14) (= tid lid)) (and (state ExhaleHeap@0 Mask@14) (= tcount gsize))) (=> (and (and (and (state ExhaleHeap@0 Mask@14) (= gid 0)) (and (state ExhaleHeap@0 Mask@14) (> wildcard@6 NoPerm))) (and (and (not (= diz null)) (= Mask@15 (MapType1Store Mask@14 diz demo__ar (real_2_U (+ (U_2_real (MapType1Select Mask@14 diz demo__ar)) wildcard@6))))) (and (state ExhaleHeap@0 Mask@15) (state ExhaleHeap@0 Mask@15)))) (and (=> (= (ControlFlow 0 298) (- 0 300)) (HasDirectPerm Mask@15 diz demo__ar)) (=> (HasDirectPerm Mask@15 diz demo__ar) (=> (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)) gsize) (=> (and (state ExhaleHeap@0 Mask@15) (> wildcard@7 NoPerm)) (=> (and (and (not (= diz null)) (= Mask@16 (MapType1Store Mask@15 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select Mask@15 diz demo__tmp)) wildcard@7))))) (and (state ExhaleHeap@0 Mask@16) (state ExhaleHeap@0 Mask@16))) (and (=> (= (ControlFlow 0 298) (- 0 299)) (HasDirectPerm Mask@16 diz demo__tmp)) (=> (HasDirectPerm Mask@16 diz demo__tmp) (=> (and (and (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)) gsize) (state ExhaleHeap@0 Mask@16)) (and (or (= __last_barrier@0 0) (= __last_barrier@0 2)) (state ExhaleHeap@0 Mask@16))) (and (=> (= (ControlFlow 0 298) 290) anon148_Then_correct) (=> (= (ControlFlow 0 298) 297) anon148_Else_correct))))))))))))))))
(let ((anon177_Then_correct  (and (=> (= (ControlFlow 0 144) (- 0 146)) (>= N@1 0)) (=> (>= N@1 0) (and (=> (= (ControlFlow 0 144) (- 0 145)) (<= 0 tid)) (=> (<= 0 tid) (=> (= (ControlFlow 0 144) (- 0 143)) (<= tid N@1))))))))
(let ((anon176_Then_correct  (and (=> (= (ControlFlow 0 140) (- 0 142)) (>= (- N@1 1) 0)) (=> (>= (- N@1 1) 0) (and (=> (= (ControlFlow 0 140) (- 0 141)) (<= 0 tid)) (=> (<= 0 tid) (=> (= (ControlFlow 0 140) (- 0 139)) (<= tid (- N@1 1)))))))))
(let ((anon175_Then_correct  (and (=> (= (ControlFlow 0 136) (- 0 138)) (>= (- N@1 1) 0)) (=> (>= (- N@1 1) 0) (and (=> (= (ControlFlow 0 136) (- 0 137)) (<= 0 (- tid 1))) (=> (<= 0 (- tid 1)) (=> (= (ControlFlow 0 136) (- 0 135)) (<= (- tid 1) (- N@1 1)))))))))
(let ((anon124_correct  (and (=> (= (ControlFlow 0 29) (- 0 32)) (> gsize 1)) (=> (> gsize 1) (and (=> (= (ControlFlow 0 29) (- 0 31)) (< 0 N@1)) (=> (< 0 N@1) (and (=> (= (ControlFlow 0 29) (- 0 30)) (< N@1 gsize)) (=> (< N@1 gsize) (=> (= (ControlFlow 0 29) (- 0 28)) (= (U_2_int (MapType0Select ExhaleHeap@3 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@1) (demo__bin ExhaleHeap@3 N@1 tid) 1)))))))))))
(let ((anon123_correct  (=> (= Mask@95 (MapType1Store Mask@94 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@94 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (=> (and (= Mask@96 Mask@95) (= (ControlFlow 0 34) 29)) anon124_correct))))
(let ((anon201_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 37) 34)) anon123_correct)))
(let ((anon201_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (<= FullPerm (U_2_real (MapType1Select Mask@94 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@94 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 35) 34) anon123_correct))))))
(let ((anon121_correct  (=> (= Mask@94 (MapType1Store Mask@93 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@93 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 38) 35) anon201_Then_correct) (=> (= (ControlFlow 0 38) 37) anon201_Else_correct)))))
(let ((anon200_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 41) 38)) anon121_correct)))
(let ((anon200_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 39) (- 0 40)) (<= FullPerm (U_2_real (MapType1Select Mask@93 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@93 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 39) 38) anon121_correct))))))
(let ((anon199_Then_correct  (=> (= __flatten_2@1 0) (and (=> (= (ControlFlow 0 42) 39) anon200_Then_correct) (=> (= (ControlFlow 0 42) 41) anon200_Else_correct)))))
(let ((anon199_Else_correct  (=> (not (= __flatten_2@1 0)) (=> (and (= Mask@96 Mask@93) (= (ControlFlow 0 33) 29)) anon124_correct))))
(let ((anon117_correct  (=> (and (= Mask@92 (MapType1Store Mask@91 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@91 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm)))) (= Mask@93 Mask@92)) (and (=> (= (ControlFlow 0 45) 42) anon199_Then_correct) (=> (= (ControlFlow 0 45) 33) anon199_Else_correct)))))
(let ((anon198_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 48) 45)) anon117_correct)))
(let ((anon198_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (<= FullPerm (U_2_real (MapType1Select Mask@91 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@91 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value))) (=> (= (ControlFlow 0 46) 45) anon117_correct))))))
(let ((anon197_Then_correct  (=> (> tid 0) (and (=> (= (ControlFlow 0 49) 46) anon198_Then_correct) (=> (= (ControlFlow 0 49) 48) anon198_Else_correct)))))
(let ((anon197_Else_correct  (=> (and (>= 0 tid) (= Mask@93 Mask@91)) (and (=> (= (ControlFlow 0 44) 42) anon199_Then_correct) (=> (= (ControlFlow 0 44) 33) anon199_Else_correct)))))
(let ((anon114_correct  (=> (= Mask@91 (MapType1Store Mask@90 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@90 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 50) 49) anon197_Then_correct) (=> (= (ControlFlow 0 50) 44) anon197_Else_correct)))))
(let ((anon196_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 53) 50)) anon114_correct)))
(let ((anon196_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 51) (- 0 52)) (<= FullPerm (U_2_real (MapType1Select Mask@90 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@90 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 51) 50) anon114_correct))))))
(let ((anon195_Then_correct  (=> (= __flatten_2@1 1) (and (=> (= (ControlFlow 0 54) 51) anon196_Then_correct) (=> (= (ControlFlow 0 54) 53) anon196_Else_correct)))))
(let ((anon195_Else_correct  (=> (and (not (= __flatten_2@1 1)) (= Mask@93 Mask@90)) (and (=> (= (ControlFlow 0 43) 42) anon199_Then_correct) (=> (= (ControlFlow 0 43) 33) anon199_Else_correct)))))
(let ((anon110_correct  (=> (and (= Mask@89 (MapType1Store Mask@88 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@88 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (= Mask@90 Mask@89)) (and (=> (= (ControlFlow 0 56) 54) anon195_Then_correct) (=> (= (ControlFlow 0 56) 43) anon195_Else_correct)))))
(let ((anon194_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 59) 56)) anon110_correct)))
(let ((anon194_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 57) (- 0 58)) (<= FullPerm (U_2_real (MapType1Select Mask@88 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@88 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 57) 56) anon110_correct))))))
(let ((anon108_correct  (=> (= Mask@88 (MapType1Store Mask@87 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@87 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 60) 57) anon194_Then_correct) (=> (= (ControlFlow 0 60) 59) anon194_Else_correct)))))
(let ((anon193_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 63) 60)) anon108_correct)))
(let ((anon193_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 61) (- 0 62)) (<= FullPerm (U_2_real (MapType1Select Mask@87 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 61) 60) anon108_correct))))))
(let ((anon192_Then_correct  (=> (= __flatten_2@1 2) (and (=> (= (ControlFlow 0 64) 61) anon193_Then_correct) (=> (= (ControlFlow 0 64) 63) anon193_Else_correct)))))
(let ((anon192_Else_correct  (=> (and (not (= __flatten_2@1 2)) (= Mask@90 Mask@87)) (and (=> (= (ControlFlow 0 55) 54) anon195_Then_correct) (=> (= (ControlFlow 0 55) 43) anon195_Else_correct)))))
(let ((anon105_correct  (=> (= __flatten_2@1 2) (=> (and (and (and (> gsize 1) (< 0 N@1)) (and (< N@1 gsize) (state ExhaleHeap@3 Mask@85))) (and (and (= (U_2_int (MapType0Select ExhaleHeap@3 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@1) (demo__bin ExhaleHeap@3 N@1 tid) 1)) (state ExhaleHeap@3 Mask@85)) (and (state ExhaleHeap@3 Mask@85) (state ExhaleHeap@3 Mask@85)))) (and (=> (= (ControlFlow 0 65) (- 0 75)) (<= 0 tid)) (=> (<= 0 tid) (and (=> (= (ControlFlow 0 65) (- 0 74)) (< tid tcount)) (=> (< tid tcount) (and (=> (= (ControlFlow 0 65) (- 0 73)) (= tid lid)) (=> (= tid lid) (and (=> (= (ControlFlow 0 65) (- 0 72)) (= tcount gsize)) (=> (= tcount gsize) (and (=> (= (ControlFlow 0 65) (- 0 71)) (= gid 0)) (=> (= gid 0) (and (=> (= (ControlFlow 0 65) (- 0 70)) (> (U_2_real (MapType1Select Mask@85 diz demo__ar)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@85 diz demo__ar)) NoPerm) (=> (> wildcard@22 NoPerm) (=> (and (< wildcard@22 (U_2_real (MapType1Select Mask@85 diz demo__ar))) (= Mask@86 (MapType1Store Mask@85 diz demo__ar (real_2_U (- (U_2_real (MapType1Select Mask@85 diz demo__ar)) wildcard@22))))) (and (=> (= (ControlFlow 0 65) (- 0 69)) (= (|Seq#Length| (MapType0Select ExhaleHeap@3 diz demo__ar)) gsize)) (=> (= (|Seq#Length| (MapType0Select ExhaleHeap@3 diz demo__ar)) gsize) (and (=> (= (ControlFlow 0 65) (- 0 68)) (> (U_2_real (MapType1Select Mask@86 diz demo__tmp)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@86 diz demo__tmp)) NoPerm) (=> (> wildcard@23 NoPerm) (=> (and (< wildcard@23 (U_2_real (MapType1Select Mask@86 diz demo__tmp))) (= Mask@87 (MapType1Store Mask@86 diz demo__tmp (real_2_U (- (U_2_real (MapType1Select Mask@86 diz demo__tmp)) wildcard@23))))) (and (=> (= (ControlFlow 0 65) (- 0 67)) (= (|Seq#Length| (MapType0Select ExhaleHeap@3 diz demo__tmp)) gsize)) (=> (= (|Seq#Length| (MapType0Select ExhaleHeap@3 diz demo__tmp)) gsize) (and (=> (= (ControlFlow 0 65) (- 0 66)) (or (= __flatten_2@1 0) (= __flatten_2@1 2))) (=> (or (= __flatten_2@1 0) (= __flatten_2@1 2)) (and (=> (= (ControlFlow 0 65) 64) anon192_Then_correct) (=> (= (ControlFlow 0 65) 55) anon192_Else_correct))))))))))))))))))))))))))))))
(let ((anon191_Else_correct  (=> (not (= __flatten_2@1 0)) (=> (and (= Mask@85 Mask@82) (= (ControlFlow 0 77) 65)) anon105_correct))))
(let ((anon191_Then_correct  (=> (= __flatten_2@1 0) (=> (and (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) null)) (= Mask@83 (MapType1Store Mask@82 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@82 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@3 Mask@83) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) null)))) (and (and (= Mask@84 (MapType1Store Mask@83 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@83 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@3 Mask@84)) (and (= Mask@85 Mask@84) (= (ControlFlow 0 76) 65)))) anon105_correct))))
(let ((anon190_Else_correct  (=> (and (>= 0 tid) (= Mask@82 Mask@80)) (and (=> (= (ControlFlow 0 80) 76) anon191_Then_correct) (=> (= (ControlFlow 0 80) 77) anon191_Else_correct)))))
(let ((anon190_Then_correct  (=> (> tid 0) (=> (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) null)) (= Mask@81 (MapType1Store Mask@80 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@80 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@3 Mask@81) (= Mask@82 Mask@81))) (and (=> (= (ControlFlow 0 79) 76) anon191_Then_correct) (=> (= (ControlFlow 0 79) 77) anon191_Else_correct))))))
(let ((anon189_Then_correct  (=> (and (and (= __flatten_2@1 1) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) null))) (and (= Mask@80 (MapType1Store Mask@79 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@79 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@3 Mask@80))) (and (=> (= (ControlFlow 0 81) 79) anon190_Then_correct) (=> (= (ControlFlow 0 81) 80) anon190_Else_correct)))))
(let ((anon189_Else_correct  (=> (and (not (= __flatten_2@1 1)) (= Mask@82 Mask@79)) (and (=> (= (ControlFlow 0 78) 76) anon191_Then_correct) (=> (= (ControlFlow 0 78) 77) anon191_Else_correct)))))
(let ((anon188_Else_correct  (=> (and (not (= __flatten_2@1 2)) (= Mask@79 Mask@76)) (and (=> (= (ControlFlow 0 83) 81) anon189_Then_correct) (=> (= (ControlFlow 0 83) 78) anon189_Else_correct)))))
(let ((anon188_Then_correct  (=> (and (and (and (= __flatten_2@1 2) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) null))) (and (= Mask@77 (MapType1Store Mask@76 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@76 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@3 Mask@77))) (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) null)) (= Mask@78 (MapType1Store Mask@77 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@77 (|Seq#Index| (MapType0Select ExhaleHeap@3 diz demo__tmp) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@3 Mask@78) (= Mask@79 Mask@78)))) (and (=> (= (ControlFlow 0 82) 81) anon189_Then_correct) (=> (= (ControlFlow 0 82) 78) anon189_Else_correct)))))
(let ((anon98_correct  (and (=> (= (ControlFlow 0 84) (- 0 88)) (> gsize 1)) (=> (> gsize 1) (and (=> (= (ControlFlow 0 84) (- 0 87)) (< 0 N@1)) (=> (< 0 N@1) (and (=> (= (ControlFlow 0 84) (- 0 86)) (< N@1 gsize)) (=> (< N@1 gsize) (and (=> (= (ControlFlow 0 84) (- 0 85)) (= (U_2_int (MapType0Select Heap@3 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@1) (demo__bin Heap@3 N@1 tid) 1))) (=> (= (U_2_int (MapType0Select Heap@3 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@1) (demo__bin Heap@3 N@1 tid) 1)) (=> (and (IdenticalOnKnownLocations Heap@3 ExhaleHeap@3 Mask@74) (<= 0 tid)) (=> (and (and (and (and (< tid tcount) (= tid lid)) (and (= tcount gsize) (= gid 0))) (and (and (> wildcard@20 NoPerm) (not (= diz null))) (and (= Mask@75 (MapType1Store Mask@74 diz demo__ar (real_2_U (+ (U_2_real (MapType1Select Mask@74 diz demo__ar)) wildcard@20)))) (state ExhaleHeap@3 Mask@75)))) (and (and (and (= (|Seq#Length| (MapType0Select ExhaleHeap@3 diz demo__ar)) gsize) (> wildcard@21 NoPerm)) (and (not (= diz null)) (= Mask@76 (MapType1Store Mask@75 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select Mask@75 diz demo__tmp)) wildcard@21)))))) (and (and (state ExhaleHeap@3 Mask@76) (= (|Seq#Length| (MapType0Select ExhaleHeap@3 diz demo__tmp)) gsize)) (and (|Seq#Equal| (MapType0Select ExhaleHeap@3 diz demo__ar) (MapType0Select Heap@3 diz demo__ar)) (|Seq#Equal| (MapType0Select ExhaleHeap@3 diz demo__tmp) (MapType0Select Heap@3 diz demo__tmp)))))) (and (=> (= (ControlFlow 0 84) 82) anon188_Then_correct) (=> (= (ControlFlow 0 84) 83) anon188_Else_correct))))))))))))))
(let ((anon97_correct  (=> (= Mask@73 (MapType1Store Mask@72 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@72 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (=> (and (= Mask@74 Mask@73) (= (ControlFlow 0 90) 84)) anon98_correct))))
(let ((anon187_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 93) 90)) anon97_correct)))
(let ((anon187_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 91) (- 0 92)) (<= FullPerm (U_2_real (MapType1Select Mask@72 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@72 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 91) 90) anon97_correct))))))
(let ((anon95_correct  (=> (= Mask@72 (MapType1Store Mask@71 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@71 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 94) 91) anon187_Then_correct) (=> (= (ControlFlow 0 94) 93) anon187_Else_correct)))))
(let ((anon186_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 97) 94)) anon95_correct)))
(let ((anon186_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 95) (- 0 96)) (<= FullPerm (U_2_real (MapType1Select Mask@71 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@71 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 95) 94) anon95_correct))))))
(let ((anon185_Then_correct  (=> (= __flatten_1@1 0) (and (=> (= (ControlFlow 0 98) 95) anon186_Then_correct) (=> (= (ControlFlow 0 98) 97) anon186_Else_correct)))))
(let ((anon185_Else_correct  (=> (not (= __flatten_1@1 0)) (=> (and (= Mask@74 Mask@71) (= (ControlFlow 0 89) 84)) anon98_correct))))
(let ((anon91_correct  (=> (and (= Mask@70 (MapType1Store Mask@69 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@69 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm)))) (= Mask@71 Mask@70)) (and (=> (= (ControlFlow 0 101) 98) anon185_Then_correct) (=> (= (ControlFlow 0 101) 89) anon185_Else_correct)))))
(let ((anon184_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 104) 101)) anon91_correct)))
(let ((anon184_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 102) (- 0 103)) (<= FullPerm (U_2_real (MapType1Select Mask@69 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) (- tid 1)) Ref__Integer_value))) (=> (= (ControlFlow 0 102) 101) anon91_correct))))))
(let ((anon183_Then_correct  (=> (> tid 0) (and (=> (= (ControlFlow 0 105) 102) anon184_Then_correct) (=> (= (ControlFlow 0 105) 104) anon184_Else_correct)))))
(let ((anon183_Else_correct  (=> (and (>= 0 tid) (= Mask@71 Mask@69)) (and (=> (= (ControlFlow 0 100) 98) anon185_Then_correct) (=> (= (ControlFlow 0 100) 89) anon185_Else_correct)))))
(let ((anon88_correct  (=> (= Mask@69 (MapType1Store Mask@68 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@68 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 106) 105) anon183_Then_correct) (=> (= (ControlFlow 0 106) 100) anon183_Else_correct)))))
(let ((anon182_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 109) 106)) anon88_correct)))
(let ((anon182_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 107) (- 0 108)) (<= FullPerm (U_2_real (MapType1Select Mask@68 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@68 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 107) 106) anon88_correct))))))
(let ((anon181_Then_correct  (=> (= __flatten_1@1 1) (and (=> (= (ControlFlow 0 110) 107) anon182_Then_correct) (=> (= (ControlFlow 0 110) 109) anon182_Else_correct)))))
(let ((anon181_Else_correct  (=> (and (not (= __flatten_1@1 1)) (= Mask@71 Mask@68)) (and (=> (= (ControlFlow 0 99) 98) anon185_Then_correct) (=> (= (ControlFlow 0 99) 89) anon185_Else_correct)))))
(let ((anon84_correct  (=> (and (= Mask@67 (MapType1Store Mask@66 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@66 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (= Mask@68 Mask@67)) (and (=> (= (ControlFlow 0 112) 110) anon181_Then_correct) (=> (= (ControlFlow 0 112) 99) anon181_Else_correct)))))
(let ((anon180_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 115) 112)) anon84_correct)))
(let ((anon180_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 113) (- 0 114)) (<= FullPerm (U_2_real (MapType1Select Mask@66 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@66 (|Seq#Index| (MapType0Select Heap@3 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 113) 112) anon84_correct))))))
(let ((anon82_correct  (=> (= Mask@66 (MapType1Store Mask@65 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@65 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 116) 113) anon180_Then_correct) (=> (= (ControlFlow 0 116) 115) anon180_Else_correct)))))
(let ((anon179_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 119) 116)) anon82_correct)))
(let ((anon179_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 117) (- 0 118)) (<= FullPerm (U_2_real (MapType1Select Mask@65 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@65 (|Seq#Index| (MapType0Select Heap@3 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 117) 116) anon82_correct))))))
(let ((anon178_Then_correct  (=> (= __flatten_1@1 2) (and (=> (= (ControlFlow 0 120) 117) anon179_Then_correct) (=> (= (ControlFlow 0 120) 119) anon179_Else_correct)))))
(let ((anon178_Else_correct  (=> (and (not (= __flatten_1@1 2)) (= Mask@68 Mask@65)) (and (=> (= (ControlFlow 0 111) 110) anon181_Then_correct) (=> (= (ControlFlow 0 111) 99) anon181_Else_correct)))))
(let ((anon79_correct  (=> (state Heap@3 Mask@63) (and (=> (= (ControlFlow 0 121) (- 0 133)) (not (= diz null))) (=> (not (= diz null)) (and (=> (= (ControlFlow 0 121) (- 0 132)) (>= current_thread_id 0)) (=> (>= current_thread_id 0) (and (=> (= (ControlFlow 0 121) (- 0 131)) (= __flatten_1@1 1)) (=> (= __flatten_1@1 1) (and (=> (= (ControlFlow 0 121) (- 0 130)) (<= 0 tid)) (=> (<= 0 tid) (and (=> (= (ControlFlow 0 121) (- 0 129)) (< tid tcount)) (=> (< tid tcount) (and (=> (= (ControlFlow 0 121) (- 0 128)) (= tid lid)) (=> (= tid lid) (and (=> (= (ControlFlow 0 121) (- 0 127)) (= tcount gsize)) (=> (= tcount gsize) (and (=> (= (ControlFlow 0 121) (- 0 126)) (= gid 0)) (=> (= gid 0) (and (=> (= (ControlFlow 0 121) (- 0 125)) (> (U_2_real (MapType1Select Mask@63 diz demo__ar)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@63 diz demo__ar)) NoPerm) (=> (> wildcard@18 NoPerm) (=> (and (< wildcard@18 (U_2_real (MapType1Select Mask@63 diz demo__ar))) (= Mask@64 (MapType1Store Mask@63 diz demo__ar (real_2_U (- (U_2_real (MapType1Select Mask@63 diz demo__ar)) wildcard@18))))) (and (=> (= (ControlFlow 0 121) (- 0 124)) (= (|Seq#Length| (MapType0Select Heap@3 diz demo__ar)) gsize)) (=> (= (|Seq#Length| (MapType0Select Heap@3 diz demo__ar)) gsize) (and (=> (= (ControlFlow 0 121) (- 0 123)) (> (U_2_real (MapType1Select Mask@64 diz demo__tmp)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@64 diz demo__tmp)) NoPerm) (=> (> wildcard@19 NoPerm) (=> (and (< wildcard@19 (U_2_real (MapType1Select Mask@64 diz demo__tmp))) (= Mask@65 (MapType1Store Mask@64 diz demo__tmp (real_2_U (- (U_2_real (MapType1Select Mask@64 diz demo__tmp)) wildcard@19))))) (and (=> (= (ControlFlow 0 121) (- 0 122)) (= (|Seq#Length| (MapType0Select Heap@3 diz demo__tmp)) gsize)) (=> (= (|Seq#Length| (MapType0Select Heap@3 diz demo__tmp)) gsize) (and (=> (= (ControlFlow 0 121) 120) anon178_Then_correct) (=> (= (ControlFlow 0 121) 111) anon178_Else_correct)))))))))))))))))))))))))))))))))
(let ((anon177_Else_correct  (and (=> (= (ControlFlow 0 147) (- 0 148)) (= (U_2_int (MapType0Select Heap@2 (|Seq#Index| (MapType0Select Heap@2 diz demo__ar) tid) Ref__Integer_value)) (demo__bin Heap@2 N@1 tid))) (=> (= (U_2_int (MapType0Select Heap@2 (|Seq#Index| (MapType0Select Heap@2 diz demo__ar) tid) Ref__Integer_value)) (demo__bin Heap@2 N@1 tid)) (=> (state Heap@2 Mask@63) (=> (and (= Heap@3 Heap@2) (= (ControlFlow 0 147) 121)) anon79_correct))))))
(let ((anon176_Else_correct  (and (=> (= (ControlFlow 0 149) (- 0 166)) (= (U_2_int (MapType0Select ExhaleHeap@2 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) (demo__bin ExhaleHeap@2 (- N@1 1) tid))) (=> (= (U_2_int (MapType0Select ExhaleHeap@2 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) (demo__bin ExhaleHeap@2 (- N@1 1) tid)) (=> (state ExhaleHeap@2 Mask@63) (and (=> (= (ControlFlow 0 149) (- 0 165)) (HasDirectPerm Mask@63 diz demo__ar)) (=> (HasDirectPerm Mask@63 diz demo__ar) (and (=> (= (ControlFlow 0 149) (- 0 164)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 149) (- 0 163)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar))) (=> (and (= __flatten_9@1 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid)) (state ExhaleHeap@2 Mask@63)) (and (=> (= (ControlFlow 0 149) (- 0 162)) (HasDirectPerm Mask@63 diz demo__tmp)) (=> (HasDirectPerm Mask@63 diz demo__tmp) (and (=> (= (ControlFlow 0 149) (- 0 161)) (>= (- tid 1) 0)) (=> (>= (- tid 1) 0) (and (=> (= (ControlFlow 0 149) (- 0 160)) (< (- tid 1) (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__tmp)))) (=> (< (- tid 1) (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__tmp))) (=> (and (= __flatten_11@1 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1))) (state ExhaleHeap@2 Mask@63)) (and (=> (= (ControlFlow 0 149) (- 0 159)) (HasDirectPerm Mask@63 diz demo__ar)) (=> (HasDirectPerm Mask@63 diz demo__ar) (and (=> (= (ControlFlow 0 149) (- 0 158)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 149) (- 0 157)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar))) (=> (and (= __flatten_12@1 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid)) (state ExhaleHeap@2 Mask@63)) (and (=> (= (ControlFlow 0 149) (- 0 156)) (HasDirectPerm Mask@63 __flatten_11@1 Ref__Integer_value)) (=> (HasDirectPerm Mask@63 __flatten_11@1 Ref__Integer_value) (and (=> (= (ControlFlow 0 149) (- 0 155)) (HasDirectPerm Mask@63 __flatten_12@1 Ref__Integer_value)) (=> (HasDirectPerm Mask@63 __flatten_12@1 Ref__Integer_value) (=> (and (= __flatten_10@1 (+ (U_2_int (MapType0Select ExhaleHeap@2 __flatten_11@1 Ref__Integer_value)) (U_2_int (MapType0Select ExhaleHeap@2 __flatten_12@1 Ref__Integer_value)))) (state ExhaleHeap@2 Mask@63)) (and (=> (= (ControlFlow 0 149) (- 0 154)) (= FullPerm (U_2_real (MapType1Select Mask@63 __flatten_9@1 Ref__Integer_value)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@63 __flatten_9@1 Ref__Integer_value))) (=> (and (= Heap@2 (MapType0Store ExhaleHeap@2 __flatten_9@1 Ref__Integer_value (int_2_U __flatten_10@1))) (state Heap@2 Mask@63)) (and (=> (= (ControlFlow 0 149) (- 0 153)) (HasDirectPerm Mask@63 diz demo__ar)) (=> (HasDirectPerm Mask@63 diz demo__ar) (and (=> (= (ControlFlow 0 149) (- 0 152)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 149) (- 0 151)) (< tid (|Seq#Length| (MapType0Select Heap@2 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select Heap@2 diz demo__ar))) (and (=> (= (ControlFlow 0 149) (- 0 150)) (HasDirectPerm Mask@63 (|Seq#Index| (MapType0Select Heap@2 diz demo__ar) tid) Ref__Integer_value)) (=> (HasDirectPerm Mask@63 (|Seq#Index| (MapType0Select Heap@2 diz demo__ar) tid) Ref__Integer_value) (and (=> (= (ControlFlow 0 149) 144) anon177_Then_correct) (=> (= (ControlFlow 0 149) 147) anon177_Else_correct))))))))))))))))))))))))))))))))))))))))))))
(let ((anon175_Else_correct  (and (=> (= (ControlFlow 0 167) (- 0 172)) (= (U_2_int (MapType0Select ExhaleHeap@2 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value)) (demo__bin ExhaleHeap@2 (- N@1 1) (- tid 1)))) (=> (= (U_2_int (MapType0Select ExhaleHeap@2 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value)) (demo__bin ExhaleHeap@2 (- N@1 1) (- tid 1))) (and (=> (= (ControlFlow 0 167) (- 0 171)) (HasDirectPerm Mask@63 diz demo__ar)) (=> (HasDirectPerm Mask@63 diz demo__ar) (and (=> (= (ControlFlow 0 167) (- 0 170)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 167) (- 0 169)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar))) (and (=> (= (ControlFlow 0 167) (- 0 168)) (HasDirectPerm Mask@63 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) (=> (HasDirectPerm Mask@63 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value) (and (=> (= (ControlFlow 0 167) 140) anon176_Then_correct) (=> (= (ControlFlow 0 167) 149) anon176_Else_correct))))))))))))))
(let ((anon174_Then_correct  (=> (and (< 0 tid) (< tid N@1)) (and (=> (= (ControlFlow 0 173) (- 0 177)) (HasDirectPerm Mask@63 diz demo__tmp)) (=> (HasDirectPerm Mask@63 diz demo__tmp) (and (=> (= (ControlFlow 0 173) (- 0 176)) (>= (- tid 1) 0)) (=> (>= (- tid 1) 0) (and (=> (= (ControlFlow 0 173) (- 0 175)) (< (- tid 1) (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__tmp)))) (=> (< (- tid 1) (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__tmp))) (and (=> (= (ControlFlow 0 173) (- 0 174)) (HasDirectPerm Mask@63 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value)) (=> (HasDirectPerm Mask@63 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value) (and (=> (= (ControlFlow 0 173) 136) anon175_Then_correct) (=> (= (ControlFlow 0 173) 167) anon175_Else_correct)))))))))))))
(let ((anon174_Else_correct  (=> (not (and (< 0 tid) (< tid N@1))) (=> (and (= Heap@3 ExhaleHeap@2) (= (ControlFlow 0 134) 121)) anon79_correct))))
(let ((anon71_correct  (=> (state ExhaleHeap@2 Mask@63) (=> (and (= (U_2_int (MapType0Select ExhaleHeap@2 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@0) (demo__bin ExhaleHeap@2 N@0 tid) 1)) (state ExhaleHeap@2 Mask@63)) (=> (and (and (state ExhaleHeap@2 Mask@63) (state ExhaleHeap@2 Mask@63)) (and (= N@1 (+ N@0 1)) (state ExhaleHeap@2 Mask@63))) (and (=> (= (ControlFlow 0 178) 173) anon174_Then_correct) (=> (= (ControlFlow 0 178) 134) anon174_Else_correct)))))))
(let ((anon173_Else_correct  (=> (and (not (and (< 0 tid) (<= tid N@0))) (= (ControlFlow 0 180) 178)) anon71_correct)))
(let ((anon173_Then_correct  (=> (and (and (and (< 0 tid) (<= tid N@0)) (state ExhaleHeap@2 Mask@63)) (and (= (U_2_int (MapType0Select ExhaleHeap@2 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value)) (demo__bin ExhaleHeap@2 N@0 (- tid 1))) (= (ControlFlow 0 179) 178))) anon71_correct)))
(let ((anon69_correct  (=> (and (and (= __flatten_1@1 1) (> gsize 1)) (and (< 0 N@0) (< N@0 gsize))) (and (=> (= (ControlFlow 0 181) 179) anon173_Then_correct) (=> (= (ControlFlow 0 181) 180) anon173_Else_correct)))))
(let ((anon172_Else_correct  (=> (not (= __flatten_1@1 0)) (=> (and (= Mask@63 Mask@60) (= (ControlFlow 0 183) 181)) anon69_correct))))
(let ((anon172_Then_correct  (=> (= __flatten_1@1 0) (=> (and (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) null)) (= Mask@61 (MapType1Store Mask@60 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@60 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@2 Mask@61) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) tid) null)))) (and (and (= Mask@62 (MapType1Store Mask@61 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@61 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@2 Mask@62)) (and (= Mask@63 Mask@62) (= (ControlFlow 0 182) 181)))) anon69_correct))))
(let ((anon171_Else_correct  (=> (and (>= 0 tid) (= Mask@60 Mask@58)) (and (=> (= (ControlFlow 0 186) 182) anon172_Then_correct) (=> (= (ControlFlow 0 186) 183) anon172_Else_correct)))))
(let ((anon171_Then_correct  (=> (> tid 0) (=> (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) null)) (= Mask@59 (MapType1Store Mask@58 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@58 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@2 Mask@59) (= Mask@60 Mask@59))) (and (=> (= (ControlFlow 0 185) 182) anon172_Then_correct) (=> (= (ControlFlow 0 185) 183) anon172_Else_correct))))))
(let ((anon170_Then_correct  (=> (and (and (= __flatten_1@1 1) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) null))) (and (= Mask@58 (MapType1Store Mask@57 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@57 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@2 Mask@58))) (and (=> (= (ControlFlow 0 187) 185) anon171_Then_correct) (=> (= (ControlFlow 0 187) 186) anon171_Else_correct)))))
(let ((anon170_Else_correct  (=> (and (not (= __flatten_1@1 1)) (= Mask@60 Mask@57)) (and (=> (= (ControlFlow 0 184) 182) anon172_Then_correct) (=> (= (ControlFlow 0 184) 183) anon172_Else_correct)))))
(let ((anon169_Else_correct  (=> (and (not (= __flatten_1@1 2)) (= Mask@57 Mask@54)) (and (=> (= (ControlFlow 0 189) 187) anon170_Then_correct) (=> (= (ControlFlow 0 189) 184) anon170_Else_correct)))))
(let ((anon169_Then_correct  (=> (and (and (and (= __flatten_1@1 2) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) null))) (and (= Mask@55 (MapType1Store Mask@54 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@54 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@2 Mask@55))) (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) tid) null)) (= Mask@56 (MapType1Store Mask@55 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@55 (|Seq#Index| (MapType0Select ExhaleHeap@2 diz demo__tmp) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@2 Mask@56) (= Mask@57 Mask@56)))) (and (=> (= (ControlFlow 0 188) 187) anon170_Then_correct) (=> (= (ControlFlow 0 188) 184) anon170_Else_correct)))))
(let ((anon62_correct  (and (=> (= (ControlFlow 0 190) (- 0 195)) (> gsize 1)) (=> (> gsize 1) (and (=> (= (ControlFlow 0 190) (- 0 194)) (< 0 N@0)) (=> (< 0 N@0) (and (=> (= (ControlFlow 0 190) (- 0 193)) (< N@0 gsize)) (=> (< N@0 gsize) (and (=> (= (ControlFlow 0 190) (- 0 192)) (= (U_2_int (MapType0Select Heap@1 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@0) (demo__bin Heap@1 N@0 tid) 1))) (=> (= (U_2_int (MapType0Select Heap@1 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@0) (demo__bin Heap@1 N@0 tid) 1)) (and (=> (= (ControlFlow 0 190) (- 0 191)) (= (U_2_int (MapType0Select Heap@1 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value)) (U_2_int (MapType0Select Heap@1 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)))) (=> (= (U_2_int (MapType0Select Heap@1 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value)) (U_2_int (MapType0Select Heap@1 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value))) (=> (and (IdenticalOnKnownLocations Heap@1 ExhaleHeap@2 Mask@52) (<= 0 tid)) (=> (and (and (and (and (< tid tcount) (= tid lid)) (and (= tcount gsize) (= gid 0))) (and (and (> wildcard@16 NoPerm) (not (= diz null))) (and (= Mask@53 (MapType1Store Mask@52 diz demo__ar (real_2_U (+ (U_2_real (MapType1Select Mask@52 diz demo__ar)) wildcard@16)))) (state ExhaleHeap@2 Mask@53)))) (and (and (and (= (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__ar)) gsize) (> wildcard@17 NoPerm)) (and (not (= diz null)) (= Mask@54 (MapType1Store Mask@53 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select Mask@53 diz demo__tmp)) wildcard@17)))))) (and (and (state ExhaleHeap@2 Mask@54) (= (|Seq#Length| (MapType0Select ExhaleHeap@2 diz demo__tmp)) gsize)) (and (|Seq#Equal| (MapType0Select ExhaleHeap@2 diz demo__ar) (MapType0Select Heap@1 diz demo__ar)) (|Seq#Equal| (MapType0Select ExhaleHeap@2 diz demo__tmp) (MapType0Select Heap@1 diz demo__tmp)))))) (and (=> (= (ControlFlow 0 190) 188) anon169_Then_correct) (=> (= (ControlFlow 0 190) 189) anon169_Else_correct))))))))))))))))
(let ((anon61_correct  (=> (= Mask@51 (MapType1Store Mask@50 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@50 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (=> (and (= Mask@52 Mask@51) (= (ControlFlow 0 197) 190)) anon62_correct))))
(let ((anon168_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 200) 197)) anon61_correct)))
(let ((anon168_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 198) (- 0 199)) (<= FullPerm (U_2_real (MapType1Select Mask@50 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@50 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 198) 197) anon61_correct))))))
(let ((anon59_correct  (=> (= Mask@50 (MapType1Store Mask@49 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@49 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 201) 198) anon168_Then_correct) (=> (= (ControlFlow 0 201) 200) anon168_Else_correct)))))
(let ((anon167_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 204) 201)) anon59_correct)))
(let ((anon167_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 202) (- 0 203)) (<= FullPerm (U_2_real (MapType1Select Mask@49 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@49 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 202) 201) anon59_correct))))))
(let ((anon166_Then_correct  (=> (= __last_barrier@0 0) (and (=> (= (ControlFlow 0 205) 202) anon167_Then_correct) (=> (= (ControlFlow 0 205) 204) anon167_Else_correct)))))
(let ((anon166_Else_correct  (=> (not (= __last_barrier@0 0)) (=> (and (= Mask@52 Mask@49) (= (ControlFlow 0 196) 190)) anon62_correct))))
(let ((anon55_correct  (=> (and (= Mask@48 (MapType1Store Mask@47 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@47 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm)))) (= Mask@49 Mask@48)) (and (=> (= (ControlFlow 0 208) 205) anon166_Then_correct) (=> (= (ControlFlow 0 208) 196) anon166_Else_correct)))))
(let ((anon165_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 211) 208)) anon55_correct)))
(let ((anon165_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 209) (- 0 210)) (<= FullPerm (U_2_real (MapType1Select Mask@47 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) (- tid 1)) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@47 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) (- tid 1)) Ref__Integer_value))) (=> (= (ControlFlow 0 209) 208) anon55_correct))))))
(let ((anon164_Then_correct  (=> (> tid 0) (and (=> (= (ControlFlow 0 212) 209) anon165_Then_correct) (=> (= (ControlFlow 0 212) 211) anon165_Else_correct)))))
(let ((anon164_Else_correct  (=> (and (>= 0 tid) (= Mask@49 Mask@47)) (and (=> (= (ControlFlow 0 207) 205) anon166_Then_correct) (=> (= (ControlFlow 0 207) 196) anon166_Else_correct)))))
(let ((anon52_correct  (=> (= Mask@47 (MapType1Store Mask@46 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@46 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 213) 212) anon164_Then_correct) (=> (= (ControlFlow 0 213) 207) anon164_Else_correct)))))
(let ((anon163_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 216) 213)) anon52_correct)))
(let ((anon163_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 214) (- 0 215)) (<= FullPerm (U_2_real (MapType1Select Mask@46 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@46 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 214) 213) anon52_correct))))))
(let ((anon162_Then_correct  (=> (= __last_barrier@0 1) (and (=> (= (ControlFlow 0 217) 214) anon163_Then_correct) (=> (= (ControlFlow 0 217) 216) anon163_Else_correct)))))
(let ((anon162_Else_correct  (=> (and (not (= __last_barrier@0 1)) (= Mask@49 Mask@46)) (and (=> (= (ControlFlow 0 206) 205) anon166_Then_correct) (=> (= (ControlFlow 0 206) 196) anon166_Else_correct)))))
(let ((anon48_correct  (=> (and (= Mask@45 (MapType1Store Mask@44 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@44 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (= Mask@46 Mask@45)) (and (=> (= (ControlFlow 0 219) 217) anon162_Then_correct) (=> (= (ControlFlow 0 219) 206) anon162_Else_correct)))))
(let ((anon161_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 222) 219)) anon48_correct)))
(let ((anon161_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 220) (- 0 221)) (<= FullPerm (U_2_real (MapType1Select Mask@44 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@44 (|Seq#Index| (MapType0Select Heap@1 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 220) 219) anon48_correct))))))
(let ((anon46_correct  (=> (= Mask@44 (MapType1Store Mask@43 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@43 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 223) 220) anon161_Then_correct) (=> (= (ControlFlow 0 223) 222) anon161_Else_correct)))))
(let ((anon160_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 226) 223)) anon46_correct)))
(let ((anon160_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 224) (- 0 225)) (<= FullPerm (U_2_real (MapType1Select Mask@43 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 (|Seq#Index| (MapType0Select Heap@1 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 224) 223) anon46_correct))))))
(let ((anon159_Then_correct  (=> (= __last_barrier@0 2) (and (=> (= (ControlFlow 0 227) 224) anon160_Then_correct) (=> (= (ControlFlow 0 227) 226) anon160_Else_correct)))))
(let ((anon159_Else_correct  (=> (and (not (= __last_barrier@0 2)) (= Mask@46 Mask@43)) (and (=> (= (ControlFlow 0 218) 217) anon162_Then_correct) (=> (= (ControlFlow 0 218) 206) anon162_Else_correct)))))
(let ((anon43_correct  (=> (and (and (and (> gsize 1) (< 0 N@0)) (and (< N@0 gsize) (state ExhaleHeap@0 Mask@41))) (and (and (= (U_2_int (MapType0Select ExhaleHeap@0 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@0) (demo__bin ExhaleHeap@0 N@0 tid) 1)) (state ExhaleHeap@0 Mask@41)) (and (< N@0 (- gsize 1)) (state ExhaleHeap@0 Mask@41)))) (and (=> (= (ControlFlow 0 228) (- 0 248)) (HasDirectPerm Mask@41 diz demo__tmp)) (=> (HasDirectPerm Mask@41 diz demo__tmp) (and (=> (= (ControlFlow 0 228) (- 0 247)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 228) (- 0 246)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp))) (=> (and (= __flatten_5@1 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid)) (state ExhaleHeap@0 Mask@41)) (and (=> (= (ControlFlow 0 228) (- 0 245)) (HasDirectPerm Mask@41 diz demo__ar)) (=> (HasDirectPerm Mask@41 diz demo__ar) (and (=> (= (ControlFlow 0 228) (- 0 244)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 228) (- 0 243)) (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar))) (=> (and (= __flatten_7@1 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid)) (state ExhaleHeap@0 Mask@41)) (and (=> (= (ControlFlow 0 228) (- 0 242)) (HasDirectPerm Mask@41 __flatten_7@1 Ref__Integer_value)) (=> (HasDirectPerm Mask@41 __flatten_7@1 Ref__Integer_value) (=> (and (= __flatten_6@1 (U_2_int (MapType0Select ExhaleHeap@0 __flatten_7@1 Ref__Integer_value))) (state ExhaleHeap@0 Mask@41)) (and (=> (= (ControlFlow 0 228) (- 0 241)) (= FullPerm (U_2_real (MapType1Select Mask@41 __flatten_5@1 Ref__Integer_value)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@41 __flatten_5@1 Ref__Integer_value))) (=> (and (= Heap@1 (MapType0Store ExhaleHeap@0 __flatten_5@1 Ref__Integer_value (int_2_U __flatten_6@1))) (state Heap@1 Mask@41)) (and (=> (= (ControlFlow 0 228) (- 0 240)) (not (= diz null))) (=> (not (= diz null)) (and (=> (= (ControlFlow 0 228) (- 0 239)) (>= current_thread_id 0)) (=> (>= current_thread_id 0) (and (=> (= (ControlFlow 0 228) (- 0 238)) (or (= __last_barrier@0 0) (= __last_barrier@0 2))) (=> (or (= __last_barrier@0 0) (= __last_barrier@0 2)) (and (=> (= (ControlFlow 0 228) (- 0 237)) (<= 0 tid)) (=> (<= 0 tid) (and (=> (= (ControlFlow 0 228) (- 0 236)) (< tid tcount)) (=> (< tid tcount) (and (=> (= (ControlFlow 0 228) (- 0 235)) (= tid lid)) (=> (= tid lid) (and (=> (= (ControlFlow 0 228) (- 0 234)) (= tcount gsize)) (=> (= tcount gsize) (and (=> (= (ControlFlow 0 228) (- 0 233)) (= gid 0)) (=> (= gid 0) (and (=> (= (ControlFlow 0 228) (- 0 232)) (> (U_2_real (MapType1Select Mask@41 diz demo__ar)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@41 diz demo__ar)) NoPerm) (=> (> wildcard@14 NoPerm) (=> (and (< wildcard@14 (U_2_real (MapType1Select Mask@41 diz demo__ar))) (= Mask@42 (MapType1Store Mask@41 diz demo__ar (real_2_U (- (U_2_real (MapType1Select Mask@41 diz demo__ar)) wildcard@14))))) (and (=> (= (ControlFlow 0 228) (- 0 231)) (= (|Seq#Length| (MapType0Select Heap@1 diz demo__ar)) gsize)) (=> (= (|Seq#Length| (MapType0Select Heap@1 diz demo__ar)) gsize) (and (=> (= (ControlFlow 0 228) (- 0 230)) (> (U_2_real (MapType1Select Mask@42 diz demo__tmp)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@42 diz demo__tmp)) NoPerm) (=> (> wildcard@15 NoPerm) (=> (and (< wildcard@15 (U_2_real (MapType1Select Mask@42 diz demo__tmp))) (= Mask@43 (MapType1Store Mask@42 diz demo__tmp (real_2_U (- (U_2_real (MapType1Select Mask@42 diz demo__tmp)) wildcard@15))))) (and (=> (= (ControlFlow 0 228) (- 0 229)) (= (|Seq#Length| (MapType0Select Heap@1 diz demo__tmp)) gsize)) (=> (= (|Seq#Length| (MapType0Select Heap@1 diz demo__tmp)) gsize) (and (=> (= (ControlFlow 0 228) 227) anon159_Then_correct) (=> (= (ControlFlow 0 228) 218) anon159_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon158_Else_correct  (=> (not (= __last_barrier@0 0)) (=> (and (= Mask@41 Mask@38) (= (ControlFlow 0 250) 228)) anon43_correct))))
(let ((anon158_Then_correct  (=> (= __last_barrier@0 0) (=> (and (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null)) (= Mask@39 (MapType1Store Mask@38 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@38 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@0 Mask@39) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) null)))) (and (and (= Mask@40 (MapType1Store Mask@39 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@39 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@40)) (and (= Mask@41 Mask@40) (= (ControlFlow 0 249) 228)))) anon43_correct))))
(let ((anon157_Else_correct  (=> (and (>= 0 tid) (= Mask@38 Mask@36)) (and (=> (= (ControlFlow 0 253) 249) anon158_Then_correct) (=> (= (ControlFlow 0 253) 250) anon158_Else_correct)))))
(let ((anon157_Then_correct  (=> (> tid 0) (=> (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) null)) (= Mask@37 (MapType1Store Mask@36 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@36 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@0 Mask@37) (= Mask@38 Mask@37))) (and (=> (= (ControlFlow 0 252) 249) anon158_Then_correct) (=> (= (ControlFlow 0 252) 250) anon158_Else_correct))))))
(let ((anon156_Then_correct  (=> (and (and (= __last_barrier@0 1) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null))) (and (= Mask@36 (MapType1Store Mask@35 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@35 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@36))) (and (=> (= (ControlFlow 0 254) 252) anon157_Then_correct) (=> (= (ControlFlow 0 254) 253) anon157_Else_correct)))))
(let ((anon156_Else_correct  (=> (and (not (= __last_barrier@0 1)) (= Mask@38 Mask@35)) (and (=> (= (ControlFlow 0 251) 249) anon158_Then_correct) (=> (= (ControlFlow 0 251) 250) anon158_Else_correct)))))
(let ((anon155_Else_correct  (=> (and (not (= __last_barrier@0 2)) (= Mask@35 Mask@18)) (and (=> (= (ControlFlow 0 256) 254) anon156_Then_correct) (=> (= (ControlFlow 0 256) 251) anon156_Else_correct)))))
(let ((anon155_Then_correct  (=> (and (and (and (= __last_barrier@0 2) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null))) (and (= Mask@33 (MapType1Store Mask@18 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@18 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@33))) (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) null)) (= Mask@34 (MapType1Store Mask@33 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@33 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@0 Mask@34) (= Mask@35 Mask@34)))) (and (=> (= (ControlFlow 0 255) 254) anon156_Then_correct) (=> (= (ControlFlow 0 255) 251) anon156_Else_correct)))))
(let ((anon154_Then_correct  (=> (state ExhaleHeap@0 ZeroMask) (=> (and (and (and (and (<= 0 tid) (< tid tcount)) (and (= tid lid) (= tcount gsize))) (and (and (= gid 0) (> wildcard@8 NoPerm)) (and (not (= diz null)) (= Mask@17 (MapType1Store ZeroMask diz demo__ar (real_2_U (+ (U_2_real (MapType1Select ZeroMask diz demo__ar)) wildcard@8))))))) (and (and (and (state ExhaleHeap@0 Mask@17) (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)) gsize)) (and (> wildcard@9 NoPerm) (not (= diz null)))) (and (and (= Mask@18 (MapType1Store Mask@17 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select Mask@17 diz demo__tmp)) wildcard@9)))) (state ExhaleHeap@0 Mask@18)) (and (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)) gsize) (or (= __last_barrier@0 0) (= __last_barrier@0 2)))))) (and (=> (= (ControlFlow 0 257) 255) anon155_Then_correct) (=> (= (ControlFlow 0 257) 256) anon155_Else_correct))))))
(let ((anon134_correct  (=> (and (= Mask@32 (MapType1Store Mask@31 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@31 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (= (ControlFlow 0 2) (- 0 1))) (= (U_2_int (MapType0Select ExhaleHeap@0 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) (demo__bin ExhaleHeap@0 (- gsize 1) tid)))))
(let ((anon206_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 5) 2)) anon134_correct)))
(let ((anon206_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= FullPerm (U_2_real (MapType1Select Mask@31 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@31 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 3) 2) anon134_correct))))))
(let ((anon132_correct  (=> (> gsize 1) (=> (and (< 0 N@0) (< N@0 gsize)) (=> (and (and (state ExhaleHeap@0 Mask@29) (= (U_2_int (MapType0Select ExhaleHeap@0 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid N@0) (demo__bin ExhaleHeap@0 N@0 tid) 1))) (and (state ExhaleHeap@0 Mask@29) (state ExhaleHeap@0 Mask@29))) (and (=> (= (ControlFlow 0 6) (- 0 18)) (<= 0 tid)) (=> (<= 0 tid) (and (=> (= (ControlFlow 0 6) (- 0 17)) (< tid tcount)) (=> (< tid tcount) (and (=> (= (ControlFlow 0 6) (- 0 16)) (= tid lid)) (=> (= tid lid) (and (=> (= (ControlFlow 0 6) (- 0 15)) (= tcount gsize)) (=> (= tcount gsize) (and (=> (= (ControlFlow 0 6) (- 0 14)) (= gid 0)) (=> (= gid 0) (and (=> (= (ControlFlow 0 6) (- 0 13)) (> (U_2_real (MapType1Select Mask@29 diz demo__ar)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@29 diz demo__ar)) NoPerm) (=> (> wildcard@12 NoPerm) (=> (and (< wildcard@12 (U_2_real (MapType1Select Mask@29 diz demo__ar))) (= Mask@30 (MapType1Store Mask@29 diz demo__ar (real_2_U (- (U_2_real (MapType1Select Mask@29 diz demo__ar)) wildcard@12))))) (and (=> (= (ControlFlow 0 6) (- 0 12)) (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)) gsize)) (=> (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)) gsize) (and (=> (= (ControlFlow 0 6) (- 0 11)) (> (U_2_real (MapType1Select Mask@30 diz demo__tmp)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@30 diz demo__tmp)) NoPerm) (=> (> wildcard@13 NoPerm) (=> (and (< wildcard@13 (U_2_real (MapType1Select Mask@30 diz demo__tmp))) (= Mask@31 (MapType1Store Mask@30 diz demo__tmp (real_2_U (- (U_2_real (MapType1Select Mask@30 diz demo__tmp)) wildcard@13))))) (and (=> (= (ControlFlow 0 6) (- 0 10)) (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)) gsize)) (=> (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)) gsize) (and (=> (= (ControlFlow 0 6) (- 0 9)) (|Seq#Equal| (MapType0Select ExhaleHeap@0 diz demo__ar) (MapType0Select Heap@@13 diz demo__ar))) (=> (|Seq#Equal| (MapType0Select ExhaleHeap@0 diz demo__ar) (MapType0Select Heap@@13 diz demo__ar)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (|Seq#Equal| (MapType0Select ExhaleHeap@0 diz demo__tmp) (MapType0Select Heap@@13 diz demo__tmp))) (=> (|Seq#Equal| (MapType0Select ExhaleHeap@0 diz demo__tmp) (MapType0Select Heap@@13 diz demo__tmp)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (> gsize 1)) (=> (> gsize 1) (and (=> (= (ControlFlow 0 6) 3) anon206_Then_correct) (=> (= (ControlFlow 0 6) 5) anon206_Else_correct)))))))))))))))))))))))))))))))))))
(let ((anon205_Else_correct  (=> (not (= __last_barrier@0 0)) (=> (and (= Mask@29 Mask@26) (= (ControlFlow 0 20) 6)) anon132_correct))))
(let ((anon205_Then_correct  (=> (= __last_barrier@0 0) (=> (and (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null)) (= Mask@27 (MapType1Store Mask@26 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@26 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@0 Mask@27) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) null)))) (and (and (= Mask@28 (MapType1Store Mask@27 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@27 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@28)) (and (= Mask@29 Mask@28) (= (ControlFlow 0 19) 6)))) anon132_correct))))
(let ((anon204_Else_correct  (=> (and (>= 0 tid) (= Mask@26 Mask@24)) (and (=> (= (ControlFlow 0 23) 19) anon205_Then_correct) (=> (= (ControlFlow 0 23) 20) anon205_Else_correct)))))
(let ((anon204_Then_correct  (=> (> tid 0) (=> (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) null)) (= Mask@25 (MapType1Store Mask@24 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@24 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@0 Mask@25) (= Mask@26 Mask@25))) (and (=> (= (ControlFlow 0 22) 19) anon205_Then_correct) (=> (= (ControlFlow 0 22) 20) anon205_Else_correct))))))
(let ((anon203_Then_correct  (=> (and (and (= __last_barrier@0 1) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null))) (and (= Mask@24 (MapType1Store Mask@23 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@23 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@24))) (and (=> (= (ControlFlow 0 24) 22) anon204_Then_correct) (=> (= (ControlFlow 0 24) 23) anon204_Else_correct)))))
(let ((anon203_Else_correct  (=> (and (not (= __last_barrier@0 1)) (= Mask@26 Mask@23)) (and (=> (= (ControlFlow 0 21) 19) anon205_Then_correct) (=> (= (ControlFlow 0 21) 20) anon205_Else_correct)))))
(let ((anon202_Else_correct  (=> (and (not (= __last_barrier@0 2)) (= Mask@23 Mask@20)) (and (=> (= (ControlFlow 0 26) 24) anon203_Then_correct) (=> (= (ControlFlow 0 26) 21) anon203_Else_correct)))))
(let ((anon202_Then_correct  (=> (and (and (and (= __last_barrier@0 2) (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) null))) (and (= Mask@21 (MapType1Store Mask@20 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@20 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (state ExhaleHeap@0 Mask@21))) (and (and (not (= (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) null)) (= Mask@22 (MapType1Store Mask@21 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@21 (|Seq#Index| (MapType0Select ExhaleHeap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm))))) (and (state ExhaleHeap@0 Mask@22) (= Mask@23 Mask@22)))) (and (=> (= (ControlFlow 0 25) 24) anon203_Then_correct) (=> (= (ControlFlow 0 25) 21) anon203_Else_correct)))))
(let ((anon154_Else_correct  (=> (and (not (< N@0 (- gsize 1))) (state ExhaleHeap@0 Mask@14)) (=> (and (and (and (and (<= 0 tid) (< tid tcount)) (and (= tid lid) (= tcount gsize))) (and (and (= gid 0) (> wildcard@10 NoPerm)) (and (not (= diz null)) (= Mask@19 (MapType1Store Mask@14 diz demo__ar (real_2_U (+ (U_2_real (MapType1Select Mask@14 diz demo__ar)) wildcard@10))))))) (and (and (and (state ExhaleHeap@0 Mask@19) (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__ar)) gsize)) (and (> wildcard@11 NoPerm) (not (= diz null)))) (and (and (= Mask@20 (MapType1Store Mask@19 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select Mask@19 diz demo__tmp)) wildcard@11)))) (state ExhaleHeap@0 Mask@20)) (and (= (|Seq#Length| (MapType0Select ExhaleHeap@0 diz demo__tmp)) gsize) (or (= __last_barrier@0 0) (= __last_barrier@0 2)))))) (and (=> (= (ControlFlow 0 27) 25) anon202_Then_correct) (=> (= (ControlFlow 0 27) 26) anon202_Else_correct))))))
(let ((anon23_correct  (and (=> (= (ControlFlow 0 301) (- 0 305)) (> gsize 1)) (=> (> gsize 1) (and (=> (= (ControlFlow 0 301) (- 0 304)) (< 0 1)) (=> (< 0 1) (and (=> (= (ControlFlow 0 301) (- 0 303)) (< 1 gsize)) (=> (< 1 gsize) (and (=> (= (ControlFlow 0 301) (- 0 302)) (= (U_2_int (MapType0Select Heap@0 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid 1) (demo__bin Heap@0 1 tid) 1))) (=> (= (U_2_int (MapType0Select Heap@0 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)) (ite (< tid 1) (demo__bin Heap@0 1 tid) 1)) (=> (and (IdenticalOnKnownLocations Heap@0 ExhaleHeap@0 Mask@14) (U_2_bool (MapType0Select ExhaleHeap@0 __flatten_12@0 $allocated))) (=> (and (and (U_2_bool (MapType0Select ExhaleHeap@0 __flatten_11@0 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@0 __flatten_9@0 $allocated))) (and (U_2_bool (MapType0Select ExhaleHeap@0 __flatten_7@0 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@0 __flatten_5@0 $allocated)))) (and (and (=> (= (ControlFlow 0 301) 298) anon147_Then_correct) (=> (= (ControlFlow 0 301) 257) anon154_Then_correct)) (=> (= (ControlFlow 0 301) 27) anon154_Else_correct))))))))))))))
(let ((anon22_correct  (=> (= Mask@13 (MapType1Store Mask@12 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@12 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (=> (and (= Mask@14 Mask@13) (= (ControlFlow 0 307) 301)) anon23_correct))))
(let ((anon146_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 310) 307)) anon22_correct)))
(let ((anon146_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 308) (- 0 309)) (<= FullPerm (U_2_real (MapType1Select Mask@12 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@12 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 308) 307) anon22_correct))))))
(let ((anon20_correct  (=> (= Mask@12 (MapType1Store Mask@11 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@11 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 311) 308) anon146_Then_correct) (=> (= (ControlFlow 0 311) 310) anon146_Else_correct)))))
(let ((anon145_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 314) 311)) anon20_correct)))
(let ((anon145_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 312) (- 0 313)) (<= FullPerm (U_2_real (MapType1Select Mask@11 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@11 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 312) 311) anon20_correct))))))
(let ((anon144_Then_correct  (=> (= 0 0) (and (=> (= (ControlFlow 0 315) 312) anon145_Then_correct) (=> (= (ControlFlow 0 315) 314) anon145_Else_correct)))))
(let ((anon144_Else_correct  (=> (not (= 0 0)) (=> (and (= Mask@14 Mask@11) (= (ControlFlow 0 306) 301)) anon23_correct))))
(let ((anon16_correct  (=> (and (= Mask@10 (MapType1Store Mask@9 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@9 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value)) FullPerm)))) (= Mask@11 Mask@10)) (and (=> (= (ControlFlow 0 318) 315) anon144_Then_correct) (=> (= (ControlFlow 0 318) 306) anon144_Else_correct)))))
(let ((anon143_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 321) 318)) anon16_correct)))
(let ((anon143_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 319) (- 0 320)) (<= FullPerm (U_2_real (MapType1Select Mask@9 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) (- tid 1)) Ref__Integer_value))) (=> (= (ControlFlow 0 319) 318) anon16_correct))))))
(let ((anon142_Then_correct  (=> (> tid 0) (and (=> (= (ControlFlow 0 322) 319) anon143_Then_correct) (=> (= (ControlFlow 0 322) 321) anon143_Else_correct)))))
(let ((anon142_Else_correct  (=> (and (>= 0 tid) (= Mask@11 Mask@9)) (and (=> (= (ControlFlow 0 317) 315) anon144_Then_correct) (=> (= (ControlFlow 0 317) 306) anon144_Else_correct)))))
(let ((anon13_correct  (=> (= Mask@9 (MapType1Store Mask@8 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@8 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 323) 322) anon142_Then_correct) (=> (= (ControlFlow 0 323) 317) anon142_Else_correct)))))
(let ((anon141_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 326) 323)) anon13_correct)))
(let ((anon141_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 324) (- 0 325)) (<= FullPerm (U_2_real (MapType1Select Mask@8 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 324) 323) anon13_correct))))))
(let ((anon140_Then_correct  (=> (= 0 1) (and (=> (= (ControlFlow 0 327) 324) anon141_Then_correct) (=> (= (ControlFlow 0 327) 326) anon141_Else_correct)))))
(let ((anon140_Else_correct  (=> (and (not (= 0 1)) (= Mask@11 Mask@8)) (and (=> (= (ControlFlow 0 316) 315) anon144_Then_correct) (=> (= (ControlFlow 0 316) 306) anon144_Else_correct)))))
(let ((anon9_correct  (=> (and (= Mask@7 (MapType1Store Mask@6 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@6 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value)) FullPerm)))) (= Mask@8 Mask@7)) (and (=> (= (ControlFlow 0 329) 327) anon140_Then_correct) (=> (= (ControlFlow 0 329) 316) anon140_Else_correct)))))
(let ((anon139_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 332) 329)) anon9_correct)))
(let ((anon139_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 330) (- 0 331)) (<= FullPerm (U_2_real (MapType1Select Mask@6 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@6 (|Seq#Index| (MapType0Select Heap@0 diz demo__tmp) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 330) 329) anon9_correct))))))
(let ((anon7_correct  (=> (= Mask@6 (MapType1Store Mask@5 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value (real_2_U (- (U_2_real (MapType1Select Mask@5 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)) FullPerm)))) (and (=> (= (ControlFlow 0 333) 330) anon139_Then_correct) (=> (= (ControlFlow 0 333) 332) anon139_Else_correct)))))
(let ((anon138_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 336) 333)) anon7_correct)))
(let ((anon138_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 334) (- 0 335)) (<= FullPerm (U_2_real (MapType1Select Mask@5 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@5 (|Seq#Index| (MapType0Select Heap@0 diz demo__ar) tid) Ref__Integer_value))) (=> (= (ControlFlow 0 334) 333) anon7_correct))))))
(let ((anon137_Then_correct  (=> (= 0 2) (and (=> (= (ControlFlow 0 337) 334) anon138_Then_correct) (=> (= (ControlFlow 0 337) 336) anon138_Else_correct)))))
(let ((anon137_Else_correct  (=> (and (not (= 0 2)) (= Mask@8 Mask@5)) (and (=> (= (ControlFlow 0 328) 327) anon140_Then_correct) (=> (= (ControlFlow 0 328) 316) anon140_Else_correct)))))
(let ((anon135_Else_correct  (=> (and (and (and (U_2_bool (MapType0Select Heap@@13 __flatten_3 $allocated)) (U_2_bool (MapType0Select Heap@@13 __flatten_5 $allocated))) (and (U_2_bool (MapType0Select Heap@@13 __flatten_7 $allocated)) (U_2_bool (MapType0Select Heap@@13 __flatten_9 $allocated)))) (and (and (U_2_bool (MapType0Select Heap@@13 __flatten_11 $allocated)) (U_2_bool (MapType0Select Heap@@13 __flatten_12 $allocated))) (and (state Heap@@13 Mask@3) (state Heap@@13 Mask@3)))) (and (=> (= (ControlFlow 0 338) (- 0 352)) (HasDirectPerm Mask@3 diz demo__ar)) (=> (HasDirectPerm Mask@3 diz demo__ar) (and (=> (= (ControlFlow 0 338) (- 0 351)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 338) (- 0 350)) (< tid (|Seq#Length| (MapType0Select Heap@@13 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select Heap@@13 diz demo__ar))) (=> (= __flatten_3@0 (|Seq#Index| (MapType0Select Heap@@13 diz demo__ar) tid)) (=> (and (state Heap@@13 Mask@3) (state Heap@@13 Mask@3)) (and (=> (= (ControlFlow 0 338) (- 0 349)) (= FullPerm (U_2_real (MapType1Select Mask@3 __flatten_3@0 Ref__Integer_value)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 __flatten_3@0 Ref__Integer_value))) (=> (and (= Heap@0 (MapType0Store Heap@@13 __flatten_3@0 Ref__Integer_value (int_2_U 1))) (state Heap@0 Mask@3)) (and (=> (= (ControlFlow 0 338) (- 0 348)) (<= 0 tid)) (=> (<= 0 tid) (and (=> (= (ControlFlow 0 338) (- 0 347)) (< tid tcount)) (=> (< tid tcount) (and (=> (= (ControlFlow 0 338) (- 0 346)) (= tid lid)) (=> (= tid lid) (and (=> (= (ControlFlow 0 338) (- 0 345)) (= tcount gsize)) (=> (= tcount gsize) (and (=> (= (ControlFlow 0 338) (- 0 344)) (= gid 0)) (=> (= gid 0) (and (=> (= (ControlFlow 0 338) (- 0 343)) (> (U_2_real (MapType1Select Mask@3 diz demo__ar)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@3 diz demo__ar)) NoPerm) (=> (> wildcard@4 NoPerm) (=> (and (< wildcard@4 (U_2_real (MapType1Select Mask@3 diz demo__ar))) (= Mask@4 (MapType1Store Mask@3 diz demo__ar (real_2_U (- (U_2_real (MapType1Select Mask@3 diz demo__ar)) wildcard@4))))) (and (=> (= (ControlFlow 0 338) (- 0 342)) (= (|Seq#Length| (MapType0Select Heap@0 diz demo__ar)) gsize)) (=> (= (|Seq#Length| (MapType0Select Heap@0 diz demo__ar)) gsize) (and (=> (= (ControlFlow 0 338) (- 0 341)) (> (U_2_real (MapType1Select Mask@4 diz demo__tmp)) NoPerm)) (=> (> (U_2_real (MapType1Select Mask@4 diz demo__tmp)) NoPerm) (=> (> wildcard@5 NoPerm) (=> (and (< wildcard@5 (U_2_real (MapType1Select Mask@4 diz demo__tmp))) (= Mask@5 (MapType1Store Mask@4 diz demo__tmp (real_2_U (- (U_2_real (MapType1Select Mask@4 diz demo__tmp)) wildcard@5))))) (and (=> (= (ControlFlow 0 338) (- 0 340)) (= (|Seq#Length| (MapType0Select Heap@0 diz demo__tmp)) gsize)) (=> (= (|Seq#Length| (MapType0Select Heap@0 diz demo__tmp)) gsize) (and (=> (= (ControlFlow 0 338) (- 0 339)) (or (= 0 0) (= 0 2))) (=> (or (= 0 0) (= 0 2)) (and (=> (= (ControlFlow 0 338) 337) anon137_Then_correct) (=> (= (ControlFlow 0 338) 328) anon137_Else_correct))))))))))))))))))))))))))))))))))))))))
(let ((anon0_correct  (=> (and (state Heap@@13 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType0Select Heap@@13 diz $allocated)) (not (= diz null))) (and (state Heap@@13 ZeroMask) (>= current_thread_id 0))) (=> (and (and (and (and (state Heap@@13 ZeroMask) (<= 0 tid)) (and (state Heap@@13 ZeroMask) (< tid tcount))) (and (and (state Heap@@13 ZeroMask) (= tid lid)) (and (state Heap@@13 ZeroMask) (= tcount gsize)))) (and (and (and (state Heap@@13 ZeroMask) (= gid 0)) (and (state Heap@@13 ZeroMask) (> wildcard@0 NoPerm))) (and (and (not (= diz null)) (= Mask@0 (MapType1Store ZeroMask diz demo__ar (real_2_U (+ (U_2_real (MapType1Select ZeroMask diz demo__ar)) wildcard@0))))) (and (state Heap@@13 Mask@0) (state Heap@@13 Mask@0))))) (and (=> (= (ControlFlow 0 372) (- 0 380)) (HasDirectPerm Mask@0 diz demo__ar)) (=> (HasDirectPerm Mask@0 diz demo__ar) (=> (= (|Seq#Length| (MapType0Select Heap@@13 diz demo__ar)) gsize) (=> (and (state Heap@@13 Mask@0) (> wildcard@1 NoPerm)) (=> (and (and (not (= diz null)) (= Mask@1 (MapType1Store Mask@0 diz demo__tmp (real_2_U (+ (U_2_real (MapType1Select Mask@0 diz demo__tmp)) wildcard@1))))) (and (state Heap@@13 Mask@1) (state Heap@@13 Mask@1))) (and (=> (= (ControlFlow 0 372) (- 0 379)) (HasDirectPerm Mask@1 diz demo__tmp)) (=> (HasDirectPerm Mask@1 diz demo__tmp) (=> (and (and (= (|Seq#Length| (MapType0Select Heap@@13 diz demo__tmp)) gsize) (state Heap@@13 Mask@1)) (and (> gsize 1) (state Heap@@13 Mask@1))) (and (=> (= (ControlFlow 0 372) (- 0 378)) (HasDirectPerm Mask@1 diz demo__ar)) (=> (HasDirectPerm Mask@1 diz demo__ar) (and (=> (= (ControlFlow 0 372) (- 0 377)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 372) (- 0 376)) (< tid (|Seq#Length| (MapType0Select Heap@@13 diz demo__ar)))) (=> (< tid (|Seq#Length| (MapType0Select Heap@@13 diz demo__ar))) (=> (and (and (not (= (|Seq#Index| (MapType0Select Heap@@13 diz demo__ar) tid) null)) (= Mask@2 (MapType1Store Mask@1 (|Seq#Index| (MapType0Select Heap@@13 diz demo__ar) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@1 (|Seq#Index| (MapType0Select Heap@@13 diz demo__ar) tid) Ref__Integer_value)) FullPerm))))) (and (state Heap@@13 Mask@2) (state Heap@@13 Mask@2))) (and (=> (= (ControlFlow 0 372) (- 0 375)) (HasDirectPerm Mask@2 diz demo__tmp)) (=> (HasDirectPerm Mask@2 diz demo__tmp) (and (=> (= (ControlFlow 0 372) (- 0 374)) (>= tid 0)) (=> (>= tid 0) (and (=> (= (ControlFlow 0 372) (- 0 373)) (< tid (|Seq#Length| (MapType0Select Heap@@13 diz demo__tmp)))) (=> (< tid (|Seq#Length| (MapType0Select Heap@@13 diz demo__tmp))) (=> (and (and (not (= (|Seq#Index| (MapType0Select Heap@@13 diz demo__tmp) tid) null)) (= Mask@3 (MapType1Store Mask@2 (|Seq#Index| (MapType0Select Heap@@13 diz demo__tmp) tid) Ref__Integer_value (real_2_U (+ (U_2_real (MapType1Select Mask@2 (|Seq#Index| (MapType0Select Heap@@13 diz demo__tmp) tid) Ref__Integer_value)) FullPerm))))) (and (state Heap@@13 Mask@3) (state Heap@@13 Mask@3))) (and (=> (= (ControlFlow 0 372) 358) anon135_Then_correct) (=> (= (ControlFlow 0 372) 338) anon135_Else_correct)))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (> wildcard NoPerm) true) (= (ControlFlow 0 381) 372)) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
