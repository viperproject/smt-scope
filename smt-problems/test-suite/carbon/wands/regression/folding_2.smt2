(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun f_7 () T@U)
(declare-fun g () T@U)
(declare-fun h () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand_1#ft| (T@U Real T@U Real T@U Real T@U Real) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Real T@U Real T@U Real) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType1Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun P (T@U) T@U)
(declare-fun PredicateType_PType () T@T)
(declare-fun Q (T@U) T@U)
(declare-fun PredicateType_QType () T@T)
(declare-fun |P#trigger| (T@U T@U) Bool)
(declare-fun |P#everUsed| (T@U) Bool)
(declare-fun |Q#trigger| (T@U T@U) Bool)
(declare-fun |Q#everUsed| (T@U) Bool)
(declare-fun |wand#ft| (T@U Real T@U Real T@U Real) T@U)
(declare-fun |wand#sm| (T@U Real T@U Real T@U Real) T@U)
(declare-fun WandType_wandType () T@T)
(declare-fun |P#sm| (T@U) T@U)
(declare-fun |Q#sm| (T@U) T@U)
(declare-fun wand_1 (T@U Real T@U Real T@U Real T@U Real) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun wand (T@U Real T@U Real T@U Real) T@U)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type f_7) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type g) (FieldType NormalFieldType RefType))) (= (type h) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated f_7 g h)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@14 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType0Type arg0@@14 arg1@@2)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) (arg1@@3 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15 arg1@@3)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15 arg1@@3))
))) (forall ((arg0@@16 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@16 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType0TypeInv1|
 :pattern ( (MapType0Type arg0@@16 arg1@@4))
))) (forall ((arg0@@17 T@U) (arg1@@5 T@U) (arg2 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@17))))
(= (type (MapType0Select arg0@@17 arg1@@5 arg2)) aVar1))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@17 arg1@@5 arg2))
))) (forall ((arg0@@18 T@U) (arg1@@6 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar1@@0 (type arg3)))
(let ((aVar0 (type arg1@@6)))
(= (type (MapType0Store arg0@@18 arg1@@6 arg2@@0 arg3)) (MapType0Type aVar0 aVar1@@0))))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@18 arg1@@6 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m))))
 (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (forall ((arg0@@19 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@19))))
(= (type (WandMaskField arg0@@19)) (FieldType A (MapType0Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@19))
))) (= (Ctor WandType_wand_1Type) 10)) (= (Ctor FrameTypeType) 11)) (forall ((arg0@@20 T@U) (arg1@@7 Real) (arg2@@1 T@U) (arg3@@0 Real) (arg4 T@U) (arg5 Real) (arg6 T@U) (arg7 Real) ) (! (= (type (|wand_1#ft| arg0@@20 arg1@@7 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@20 arg1@@7 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7))
))) (forall ((arg0@@21 T@U) (arg1@@8 Real) (arg2@@2 T@U) (arg3@@1 Real) (arg4@@0 T@U) (arg5@@0 Real) (arg6@@0 T@U) (arg7@@0 Real) ) (! (= (type (|wand_1#sm| arg0@@21 arg1@@8 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0)) (FieldType WandType_wand_1Type (MapType0Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@21 arg1@@8 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0))
))))
(assert (forall ((arg1@@9 T@U) (arg2@@3 Real) (arg3@@2 T@U) (arg4@@1 Real) (arg5@@1 T@U) (arg6@@1 Real) (arg7@@1 T@U) (arg8 Real) ) (!  (=> (and (and (and (= (type arg1@@9) RefType) (= (type arg3@@2) RefType)) (= (type arg5@@1) RefType)) (= (type arg7@@1) RefType)) (= (|wand_1#sm| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8) (WandMaskField (|wand_1#ft| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8))))
 :qid |stdinbpl.231:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@9 arg2@@3 arg3@@2 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8)))
)))
(assert  (and (and (and (and (and (forall ((arg0@@22 T@T) ) (! (= (Ctor (MapType1Type arg0@@22)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@23 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@23)) arg0@@23)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@23))
))) (forall ((arg0@@24 T@U) (arg1@@10 T@U) (arg2@@4 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2@@4))))
(= (type (MapType1Select arg0@@24 arg1@@10 arg2@@4)) B))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@24 arg1@@10 arg2@@4))
))) (forall ((arg0@@25 T@U) (arg1@@11 T@U) (arg2@@5 T@U) (arg3@@3 T@U) ) (! (let ((aVar0@@0 (type arg1@@11)))
(= (type (MapType1Store arg0@@25 arg1@@11 arg2@@5 arg3@@3)) (MapType1Type aVar0@@0)))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@25 arg1@@11 arg2@@5 arg3@@3))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1@@3))))
 (=> (= (type val@@3) B@@0) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType1Type RefType)) (= (type Heap1) (MapType1Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType1Type RefType)) (= (type Mask) (MapType0Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType1Type RefType)) (= (type Heap1@@0) (MapType1Type RefType))) (= (type Heap2) (MapType1Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@26 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@26))))
(= (type (PredicateMaskField arg0@@26)) (FieldType A@@0 (MapType0Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@26))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType1Type RefType)) (= (type ExhaleHeap) (MapType1Type RefType))) (= (type Mask@@0) (MapType0Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType1Select Heap@@0 null (PredicateMaskField pm_f)) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType1Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType1Type RefType)) (= (type ExhaleHeap@@0) (MapType1Type RefType))) (= (type Mask@@1) (MapType0Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType1Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType1Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_PType) 13) (forall ((arg0@@27 T@U) ) (! (= (type (P arg0@@27)) (FieldType PredicateType_PType FrameTypeType))
 :qid |funType:P|
 :pattern ( (P arg0@@27))
))))
(assert (forall ((x@@8 T@U) ) (!  (=> (= (type x@@8) RefType) (IsPredicateField (P x@@8)))
 :qid |stdinbpl.269:15|
 :skolemid |37|
 :pattern ( (P x@@8))
)))
(assert  (and (= (Ctor PredicateType_QType) 14) (forall ((arg0@@28 T@U) ) (! (= (type (Q arg0@@28)) (FieldType PredicateType_QType FrameTypeType))
 :qid |funType:Q|
 :pattern ( (Q arg0@@28))
))))
(assert (forall ((x@@9 T@U) ) (!  (=> (= (type x@@9) RefType) (IsPredicateField (Q x@@9)))
 :qid |stdinbpl.324:15|
 :skolemid |43|
 :pattern ( (Q x@@9))
)))
(assert (forall ((Heap@@2 T@U) (x@@10 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType1Type RefType)) (= (type x@@10) RefType)) (|P#everUsed| (P x@@10)))
 :qid |stdinbpl.288:15|
 :skolemid |41|
 :pattern ( (|P#trigger| Heap@@2 (P x@@10)))
)))
(assert (forall ((Heap@@3 T@U) (x@@11 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType1Type RefType)) (= (type x@@11) RefType)) (|Q#everUsed| (Q x@@11)))
 :qid |stdinbpl.343:15|
 :skolemid |47|
 :pattern ( (|Q#trigger| Heap@@3 (Q x@@11)))
)))
(assert  (and (and (= (Ctor WandType_wandType) 15) (forall ((arg0@@29 T@U) (arg1@@12 Real) (arg2@@6 T@U) (arg3@@4 Real) (arg4@@2 T@U) (arg5@@2 Real) ) (! (= (type (|wand#ft| arg0@@29 arg1@@12 arg2@@6 arg3@@4 arg4@@2 arg5@@2)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@29 arg1@@12 arg2@@6 arg3@@4 arg4@@2 arg5@@2))
))) (forall ((arg0@@30 T@U) (arg1@@13 Real) (arg2@@7 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@3 Real) ) (! (= (type (|wand#sm| arg0@@30 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3)) (FieldType WandType_wandType (MapType0Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@30 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3))
))))
(assert (forall ((arg1@@14 T@U) (arg2@@8 Real) (arg3@@6 T@U) (arg4@@4 Real) (arg5@@4 T@U) (arg6@@2 Real) ) (!  (=> (and (and (= (type arg1@@14) RefType) (= (type arg3@@6) RefType)) (= (type arg5@@4) RefType)) (= (|wand#sm| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@2) (WandMaskField (|wand#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@2))))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@2)))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@4) (MapType1Type RefType)) (= (type ExhaleHeap@@1) (MapType1Type RefType))) (= (type Mask@@2) (MapType0Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType1Select Heap@@4 o_1 $allocated))) (U_2_bool (MapType1Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@1 Mask@@2) (MapType1Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((x@@12 T@U) (x2 T@U) ) (!  (=> (and (and (= (type x@@12) RefType) (= (type x2) RefType)) (= (P x@@12) (P x2))) (= x@@12 x2))
 :qid |stdinbpl.279:15|
 :skolemid |39|
 :pattern ( (P x@@12) (P x2))
)))
(assert (forall ((arg0@@31 T@U) ) (! (= (type (|P#sm| arg0@@31)) (FieldType PredicateType_PType (MapType0Type RefType boolType)))
 :qid |funType:P#sm|
 :pattern ( (|P#sm| arg0@@31))
)))
(assert (forall ((x@@13 T@U) (x2@@0 T@U) ) (!  (=> (and (and (= (type x@@13) RefType) (= (type x2@@0) RefType)) (= (|P#sm| x@@13) (|P#sm| x2@@0))) (= x@@13 x2@@0))
 :qid |stdinbpl.283:15|
 :skolemid |40|
 :pattern ( (|P#sm| x@@13) (|P#sm| x2@@0))
)))
(assert (forall ((x@@14 T@U) (x2@@1 T@U) ) (!  (=> (and (and (= (type x@@14) RefType) (= (type x2@@1) RefType)) (= (Q x@@14) (Q x2@@1))) (= x@@14 x2@@1))
 :qid |stdinbpl.334:15|
 :skolemid |45|
 :pattern ( (Q x@@14) (Q x2@@1))
)))
(assert (forall ((arg0@@32 T@U) ) (! (= (type (|Q#sm| arg0@@32)) (FieldType PredicateType_QType (MapType0Type RefType boolType)))
 :qid |funType:Q#sm|
 :pattern ( (|Q#sm| arg0@@32))
)))
(assert (forall ((x@@15 T@U) (x2@@2 T@U) ) (!  (=> (and (and (= (type x@@15) RefType) (= (type x2@@2) RefType)) (= (|Q#sm| x@@15) (|Q#sm| x2@@2))) (= x@@15 x2@@2))
 :qid |stdinbpl.338:15|
 :skolemid |46|
 :pattern ( (|Q#sm| x@@15) (|Q#sm| x2@@2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@15 Real) (arg2@@9 T@U) (arg3@@7 Real) (arg4@@5 T@U) (arg5@@5 Real) (arg6@@3 T@U) (arg7@@2 Real) ) (! (= (type (wand_1 arg0@@33 arg1@@15 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@3 arg7@@2)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@33 arg1@@15 arg2@@9 arg3@@7 arg4@@5 arg5@@5 arg6@@3 arg7@@2))
)))
(assert (forall ((arg1@@16 T@U) (arg2@@10 Real) (arg3@@8 T@U) (arg4@@6 Real) (arg5@@6 T@U) (arg6@@4 Real) (arg7@@3 T@U) (arg8@@0 Real) ) (!  (=> (and (and (and (= (type arg1@@16) RefType) (= (type arg3@@8) RefType)) (= (type arg5@@6) RefType)) (= (type arg7@@3) RefType)) (IsWandField (wand_1 arg1@@16 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@4 arg7@@3 arg8@@0)))
 :qid |stdinbpl.215:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@16 arg2@@10 arg3@@8 arg4@@6 arg5@@6 arg6@@4 arg7@@3 arg8@@0))
)))
(assert (forall ((arg1@@17 T@U) (arg2@@11 Real) (arg3@@9 T@U) (arg4@@7 Real) (arg5@@7 T@U) (arg6@@5 Real) (arg7@@4 T@U) (arg8@@1 Real) ) (!  (=> (and (and (and (= (type arg1@@17) RefType) (= (type arg3@@9) RefType)) (= (type arg5@@7) RefType)) (= (type arg7@@4) RefType)) (IsWandField (|wand_1#ft| arg1@@17 arg2@@11 arg3@@9 arg4@@7 arg5@@7 arg6@@5 arg7@@4 arg8@@1)))
 :qid |stdinbpl.219:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@17 arg2@@11 arg3@@9 arg4@@7 arg5@@7 arg6@@5 arg7@@4 arg8@@1))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@5) (MapType1Type RefType)) (= (type ExhaleHeap@@2) (MapType1Type RefType))) (= (type Mask@@3) (MapType0Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType1Select Heap@@5 o_1@@0 f_2) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@2 Mask@@3) (MapType1Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((arg1@@18 T@U) (arg2@@12 Real) (arg3@@10 T@U) (arg4@@8 Real) (arg5@@8 T@U) (arg6@@6 Real) (arg7@@5 T@U) (arg8@@2 Real) ) (!  (=> (and (and (and (= (type arg1@@18) RefType) (= (type arg3@@10) RefType)) (= (type arg5@@8) RefType)) (= (type arg7@@5) RefType)) (not (IsPredicateField (wand_1 arg1@@18 arg2@@12 arg3@@10 arg4@@8 arg5@@8 arg6@@6 arg7@@5 arg8@@2))))
 :qid |stdinbpl.223:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@18 arg2@@12 arg3@@10 arg4@@8 arg5@@8 arg6@@6 arg7@@5 arg8@@2))
)))
(assert (forall ((arg1@@19 T@U) (arg2@@13 Real) (arg3@@11 T@U) (arg4@@9 Real) (arg5@@9 T@U) (arg6@@7 Real) (arg7@@6 T@U) (arg8@@3 Real) ) (!  (=> (and (and (and (= (type arg1@@19) RefType) (= (type arg3@@11) RefType)) (= (type arg5@@9) RefType)) (= (type arg7@@6) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@19 arg2@@13 arg3@@11 arg4@@9 arg5@@9 arg6@@7 arg7@@6 arg8@@3))))
 :qid |stdinbpl.227:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@19 arg2@@13 arg3@@11 arg4@@9 arg5@@9 arg6@@7 arg7@@6 arg8@@3))
)))
(assert  (and (= (type dummyHeap) (MapType1Type RefType)) (= (type ZeroMask) (MapType0Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField f_7)))
(assert  (not (IsWandField f_7)))
(assert  (not (IsPredicateField g)))
(assert  (not (IsWandField g)))
(assert  (not (IsPredicateField h)))
(assert  (not (IsWandField h)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@6) (MapType1Type RefType)) (= (type ExhaleHeap@@3) (MapType1Type RefType))) (= (type Mask@@4) (MapType0Type RefType realType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@6 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType0Type RefType realType)) (= (type SummandMask1) (MapType0Type RefType realType))) (= (type SummandMask2) (MapType0Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType0Select ResultMask o_2 f_4)) (+ (U_2_real (MapType0Select SummandMask1 o_2 f_4)) (U_2_real (MapType0Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType0Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg0@@34 T@U) (arg1@@20 Real) (arg2@@14 T@U) (arg3@@12 Real) (arg4@@10 T@U) (arg5@@10 Real) ) (! (= (type (wand arg0@@34 arg1@@20 arg2@@14 arg3@@12 arg4@@10 arg5@@10)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@34 arg1@@20 arg2@@14 arg3@@12 arg4@@10 arg5@@10))
)))
(assert (forall ((arg1@@21 T@U) (arg2@@15 Real) (arg3@@13 T@U) (arg4@@11 Real) (arg5@@11 T@U) (arg6@@8 Real) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Real) (arg5_2 T@U) (arg6_2 Real) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@21) RefType) (= (type arg3@@13) RefType)) (= (type arg5@@11) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (wand arg1@@21 arg2@@15 arg3@@13 arg4@@11 arg5@@11 arg6@@8) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2))) (and (= arg1@@21 arg1_2) (and (= arg2@@15 arg2_2) (and (= arg3@@13 arg3_2) (and (= arg4@@11 arg4_2) (and (= arg5@@11 arg5_2) (= arg6@@8 arg6_2)))))))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand arg1@@21 arg2@@15 arg3@@13 arg4@@11 arg5@@11 arg6@@8) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2))
)))
(assert  (and (forall ((arg0@@35 Real) (arg1@@22 T@U) ) (! (= (type (ConditionalFrame arg0@@35 arg1@@22)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@35 arg1@@22))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType0Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType0Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((arg1@@23 T@U) (arg2@@16 Real) (arg3@@14 T@U) (arg4@@12 Real) (arg5@@12 T@U) (arg6@@9 Real) ) (!  (=> (and (and (= (type arg1@@23) RefType) (= (type arg3@@14) RefType)) (= (type arg5@@12) RefType)) (= (getPredWandId (wand arg1@@23 arg2@@16 arg3@@14 arg4@@12 arg5@@12 arg6@@9)) 2))
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand arg1@@23 arg2@@16 arg3@@14 arg4@@12 arg5@@12 arg6@@9))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType0Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType0Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@24 T@U) (arg2@@17 Real) (arg3@@15 T@U) (arg4@@13 Real) (arg5@@13 T@U) (arg6@@10 Real) (arg7@@7 T@U) (arg8@@4 Real) (arg1_2@@0 T@U) (arg2_2@@0 Real) (arg3_2@@0 T@U) (arg4_2@@0 Real) (arg5_2@@0 T@U) (arg6_2@@0 Real) (arg7_2 T@U) (arg8_2 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@24) RefType) (= (type arg3@@15) RefType)) (= (type arg5@@13) RefType)) (= (type arg7@@7) RefType)) (= (type arg1_2@@0) RefType)) (= (type arg3_2@@0) RefType)) (= (type arg5_2@@0) RefType)) (= (type arg7_2) RefType)) (= (wand_1 arg1@@24 arg2@@17 arg3@@15 arg4@@13 arg5@@13 arg6@@10 arg7@@7 arg8@@4) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0 arg5_2@@0 arg6_2@@0 arg7_2 arg8_2))) (and (= arg1@@24 arg1_2@@0) (and (= arg2@@17 arg2_2@@0) (and (= arg3@@15 arg3_2@@0) (and (= arg4@@13 arg4_2@@0) (and (= arg5@@13 arg5_2@@0) (and (= arg6@@10 arg6_2@@0) (and (= arg7@@7 arg7_2) (= arg8@@4 arg8_2)))))))))
 :qid |stdinbpl.239:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@24 arg2@@17 arg3@@15 arg4@@13 arg5@@13 arg6@@10 arg7@@7 arg8@@4) (wand_1 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0 arg5_2@@0 arg6_2@@0 arg7_2 arg8_2))
)))
(assert (forall ((arg1@@25 T@U) (arg2@@18 Real) (arg3@@16 T@U) (arg4@@14 Real) (arg5@@14 T@U) (arg6@@11 Real) ) (!  (=> (and (and (= (type arg1@@25) RefType) (= (type arg3@@16) RefType)) (= (type arg5@@14) RefType)) (IsWandField (wand arg1@@25 arg2@@18 arg3@@16 arg4@@14 arg5@@14 arg6@@11)))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand arg1@@25 arg2@@18 arg3@@16 arg4@@14 arg5@@14 arg6@@11))
)))
(assert (forall ((arg1@@26 T@U) (arg2@@19 Real) (arg3@@17 T@U) (arg4@@15 Real) (arg5@@15 T@U) (arg6@@12 Real) ) (!  (=> (and (and (= (type arg1@@26) RefType) (= (type arg3@@17) RefType)) (= (type arg5@@15) RefType)) (IsWandField (|wand#ft| arg1@@26 arg2@@19 arg3@@17 arg4@@15 arg5@@15 arg6@@12)))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@26 arg2@@19 arg3@@17 arg4@@15 arg5@@15 arg6@@12))
)))
(assert (forall ((arg1@@27 T@U) (arg2@@20 Real) (arg3@@18 T@U) (arg4@@16 Real) (arg5@@16 T@U) (arg6@@13 Real) ) (!  (=> (and (and (= (type arg1@@27) RefType) (= (type arg3@@18) RefType)) (= (type arg5@@16) RefType)) (not (IsPredicateField (wand arg1@@27 arg2@@20 arg3@@18 arg4@@16 arg5@@16 arg6@@13))))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand arg1@@27 arg2@@20 arg3@@18 arg4@@16 arg5@@16 arg6@@13))
)))
(assert (forall ((arg1@@28 T@U) (arg2@@21 Real) (arg3@@19 T@U) (arg4@@17 Real) (arg5@@17 T@U) (arg6@@14 Real) ) (!  (=> (and (and (= (type arg1@@28) RefType) (= (type arg3@@19) RefType)) (= (type arg5@@17) RefType)) (not (IsPredicateField (|wand#ft| arg1@@28 arg2@@21 arg3@@19 arg4@@17 arg5@@17 arg6@@14))))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@28 arg2@@21 arg3@@19 arg4@@17 arg5@@17 arg6@@14))
)))
(assert (forall ((arg1@@29 T@U) (arg2@@22 Real) (arg3@@20 T@U) (arg4@@18 Real) (arg5@@18 T@U) (arg6@@15 Real) (arg7@@8 T@U) (arg8@@5 Real) ) (!  (=> (and (and (and (= (type arg1@@29) RefType) (= (type arg3@@20) RefType)) (= (type arg5@@18) RefType)) (= (type arg7@@8) RefType)) (= (getPredWandId (wand_1 arg1@@29 arg2@@22 arg3@@20 arg4@@18 arg5@@18 arg6@@15 arg7@@8 arg8@@5)) 3))
 :qid |stdinbpl.235:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@29 arg2@@22 arg3@@20 arg4@@18 arg5@@18 arg6@@15 arg7@@8 arg8@@5))
)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@7) (MapType1Type RefType)) (= (type ExhaleHeap@@4) (MapType1Type RefType))) (= (type Mask@@6) (MapType0Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType0Select (MapType1Select Heap@@7 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType1Select Heap@@7 o2 f_2@@0) (MapType1Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType1Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@8) (MapType1Type RefType)) (= (type ExhaleHeap@@5) (MapType1Type RefType))) (= (type Mask@@7) (MapType0Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType0Select (MapType1Select Heap@@8 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType1Select Heap@@8 o2@@0 f_2@@1) (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType1Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((x@@16 T@U) ) (!  (=> (= (type x@@16) RefType) (= (getPredWandId (P x@@16)) 0))
 :qid |stdinbpl.273:15|
 :skolemid |38|
 :pattern ( (P x@@16))
)))
(assert (forall ((x@@17 T@U) ) (!  (=> (= (type x@@17) RefType) (= (getPredWandId (Q x@@17)) 1))
 :qid |stdinbpl.328:15|
 :skolemid |44|
 :pattern ( (Q x@@17))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType0Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType0Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType0Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType0Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@9 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@9) (MapType1Type RefType))) (U_2_bool (MapType1Select Heap@@9 o $allocated))) (U_2_bool (MapType1Select Heap@@9 (MapType1Select Heap@@9 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType1Select Heap@@9 o f))
)))
(assert (forall ((x@@18 T@U) ) (!  (=> (= (type x@@18) RefType) (= (PredicateMaskField (P x@@18)) (|P#sm| x@@18)))
 :qid |stdinbpl.265:15|
 :skolemid |36|
 :pattern ( (PredicateMaskField (P x@@18)))
)))
(assert (forall ((x@@19 T@U) ) (!  (=> (= (type x@@19) RefType) (= (PredicateMaskField (Q x@@19)) (|Q#sm| x@@19)))
 :qid |stdinbpl.320:15|
 :skolemid |42|
 :pattern ( (PredicateMaskField (Q x@@19)))
)))
(assert (forall ((Heap@@10 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@10) (MapType1Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@10 (MapType1Store Heap@@10 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType1Store Heap@@10 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType0Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType0Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType0Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun b_19@28 () Bool)
(declare-fun b_26@18 () Bool)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_12Mask@11 () T@U)
(declare-fun y@@1 () T@U)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_29@0 () Bool)
(declare-fun b_29@1 () Bool)
(declare-fun Result_13Heap () T@U)
(declare-fun Result_13Mask () T@U)
(declare-fun b_29@2 () Bool)
(declare-fun Ops_5Mask () T@U)
(declare-fun b_29@3 () Bool)
(declare-fun Ops_5Heap@15 () T@U)
(declare-fun Used_12Heap@0 () T@U)
(declare-fun b_29@4 () Bool)
(declare-fun b_19@29 () Bool)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun x@@20 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun takeTransfer@11 () Real)
(declare-fun neededTransfer@24 () Real)
(declare-fun b_26@15 () Bool)
(declare-fun Mask@14 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Used_12Mask@9 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun Used_12Mask@10 () T@U)
(declare-fun b_26@16 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_26@17 () Bool)
(declare-fun Mask@15 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Used_12Mask@7 () T@U)
(declare-fun b_26@12 () Bool)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_12Mask@8 () T@U)
(declare-fun b_26@13 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_26@14 () Bool)
(declare-fun Ops_5Mask@18 () T@U)
(declare-fun Ops_5Mask@17 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun b_19@27 () Bool)
(declare-fun neededTransfer@22 () Real)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_28@0 () Bool)
(declare-fun b_28@1 () Bool)
(declare-fun Result_12Heap () T@U)
(declare-fun Result_12Mask () T@U)
(declare-fun b_28@2 () Bool)
(declare-fun b_28@3 () Bool)
(declare-fun b_28@4 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun neededTransfer@20 () Real)
(declare-fun Heap@10 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun b_26@9 () Bool)
(declare-fun Used_12Mask@5 () T@U)
(declare-fun neededTransfer@21 () Real)
(declare-fun Used_12Mask@6 () T@U)
(declare-fun b_26@10 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_26@11 () Bool)
(declare-fun Mask@13 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Used_12Mask@3 () T@U)
(declare-fun b_26@6 () Bool)
(declare-fun Ops_5Mask@15 () T@U)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_12Mask@4 () T@U)
(declare-fun b_26@7 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_26@8 () Bool)
(declare-fun Ops_5Mask@16 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_19@26 () Bool)
(declare-fun neededTransfer@18 () Real)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_27@0 () Bool)
(declare-fun b_27@1 () Bool)
(declare-fun Result_11Heap () T@U)
(declare-fun Result_11Mask () T@U)
(declare-fun b_27@2 () Bool)
(declare-fun b_27@3 () Bool)
(declare-fun b_27@4 () Bool)
(declare-fun takeTransfer@7 () Real)
(declare-fun neededTransfer@16 () Real)
(declare-fun Mask@10 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun b_26@3 () Bool)
(declare-fun Used_12Mask@1 () T@U)
(declare-fun neededTransfer@17 () Real)
(declare-fun Used_12Mask@2 () T@U)
(declare-fun b_26@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_26@5 () Bool)
(declare-fun Mask@11 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_5Mask@13 () T@U)
(declare-fun b_26@0 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_12Mask@0 () T@U)
(declare-fun b_26@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_26@2 () Bool)
(declare-fun Ops_5Mask@14 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun b_26 () Bool)
(declare-fun Ops_5Heap@14 () T@U)
(declare-fun Ops_5Heap@13 () T@U)
(declare-fun Ops_5Mask@12 () T@U)
(declare-fun b_19@25 () Bool)
(declare-fun b_19@24 () Bool)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Ops_5Heap@10 () T@U)
(declare-fun Ops_5Heap@11 () T@U)
(declare-fun Ops_5Heap@12 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun b_19@19 () Bool)
(declare-fun b_24@6 () Bool)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_11Mask@3 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_25@0 () Bool)
(declare-fun b_25@1 () Bool)
(declare-fun Result_10Heap () T@U)
(declare-fun Result_10Mask () T@U)
(declare-fun b_25@2 () Bool)
(declare-fun Ops_5Mask@11 () T@U)
(declare-fun b_25@3 () Bool)
(declare-fun Used_11Heap@0 () T@U)
(declare-fun b_25@4 () Bool)
(declare-fun b_19@20 () Bool)
(declare-fun b_19@21 () Bool)
(declare-fun b_19@22 () Bool)
(declare-fun b_19@23 () Bool)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@12 () Real)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun b_24@3 () Bool)
(declare-fun Used_11Mask@1 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun Used_11Mask@2 () T@U)
(declare-fun b_24@4 () Bool)
(declare-fun b_24@5 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_5Mask@9 () T@U)
(declare-fun b_24@0 () Bool)
(declare-fun neededTransfer@10 () Real)
(declare-fun neededTransfer@11 () Real)
(declare-fun Used_11Mask@0 () T@U)
(declare-fun b_24@1 () Bool)
(declare-fun b_24@2 () Bool)
(declare-fun Ops_5Mask@10 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_24 () Bool)
(declare-fun Ops_5Heap@9 () T@U)
(declare-fun Ops_5Heap@8 () T@U)
(declare-fun Ops_5Mask@8 () T@U)
(declare-fun b_19@18 () Bool)
(declare-fun b_19@17 () Bool)
(declare-fun Heap@4 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Ops_5Heap@5 () T@U)
(declare-fun Ops_5Heap@6 () T@U)
(declare-fun Ops_5Heap@7 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun b_19@12 () Bool)
(declare-fun b_22@6 () Bool)
(declare-fun neededTransfer@9 () Real)
(declare-fun Used_10Mask@3 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_23@0 () Bool)
(declare-fun b_23@1 () Bool)
(declare-fun Result_9Heap () T@U)
(declare-fun Result_9Mask () T@U)
(declare-fun b_23@2 () Bool)
(declare-fun Ops_5Mask@7 () T@U)
(declare-fun b_23@3 () Bool)
(declare-fun Used_10Heap@0 () T@U)
(declare-fun b_23@4 () Bool)
(declare-fun b_19@13 () Bool)
(declare-fun b_19@14 () Bool)
(declare-fun b_19@15 () Bool)
(declare-fun b_19@16 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun neededTransfer@7 () Real)
(declare-fun Mask@4 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun b_22@3 () Bool)
(declare-fun Used_10Mask@1 () T@U)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_10Mask@2 () T@U)
(declare-fun b_22@4 () Bool)
(declare-fun b_22@5 () Bool)
(declare-fun Mask@5 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_5Mask@5 () T@U)
(declare-fun b_22@0 () Bool)
(declare-fun neededTransfer@5 () Real)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_10Mask@0 () T@U)
(declare-fun b_22@1 () Bool)
(declare-fun b_22@2 () Bool)
(declare-fun Ops_5Mask@6 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_22 () Bool)
(declare-fun Ops_5Heap@4 () T@U)
(declare-fun Ops_5Heap@3 () T@U)
(declare-fun Ops_5Mask@4 () T@U)
(declare-fun b_19@11 () Bool)
(declare-fun b_19@10 () Bool)
(declare-fun Mask@3 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Ops_5Heap@0 () T@U)
(declare-fun Ops_5Heap@1 () T@U)
(declare-fun Ops_5Heap@2 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun b_19@5 () Bool)
(declare-fun b_20@6 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_9Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_21@0 () Bool)
(declare-fun b_21@1 () Bool)
(declare-fun Result_8Heap () T@U)
(declare-fun Result_8Mask () T@U)
(declare-fun b_21@2 () Bool)
(declare-fun Ops_5Mask@3 () T@U)
(declare-fun b_21@3 () Bool)
(declare-fun Used_9Heap@0 () T@U)
(declare-fun b_21@4 () Bool)
(declare-fun b_19@6 () Bool)
(declare-fun b_19@7 () Bool)
(declare-fun b_19@8 () Bool)
(declare-fun b_19@9 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun b_20@3 () Bool)
(declare-fun Used_9Mask@1 () T@U)
(declare-fun Heap@@11 () T@U)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_9Mask@2 () T@U)
(declare-fun b_20@4 () Bool)
(declare-fun b_20@5 () Bool)
(declare-fun Mask@2 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun Ops_5Mask@1 () T@U)
(declare-fun b_20@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun neededTransfer@1 () Real)
(declare-fun Used_9Mask@0 () T@U)
(declare-fun b_20@1 () Bool)
(declare-fun b_20@2 () Bool)
(declare-fun Ops_5Mask@2 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_20 () Bool)
(declare-fun b_19@4 () Bool)
(declare-fun b_19@3 () Bool)
(declare-fun b_19@0 () Bool)
(declare-fun perm@2 () Real)
(declare-fun b_19@1 () Bool)
(declare-fun Ops_5Mask@0 () T@U)
(declare-fun b_19@2 () Bool)
(declare-fun perm@0 () Real)
(declare-fun Mask@0 () T@U)
(declare-fun perm@1 () Real)
(declare-fun b_19 () Bool)
(declare-fun b_18@0 () Bool)
(declare-fun b_18 () Bool)
(declare-fun Used_8Heap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Used_12Mask@11) (MapType0Type RefType realType)) (= (type y@@1) RefType)) (= (type Result_13Heap) (MapType1Type RefType))) (= (type Result_13Mask) (MapType0Type RefType realType))) (= (type Ops_5Mask) (MapType0Type RefType realType))) (= (type Ops_5Heap@15) (MapType1Type RefType))) (= (type Used_12Heap@0) (MapType1Type RefType))) (= (type Mask@17) (MapType0Type RefType realType))) (= (type Mask@16) (MapType0Type RefType realType))) (= (type x@@20) RefType)) (= (type Heap@14) (MapType1Type RefType))) (= (type Mask@14) (MapType0Type RefType realType))) (= (type Heap@12) (MapType1Type RefType))) (= (type Used_12Mask@9) (MapType0Type RefType realType))) (= (type Used_12Mask@10) (MapType0Type RefType realType))) (= (type TempMask@5) (MapType0Type RefType realType))) (= (type Mask@15) (MapType0Type RefType realType))) (= (type newPMask@2) (MapType0Type RefType boolType))) (= (type Heap@13) (MapType1Type RefType))) (= (type Used_12Mask@7) (MapType0Type RefType realType))) (= (type Used_12Mask@8) (MapType0Type RefType realType))) (= (type TempMask@4) (MapType0Type RefType realType))) (= (type Ops_5Mask@18) (MapType0Type RefType realType))) (= (type Ops_5Mask@17) (MapType0Type RefType realType))) (= (type Result_12Heap) (MapType1Type RefType))) (= (type Result_12Mask) (MapType0Type RefType realType))) (= (type Heap@10) (MapType1Type RefType))) (= (type Mask@12) (MapType0Type RefType realType))) (= (type Used_12Mask@5) (MapType0Type RefType realType))) (= (type Used_12Mask@6) (MapType0Type RefType realType))) (= (type TempMask@3) (MapType0Type RefType realType))) (= (type Mask@13) (MapType0Type RefType realType))) (= (type newPMask@1) (MapType0Type RefType boolType))) (= (type Heap@11) (MapType1Type RefType))) (= (type Used_12Mask@3) (MapType0Type RefType realType))) (= (type Ops_5Mask@15) (MapType0Type RefType realType))) (= (type Used_12Mask@4) (MapType0Type RefType realType))) (= (type TempMask@2) (MapType0Type RefType realType))) (= (type Ops_5Mask@16) (MapType0Type RefType realType))) (= (type Result_11Heap) (MapType1Type RefType))) (= (type Result_11Mask) (MapType0Type RefType realType))) (= (type Mask@10) (MapType0Type RefType realType))) (= (type Heap@8) (MapType1Type RefType))) (= (type Used_12Mask@1) (MapType0Type RefType realType))) (= (type Used_12Mask@2) (MapType0Type RefType realType))) (= (type TempMask@1) (MapType0Type RefType realType))) (= (type Mask@11) (MapType0Type RefType realType))) (= (type newPMask@0) (MapType0Type RefType boolType))) (= (type Heap@9) (MapType1Type RefType))) (= (type Ops_5Mask@13) (MapType0Type RefType realType))) (= (type Used_12Mask@0) (MapType0Type RefType realType))) (= (type TempMask@0) (MapType0Type RefType realType))) (= (type Ops_5Mask@14) (MapType0Type RefType realType))) (= (type Ops_5Heap@10) (MapType1Type RefType))) (= (type Heap@5) (MapType1Type RefType))) (= (type Mask@7) (MapType0Type RefType realType))) (= (type Ops_5Mask@9) (MapType0Type RefType realType))) (= (type Ops_5Heap@14) (MapType1Type RefType))) (= (type Ops_5Heap@13) (MapType1Type RefType))) (= (type Ops_5Mask@12) (MapType0Type RefType realType))) (= (type Heap@7) (MapType1Type RefType))) (= (type Mask@9) (MapType0Type RefType realType))) (= (type Ops_5Heap@11) (MapType1Type RefType))) (= (type Ops_5Heap@12) (MapType1Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Used_11Mask@3) (MapType0Type RefType realType))) (= (type Result_10Heap) (MapType1Type RefType))) (= (type Result_10Mask) (MapType0Type RefType realType))) (= (type Ops_5Mask@11) (MapType0Type RefType realType))) (= (type Used_11Heap@0) (MapType1Type RefType))) (forall ((arg0@@36 T@U) ) (! (= (type (FrameFragment arg0@@36)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@36))
))) (= (type Used_11Mask@1) (MapType0Type RefType realType))) (= (type Used_11Mask@2) (MapType0Type RefType realType))) (= (type Mask@8) (MapType0Type RefType realType))) (= (type Heap@6) (MapType1Type RefType))) (= (type Used_11Mask@0) (MapType0Type RefType realType))) (= (type Ops_5Mask@10) (MapType0Type RefType realType))) (= (type Ops_5Heap@5) (MapType1Type RefType))) (= (type Heap@2) (MapType1Type RefType))) (= (type Mask@4) (MapType0Type RefType realType))) (= (type Ops_5Mask@5) (MapType0Type RefType realType))) (= (type Ops_5Heap@9) (MapType1Type RefType))) (= (type Ops_5Heap@8) (MapType1Type RefType))) (= (type Ops_5Mask@8) (MapType0Type RefType realType))) (= (type Heap@4) (MapType1Type RefType))) (= (type Mask@6) (MapType0Type RefType realType))) (= (type Ops_5Heap@6) (MapType1Type RefType))) (= (type Ops_5Heap@7) (MapType1Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Used_10Mask@3) (MapType0Type RefType realType))) (= (type Result_9Heap) (MapType1Type RefType))) (= (type Result_9Mask) (MapType0Type RefType realType))) (= (type Ops_5Mask@7) (MapType0Type RefType realType))) (= (type Used_10Heap@0) (MapType1Type RefType))) (= (type Used_10Mask@1) (MapType0Type RefType realType))) (= (type Used_10Mask@2) (MapType0Type RefType realType))) (= (type Mask@5) (MapType0Type RefType realType))) (= (type Heap@3) (MapType1Type RefType))) (= (type Used_10Mask@0) (MapType0Type RefType realType))) (= (type Ops_5Mask@6) (MapType0Type RefType realType))) (= (type Ops_5Heap@0) (MapType1Type RefType))) (= (type Mask@1) (MapType0Type RefType realType))) (= (type Ops_5Mask@1) (MapType0Type RefType realType))) (= (type Heap@@11) (MapType1Type RefType))) (= (type Ops_5Heap@4) (MapType1Type RefType))) (= (type Ops_5Heap@3) (MapType1Type RefType))) (= (type Ops_5Mask@4) (MapType0Type RefType realType))) (= (type Mask@3) (MapType0Type RefType realType))) (= (type Heap@1) (MapType1Type RefType))) (= (type Ops_5Heap@1) (MapType1Type RefType))) (= (type Ops_5Heap@2) (MapType1Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Used_9Mask@3) (MapType0Type RefType realType))) (= (type Result_8Heap) (MapType1Type RefType))) (= (type Result_8Mask) (MapType0Type RefType realType))) (= (type Ops_5Mask@3) (MapType0Type RefType realType))) (= (type Used_9Heap@0) (MapType1Type RefType))) (= (type Used_9Mask@1) (MapType0Type RefType realType))) (= (type Used_9Mask@2) (MapType0Type RefType realType))) (= (type Mask@2) (MapType0Type RefType realType))) (= (type Heap@0) (MapType1Type RefType))) (= (type Used_9Mask@0) (MapType0Type RefType realType))) (= (type Ops_5Mask@2) (MapType0Type RefType realType))) (= (type Ops_5Mask@0) (MapType0Type RefType realType))) (= (type Mask@0) (MapType0Type RefType realType))) (= (type Used_8Heap@0) (MapType1Type RefType))))
(set-info :boogie-vc-id test03)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 115) (let ((anon86_correct  (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (and (and b_19@28 b_19@28) b_26@18) (and (= neededTransfer@26 0.0) (= (U_2_real (MapType0Select Used_12Mask@11 null (P y@@1))) initNeededTransfer@5)))) (=> (=> (and (and b_19@28 b_19@28) b_26@18) (and (= neededTransfer@26 0.0) (= (U_2_real (MapType0Select Used_12Mask@11 null (P y@@1))) initNeededTransfer@5))) (=> (= b_29@0  (and b_19@28 b_26@18)) (=> (and (= b_29@1  (and b_29@0 (state Result_13Heap Result_13Mask))) (= b_29@2  (and b_29@1 (sumMask Result_13Mask Ops_5Mask Used_12Mask@11)))) (=> (and (and (and (= b_29@3  (and (and b_29@2 (IdenticalOnKnownLocations Ops_5Heap@15 Result_13Heap Ops_5Mask)) (IdenticalOnKnownLocations Used_12Heap@0 Result_13Heap Used_12Mask@11))) (= b_29@4  (and b_29@3 (state Result_13Heap Result_13Mask)))) (and (= b_19@29  (and b_19@28 b_29@4)) (= Mask@17 (MapType0Store Mask@16 null (wand_1 x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) (real_2_U (+ (U_2_real (MapType0Select Mask@16 null (wand_1 x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm))) FullPerm)))))) (and (and (state Heap@14 Mask@17) (state Heap@14 Mask@17)) (and (state Heap@14 Mask@17) (= (ControlFlow 0 2) (- 0 1))))) false)))))))
(let ((anon129_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= neededTransfer@26 neededTransfer@24) (= b_26@18 b_26@15)) (=> (and (and (= Mask@16 Mask@14) (= Heap@14 Heap@12)) (and (= Used_12Mask@11 Used_12Mask@9) (= (ControlFlow 0 6) 2))) anon86_correct)))))
(let ((anon129_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (= neededTransfer@25 (- neededTransfer@24 takeTransfer@11)) (= Used_12Mask@10 (MapType0Store Used_12Mask@9 null (P y@@1) (real_2_U (+ (U_2_real (MapType0Select Used_12Mask@9 null (P y@@1))) takeTransfer@11))))) (=> (and (and (= b_26@16  (and b_26@15 (state Used_12Heap@0 Used_12Mask@10))) (= TempMask@5 (MapType0Store ZeroMask null (P y@@1) (real_2_U FullPerm)))) (and (= b_26@17  (and b_26@16 (IdenticalOnKnownLocations Heap@12 Used_12Heap@0 TempMask@5))) (= Mask@15 (MapType0Store Mask@14 null (P y@@1) (real_2_U (- (U_2_real (MapType0Select Mask@14 null (P y@@1))) takeTransfer@11)))))) (=> (and (and (and (forall ((o_9 T@U) (f_14 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_14))))
(let ((A@@12 (FieldTypeInv0 (type f_14))))
 (=> (and (and (= (type o_9) RefType) (= (type f_14) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType0Select (MapType1Select Heap@12 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm)) o_9 f_14)) (U_2_bool (MapType0Select (MapType1Select Heap@12 null (|P#sm| y@@1)) o_9 f_14)))) (U_2_bool (MapType0Select newPMask@2 o_9 f_14)))))
 :qid |stdinbpl.1787:35|
 :skolemid |54|
 :pattern ( (MapType0Select newPMask@2 o_9 f_14))
)) (= Heap@13 (MapType1Store Heap@12 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) newPMask@2))) (and (= neededTransfer@26 neededTransfer@25) (= b_26@18 b_26@17))) (and (and (= Mask@16 Mask@15) (= Heap@14 Heap@13)) (and (= Used_12Mask@11 Used_12Mask@10) (= (ControlFlow 0 5) 2)))) anon86_correct))))))
(let ((anon128_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@24) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 8) 5) anon129_Then_correct) (=> (= (ControlFlow 0 8) 6) anon129_Else_correct)))))
(let ((anon128_Then_correct  (=> (and (<= neededTransfer@24 maskTransfer@11) (= takeTransfer@11 neededTransfer@24)) (and (=> (= (ControlFlow 0 7) 5) anon129_Then_correct) (=> (= (ControlFlow 0 7) 6) anon129_Else_correct)))))
(let ((anon127_Then_correct  (=> (and (and (and (and (and b_19@28 b_19@28) b_26@15) true) (> neededTransfer@24 0.0)) (= maskTransfer@11 (U_2_real (MapType0Select Mask@14 null (P y@@1))))) (and (=> (= (ControlFlow 0 9) 7) anon128_Then_correct) (=> (= (ControlFlow 0 9) 8) anon128_Else_correct)))))
(let ((anon127_Else_correct  (=> (not (and (and (and (and b_19@28 b_19@28) b_26@15) true) (> neededTransfer@24 0.0))) (=> (and (= neededTransfer@26 neededTransfer@24) (= b_26@18 b_26@15)) (=> (and (and (= Mask@16 Mask@14) (= Heap@14 Heap@12)) (and (= Used_12Mask@11 Used_12Mask@9) (= (ControlFlow 0 4) 2))) anon86_correct)))))
(let ((anon126_Else_correct  (=> (and (and (>= 0.0 takeTransfer@10) (= Used_12Mask@9 Used_12Mask@7)) (and (= b_26@15 b_26@12) (= neededTransfer@24 FullPerm))) (and (=> (= (ControlFlow 0 12) 9) anon127_Then_correct) (=> (= (ControlFlow 0 12) 4) anon127_Else_correct)))))
(let ((anon126_Then_correct  (=> (and (> takeTransfer@10 0.0) (= neededTransfer@23 (- FullPerm takeTransfer@10))) (=> (and (and (and (= Used_12Mask@8 (MapType0Store Used_12Mask@7 null (P y@@1) (real_2_U (+ (U_2_real (MapType0Select Used_12Mask@7 null (P y@@1))) takeTransfer@10)))) (= b_26@13  (and b_26@12 (state Used_12Heap@0 Used_12Mask@8)))) (and (= TempMask@4 (MapType0Store ZeroMask null (P y@@1) (real_2_U FullPerm))) (= b_26@14  (and b_26@13 (IdenticalOnKnownLocations Ops_5Heap@15 Used_12Heap@0 TempMask@4))))) (and (and (= Ops_5Mask@18 (MapType0Store Ops_5Mask@17 null (P y@@1) (real_2_U (- (U_2_real (MapType0Select Ops_5Mask@17 null (P y@@1))) takeTransfer@10)))) (= Used_12Mask@9 Used_12Mask@8)) (and (= b_26@15 b_26@14) (= neededTransfer@24 neededTransfer@23)))) (and (=> (= (ControlFlow 0 11) 9) anon127_Then_correct) (=> (= (ControlFlow 0 11) 4) anon127_Else_correct))))))
(let ((anon125_Else_correct  (=> (and (< maskTransfer@10 FullPerm) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 14) 11) anon126_Then_correct) (=> (= (ControlFlow 0 14) 12) anon126_Else_correct)))))
(let ((anon125_Then_correct  (=> (and (<= FullPerm maskTransfer@10) (= takeTransfer@10 FullPerm)) (and (=> (= (ControlFlow 0 13) 11) anon126_Then_correct) (=> (= (ControlFlow 0 13) 12) anon126_Else_correct)))))
(let ((anon124_Then_correct  (=> (and (and (and (and (and b_19@28 b_19@28) b_26@12) true) (> FullPerm 0.0)) (= maskTransfer@10 (U_2_real (MapType0Select Ops_5Mask@17 null (P y@@1))))) (and (=> (= (ControlFlow 0 15) 13) anon125_Then_correct) (=> (= (ControlFlow 0 15) 14) anon125_Else_correct)))))
(let ((anon124_Else_correct  (=> (and (and (not (and (and (and (and b_19@28 b_19@28) b_26@12) true) (> FullPerm 0.0))) (= Used_12Mask@9 Used_12Mask@7)) (and (= b_26@15 b_26@12) (= neededTransfer@24 FullPerm))) (and (=> (= (ControlFlow 0 10) 9) anon127_Then_correct) (=> (= (ControlFlow 0 10) 4) anon127_Else_correct)))))
(let ((anon74_correct  (and (=> (= (ControlFlow 0 16) (- 0 18)) (=> (and (and b_19@27 b_19@27) b_26@12) (and (= neededTransfer@22 0.0) (= (U_2_real (MapType0Select Used_12Mask@7 null (Q x@@20))) initNeededTransfer@4)))) (=> (=> (and (and b_19@27 b_19@27) b_26@12) (and (= neededTransfer@22 0.0) (= (U_2_real (MapType0Select Used_12Mask@7 null (Q x@@20))) initNeededTransfer@4))) (=> (= b_28@0  (and b_19@27 b_26@12)) (=> (and (= b_28@1  (and b_28@0 (state Result_12Heap Result_12Mask))) (= b_28@2  (and b_28@1 (sumMask Result_12Mask Ops_5Mask@17 Used_12Mask@7)))) (=> (and (and (= b_28@3  (and (and b_28@2 (IdenticalOnKnownLocations Ops_5Heap@15 Result_12Heap Ops_5Mask@17)) (IdenticalOnKnownLocations Used_12Heap@0 Result_12Heap Used_12Mask@7))) (= b_28@4  (and b_28@3 (state Result_12Heap Result_12Mask)))) (and (= b_19@28  (and b_19@27 b_28@4)) (= initNeededTransfer@5 (+ (U_2_real (MapType0Select Used_12Mask@7 null (P y@@1))) FullPerm)))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 16) 15) anon124_Then_correct) (=> (= (ControlFlow 0 16) 10) anon124_Else_correct)))))))))))
(let ((anon123_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (= neededTransfer@22 neededTransfer@20) (= Heap@12 Heap@10)) (=> (and (and (= Mask@14 Mask@12) (= b_26@12 b_26@9)) (and (= Used_12Mask@7 Used_12Mask@5) (= (ControlFlow 0 21) 16))) anon74_correct)))))
(let ((anon123_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (= neededTransfer@21 (- neededTransfer@20 takeTransfer@9)) (= Used_12Mask@6 (MapType0Store Used_12Mask@5 null (Q x@@20) (real_2_U (+ (U_2_real (MapType0Select Used_12Mask@5 null (Q x@@20))) takeTransfer@9))))) (=> (and (and (= b_26@10  (and b_26@9 (state Used_12Heap@0 Used_12Mask@6))) (= TempMask@3 (MapType0Store ZeroMask null (Q x@@20) (real_2_U FullPerm)))) (and (= b_26@11  (and b_26@10 (IdenticalOnKnownLocations Heap@10 Used_12Heap@0 TempMask@3))) (= Mask@13 (MapType0Store Mask@12 null (Q x@@20) (real_2_U (- (U_2_real (MapType0Select Mask@12 null (Q x@@20))) takeTransfer@9)))))) (=> (and (and (and (forall ((o_8 T@U) (f_13 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_13))))
(let ((A@@13 (FieldTypeInv0 (type f_13))))
 (=> (and (and (= (type o_8) RefType) (= (type f_13) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType0Select (MapType1Select Heap@10 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm)) o_8 f_13)) (U_2_bool (MapType0Select (MapType1Select Heap@10 null (|Q#sm| x@@20)) o_8 f_13)))) (U_2_bool (MapType0Select newPMask@1 o_8 f_13)))))
 :qid |stdinbpl.1722:35|
 :skolemid |53|
 :pattern ( (MapType0Select newPMask@1 o_8 f_13))
)) (= Heap@11 (MapType1Store Heap@10 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) newPMask@1))) (and (= neededTransfer@22 neededTransfer@21) (= Heap@12 Heap@11))) (and (and (= Mask@14 Mask@13) (= b_26@12 b_26@11)) (and (= Used_12Mask@7 Used_12Mask@6) (= (ControlFlow 0 20) 16)))) anon74_correct))))))
(let ((anon122_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@20) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 23) 20) anon123_Then_correct) (=> (= (ControlFlow 0 23) 21) anon123_Else_correct)))))
(let ((anon122_Then_correct  (=> (and (<= neededTransfer@20 maskTransfer@9) (= takeTransfer@9 neededTransfer@20)) (and (=> (= (ControlFlow 0 22) 20) anon123_Then_correct) (=> (= (ControlFlow 0 22) 21) anon123_Else_correct)))))
(let ((anon121_Then_correct  (=> (and (and (and (and (and b_19@27 b_19@27) b_26@9) true) (> neededTransfer@20 0.0)) (= maskTransfer@9 (U_2_real (MapType0Select Mask@12 null (Q x@@20))))) (and (=> (= (ControlFlow 0 24) 22) anon122_Then_correct) (=> (= (ControlFlow 0 24) 23) anon122_Else_correct)))))
(let ((anon121_Else_correct  (=> (not (and (and (and (and b_19@27 b_19@27) b_26@9) true) (> neededTransfer@20 0.0))) (=> (and (= neededTransfer@22 neededTransfer@20) (= Heap@12 Heap@10)) (=> (and (and (= Mask@14 Mask@12) (= b_26@12 b_26@9)) (and (= Used_12Mask@7 Used_12Mask@5) (= (ControlFlow 0 19) 16))) anon74_correct)))))
(let ((anon120_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Used_12Mask@5 Used_12Mask@3) (= b_26@9 b_26@6)) (and (= neededTransfer@20 FullPerm) (= Ops_5Mask@17 Ops_5Mask@15))) (and (=> (= (ControlFlow 0 27) 24) anon121_Then_correct) (=> (= (ControlFlow 0 27) 19) anon121_Else_correct))))))
(let ((anon120_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (= neededTransfer@19 (- FullPerm takeTransfer@8)) (= Used_12Mask@4 (MapType0Store Used_12Mask@3 null (Q x@@20) (real_2_U (+ (U_2_real (MapType0Select Used_12Mask@3 null (Q x@@20))) takeTransfer@8))))) (=> (and (and (and (= b_26@7  (and b_26@6 (state Used_12Heap@0 Used_12Mask@4))) (= TempMask@2 (MapType0Store ZeroMask null (Q x@@20) (real_2_U FullPerm)))) (and (= b_26@8  (and b_26@7 (IdenticalOnKnownLocations Ops_5Heap@15 Used_12Heap@0 TempMask@2))) (= Ops_5Mask@16 (MapType0Store Ops_5Mask@15 null (Q x@@20) (real_2_U (- (U_2_real (MapType0Select Ops_5Mask@15 null (Q x@@20))) takeTransfer@8)))))) (and (and (= Used_12Mask@5 Used_12Mask@4) (= b_26@9 b_26@8)) (and (= neededTransfer@20 neededTransfer@19) (= Ops_5Mask@17 Ops_5Mask@16)))) (and (=> (= (ControlFlow 0 26) 24) anon121_Then_correct) (=> (= (ControlFlow 0 26) 19) anon121_Else_correct)))))))
(let ((anon119_Else_correct  (=> (and (< maskTransfer@8 FullPerm) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 29) 26) anon120_Then_correct) (=> (= (ControlFlow 0 29) 27) anon120_Else_correct)))))
(let ((anon119_Then_correct  (=> (and (<= FullPerm maskTransfer@8) (= takeTransfer@8 FullPerm)) (and (=> (= (ControlFlow 0 28) 26) anon120_Then_correct) (=> (= (ControlFlow 0 28) 27) anon120_Else_correct)))))
(let ((anon118_Then_correct  (=> (and (and (and (and (and b_19@27 b_19@27) b_26@6) true) (> FullPerm 0.0)) (= maskTransfer@8 (U_2_real (MapType0Select Ops_5Mask@15 null (Q x@@20))))) (and (=> (= (ControlFlow 0 30) 28) anon119_Then_correct) (=> (= (ControlFlow 0 30) 29) anon119_Else_correct)))))
(let ((anon118_Else_correct  (=> (not (and (and (and (and b_19@27 b_19@27) b_26@6) true) (> FullPerm 0.0))) (=> (and (and (= Used_12Mask@5 Used_12Mask@3) (= b_26@9 b_26@6)) (and (= neededTransfer@20 FullPerm) (= Ops_5Mask@17 Ops_5Mask@15))) (and (=> (= (ControlFlow 0 25) 24) anon121_Then_correct) (=> (= (ControlFlow 0 25) 19) anon121_Else_correct))))))
(let ((anon62_correct  (and (=> (= (ControlFlow 0 31) (- 0 33)) (=> (and (and b_19@26 b_19@26) b_26@6) (and (= neededTransfer@18 0.0) (= (U_2_real (MapType0Select Used_12Mask@3 null (P x@@20))) initNeededTransfer@3)))) (=> (=> (and (and b_19@26 b_19@26) b_26@6) (and (= neededTransfer@18 0.0) (= (U_2_real (MapType0Select Used_12Mask@3 null (P x@@20))) initNeededTransfer@3))) (=> (= b_27@0  (and b_19@26 b_26@6)) (=> (and (= b_27@1  (and b_27@0 (state Result_11Heap Result_11Mask))) (= b_27@2  (and b_27@1 (sumMask Result_11Mask Ops_5Mask@15 Used_12Mask@3)))) (=> (and (and (= b_27@3  (and (and b_27@2 (IdenticalOnKnownLocations Ops_5Heap@15 Result_11Heap Ops_5Mask@15)) (IdenticalOnKnownLocations Used_12Heap@0 Result_11Heap Used_12Mask@3))) (= b_27@4  (and b_27@3 (state Result_11Heap Result_11Mask)))) (and (= b_19@27  (and b_19@26 b_27@4)) (= initNeededTransfer@4 (+ (U_2_real (MapType0Select Used_12Mask@3 null (Q x@@20))) FullPerm)))) (and (=> (= (ControlFlow 0 31) (- 0 32)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 31) 30) anon118_Then_correct) (=> (= (ControlFlow 0 31) 25) anon118_Else_correct)))))))))))
(let ((anon117_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= neededTransfer@18 neededTransfer@16) (= Mask@12 Mask@10)) (=> (and (and (= Heap@10 Heap@8) (= b_26@6 b_26@3)) (and (= Used_12Mask@3 Used_12Mask@1) (= (ControlFlow 0 36) 31))) anon62_correct)))))
(let ((anon117_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (= neededTransfer@17 (- neededTransfer@16 takeTransfer@7)) (= Used_12Mask@2 (MapType0Store Used_12Mask@1 null (P x@@20) (real_2_U (+ (U_2_real (MapType0Select Used_12Mask@1 null (P x@@20))) takeTransfer@7))))) (=> (and (and (= b_26@4  (and b_26@3 (state Used_12Heap@0 Used_12Mask@2))) (= TempMask@1 (MapType0Store ZeroMask null (P x@@20) (real_2_U FullPerm)))) (and (= b_26@5  (and b_26@4 (IdenticalOnKnownLocations Heap@8 Used_12Heap@0 TempMask@1))) (= Mask@11 (MapType0Store Mask@10 null (P x@@20) (real_2_U (- (U_2_real (MapType0Select Mask@10 null (P x@@20))) takeTransfer@7)))))) (=> (and (and (and (forall ((o_7 T@U) (f_12 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_12))))
(let ((A@@14 (FieldTypeInv0 (type f_12))))
 (=> (and (and (= (type o_7) RefType) (= (type f_12) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType0Select (MapType1Select Heap@8 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm)) o_7 f_12)) (U_2_bool (MapType0Select (MapType1Select Heap@8 null (|P#sm| x@@20)) o_7 f_12)))) (U_2_bool (MapType0Select newPMask@0 o_7 f_12)))))
 :qid |stdinbpl.1657:35|
 :skolemid |52|
 :pattern ( (MapType0Select newPMask@0 o_7 f_12))
)) (= Heap@9 (MapType1Store Heap@8 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) newPMask@0))) (and (= neededTransfer@18 neededTransfer@17) (= Mask@12 Mask@11))) (and (and (= Heap@10 Heap@9) (= b_26@6 b_26@5)) (and (= Used_12Mask@3 Used_12Mask@2) (= (ControlFlow 0 35) 31)))) anon62_correct))))))
(let ((anon116_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@16) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 38) 35) anon117_Then_correct) (=> (= (ControlFlow 0 38) 36) anon117_Else_correct)))))
(let ((anon116_Then_correct  (=> (and (<= neededTransfer@16 maskTransfer@7) (= takeTransfer@7 neededTransfer@16)) (and (=> (= (ControlFlow 0 37) 35) anon117_Then_correct) (=> (= (ControlFlow 0 37) 36) anon117_Else_correct)))))
(let ((anon115_Then_correct  (=> (and (and (and (and (and b_19@26 b_19@26) b_26@3) true) (> neededTransfer@16 0.0)) (= maskTransfer@7 (U_2_real (MapType0Select Mask@10 null (P x@@20))))) (and (=> (= (ControlFlow 0 39) 37) anon116_Then_correct) (=> (= (ControlFlow 0 39) 38) anon116_Else_correct)))))
(let ((anon115_Else_correct  (=> (not (and (and (and (and b_19@26 b_19@26) b_26@3) true) (> neededTransfer@16 0.0))) (=> (and (= neededTransfer@18 neededTransfer@16) (= Mask@12 Mask@10)) (=> (and (and (= Heap@10 Heap@8) (= b_26@6 b_26@3)) (and (= Used_12Mask@3 Used_12Mask@1) (= (ControlFlow 0 34) 31))) anon62_correct)))))
(let ((anon114_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Ops_5Mask@15 Ops_5Mask@13) (= Used_12Mask@1 ZeroMask)) (and (= b_26@3 b_26@0) (= neededTransfer@16 FullPerm))) (and (=> (= (ControlFlow 0 42) 39) anon115_Then_correct) (=> (= (ControlFlow 0 42) 34) anon115_Else_correct))))))
(let ((anon114_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@15 (- FullPerm takeTransfer@6)) (= Used_12Mask@0 (MapType0Store ZeroMask null (P x@@20) (real_2_U (+ (U_2_real (MapType0Select ZeroMask null (P x@@20))) takeTransfer@6))))) (=> (and (and (and (= b_26@1  (and b_26@0 (state Used_12Heap@0 Used_12Mask@0))) (= TempMask@0 (MapType0Store ZeroMask null (P x@@20) (real_2_U FullPerm)))) (and (= b_26@2  (and b_26@1 (IdenticalOnKnownLocations Ops_5Heap@15 Used_12Heap@0 TempMask@0))) (= Ops_5Mask@14 (MapType0Store Ops_5Mask@13 null (P x@@20) (real_2_U (- (U_2_real (MapType0Select Ops_5Mask@13 null (P x@@20))) takeTransfer@6)))))) (and (and (= Ops_5Mask@15 Ops_5Mask@14) (= Used_12Mask@1 Used_12Mask@0)) (and (= b_26@3 b_26@2) (= neededTransfer@16 neededTransfer@15)))) (and (=> (= (ControlFlow 0 41) 39) anon115_Then_correct) (=> (= (ControlFlow 0 41) 34) anon115_Else_correct)))))))
(let ((anon113_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 44) 41) anon114_Then_correct) (=> (= (ControlFlow 0 44) 42) anon114_Else_correct)))))
(let ((anon113_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 43) 41) anon114_Then_correct) (=> (= (ControlFlow 0 43) 42) anon114_Else_correct)))))
(let ((anon112_Then_correct  (=> (and (and (and (and (and b_19@26 b_19@26) b_26@0) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType0Select Ops_5Mask@13 null (P x@@20))))) (and (=> (= (ControlFlow 0 45) 43) anon113_Then_correct) (=> (= (ControlFlow 0 45) 44) anon113_Else_correct)))))
(let ((anon112_Else_correct  (=> (not (and (and (and (and b_19@26 b_19@26) b_26@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_5Mask@15 Ops_5Mask@13) (= Used_12Mask@1 ZeroMask)) (and (= b_26@3 b_26@0) (= neededTransfer@16 FullPerm))) (and (=> (= (ControlFlow 0 40) 39) anon115_Then_correct) (=> (= (ControlFlow 0 40) 34) anon115_Else_correct))))))
(let ((anon50_correct  (=> (and (= b_26@0  (and b_26 (state Used_12Heap@0 ZeroMask))) (= initNeededTransfer@3 (+ (U_2_real (MapType0Select ZeroMask null (P x@@20))) FullPerm))) (and (=> (= (ControlFlow 0 46) (- 0 47)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 46) 45) anon112_Then_correct) (=> (= (ControlFlow 0 46) 40) anon112_Else_correct)))))))
(let ((anon49_correct  (=> (= Ops_5Heap@14 (MapType1Store Ops_5Heap@13 null (|P#sm| y@@1) (MapType0Store (MapType1Select Ops_5Heap@13 null (|P#sm| y@@1)) y@@1 f_7 (bool_2_U true)))) (=> (and (and (and (state Ops_5Heap@14 Ops_5Mask@12) (= b_19@25  (and b_19@24 (state Ops_5Heap@14 Ops_5Mask@12)))) (and (= b_19@26 b_19@25) (= Ops_5Heap@15 Ops_5Heap@14))) (and (and (= Heap@8 Heap@7) (= Mask@10 Mask@9)) (and (= Ops_5Mask@13 Ops_5Mask@12) (= (ControlFlow 0 49) 46)))) anon50_correct))))
(let ((anon111_Else_correct  (=> (HasDirectPerm Ops_5Mask@12 null (P y@@1)) (=> (and (= Ops_5Heap@13 Ops_5Heap@10) (= (ControlFlow 0 51) 49)) anon49_correct))))
(let ((anon111_Then_correct  (=> (not (HasDirectPerm Ops_5Mask@12 null (P y@@1))) (=> (and (and (= Ops_5Heap@11 (MapType1Store Ops_5Heap@10 null (|P#sm| y@@1) ZeroPMask)) (= Ops_5Heap@12 (MapType1Store Ops_5Heap@11 null (P y@@1) freshVersion@2))) (and (= Ops_5Heap@13 Ops_5Heap@12) (= (ControlFlow 0 50) 49))) anon49_correct))))
(let ((anon47_correct  (and (=> (= (ControlFlow 0 52) (- 0 53)) (=> (and b_19@19 b_24@6) (and (= neededTransfer@14 0.0) (= (U_2_real (MapType0Select Used_11Mask@3 y@@1 f_7)) initNeededTransfer@2)))) (=> (=> (and b_19@19 b_24@6) (and (= neededTransfer@14 0.0) (= (U_2_real (MapType0Select Used_11Mask@3 y@@1 f_7)) initNeededTransfer@2))) (=> (= b_25@0  (and b_19@19 b_24@6)) (=> (and (and (= b_25@1  (and b_25@0 (state Result_10Heap Result_10Mask))) (= b_25@2  (and b_25@1 (sumMask Result_10Mask Ops_5Mask@11 Used_11Mask@3)))) (and (= b_25@3  (and (and b_25@2 (IdenticalOnKnownLocations Ops_5Heap@10 Result_10Heap Ops_5Mask@11)) (IdenticalOnKnownLocations Used_11Heap@0 Result_10Heap Used_11Mask@3))) (= b_25@4  (and b_25@3 (state Result_10Heap Result_10Mask))))) (=> (and (and (and (= b_19@20  (and b_19@19 b_25@4)) (= b_19@21  (and b_19@20 b_24@6))) (and (= b_19@22  (and b_19@21 (= Used_11Heap@0 Ops_5Heap@10))) (= Ops_5Mask@12 (MapType0Store Ops_5Mask@11 null (P y@@1) (real_2_U (+ (U_2_real (MapType0Select Ops_5Mask@11 null (P y@@1))) FullPerm)))))) (and (and (= b_19@23  (and b_19@22 (state Ops_5Heap@10 Ops_5Mask@12))) (= b_19@24  (and b_19@23 (state Ops_5Heap@10 Ops_5Mask@12)))) (and (|P#trigger| Ops_5Heap@10 (P y@@1)) (= (MapType1Select Ops_5Heap@10 null (P y@@1)) (FrameFragment (MapType1Select Ops_5Heap@10 y@@1 f_7)))))) (and (=> (= (ControlFlow 0 52) 50) anon111_Then_correct) (=> (= (ControlFlow 0 52) 51) anon111_Else_correct)))))))))
(let ((anon110_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@14 neededTransfer@12) (= Mask@9 Mask@7)) (=> (and (and (= Heap@7 Heap@5) (= b_24@6 b_24@3)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 56) 52))) anon47_correct)))))
(let ((anon110_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@13 (- neededTransfer@12 takeTransfer@5)) (= Used_11Mask@2 (MapType0Store Used_11Mask@1 y@@1 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_11Mask@1 y@@1 f_7)) takeTransfer@5))))) (and (= b_24@4  (and b_24@3 (state Used_11Heap@0 Used_11Mask@2))) (= b_24@5  (and b_24@4 (= (U_2_int (MapType1Select Heap@5 y@@1 f_7)) (U_2_int (MapType1Select Used_11Heap@0 y@@1 f_7))))))) (=> (and (and (and (= Mask@8 (MapType0Store Mask@7 y@@1 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@7 y@@1 f_7)) takeTransfer@5)))) (= Heap@6 (MapType1Store Heap@5 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) (MapType0Store (MapType1Select Heap@5 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm)) y@@1 f_7 (bool_2_U true))))) (and (= neededTransfer@14 neededTransfer@13) (= Mask@9 Mask@8))) (and (and (= Heap@7 Heap@6) (= b_24@6 b_24@5)) (and (= Used_11Mask@3 Used_11Mask@2) (= (ControlFlow 0 55) 52)))) anon47_correct)))))
(let ((anon109_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@12) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 58) 55) anon110_Then_correct) (=> (= (ControlFlow 0 58) 56) anon110_Else_correct)))))
(let ((anon109_Then_correct  (=> (and (<= neededTransfer@12 maskTransfer@5) (= takeTransfer@5 neededTransfer@12)) (and (=> (= (ControlFlow 0 57) 55) anon110_Then_correct) (=> (= (ControlFlow 0 57) 56) anon110_Else_correct)))))
(let ((anon108_Then_correct  (=> (and (and (and (and b_19@19 b_24@3) true) (> neededTransfer@12 0.0)) (= maskTransfer@5 (U_2_real (MapType0Select Mask@7 y@@1 f_7)))) (and (=> (= (ControlFlow 0 59) 57) anon109_Then_correct) (=> (= (ControlFlow 0 59) 58) anon109_Else_correct)))))
(let ((anon108_Else_correct  (=> (not (and (and (and b_19@19 b_24@3) true) (> neededTransfer@12 0.0))) (=> (and (= neededTransfer@14 neededTransfer@12) (= Mask@9 Mask@7)) (=> (and (and (= Heap@7 Heap@5) (= b_24@6 b_24@3)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 54) 52))) anon47_correct)))))
(let ((anon107_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_5Mask@11 Ops_5Mask@9) (= Used_11Mask@1 ZeroMask)) (and (= b_24@3 b_24@0) (= neededTransfer@12 neededTransfer@10))) (and (=> (= (ControlFlow 0 62) 59) anon108_Then_correct) (=> (= (ControlFlow 0 62) 54) anon108_Else_correct))))))
(let ((anon107_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@11 (- neededTransfer@10 takeTransfer@4))) (=> (and (and (and (= Used_11Mask@0 (MapType0Store ZeroMask y@@1 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask y@@1 f_7)) takeTransfer@4)))) (= b_24@1  (and b_24@0 (state Used_11Heap@0 Used_11Mask@0)))) (and (= b_24@2  (and b_24@1 (= (U_2_int (MapType1Select Ops_5Heap@10 y@@1 f_7)) (U_2_int (MapType1Select Used_11Heap@0 y@@1 f_7))))) (= Ops_5Mask@10 (MapType0Store Ops_5Mask@9 y@@1 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_5Mask@9 y@@1 f_7)) takeTransfer@4)))))) (and (and (= Ops_5Mask@11 Ops_5Mask@10) (= Used_11Mask@1 Used_11Mask@0)) (and (= b_24@3 b_24@2) (= neededTransfer@12 neededTransfer@11)))) (and (=> (= (ControlFlow 0 61) 59) anon108_Then_correct) (=> (= (ControlFlow 0 61) 54) anon108_Else_correct))))))
(let ((anon106_Else_correct  (=> (and (< maskTransfer@4 neededTransfer@10) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 64) 61) anon107_Then_correct) (=> (= (ControlFlow 0 64) 62) anon107_Else_correct)))))
(let ((anon106_Then_correct  (=> (and (<= neededTransfer@10 maskTransfer@4) (= takeTransfer@4 neededTransfer@10)) (and (=> (= (ControlFlow 0 63) 61) anon107_Then_correct) (=> (= (ControlFlow 0 63) 62) anon107_Else_correct)))))
(let ((anon105_Then_correct  (=> (and (and (and (and b_19@19 b_24@0) true) (> neededTransfer@10 0.0)) (= maskTransfer@4 (U_2_real (MapType0Select Ops_5Mask@9 y@@1 f_7)))) (and (=> (= (ControlFlow 0 65) 63) anon106_Then_correct) (=> (= (ControlFlow 0 65) 64) anon106_Else_correct)))))
(let ((anon105_Else_correct  (=> (not (and (and (and b_19@19 b_24@0) true) (> neededTransfer@10 0.0))) (=> (and (and (= Ops_5Mask@11 Ops_5Mask@9) (= Used_11Mask@1 ZeroMask)) (and (= b_24@3 b_24@0) (= neededTransfer@12 neededTransfer@10))) (and (=> (= (ControlFlow 0 60) 59) anon108_Then_correct) (=> (= (ControlFlow 0 60) 54) anon108_Else_correct))))))
(let ((anon104_Then_correct  (=> (and (and b_19@19 (= b_24@0  (and b_24 (state Used_11Heap@0 ZeroMask)))) (and (= neededTransfer@10 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@2 (+ (U_2_real (MapType0Select ZeroMask y@@1 f_7)) neededTransfer@10)))) (and (=> (= (ControlFlow 0 66) (- 0 67)) (>= neededTransfer@10 0.0)) (=> (>= neededTransfer@10 0.0) (and (=> (= (ControlFlow 0 66) 65) anon105_Then_correct) (=> (= (ControlFlow 0 66) 60) anon105_Else_correct)))))))
(let ((anon104_Else_correct  (=> (not b_19@19) (=> (and (= b_19@26 b_19@19) (= Ops_5Heap@15 Ops_5Heap@10)) (=> (and (and (= Heap@8 Heap@5) (= Mask@10 Mask@7)) (and (= Ops_5Mask@13 Ops_5Mask@9) (= (ControlFlow 0 48) 46))) anon50_correct)))))
(let ((anon33_correct  (=> (and (and (and (= Ops_5Heap@9 (MapType1Store Ops_5Heap@8 null (|Q#sm| x@@20) (MapType0Store (MapType1Select Ops_5Heap@8 null (|Q#sm| x@@20)) x@@20 f_7 (bool_2_U true)))) (state Ops_5Heap@9 Ops_5Mask@8)) (and (= b_19@18  (and b_19@17 (state Ops_5Heap@9 Ops_5Mask@8))) (= b_19@19 b_19@18))) (and (and (= Ops_5Heap@10 Ops_5Heap@9) (= Heap@5 Heap@4)) (and (= Mask@7 Mask@6) (= Ops_5Mask@9 Ops_5Mask@8)))) (and (=> (= (ControlFlow 0 69) 66) anon104_Then_correct) (=> (= (ControlFlow 0 69) 48) anon104_Else_correct)))))
(let ((anon103_Else_correct  (=> (HasDirectPerm Ops_5Mask@8 null (Q x@@20)) (=> (and (= Ops_5Heap@8 Ops_5Heap@5) (= (ControlFlow 0 71) 69)) anon33_correct))))
(let ((anon103_Then_correct  (=> (not (HasDirectPerm Ops_5Mask@8 null (Q x@@20))) (=> (and (and (= Ops_5Heap@6 (MapType1Store Ops_5Heap@5 null (|Q#sm| x@@20) ZeroPMask)) (= Ops_5Heap@7 (MapType1Store Ops_5Heap@6 null (Q x@@20) freshVersion@1))) (and (= Ops_5Heap@8 Ops_5Heap@7) (= (ControlFlow 0 70) 69))) anon33_correct))))
(let ((anon31_correct  (and (=> (= (ControlFlow 0 72) (- 0 73)) (=> (and b_19@12 b_22@6) (and (= neededTransfer@9 0.0) (= (U_2_real (MapType0Select Used_10Mask@3 x@@20 f_7)) initNeededTransfer@1)))) (=> (=> (and b_19@12 b_22@6) (and (= neededTransfer@9 0.0) (= (U_2_real (MapType0Select Used_10Mask@3 x@@20 f_7)) initNeededTransfer@1))) (=> (= b_23@0  (and b_19@12 b_22@6)) (=> (and (and (= b_23@1  (and b_23@0 (state Result_9Heap Result_9Mask))) (= b_23@2  (and b_23@1 (sumMask Result_9Mask Ops_5Mask@7 Used_10Mask@3)))) (and (= b_23@3  (and (and b_23@2 (IdenticalOnKnownLocations Ops_5Heap@5 Result_9Heap Ops_5Mask@7)) (IdenticalOnKnownLocations Used_10Heap@0 Result_9Heap Used_10Mask@3))) (= b_23@4  (and b_23@3 (state Result_9Heap Result_9Mask))))) (=> (and (and (and (= b_19@13  (and b_19@12 b_23@4)) (= b_19@14  (and b_19@13 b_22@6))) (and (= b_19@15  (and b_19@14 (= Used_10Heap@0 Ops_5Heap@5))) (= Ops_5Mask@8 (MapType0Store Ops_5Mask@7 null (Q x@@20) (real_2_U (+ (U_2_real (MapType0Select Ops_5Mask@7 null (Q x@@20))) FullPerm)))))) (and (and (= b_19@16  (and b_19@15 (state Ops_5Heap@5 Ops_5Mask@8))) (= b_19@17  (and b_19@16 (state Ops_5Heap@5 Ops_5Mask@8)))) (and (|Q#trigger| Ops_5Heap@5 (Q x@@20)) (= (MapType1Select Ops_5Heap@5 null (Q x@@20)) (FrameFragment (MapType1Select Ops_5Heap@5 x@@20 f_7)))))) (and (=> (= (ControlFlow 0 72) 70) anon103_Then_correct) (=> (= (ControlFlow 0 72) 71) anon103_Else_correct)))))))))
(let ((anon102_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= neededTransfer@9 neededTransfer@7) (= Mask@6 Mask@4)) (=> (and (and (= Heap@4 Heap@2) (= b_22@6 b_22@3)) (and (= Used_10Mask@3 Used_10Mask@1) (= (ControlFlow 0 76) 72))) anon31_correct)))))
(let ((anon102_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@8 (- neededTransfer@7 takeTransfer@3)) (= Used_10Mask@2 (MapType0Store Used_10Mask@1 x@@20 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_10Mask@1 x@@20 f_7)) takeTransfer@3))))) (and (= b_22@4  (and b_22@3 (state Used_10Heap@0 Used_10Mask@2))) (= b_22@5  (and b_22@4 (= (U_2_int (MapType1Select Heap@2 x@@20 f_7)) (U_2_int (MapType1Select Used_10Heap@0 x@@20 f_7))))))) (=> (and (and (and (= Mask@5 (MapType0Store Mask@4 x@@20 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@4 x@@20 f_7)) takeTransfer@3)))) (= Heap@3 (MapType1Store Heap@2 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) (MapType0Store (MapType1Select Heap@2 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm)) x@@20 f_7 (bool_2_U true))))) (and (= neededTransfer@9 neededTransfer@8) (= Mask@6 Mask@5))) (and (and (= Heap@4 Heap@3) (= b_22@6 b_22@5)) (and (= Used_10Mask@3 Used_10Mask@2) (= (ControlFlow 0 75) 72)))) anon31_correct)))))
(let ((anon101_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@7) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 78) 75) anon102_Then_correct) (=> (= (ControlFlow 0 78) 76) anon102_Else_correct)))))
(let ((anon101_Then_correct  (=> (and (<= neededTransfer@7 maskTransfer@3) (= takeTransfer@3 neededTransfer@7)) (and (=> (= (ControlFlow 0 77) 75) anon102_Then_correct) (=> (= (ControlFlow 0 77) 76) anon102_Else_correct)))))
(let ((anon100_Then_correct  (=> (and (and (and (and b_19@12 b_22@3) true) (> neededTransfer@7 0.0)) (= maskTransfer@3 (U_2_real (MapType0Select Mask@4 x@@20 f_7)))) (and (=> (= (ControlFlow 0 79) 77) anon101_Then_correct) (=> (= (ControlFlow 0 79) 78) anon101_Else_correct)))))
(let ((anon100_Else_correct  (=> (not (and (and (and b_19@12 b_22@3) true) (> neededTransfer@7 0.0))) (=> (and (= neededTransfer@9 neededTransfer@7) (= Mask@6 Mask@4)) (=> (and (and (= Heap@4 Heap@2) (= b_22@6 b_22@3)) (and (= Used_10Mask@3 Used_10Mask@1) (= (ControlFlow 0 74) 72))) anon31_correct)))))
(let ((anon99_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Ops_5Mask@7 Ops_5Mask@5) (= Used_10Mask@1 ZeroMask)) (and (= b_22@3 b_22@0) (= neededTransfer@7 neededTransfer@5))) (and (=> (= (ControlFlow 0 82) 79) anon100_Then_correct) (=> (= (ControlFlow 0 82) 74) anon100_Else_correct))))))
(let ((anon99_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@6 (- neededTransfer@5 takeTransfer@2))) (=> (and (and (and (= Used_10Mask@0 (MapType0Store ZeroMask x@@20 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@20 f_7)) takeTransfer@2)))) (= b_22@1  (and b_22@0 (state Used_10Heap@0 Used_10Mask@0)))) (and (= b_22@2  (and b_22@1 (= (U_2_int (MapType1Select Ops_5Heap@5 x@@20 f_7)) (U_2_int (MapType1Select Used_10Heap@0 x@@20 f_7))))) (= Ops_5Mask@6 (MapType0Store Ops_5Mask@5 x@@20 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_5Mask@5 x@@20 f_7)) takeTransfer@2)))))) (and (and (= Ops_5Mask@7 Ops_5Mask@6) (= Used_10Mask@1 Used_10Mask@0)) (and (= b_22@3 b_22@2) (= neededTransfer@7 neededTransfer@6)))) (and (=> (= (ControlFlow 0 81) 79) anon100_Then_correct) (=> (= (ControlFlow 0 81) 74) anon100_Else_correct))))))
(let ((anon98_Else_correct  (=> (and (< maskTransfer@2 neededTransfer@5) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 84) 81) anon99_Then_correct) (=> (= (ControlFlow 0 84) 82) anon99_Else_correct)))))
(let ((anon98_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@2) (= takeTransfer@2 neededTransfer@5)) (and (=> (= (ControlFlow 0 83) 81) anon99_Then_correct) (=> (= (ControlFlow 0 83) 82) anon99_Else_correct)))))
(let ((anon97_Then_correct  (=> (and (and (and (and b_19@12 b_22@0) true) (> neededTransfer@5 0.0)) (= maskTransfer@2 (U_2_real (MapType0Select Ops_5Mask@5 x@@20 f_7)))) (and (=> (= (ControlFlow 0 85) 83) anon98_Then_correct) (=> (= (ControlFlow 0 85) 84) anon98_Else_correct)))))
(let ((anon97_Else_correct  (=> (not (and (and (and b_19@12 b_22@0) true) (> neededTransfer@5 0.0))) (=> (and (and (= Ops_5Mask@7 Ops_5Mask@5) (= Used_10Mask@1 ZeroMask)) (and (= b_22@3 b_22@0) (= neededTransfer@7 neededTransfer@5))) (and (=> (= (ControlFlow 0 80) 79) anon100_Then_correct) (=> (= (ControlFlow 0 80) 74) anon100_Else_correct))))))
(let ((anon96_Then_correct  (=> (and (and b_19@12 (= b_22@0  (and b_22 (state Used_10Heap@0 ZeroMask)))) (and (= neededTransfer@5 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@1 (+ (U_2_real (MapType0Select ZeroMask x@@20 f_7)) neededTransfer@5)))) (and (=> (= (ControlFlow 0 86) (- 0 87)) (>= neededTransfer@5 0.0)) (=> (>= neededTransfer@5 0.0) (and (=> (= (ControlFlow 0 86) 85) anon97_Then_correct) (=> (= (ControlFlow 0 86) 80) anon97_Else_correct)))))))
(let ((anon96_Else_correct  (=> (and (not b_19@12) (= b_19@19 b_19@12)) (=> (and (and (= Ops_5Heap@10 Ops_5Heap@5) (= Heap@5 Heap@2)) (and (= Mask@7 Mask@4) (= Ops_5Mask@9 Ops_5Mask@5))) (and (=> (= (ControlFlow 0 68) 66) anon104_Then_correct) (=> (= (ControlFlow 0 68) 48) anon104_Else_correct))))))
(let ((anon17_correct  (=> (and (and (and (= Ops_5Heap@4 (MapType1Store Ops_5Heap@3 null (|P#sm| x@@20) (MapType0Store (MapType1Select Ops_5Heap@3 null (|P#sm| x@@20)) x@@20 f_7 (bool_2_U true)))) (state Ops_5Heap@4 Ops_5Mask@4)) (and (= b_19@11  (and b_19@10 (state Ops_5Heap@4 Ops_5Mask@4))) (= Ops_5Heap@5 Ops_5Heap@4))) (and (and (= b_19@12 b_19@11) (= Mask@4 Mask@3)) (and (= Ops_5Mask@5 Ops_5Mask@4) (= Heap@2 Heap@1)))) (and (=> (= (ControlFlow 0 89) 86) anon96_Then_correct) (=> (= (ControlFlow 0 89) 68) anon96_Else_correct)))))
(let ((anon95_Else_correct  (=> (HasDirectPerm Ops_5Mask@4 null (P x@@20)) (=> (and (= Ops_5Heap@3 Ops_5Heap@0) (= (ControlFlow 0 91) 89)) anon17_correct))))
(let ((anon95_Then_correct  (=> (not (HasDirectPerm Ops_5Mask@4 null (P x@@20))) (=> (and (and (= Ops_5Heap@1 (MapType1Store Ops_5Heap@0 null (|P#sm| x@@20) ZeroPMask)) (= Ops_5Heap@2 (MapType1Store Ops_5Heap@1 null (P x@@20) freshVersion@0))) (and (= Ops_5Heap@3 Ops_5Heap@2) (= (ControlFlow 0 90) 89))) anon17_correct))))
(let ((anon15_correct  (and (=> (= (ControlFlow 0 92) (- 0 93)) (=> (and b_19@5 b_20@6) (and (= neededTransfer@4 0.0) (= (U_2_real (MapType0Select Used_9Mask@3 x@@20 f_7)) initNeededTransfer@0)))) (=> (=> (and b_19@5 b_20@6) (and (= neededTransfer@4 0.0) (= (U_2_real (MapType0Select Used_9Mask@3 x@@20 f_7)) initNeededTransfer@0))) (=> (= b_21@0  (and b_19@5 b_20@6)) (=> (and (and (= b_21@1  (and b_21@0 (state Result_8Heap Result_8Mask))) (= b_21@2  (and b_21@1 (sumMask Result_8Mask Ops_5Mask@3 Used_9Mask@3)))) (and (= b_21@3  (and (and b_21@2 (IdenticalOnKnownLocations Ops_5Heap@0 Result_8Heap Ops_5Mask@3)) (IdenticalOnKnownLocations Used_9Heap@0 Result_8Heap Used_9Mask@3))) (= b_21@4  (and b_21@3 (state Result_8Heap Result_8Mask))))) (=> (and (and (and (= b_19@6  (and b_19@5 b_21@4)) (= b_19@7  (and b_19@6 b_20@6))) (and (= b_19@8  (and b_19@7 (= Used_9Heap@0 Ops_5Heap@0))) (= Ops_5Mask@4 (MapType0Store Ops_5Mask@3 null (P x@@20) (real_2_U (+ (U_2_real (MapType0Select Ops_5Mask@3 null (P x@@20))) FullPerm)))))) (and (and (= b_19@9  (and b_19@8 (state Ops_5Heap@0 Ops_5Mask@4))) (= b_19@10  (and b_19@9 (state Ops_5Heap@0 Ops_5Mask@4)))) (and (|P#trigger| Ops_5Heap@0 (P x@@20)) (= (MapType1Select Ops_5Heap@0 null (P x@@20)) (FrameFragment (MapType1Select Ops_5Heap@0 x@@20 f_7)))))) (and (=> (= (ControlFlow 0 92) 90) anon95_Then_correct) (=> (= (ControlFlow 0 92) 91) anon95_Else_correct)))))))))
(let ((anon94_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@3 Mask@1) (= neededTransfer@4 neededTransfer@2)) (=> (and (and (= b_20@6 b_20@3) (= Used_9Mask@3 Used_9Mask@1)) (and (= Heap@1 Heap@@11) (= (ControlFlow 0 96) 92))) anon15_correct)))))
(let ((anon94_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (= neededTransfer@3 (- neededTransfer@2 takeTransfer@1)) (= Used_9Mask@2 (MapType0Store Used_9Mask@1 x@@20 f_7 (real_2_U (+ (U_2_real (MapType0Select Used_9Mask@1 x@@20 f_7)) takeTransfer@1))))) (and (= b_20@4  (and b_20@3 (state Used_9Heap@0 Used_9Mask@2))) (= b_20@5  (and b_20@4 (= (U_2_int (MapType1Select Heap@@11 x@@20 f_7)) (U_2_int (MapType1Select Used_9Heap@0 x@@20 f_7))))))) (=> (and (and (and (= Mask@2 (MapType0Store Mask@1 x@@20 f_7 (real_2_U (- (U_2_real (MapType0Select Mask@1 x@@20 f_7)) takeTransfer@1)))) (= Heap@0 (MapType1Store Heap@@11 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm) (MapType0Store (MapType1Select Heap@@11 null (|wand_1#sm| x@@20 (/ (to_real 1) (to_real 2)) x@@20 FullPerm x@@20 FullPerm y@@1 FullPerm)) x@@20 f_7 (bool_2_U true))))) (and (= Mask@3 Mask@2) (= neededTransfer@4 neededTransfer@3))) (and (and (= b_20@6 b_20@5) (= Used_9Mask@3 Used_9Mask@2)) (and (= Heap@1 Heap@0) (= (ControlFlow 0 95) 92)))) anon15_correct)))))
(let ((anon93_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@2) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 98) 95) anon94_Then_correct) (=> (= (ControlFlow 0 98) 96) anon94_Else_correct)))))
(let ((anon93_Then_correct  (=> (and (<= neededTransfer@2 maskTransfer@1) (= takeTransfer@1 neededTransfer@2)) (and (=> (= (ControlFlow 0 97) 95) anon94_Then_correct) (=> (= (ControlFlow 0 97) 96) anon94_Else_correct)))))
(let ((anon92_Then_correct  (=> (and (and (and (and b_19@5 b_20@3) true) (> neededTransfer@2 0.0)) (= maskTransfer@1 (U_2_real (MapType0Select Mask@1 x@@20 f_7)))) (and (=> (= (ControlFlow 0 99) 97) anon93_Then_correct) (=> (= (ControlFlow 0 99) 98) anon93_Else_correct)))))
(let ((anon92_Else_correct  (=> (not (and (and (and b_19@5 b_20@3) true) (> neededTransfer@2 0.0))) (=> (and (= Mask@3 Mask@1) (= neededTransfer@4 neededTransfer@2)) (=> (and (and (= b_20@6 b_20@3) (= Used_9Mask@3 Used_9Mask@1)) (and (= Heap@1 Heap@@11) (= (ControlFlow 0 94) 92))) anon15_correct)))))
(let ((anon91_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_5Mask@3 Ops_5Mask@1) (= Used_9Mask@1 ZeroMask)) (and (= b_20@3 b_20@0) (= neededTransfer@2 neededTransfer@0))) (and (=> (= (ControlFlow 0 102) 99) anon92_Then_correct) (=> (= (ControlFlow 0 102) 94) anon92_Else_correct))))))
(let ((anon91_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@1 (- neededTransfer@0 takeTransfer@0))) (=> (and (and (and (= Used_9Mask@0 (MapType0Store ZeroMask x@@20 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@20 f_7)) takeTransfer@0)))) (= b_20@1  (and b_20@0 (state Used_9Heap@0 Used_9Mask@0)))) (and (= b_20@2  (and b_20@1 (= (U_2_int (MapType1Select Ops_5Heap@0 x@@20 f_7)) (U_2_int (MapType1Select Used_9Heap@0 x@@20 f_7))))) (= Ops_5Mask@2 (MapType0Store Ops_5Mask@1 x@@20 f_7 (real_2_U (- (U_2_real (MapType0Select Ops_5Mask@1 x@@20 f_7)) takeTransfer@0)))))) (and (and (= Ops_5Mask@3 Ops_5Mask@2) (= Used_9Mask@1 Used_9Mask@0)) (and (= b_20@3 b_20@2) (= neededTransfer@2 neededTransfer@1)))) (and (=> (= (ControlFlow 0 101) 99) anon92_Then_correct) (=> (= (ControlFlow 0 101) 94) anon92_Else_correct))))))
(let ((anon90_Else_correct  (=> (and (< maskTransfer@0 neededTransfer@0) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 104) 101) anon91_Then_correct) (=> (= (ControlFlow 0 104) 102) anon91_Else_correct)))))
(let ((anon90_Then_correct  (=> (and (<= neededTransfer@0 maskTransfer@0) (= takeTransfer@0 neededTransfer@0)) (and (=> (= (ControlFlow 0 103) 101) anon91_Then_correct) (=> (= (ControlFlow 0 103) 102) anon91_Else_correct)))))
(let ((anon89_Then_correct  (=> (and (and (and (and b_19@5 b_20@0) true) (> neededTransfer@0 0.0)) (= maskTransfer@0 (U_2_real (MapType0Select Ops_5Mask@1 x@@20 f_7)))) (and (=> (= (ControlFlow 0 105) 103) anon90_Then_correct) (=> (= (ControlFlow 0 105) 104) anon90_Else_correct)))))
(let ((anon89_Else_correct  (=> (not (and (and (and b_19@5 b_20@0) true) (> neededTransfer@0 0.0))) (=> (and (and (= Ops_5Mask@3 Ops_5Mask@1) (= Used_9Mask@1 ZeroMask)) (and (= b_20@3 b_20@0) (= neededTransfer@2 neededTransfer@0))) (and (=> (= (ControlFlow 0 100) 99) anon92_Then_correct) (=> (= (ControlFlow 0 100) 94) anon92_Else_correct))))))
(let ((anon88_Then_correct  (=> (and (and b_19@5 (= b_20@0  (and b_20 (state Used_9Heap@0 ZeroMask)))) (and (= neededTransfer@0 (/ (to_real 1) (to_real 2))) (= initNeededTransfer@0 (+ (U_2_real (MapType0Select ZeroMask x@@20 f_7)) neededTransfer@0)))) (and (=> (= (ControlFlow 0 106) (- 0 107)) (>= neededTransfer@0 0.0)) (=> (>= neededTransfer@0 0.0) (and (=> (= (ControlFlow 0 106) 105) anon89_Then_correct) (=> (= (ControlFlow 0 106) 100) anon89_Else_correct)))))))
(let ((anon88_Else_correct  (=> (and (not b_19@5) (= Ops_5Heap@5 Ops_5Heap@0)) (=> (and (and (= b_19@12 b_19@5) (= Mask@4 Mask@1)) (and (= Ops_5Mask@5 Ops_5Mask@1) (= Heap@2 Heap@@11))) (and (=> (= (ControlFlow 0 88) 86) anon96_Then_correct) (=> (= (ControlFlow 0 88) 68) anon96_Else_correct))))))
(let ((anon2_correct  (=> (and (= b_19@4  (and b_19@3 (state Ops_5Heap@0 Ops_5Mask@1))) (= b_19@5  (and b_19@4 (state Ops_5Heap@0 Ops_5Mask@1)))) (and (=> (= (ControlFlow 0 108) 106) anon88_Then_correct) (=> (= (ControlFlow 0 108) 88) anon88_Else_correct)))))
(let ((anon87_Else_correct  (=> (and (and (not b_19@0) (= Ops_5Mask@1 ZeroMask)) (and (= b_19@3 b_19@0) (= (ControlFlow 0 111) 108))) anon2_correct)))
(let ((anon87_Then_correct  (=> (and b_19@0 (= perm@2 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 109) (- 0 110)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (=> (and (= b_19@1  (and b_19@0 (=> (> perm@2 NoPerm) (not (= x@@20 null))))) (= Ops_5Mask@0 (MapType0Store ZeroMask x@@20 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@20 f_7)) perm@2))))) (=> (and (and (= b_19@2  (and b_19@1 (state Ops_5Heap@0 Ops_5Mask@0))) (= Ops_5Mask@1 Ops_5Mask@0)) (and (= b_19@3 b_19@2) (= (ControlFlow 0 109) 108))) anon2_correct)))))))
(let ((anon0_correct  (=> (and (and (state Heap@@11 ZeroMask) (U_2_bool (MapType1Select Heap@@11 x@@20 $allocated))) (and (U_2_bool (MapType1Select Heap@@11 y@@1 $allocated)) (= perm@0 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 112) (- 0 114)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (=> (and (and (=> (> perm@0 NoPerm) (not (= x@@20 null))) (= Mask@0 (MapType0Store ZeroMask x@@20 f_7 (real_2_U (+ (U_2_real (MapType0Select ZeroMask x@@20 f_7)) perm@0))))) (and (state Heap@@11 Mask@0) (= perm@1 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 112) (- 0 113)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (=> (and (=> (> perm@1 NoPerm) (not (= y@@1 null))) (= Mask@1 (MapType0Store Mask@0 y@@1 f_7 (real_2_U (+ (U_2_real (MapType0Select Mask@0 y@@1 f_7)) perm@1))))) (=> (and (and (state Heap@@11 Mask@1) (state Heap@@11 Mask@1)) (and (= b_19@0  (and b_19 (state Ops_5Heap@0 ZeroMask))) (= b_18@0  (and b_18 (state Used_8Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 112) 109) anon87_Then_correct) (=> (= (ControlFlow 0 112) 111) anon87_Else_correct))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 115) 112) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
