(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun key () T@U)
(declare-fun degree () T@U)
(declare-fun parent () T@U)
(declare-fun sibling () T@U)
(declare-fun child () T@U)
(declare-fun Nodes () T@U)
(declare-fun size () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun segLength (T@U T@U T@U) Int)
(declare-fun |segLength#triggerStateless| (T@U T@U) Int)
(declare-fun |heapseg#trigger| (T@U T@U) Bool)
(declare-fun heapseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |segLength'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_heapsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |treeDegree'| (T@U T@U) Int)
(declare-fun |treeDegree#trigger| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |segDegree'| (T@U T@U T@U Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |segDegree#triggerStateless| (T@U T@U Int) Int)
(declare-fun segSize (T@U T@U T@U) Int)
(declare-fun |segSize#triggerStateless| (T@U T@U) Int)
(declare-fun |treeSize'| (T@U T@U) Int)
(declare-fun |segSize'| (T@U T@U T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |segParent'| (T@U T@U T@U) T@U)
(declare-fun |segParent#triggerStateless| (T@U T@U) T@U)
(declare-fun |sorted'| (T@U T@U T@U) Bool)
(declare-fun |sorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |presorted'| (T@U T@U T@U) Bool)
(declare-fun |presorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |validChildren'| (T@U T@U T@U) Bool)
(declare-fun |validChildren#triggerStateless| (T@U T@U) Bool)
(declare-fun |heapseg#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun heap (T@U) T@U)
(declare-fun PredicateType_heapType () T@T)
(declare-fun |treeKey'| (T@U T@U) Int)
(declare-fun |treeKey#triggerStateless| (T@U) Int)
(declare-fun |treeDegree#triggerStateless| (T@U) Int)
(declare-fun |treeSize#triggerStateless| (T@U) Int)
(declare-fun |treeParent'| (T@U T@U) T@U)
(declare-fun |treeParent#triggerStateless| (T@U) T@U)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |heap#trigger| (T@U T@U) Bool)
(declare-fun |heap#everUsed| (T@U) Bool)
(declare-fun segDegree (T@U T@U T@U Int) Int)
(declare-fun treeDegree (T@U T@U) Int)
(declare-fun |sorted#frame| (T@U T@U T@U) Bool)
(declare-fun |presorted#frame| (T@U T@U T@U) Bool)
(declare-fun |validChildren#frame| (T@U T@U T@U) Bool)
(declare-fun treeKey (T@U T@U) Int)
(declare-fun treeSize (T@U T@U) Int)
(declare-fun treeParent (T@U T@U) T@U)
(declare-fun |heapseg#sm| (T@U T@U) T@U)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun |heap#sm| (T@U) T@U)
(declare-fun |segLength#frame| (T@U T@U T@U) Int)
(declare-fun |segSize#frame| (T@U T@U T@U) Int)
(declare-fun |segParent#frame| (T@U T@U T@U) T@U)
(declare-fun presorted (T@U T@U T@U) Bool)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |sorted#trigger| (T@U T@U T@U) Bool)
(declare-fun segParent (T@U T@U T@U) T@U)
(declare-fun |segDegree#trigger| (T@U T@U T@U Int) Bool)
(declare-fun |segDegree#frame| (T@U T@U T@U Int) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |segSize#trigger| (T@U T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |segLength#trigger| (T@U T@U T@U) Bool)
(declare-fun |treeKey#frame| (T@U T@U) Int)
(declare-fun |treeDegree#frame| (T@U T@U) Int)
(declare-fun |treeSize#frame| (T@U T@U) Int)
(declare-fun |treeParent#frame| (T@U T@U) T@U)
(declare-fun sorted (T@U T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun validChildren (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type key) (FieldType NormalFieldType intType))) (= (type degree) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type parent) (FieldType NormalFieldType RefType))) (= (type sibling) (FieldType NormalFieldType RefType))) (= (type child) (FieldType NormalFieldType RefType))) (= (type Nodes) (FieldType NormalFieldType RefType))) (= (type size) (FieldType NormalFieldType intType))))
(assert (distinct $allocated key degree parent sibling child Nodes size)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_heapsegType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@9 T@U) ) (! (= (type (heapseg arg0@@23 arg1@@9)) (FieldType PredicateType_heapsegType FrameTypeType))
 :qid |funType:heapseg|
 :pattern ( (heapseg arg0@@23 arg1@@9))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (last T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type last) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 8))) (= (segLength Heap this last) (ite (= this last) 0 (+ 1 (|segLength'| Heap (MapType0Select Heap this sibling) last)))))
 :qid |stdinbpl.781:15|
 :skolemid |45|
 :pattern ( (state Heap Mask) (segLength Heap this last))
 :pattern ( (state Heap Mask) (|segLength#triggerStateless| this last) (|heapseg#trigger| Heap (heapseg this last)))
)))
(assert  (and (and (= (type null) RefType) (= (Ctor PredicateType_treeType) 13)) (forall ((arg0@@24 T@U) ) (! (= (type (tree arg0@@24)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (this@@0 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type this@@0) RefType)) (and (state Heap@@0 Mask@@0) (or (< AssumeFunctionsAbove 9) (|treeDegree#trigger| (MapType0Select Heap@@0 null (tree this@@0)) this@@0)))) (<= 0 (|treeDegree'| Heap@@0 this@@0)))
 :qid |stdinbpl.372:15|
 :skolemid |31|
 :pattern ( (state Heap@@0 Mask@@0) (|treeDegree'| Heap@@0 this@@0))
)))
(assert (forall ((Heap@@1 T@U) (Mask@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type Mask@@1) (MapType1Type RefType realType))) (state Heap@@1 Mask@@1)) (GoodMask Mask@@1))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@1 Mask@@1))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@2 T@U) (this@@1 T@U) (last@@0 T@U) (index Int) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type last@@0) RefType)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@1 last@@0 index))))
 :qid |stdinbpl.1128:15|
 :skolemid |60|
 :pattern ( (|segDegree'| Heap@@2 this@@1 last@@0 index))
)))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (this@@2 T@U) (last@@1 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type this@@2) RefType)) (= (type last@@1) RefType)) (and (state Heap@@3 Mask@@2) (< AssumeFunctionsAbove 1))) (= (segSize Heap@@3 this@@2 last@@1) (ite (= this@@2 last@@1) 0 (+ (|treeSize'| Heap@@3 this@@2) (|segSize'| Heap@@3 (MapType0Select Heap@@3 this@@2 sibling) last@@1)))))
 :qid |stdinbpl.957:15|
 :skolemid |54|
 :pattern ( (state Heap@@3 Mask@@2) (segSize Heap@@3 this@@2 last@@1))
 :pattern ( (state Heap@@3 Mask@@2) (|segSize#triggerStateless| this@@2 last@@1) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)))
)))
(assert (forall ((this@@3 T@U) (last@@2 T@U) ) (!  (=> (and (= (type this@@3) RefType) (= (type last@@2) RefType)) (IsPredicateField (heapseg this@@3 last@@2)))
 :qid |stdinbpl.2402:15|
 :skolemid |98|
 :pattern ( (heapseg this@@3 last@@2))
)))
(assert (forall ((Heap@@4 T@U) (this@@4 T@U) (last@@3 T@U) ) (!  (=> (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@4) RefType)) (= (type last@@3) RefType)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@4 last@@3))))
 :qid |stdinbpl.775:15|
 :skolemid |44|
 :pattern ( (|segLength'| Heap@@4 this@@4 last@@3))
)))
(assert (forall ((Heap@@5 T@U) (this@@5 T@U) (last@@4 T@U) ) (!  (=> (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@5) RefType)) (= (type last@@4) RefType)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@5 last@@4))))
 :qid |stdinbpl.951:15|
 :skolemid |53|
 :pattern ( (|segSize'| Heap@@5 this@@5 last@@4))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (= (type (|segParent'| arg0@@25 arg1@@10 arg2@@3)) RefType)
 :qid |funType:segParent'|
 :pattern ( (|segParent'| arg0@@25 arg1@@10 arg2@@3))
)) (forall ((arg0@@26 T@U) (arg1@@11 T@U) ) (! (= (type (|segParent#triggerStateless| arg0@@26 arg1@@11)) RefType)
 :qid |funType:segParent#triggerStateless|
 :pattern ( (|segParent#triggerStateless| arg0@@26 arg1@@11))
))))
(assert (forall ((Heap@@6 T@U) (this@@6 T@U) (last@@5 T@U) ) (!  (=> (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@6) RefType)) (= (type last@@5) RefType)) (dummyFunction (|segParent#triggerStateless| this@@6 last@@5)))
 :qid |stdinbpl.1330:15|
 :skolemid |67|
 :pattern ( (|segParent'| Heap@@6 this@@6 last@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@7 T@U) (last@@6 T@U) ) (!  (=> (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@7) RefType)) (= (type last@@6) RefType)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@7 last@@6))))
 :qid |stdinbpl.1469:15|
 :skolemid |73|
 :pattern ( (|sorted'| Heap@@7 this@@7 last@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@8 T@U) (last@@7 T@U) ) (!  (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@8) RefType)) (= (type last@@7) RefType)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@8 last@@7))))
 :qid |stdinbpl.1706:15|
 :skolemid |80|
 :pattern ( (|presorted'| Heap@@8 this@@8 last@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@9 T@U) (last@@8 T@U) ) (!  (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@9) RefType)) (= (type last@@8) RefType)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@9 last@@8))))
 :qid |stdinbpl.2007:15|
 :skolemid |86|
 :pattern ( (|validChildren'| Heap@@9 this@@9 last@@8))
)))
(assert (forall ((Heap@@10 T@U) (this@@10 T@U) (last@@9 T@U) ) (!  (=> (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@10) RefType)) (= (type last@@9) RefType)) (|heapseg#everUsed| (heapseg this@@10 last@@9)))
 :qid |stdinbpl.2421:15|
 :skolemid |102|
 :pattern ( (|heapseg#trigger| Heap@@10 (heapseg this@@10 last@@9)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap T@U) (Mask@@3 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3)) (and (HasDirectPerm Mask@@3 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@11 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@0 T@U) (Mask@@4 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4)) (and (HasDirectPerm Mask@@4 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@12 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (= (type this@@11) RefType) (IsPredicateField (tree this@@11)))
 :qid |stdinbpl.2209:15|
 :skolemid |92|
 :pattern ( (tree this@@11))
)))
(assert  (and (= (Ctor PredicateType_heapType) 14) (forall ((arg0@@29 T@U) ) (! (= (type (heap arg0@@29)) (FieldType PredicateType_heapType FrameTypeType))
 :qid |funType:heap|
 :pattern ( (heap arg0@@29))
))))
(assert (forall ((this@@12 T@U) ) (!  (=> (= (type this@@12) RefType) (IsPredicateField (heap this@@12)))
 :qid |stdinbpl.2520:15|
 :skolemid |104|
 :pattern ( (heap this@@12))
)))
(assert (forall ((Heap@@13 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@13) RefType)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@13))))
 :qid |stdinbpl.224:15|
 :skolemid |23|
 :pattern ( (|treeKey'| Heap@@13 this@@13))
)))
(assert (forall ((Heap@@14 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@14) RefType)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@14))))
 :qid |stdinbpl.353:15|
 :skolemid |28|
 :pattern ( (|treeDegree'| Heap@@14 this@@14))
)))
(assert (forall ((Heap@@15 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@15) RefType)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@15))))
 :qid |stdinbpl.494:15|
 :skolemid |34|
 :pattern ( (|treeSize'| Heap@@15 this@@15))
)))
(assert  (and (forall ((arg0@@30 T@U) (arg1@@12 T@U) ) (! (= (type (|treeParent'| arg0@@30 arg1@@12)) RefType)
 :qid |funType:treeParent'|
 :pattern ( (|treeParent'| arg0@@30 arg1@@12))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|treeParent#triggerStateless| arg0@@31)) RefType)
 :qid |funType:treeParent#triggerStateless|
 :pattern ( (|treeParent#triggerStateless| arg0@@31))
))))
(assert (forall ((Heap@@16 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@16) RefType)) (dummyFunction (|treeParent#triggerStateless| this@@16)))
 :qid |stdinbpl.646:15|
 :skolemid |39|
 :pattern ( (|treeParent'| Heap@@16 this@@16))
)))
(assert (forall ((Heap@@17 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@17) RefType)) (|tree#everUsed| (tree this@@17)))
 :qid |stdinbpl.2228:15|
 :skolemid |96|
 :pattern ( (|tree#trigger| Heap@@17 (tree this@@17)))
)))
(assert (forall ((Heap@@18 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@18) RefType)) (|heap#everUsed| (heap this@@18)))
 :qid |stdinbpl.2539:15|
 :skolemid |108|
 :pattern ( (|heap#trigger| Heap@@18 (heap this@@18)))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@5 T@U) (this@@19 T@U) (last@@10 T@U) (index@@0 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type this@@19) RefType)) (= (type last@@10) RefType)) (and (state Heap@@19 Mask@@5) (< AssumeFunctionsAbove 7))) (and (<= 0 index@@0) (< index@@0 (segLength Heap@@19 this@@19 last@@10)))) (= (segDegree Heap@@19 this@@19 last@@10 index@@0) (ite (= index@@0 0) (treeDegree Heap@@19 this@@19) (|segDegree'| Heap@@19 (MapType0Select Heap@@19 this@@19 sibling) last@@10 (- index@@0 1)))))
 :qid |stdinbpl.1134:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@5) (segDegree Heap@@19 this@@19 last@@10 index@@0))
 :pattern ( (state Heap@@19 Mask@@5) (|segDegree#triggerStateless| this@@19 last@@10 index@@0) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@6 T@U) (this@@20 T@U) (last@@11 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@20) RefType)) (= (type last@@11) RefType)) (state Heap@@20 Mask@@6)) (= (|sorted'| Heap@@20 this@@20 last@@11) (|sorted#frame| (MapType0Select Heap@@20 null (heapseg this@@20 last@@11)) this@@20 last@@11)))
 :qid |stdinbpl.1482:15|
 :skolemid |75|
 :pattern ( (state Heap@@20 Mask@@6) (|sorted'| Heap@@20 this@@20 last@@11))
 :pattern ( (state Heap@@20 Mask@@6) (|sorted#triggerStateless| this@@20 last@@11) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)))
)))
(assert (forall ((Heap@@21 T@U) (Mask@@7 T@U) (this@@21 T@U) (last@@12 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type last@@12) RefType)) (state Heap@@21 Mask@@7)) (= (|presorted'| Heap@@21 this@@21 last@@12) (|presorted#frame| (MapType0Select Heap@@21 null (heapseg this@@21 last@@12)) this@@21 last@@12)))
 :qid |stdinbpl.1719:15|
 :skolemid |82|
 :pattern ( (state Heap@@21 Mask@@7) (|presorted'| Heap@@21 this@@21 last@@12))
 :pattern ( (state Heap@@21 Mask@@7) (|presorted#triggerStateless| this@@21 last@@12) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)))
)))
(assert (forall ((Heap@@22 T@U) (Mask@@8 T@U) (this@@22 T@U) (last@@13 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type last@@13) RefType)) (state Heap@@22 Mask@@8)) (= (|validChildren'| Heap@@22 this@@22 last@@13) (|validChildren#frame| (MapType0Select Heap@@22 null (heapseg this@@22 last@@13)) this@@22 last@@13)))
 :qid |stdinbpl.2020:15|
 :skolemid |88|
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren'| Heap@@22 this@@22 last@@13))
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren#triggerStateless| this@@22 last@@13) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)))
)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@1 T@U) (Mask@@9 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9)) (U_2_bool (MapType0Select Heap@@23 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@24 T@U) (this@@23 T@U) ) (!  (=> (and (= (type Heap@@24) (MapType0Type RefType)) (= (type this@@23) RefType)) (and (= (treeKey Heap@@24 this@@23) (|treeKey'| Heap@@24 this@@23)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@23)))))
 :qid |stdinbpl.220:15|
 :skolemid |22|
 :pattern ( (treeKey Heap@@24 this@@23))
)))
(assert (forall ((Heap@@25 T@U) (this@@24 T@U) ) (!  (=> (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@24) RefType)) (and (= (treeDegree Heap@@25 this@@24) (|treeDegree'| Heap@@25 this@@24)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@24)))))
 :qid |stdinbpl.349:15|
 :skolemid |27|
 :pattern ( (treeDegree Heap@@25 this@@24))
)))
(assert (forall ((Heap@@26 T@U) (this@@25 T@U) ) (!  (=> (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@25) RefType)) (and (= (treeSize Heap@@26 this@@25) (|treeSize'| Heap@@26 this@@25)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@25)))))
 :qid |stdinbpl.490:15|
 :skolemid |33|
 :pattern ( (treeSize Heap@@26 this@@25))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@13 T@U) ) (! (= (type (treeParent arg0@@32 arg1@@13)) RefType)
 :qid |funType:treeParent|
 :pattern ( (treeParent arg0@@32 arg1@@13))
)))
(assert (forall ((Heap@@27 T@U) (this@@26 T@U) ) (!  (=> (and (= (type Heap@@27) (MapType0Type RefType)) (= (type this@@26) RefType)) (and (= (treeParent Heap@@27 this@@26) (|treeParent'| Heap@@27 this@@26)) (dummyFunction (|treeParent#triggerStateless| this@@26))))
 :qid |stdinbpl.642:15|
 :skolemid |38|
 :pattern ( (treeParent Heap@@27 this@@26))
)))
(assert (forall ((this@@27 T@U) (last@@14 T@U) (this2 T@U) (last2 T@U) ) (!  (=> (and (and (and (and (= (type this@@27) RefType) (= (type last@@14) RefType)) (= (type this2) RefType)) (= (type last2) RefType)) (= (heapseg this@@27 last@@14) (heapseg this2 last2))) (and (= this@@27 this2) (= last@@14 last2)))
 :qid |stdinbpl.2412:15|
 :skolemid |100|
 :pattern ( (heapseg this@@27 last@@14) (heapseg this2 last2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|heapseg#sm| arg0@@33 arg1@@14)) (FieldType PredicateType_heapsegType (MapType1Type RefType boolType)))
 :qid |funType:heapseg#sm|
 :pattern ( (|heapseg#sm| arg0@@33 arg1@@14))
)))
(assert (forall ((this@@28 T@U) (last@@15 T@U) (this2@@0 T@U) (last2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@28) RefType) (= (type last@@15) RefType)) (= (type this2@@0) RefType)) (= (type last2@@0) RefType)) (= (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))) (and (= this@@28 this2@@0) (= last@@15 last2@@0)))
 :qid |stdinbpl.2416:15|
 :skolemid |101|
 :pattern ( (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))
)))
(assert (forall ((this@@29 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@1) RefType)) (= (tree this@@29) (tree this2@@1))) (= this@@29 this2@@1))
 :qid |stdinbpl.2219:15|
 :skolemid |94|
 :pattern ( (tree this@@29) (tree this2@@1))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|tree#sm| arg0@@34)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@34))
)))
(assert (forall ((this@@30 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@2) RefType)) (= (|tree#sm| this@@30) (|tree#sm| this2@@2))) (= this@@30 this2@@2))
 :qid |stdinbpl.2223:15|
 :skolemid |95|
 :pattern ( (|tree#sm| this@@30) (|tree#sm| this2@@2))
)))
(assert (forall ((this@@31 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@3) RefType)) (= (heap this@@31) (heap this2@@3))) (= this@@31 this2@@3))
 :qid |stdinbpl.2530:15|
 :skolemid |106|
 :pattern ( (heap this@@31) (heap this2@@3))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|heap#sm| arg0@@35)) (FieldType PredicateType_heapType (MapType1Type RefType boolType)))
 :qid |funType:heap#sm|
 :pattern ( (|heap#sm| arg0@@35))
)))
(assert (forall ((this@@32 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@4) RefType)) (= (|heap#sm| this@@32) (|heap#sm| this2@@4))) (= this@@32 this2@@4))
 :qid |stdinbpl.2534:15|
 :skolemid |107|
 :pattern ( (|heap#sm| this@@32) (|heap#sm| this2@@4))
)))
(assert (forall ((Heap@@28 T@U) (Mask@@10 T@U) (this@@33 T@U) (last@@16 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@33) RefType)) (= (type last@@16) RefType)) (state Heap@@28 Mask@@10)) (= (|segLength'| Heap@@28 this@@33 last@@16) (|segLength#frame| (MapType0Select Heap@@28 null (heapseg this@@33 last@@16)) this@@33 last@@16)))
 :qid |stdinbpl.788:15|
 :skolemid |46|
 :pattern ( (state Heap@@28 Mask@@10) (|segLength'| Heap@@28 this@@33 last@@16))
 :pattern ( (state Heap@@28 Mask@@10) (|segLength#triggerStateless| this@@33 last@@16) (|heapseg#trigger| Heap@@28 (heapseg this@@33 last@@16)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@11 T@U) (this@@34 T@U) (last@@17 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (= (type last@@17) RefType)) (state Heap@@29 Mask@@11)) (= (|segSize'| Heap@@29 this@@34 last@@17) (|segSize#frame| (MapType0Select Heap@@29 null (heapseg this@@34 last@@17)) this@@34 last@@17)))
 :qid |stdinbpl.964:15|
 :skolemid |55|
 :pattern ( (state Heap@@29 Mask@@11) (|segSize'| Heap@@29 this@@34 last@@17))
 :pattern ( (state Heap@@29 Mask@@11) (|segSize#triggerStateless| this@@34 last@@17) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@15 T@U) (arg2@@4 T@U) ) (! (= (type (|segParent#frame| arg0@@36 arg1@@15 arg2@@4)) RefType)
 :qid |funType:segParent#frame|
 :pattern ( (|segParent#frame| arg0@@36 arg1@@15 arg2@@4))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@12 T@U) (this@@35 T@U) (last@@18 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type last@@18) RefType)) (state Heap@@30 Mask@@12)) (= (|segParent'| Heap@@30 this@@35 last@@18) (|segParent#frame| (MapType0Select Heap@@30 null (heapseg this@@35 last@@18)) this@@35 last@@18)))
 :qid |stdinbpl.1343:15|
 :skolemid |69|
 :pattern ( (state Heap@@30 Mask@@12) (|segParent'| Heap@@30 this@@35 last@@18))
 :pattern ( (state Heap@@30 Mask@@12) (|segParent#triggerStateless| this@@35 last@@18) (|heapseg#trigger| Heap@@30 (heapseg this@@35 last@@18)))
)))
(assert (forall ((Heap@@31 T@U) (ExhaleHeap@@2 T@U) (Mask@@13 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13)) (HasDirectPerm Mask@@13 o_1@@0 f_2)) (= (MapType0Select Heap@@31 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@14 T@U) (this@@36 T@U) (last@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (= (type last@@19) RefType)) (and (state Heap@@32 Mask@@14) (< AssumeFunctionsAbove 5))) (= (presorted Heap@@32 this@@36 last@@19)  (and (=> (< 1 (segLength Heap@@32 this@@36 last@@19)) (and (<= (treeDegree Heap@@32 this@@36) (segDegree Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19 0)) (|presorted'| Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19))) (=> (and (< 2 (segLength Heap@@32 this@@36 last@@19)) (= (segDegree Heap@@32 this@@36 last@@19 0) (segDegree Heap@@32 this@@36 last@@19 1))) (< (segDegree Heap@@32 this@@36 last@@19 1) (segDegree Heap@@32 this@@36 last@@19 2))))))
 :qid |stdinbpl.1712:15|
 :skolemid |81|
 :pattern ( (state Heap@@32 Mask@@14) (presorted Heap@@32 this@@36 last@@19))
 :pattern ( (state Heap@@32 Mask@@14) (|presorted#triggerStateless| this@@36 last@@19) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.182:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField degree)))
(assert  (not (IsWandField degree)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField sibling)))
(assert  (not (IsWandField sibling)))
(assert  (not (IsPredicateField child)))
(assert  (not (IsWandField child)))
(assert  (not (IsPredicateField Nodes)))
(assert  (not (IsWandField Nodes)))
(assert  (not (IsPredicateField size)))
(assert  (not (IsWandField size)))
(assert (forall ((Heap@@33 T@U) (ExhaleHeap@@3 T@U) (Mask@@15 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@15) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15)) (succHeap Heap@@33 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@16 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@34 Mask@@16) (< AssumeFunctionsAbove 1))) (= (treeSize Heap@@34 this@@37) (ite (= (U_2_int (MapType0Select Heap@@34 this@@37 degree)) 0) 1 (+ 1 (|segSize'| Heap@@34 (MapType0Select Heap@@34 this@@37 child) null)))))
 :qid |stdinbpl.500:15|
 :skolemid |35|
 :pattern ( (state Heap@@34 Mask@@16) (treeSize Heap@@34 this@@37))
 :pattern ( (state Heap@@34 Mask@@16) (|treeSize#triggerStateless| this@@37) (|tree#trigger| Heap@@34 (tree this@@37)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.170:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@17 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@17) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@17 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@17 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@17 o_2@@0 f_4@@0))
)))
(assert (forall ((Heap@@35 T@U) (Mask@@18 T@U) (this@@38 T@U) (last@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type last@@20) RefType)) (and (state Heap@@35 Mask@@18) (or (< AssumeFunctionsAbove 0) (|sorted#trigger| (MapType0Select Heap@@35 null (heapseg this@@38 last@@20)) this@@38 last@@20)))) (|sorted'| Heap@@35 this@@38 last@@20)) (presorted Heap@@35 this@@38 last@@20))
 :qid |stdinbpl.1488:15|
 :skolemid |76|
 :pattern ( (state Heap@@35 Mask@@18) (|sorted'| Heap@@35 this@@38 last@@20))
)))
(assert (forall ((Heap@@36 T@U) (this@@39 T@U) (last@@21 T@U) ) (!  (=> (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type this@@39) RefType)) (= (type last@@21) RefType)) (and (= (segLength Heap@@36 this@@39 last@@21) (|segLength'| Heap@@36 this@@39 last@@21)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@39 last@@21)))))
 :qid |stdinbpl.771:15|
 :skolemid |43|
 :pattern ( (segLength Heap@@36 this@@39 last@@21))
)))
(assert (forall ((Heap@@37 T@U) (this@@40 T@U) (last@@22 T@U) ) (!  (=> (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type this@@40) RefType)) (= (type last@@22) RefType)) (and (= (segSize Heap@@37 this@@40 last@@22) (|segSize'| Heap@@37 this@@40 last@@22)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@40 last@@22)))))
 :qid |stdinbpl.947:15|
 :skolemid |52|
 :pattern ( (segSize Heap@@37 this@@40 last@@22))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@17 T@U) (arg2@@5 T@U) ) (! (= (type (segParent arg0@@38 arg1@@17 arg2@@5)) RefType)
 :qid |funType:segParent|
 :pattern ( (segParent arg0@@38 arg1@@17 arg2@@5))
)))
(assert (forall ((Heap@@38 T@U) (this@@41 T@U) (last@@23 T@U) ) (!  (=> (and (and (= (type Heap@@38) (MapType0Type RefType)) (= (type this@@41) RefType)) (= (type last@@23) RefType)) (and (= (segParent Heap@@38 this@@41 last@@23) (|segParent'| Heap@@38 this@@41 last@@23)) (dummyFunction (|segParent#triggerStateless| this@@41 last@@23))))
 :qid |stdinbpl.1326:15|
 :skolemid |66|
 :pattern ( (segParent Heap@@38 this@@41 last@@23))
)))
(assert (forall ((Heap@@39 T@U) (Mask@@19 T@U) (this@@42 T@U) (last@@24 T@U) (index@@1 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@39) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (= (type last@@24) RefType)) (and (state Heap@@39 Mask@@19) (or (< AssumeFunctionsAbove 7) (|segDegree#trigger| (MapType0Select Heap@@39 null (heapseg this@@42 last@@24)) this@@42 last@@24 index@@1)))) (and (<= 0 index@@1) (< index@@1 (segLength Heap@@39 this@@42 last@@24)))) (<= 0 (|segDegree'| Heap@@39 this@@42 last@@24 index@@1)))
 :qid |stdinbpl.1147:15|
 :skolemid |63|
 :pattern ( (state Heap@@39 Mask@@19) (|segDegree'| Heap@@39 this@@42 last@@24 index@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@40 T@U) (Mask@@20 T@U) (this@@43 T@U) (last@@25 T@U) (index@@2 Int) ) (!  (=> (and (and (and (and (= (type Heap@@40) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (= (type last@@25) RefType)) (state Heap@@40 Mask@@20)) (= (|segDegree'| Heap@@40 this@@43 last@@25 index@@2) (|segDegree#frame| (MapType0Select Heap@@40 null (heapseg this@@43 last@@25)) this@@43 last@@25 index@@2)))
 :qid |stdinbpl.1141:15|
 :skolemid |62|
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree'| Heap@@40 this@@43 last@@25 index@@2))
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree#triggerStateless| this@@43 last@@25 index@@2) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)))
)))
(assert (forall ((Heap@@41 T@U) (this@@44 T@U) (last@@26 T@U) (index@@3 Int) ) (!  (=> (and (and (= (type Heap@@41) (MapType0Type RefType)) (= (type this@@44) RefType)) (= (type last@@26) RefType)) (and (= (segDegree Heap@@41 this@@44 last@@26 index@@3) (|segDegree'| Heap@@41 this@@44 last@@26 index@@3)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@44 last@@26 index@@3)))))
 :qid |stdinbpl.1124:15|
 :skolemid |59|
 :pattern ( (segDegree Heap@@41 this@@44 last@@26 index@@3))
)))
(assert (forall ((this@@45 T@U) (last@@27 T@U) ) (!  (=> (and (= (type this@@45) RefType) (= (type last@@27) RefType)) (= (getPredWandId (heapseg this@@45 last@@27)) 1))
 :qid |stdinbpl.2406:15|
 :skolemid |99|
 :pattern ( (heapseg this@@45 last@@27))
)))
(assert (forall ((Heap@@42 T@U) (Mask@@21 T@U) (this@@46 T@U) (last@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@42) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@46) RefType)) (= (type last@@28) RefType)) (and (state Heap@@42 Mask@@21) (or (< AssumeFunctionsAbove 1) (|segSize#trigger| (MapType0Select Heap@@42 null (heapseg this@@46 last@@28)) this@@46 last@@28)))) (= this@@46 last@@28)) (= (|segSize'| Heap@@42 this@@46 last@@28) 0))
 :qid |stdinbpl.970:15|
 :skolemid |56|
 :pattern ( (state Heap@@42 Mask@@21) (|segSize'| Heap@@42 this@@46 last@@28))
)))
(assert (forall ((Heap@@43 T@U) (ExhaleHeap@@4 T@U) (Mask@@22 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@43) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22)) (and (HasDirectPerm Mask@@22 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@43 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@43 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@44 T@U) (ExhaleHeap@@5 T@U) (Mask@@23 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@44) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23)) (and (HasDirectPerm Mask@@23 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@44 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@44 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (getPredWandId (tree this@@47)) 0))
 :qid |stdinbpl.2213:15|
 :skolemid |93|
 :pattern ( (tree this@@47))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (getPredWandId (heap this@@48)) 2))
 :qid |stdinbpl.2524:15|
 :skolemid |105|
 :pattern ( (heap this@@48))
)))
(assert (forall ((Mask@@24 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@24) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@24)) (and (>= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@24) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@24) (MapType1Select Mask@@24 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@45 T@U) (Mask@@25 T@U) (this@@49 T@U) (last@@29 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@45) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@49) RefType)) (= (type last@@29) RefType)) (and (state Heap@@45 Mask@@25) (or (< AssumeFunctionsAbove 8) (|segLength#trigger| (MapType0Select Heap@@45 null (heapseg this@@49 last@@29)) this@@49 last@@29)))) (<= 0 (|segLength'| Heap@@45 this@@49 last@@29)))
 :qid |stdinbpl.794:15|
 :skolemid |47|
 :pattern ( (state Heap@@45 Mask@@25) (|segLength'| Heap@@45 this@@49 last@@29))
)))
(assert (forall ((Heap@@46 T@U) (Mask@@26 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@46) (MapType0Type RefType)) (= (type Mask@@26) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (state Heap@@46 Mask@@26)) (= (|treeKey'| Heap@@46 this@@50) (|treeKey#frame| (MapType0Select Heap@@46 null (tree this@@50)) this@@50)))
 :qid |stdinbpl.237:15|
 :skolemid |25|
 :pattern ( (state Heap@@46 Mask@@26) (|treeKey'| Heap@@46 this@@50))
)))
(assert (forall ((Heap@@47 T@U) (Mask@@27 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@47) (MapType0Type RefType)) (= (type Mask@@27) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (state Heap@@47 Mask@@27)) (= (|treeDegree'| Heap@@47 this@@51) (|treeDegree#frame| (MapType0Select Heap@@47 null (tree this@@51)) this@@51)))
 :qid |stdinbpl.366:15|
 :skolemid |30|
 :pattern ( (state Heap@@47 Mask@@27) (|treeDegree'| Heap@@47 this@@51))
)))
(assert (forall ((Heap@@48 T@U) (Mask@@28 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@48) (MapType0Type RefType)) (= (type Mask@@28) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (state Heap@@48 Mask@@28)) (= (|treeSize'| Heap@@48 this@@52) (|treeSize#frame| (MapType0Select Heap@@48 null (tree this@@52)) this@@52)))
 :qid |stdinbpl.507:15|
 :skolemid |36|
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize'| Heap@@48 this@@52))
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize#triggerStateless| this@@52) (|tree#trigger| Heap@@48 (tree this@@52)))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@18 T@U) ) (! (= (type (|treeParent#frame| arg0@@39 arg1@@18)) RefType)
 :qid |funType:treeParent#frame|
 :pattern ( (|treeParent#frame| arg0@@39 arg1@@18))
)))
(assert (forall ((Heap@@49 T@U) (Mask@@29 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@49) (MapType0Type RefType)) (= (type Mask@@29) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (state Heap@@49 Mask@@29)) (= (|treeParent'| Heap@@49 this@@53) (|treeParent#frame| (MapType0Select Heap@@49 null (tree this@@53)) this@@53)))
 :qid |stdinbpl.659:15|
 :skolemid |41|
 :pattern ( (state Heap@@49 Mask@@29) (|treeParent'| Heap@@49 this@@53))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@50 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@50) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@50 o $allocated))) (U_2_bool (MapType0Select Heap@@50 (MapType0Select Heap@@50 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@50 o f))
)))
(assert (forall ((this@@54 T@U) (last@@30 T@U) ) (!  (=> (and (= (type this@@54) RefType) (= (type last@@30) RefType)) (= (PredicateMaskField (heapseg this@@54 last@@30)) (|heapseg#sm| this@@54 last@@30)))
 :qid |stdinbpl.2398:15|
 :skolemid |97|
 :pattern ( (PredicateMaskField (heapseg this@@54 last@@30)))
)))
(assert (forall ((Heap@@51 T@U) (Mask@@30 T@U) (this@@55 T@U) (last@@31 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@51) (MapType0Type RefType)) (= (type Mask@@30) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type last@@31) RefType)) (and (state Heap@@51 Mask@@30) (< AssumeFunctionsAbove 0))) (= (sorted Heap@@51 this@@55 last@@31)  (=> (< 1 (segLength Heap@@51 this@@55 last@@31)) (and (< (treeDegree Heap@@51 this@@55) (segDegree Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31 0)) (|sorted'| Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31)))))
 :qid |stdinbpl.1475:15|
 :skolemid |74|
 :pattern ( (state Heap@@51 Mask@@30) (sorted Heap@@51 this@@55 last@@31))
 :pattern ( (state Heap@@51 Mask@@30) (|sorted#triggerStateless| this@@55 last@@31) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)))
)))
(assert (forall ((this@@56 T@U) ) (!  (=> (= (type this@@56) RefType) (= (PredicateMaskField (tree this@@56)) (|tree#sm| this@@56)))
 :qid |stdinbpl.2205:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (tree this@@56)))
)))
(assert (forall ((this@@57 T@U) ) (!  (=> (= (type this@@57) RefType) (= (PredicateMaskField (heap this@@57)) (|heap#sm| this@@57)))
 :qid |stdinbpl.2516:15|
 :skolemid |103|
 :pattern ( (PredicateMaskField (heap this@@57)))
)))
(assert (forall ((Heap@@52 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@52) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@52 (MapType0Store Heap@@52 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@52 o@@0 f_3 v))
)))
(assert (forall ((Heap@@53 T@U) (Mask@@31 T@U) (this@@58 T@U) ) (!  (=> (and (and (and (= (type Heap@@53) (MapType0Type RefType)) (= (type Mask@@31) (MapType1Type RefType realType))) (= (type this@@58) RefType)) (and (state Heap@@53 Mask@@31) (< AssumeFunctionsAbove 3))) (= (treeKey Heap@@53 this@@58) (U_2_int (MapType0Select Heap@@53 this@@58 key))))
 :qid |stdinbpl.230:15|
 :skolemid |24|
 :pattern ( (state Heap@@53 Mask@@31) (treeKey Heap@@53 this@@58))
 :pattern ( (state Heap@@53 Mask@@31) (|treeKey#triggerStateless| this@@58) (|tree#trigger| Heap@@53 (tree this@@58)))
)))
(assert (forall ((Heap@@54 T@U) (Mask@@32 T@U) (this@@59 T@U) ) (!  (=> (and (and (and (= (type Heap@@54) (MapType0Type RefType)) (= (type Mask@@32) (MapType1Type RefType realType))) (= (type this@@59) RefType)) (and (state Heap@@54 Mask@@32) (< AssumeFunctionsAbove 6))) (= (treeParent Heap@@54 this@@59) (MapType0Select Heap@@54 this@@59 parent)))
 :qid |stdinbpl.652:15|
 :skolemid |40|
 :pattern ( (state Heap@@54 Mask@@32) (treeParent Heap@@54 this@@59))
 :pattern ( (state Heap@@54 Mask@@32) (|treeParent#triggerStateless| this@@59) (|tree#trigger| Heap@@54 (tree this@@59)))
)))
(assert (forall ((Heap@@55 T@U) (Mask@@33 T@U) (this@@60 T@U) ) (!  (=> (and (and (and (= (type Heap@@55) (MapType0Type RefType)) (= (type Mask@@33) (MapType1Type RefType realType))) (= (type this@@60) RefType)) (and (state Heap@@55 Mask@@33) (< AssumeFunctionsAbove 9))) (= (treeDegree Heap@@55 this@@60) (U_2_int (MapType0Select Heap@@55 this@@60 degree))))
 :qid |stdinbpl.359:15|
 :skolemid |29|
 :pattern ( (state Heap@@55 Mask@@33) (treeDegree Heap@@55 this@@60))
 :pattern ( (state Heap@@55 Mask@@33) (|treeDegree#triggerStateless| this@@60) (|tree#trigger| Heap@@55 (tree this@@60)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((Heap@@56 T@U) (Mask@@34 T@U) (this@@61 T@U) (last@@32 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@56) (MapType0Type RefType)) (= (type Mask@@34) (MapType1Type RefType realType))) (= (type this@@61) RefType)) (= (type last@@32) RefType)) (and (state Heap@@56 Mask@@34) (< AssumeFunctionsAbove 2))) (= (validChildren Heap@@56 this@@61 last@@32)  (=> (< 1 (segLength Heap@@56 this@@61 last@@32)) (and (= (treeDegree Heap@@56 this@@61) (+ (segDegree Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32 0) 1)) (|validChildren'| Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32)))))
 :qid |stdinbpl.2013:15|
 :skolemid |87|
 :pattern ( (state Heap@@56 Mask@@34) (validChildren Heap@@56 this@@61 last@@32))
 :pattern ( (state Heap@@56 Mask@@34) (|validChildren#triggerStateless| this@@61 last@@32) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.177:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((Heap@@57 T@U) (Mask@@35 T@U) (this@@62 T@U) (last@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@57) (MapType0Type RefType)) (= (type Mask@@35) (MapType1Type RefType realType))) (= (type this@@62) RefType)) (= (type last@@33) RefType)) (and (state Heap@@57 Mask@@35) (< AssumeFunctionsAbove 4))) (not (= this@@62 last@@33))) (= (segParent Heap@@57 this@@62 last@@33) (treeParent Heap@@57 this@@62)))
 :qid |stdinbpl.1336:15|
 :skolemid |68|
 :pattern ( (state Heap@@57 Mask@@35) (segParent Heap@@57 this@@62 last@@33))
 :pattern ( (state Heap@@57 Mask@@35) (|segParent#triggerStateless| this@@62 last@@33) (|heapseg#trigger| Heap@@57 (heapseg this@@62 last@@33)))
)))
(assert (forall ((Heap@@58 T@U) (this@@63 T@U) (last@@34 T@U) ) (!  (=> (and (and (= (type Heap@@58) (MapType0Type RefType)) (= (type this@@63) RefType)) (= (type last@@34) RefType)) (and (= (sorted Heap@@58 this@@63 last@@34) (|sorted'| Heap@@58 this@@63 last@@34)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@63 last@@34)))))
 :qid |stdinbpl.1465:15|
 :skolemid |72|
 :pattern ( (sorted Heap@@58 this@@63 last@@34))
)))
(assert (forall ((Heap@@59 T@U) (this@@64 T@U) (last@@35 T@U) ) (!  (=> (and (and (= (type Heap@@59) (MapType0Type RefType)) (= (type this@@64) RefType)) (= (type last@@35) RefType)) (and (= (presorted Heap@@59 this@@64 last@@35) (|presorted'| Heap@@59 this@@64 last@@35)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@64 last@@35)))))
 :qid |stdinbpl.1702:15|
 :skolemid |79|
 :pattern ( (presorted Heap@@59 this@@64 last@@35))
)))
(assert (forall ((Heap@@60 T@U) (this@@65 T@U) (last@@36 T@U) ) (!  (=> (and (and (= (type Heap@@60) (MapType0Type RefType)) (= (type this@@65) RefType)) (= (type last@@36) RefType)) (and (= (validChildren Heap@@60 this@@65 last@@36) (|validChildren'| Heap@@60 this@@65 last@@36)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@65 last@@36)))))
 :qid |stdinbpl.2003:15|
 :skolemid |85|
 :pattern ( (validChildren Heap@@60 this@@65 last@@36))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun this@@66 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun Result@0 () Int)
(declare-fun index@@4 () Int)
(declare-fun last@@37 () T@U)
(declare-fun Heap@@61 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@0) (MapType1Type RefType realType)) (= (type this@@66) RefType)) (= (type last@@37) RefType)) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type Heap@@61) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@1) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@2) (MapType0Type RefType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (forall ((arg0@@40 T@U) ) (! (= (type (FrameFragment arg0@@40)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@40))
))) (forall ((arg0@@41 T@U) (arg1@@19 T@U) ) (! (= (type (CombineFrames arg0@@41 arg1@@19)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@41 arg1@@19))
))))
(set-info :boogie-vc-id |segDegree#definedness|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 34) (let ((anon13_correct true))
(let ((anon29_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 21) 18)) anon13_correct)))
(let ((anon29_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@4 null (tree this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@4 null (tree this@@66)))) (=> (= (ControlFlow 0 19) 18) anon13_correct))))))
(let ((anon21_correct  (=> (state Heap@3 Mask@0) (=> (and (= Result@0 (ite (= index@@4 0) (treeDegree Heap@3 this@@66) (segDegree Heap@3 (MapType0Select Heap@3 this@@66 sibling) last@@37 (- index@@4 1)))) (= (ControlFlow 0 12) (- 0 11))) (<= 0 Result@0)))))
(let ((anon32_Else_correct  (=> (= this@@66 last@@37) (=> (and (= Heap@3 Heap@@61) (= (ControlFlow 0 14) 12)) anon21_correct))))
(let ((anon32_Then_correct  (=> (and (and (and (not (= this@@66 last@@37)) (forall ((o_13 T@U) (f_17 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_17))))
(let ((A@@12 (FieldTypeInv0 (type f_17))))
 (=> (and (and (= (type o_13) RefType) (= (type f_17) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@@61 null (|heapseg#sm| this@@66 last@@37)) o_13 f_17)) (U_2_bool (MapType1Select (MapType0Select Heap@@61 null (|tree#sm| this@@66)) o_13 f_17)))) (U_2_bool (MapType1Select newPMask@0 o_13 f_17)))))
 :qid |stdinbpl.1294:33|
 :skolemid |64|
 :pattern ( (MapType1Select newPMask@0 o_13 f_17))
))) (and (= Heap@0 (MapType0Store Heap@@61 null (|heapseg#sm| this@@66 last@@37) newPMask@0)) (= Heap@1 (MapType0Store Heap@0 null (|heapseg#sm| this@@66 last@@37) (MapType1Store (MapType0Select Heap@0 null (|heapseg#sm| this@@66 last@@37)) this@@66 sibling (bool_2_U true)))))) (and (and (forall ((o_14 T@U) (f_18 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_18))))
(let ((A@@13 (FieldTypeInv0 (type f_18))))
 (=> (and (and (= (type o_14) RefType) (= (type f_18) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@1 null (|heapseg#sm| this@@66 last@@37)) o_14 f_18)) (U_2_bool (MapType1Select (MapType0Select Heap@1 null (|heapseg#sm| (MapType0Select Heap@1 this@@66 sibling) last@@37)) o_14 f_18)))) (U_2_bool (MapType1Select newPMask@1 o_14 f_18)))))
 :qid |stdinbpl.1301:33|
 :skolemid |65|
 :pattern ( (MapType1Select newPMask@1 o_14 f_18))
)) (= Heap@2 (MapType0Store Heap@1 null (|heapseg#sm| this@@66 last@@37) newPMask@1))) (and (= Heap@3 Heap@2) (= (ControlFlow 0 13) 12)))) anon21_correct)))
(let ((anon27_Then_correct  (=> (= index@@4 0) (and (and (and (=> (= (ControlFlow 0 22) 13) anon32_Then_correct) (=> (= (ControlFlow 0 22) 14) anon32_Else_correct)) (=> (= (ControlFlow 0 22) 19) anon29_Then_correct)) (=> (= (ControlFlow 0 22) 21) anon29_Else_correct)))))
(let ((anon30_Else_correct  (=> (|segDegree#trigger| (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37)) (MapType0Select Heap@@61 this@@66 sibling) last@@37 (- index@@4 1)) (and (=> (= (ControlFlow 0 15) 13) anon32_Then_correct) (=> (= (ControlFlow 0 15) 14) anon32_Else_correct)))))
(let ((anon17_correct  (=> (= UnfoldingMask@5 (MapType1Store UnfoldingMask@4 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@4 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37))) FullPerm)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= 0 (- index@@4 1))) (=> (<= 0 (- index@@4 1)) (=> (= (ControlFlow 0 6) (- 0 5)) (< (- index@@4 1) (segLength Heap@@61 (MapType0Select Heap@@61 this@@66 sibling) last@@37))))))))
(let ((anon31_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 10) 6)) anon17_correct)))
(let ((anon31_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@4 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@4 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37)))) (=> (= (ControlFlow 0 8) 6) anon17_correct))))))
(let ((anon27_Else_correct  (=> (not (= index@@4 0)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (HasDirectPerm UnfoldingMask@4 this@@66 sibling)) (=> (HasDirectPerm UnfoldingMask@4 this@@66 sibling) (and (and (=> (= (ControlFlow 0 16) 15) anon30_Else_correct) (=> (= (ControlFlow 0 16) 8) anon31_Then_correct)) (=> (= (ControlFlow 0 16) 10) anon31_Else_correct)))))))
(let ((anon9_correct  (=> (state Heap@@61 UnfoldingMask@4) (and (=> (= (ControlFlow 0 23) 22) anon27_Then_correct) (=> (= (ControlFlow 0 23) 16) anon27_Else_correct)))))
(let ((anon26_Else_correct  (=> (= (MapType0Select Heap@@61 this@@66 sibling) last@@37) (=> (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 26) 23)) anon9_correct))))
(let ((anon26_Then_correct  (=> (not (= (MapType0Select Heap@@61 this@@66 sibling) last@@37)) (=> (and (and (state Heap@@61 UnfoldingMask@3) (= (treeParent Heap@@61 this@@66) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 sibling) last@@37))) (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 25) 23))) anon9_correct))))
(let ((anon25_Then_correct  (=> (and (not (= this@@66 last@@37)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 null (tree this@@66) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 null (tree this@@66))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg this@@66 last@@37) (MapType0Select Heap@@61 null (heapseg this@@66 last@@37)) (tree this@@66) (MapType0Select Heap@@61 null (tree this@@66))) (state Heap@@61 UnfoldingMask@1)) (and (not (= this@@66 null)) (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 this@@66 sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 this@@66 sibling)) FullPerm)))))) (and (and (state Heap@@61 UnfoldingMask@2) (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37))) FullPerm))))) (and (InsidePredicate (heapseg this@@66 last@@37) (MapType0Select Heap@@61 null (heapseg this@@66 last@@37)) (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37))) (state Heap@@61 UnfoldingMask@3)))) (and (=> (= (ControlFlow 0 27) 25) anon26_Then_correct) (=> (= (ControlFlow 0 27) 26) anon26_Else_correct))))))
(let ((anon25_Else_correct  (=> (= this@@66 last@@37) (=> (and (= UnfoldingMask@4 UnfoldingMask@0) (= (ControlFlow 0 24) 23)) anon9_correct))))
(let ((anon6_correct  (=> (= UnfoldingMask@0 (MapType1Store Mask@0 null (heapseg this@@66 last@@37) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (heapseg this@@66 last@@37))) FullPerm)))) (and (=> (= (ControlFlow 0 28) 27) anon25_Then_correct) (=> (= (ControlFlow 0 28) 24) anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 31) 28)) anon6_correct)))
(let ((anon24_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heapseg this@@66 last@@37))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heapseg this@@66 last@@37)))) (=> (= (ControlFlow 0 29) 28) anon6_correct))))))
(let ((anon22_Else_correct  (=> (and (and (< index@@4 (segLength Heap@@61 this@@66 last@@37)) (state Heap@@61 Mask@0)) (and (|heapseg#trigger| Heap@@61 (heapseg this@@66 last@@37)) (= (MapType0Select Heap@@61 null (heapseg this@@66 last@@37)) (FrameFragment (ite (not (= this@@66 last@@37)) (CombineFrames (MapType0Select Heap@@61 null (tree this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 sibling)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 sibling) last@@37)) (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 sibling) last@@37)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 32) 29) anon24_Then_correct) (=> (= (ControlFlow 0 32) 31) anon24_Else_correct)))))
(let ((anon3_correct true))
(let ((anon23_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon23_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heapseg this@@66 last@@37))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (heapseg this@@66 last@@37)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (state Heap@@61 ZeroMask) (=> (and (and (and (U_2_bool (MapType0Select Heap@@61 this@@66 $allocated)) (U_2_bool (MapType0Select Heap@@61 last@@37 $allocated))) (and (= AssumeFunctionsAbove 7) (= Mask@0 (MapType1Store ZeroMask null (heapseg this@@66 last@@37) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (heapseg this@@66 last@@37))) FullPerm)))))) (and (and (state Heap@@61 Mask@0) (state Heap@@61 Mask@0)) (and (<= 0 index@@4) (state Heap@@61 Mask@0)))) (and (and (=> (= (ControlFlow 0 33) 32) anon22_Else_correct) (=> (= (ControlFlow 0 33) 2) anon23_Then_correct)) (=> (= (ControlFlow 0 33) 4) anon23_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 34) 33) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun key () T@U)
(declare-fun degree () T@U)
(declare-fun parent () T@U)
(declare-fun sibling () T@U)
(declare-fun child () T@U)
(declare-fun Nodes () T@U)
(declare-fun size () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun segLength (T@U T@U T@U) Int)
(declare-fun |segLength#triggerStateless| (T@U T@U) Int)
(declare-fun |heapseg#trigger| (T@U T@U) Bool)
(declare-fun heapseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |segLength'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_heapsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |treeDegree'| (T@U T@U) Int)
(declare-fun |treeDegree#trigger| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |segDegree'| (T@U T@U T@U Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |segDegree#triggerStateless| (T@U T@U Int) Int)
(declare-fun segSize (T@U T@U T@U) Int)
(declare-fun |segSize#triggerStateless| (T@U T@U) Int)
(declare-fun |treeSize'| (T@U T@U) Int)
(declare-fun |segSize'| (T@U T@U T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |segParent'| (T@U T@U T@U) T@U)
(declare-fun |segParent#triggerStateless| (T@U T@U) T@U)
(declare-fun |sorted'| (T@U T@U T@U) Bool)
(declare-fun |sorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |presorted'| (T@U T@U T@U) Bool)
(declare-fun |presorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |validChildren'| (T@U T@U T@U) Bool)
(declare-fun |validChildren#triggerStateless| (T@U T@U) Bool)
(declare-fun |heapseg#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun heap (T@U) T@U)
(declare-fun PredicateType_heapType () T@T)
(declare-fun |treeKey'| (T@U T@U) Int)
(declare-fun |treeKey#triggerStateless| (T@U) Int)
(declare-fun |treeDegree#triggerStateless| (T@U) Int)
(declare-fun |treeSize#triggerStateless| (T@U) Int)
(declare-fun |treeParent'| (T@U T@U) T@U)
(declare-fun |treeParent#triggerStateless| (T@U) T@U)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |heap#trigger| (T@U T@U) Bool)
(declare-fun |heap#everUsed| (T@U) Bool)
(declare-fun segDegree (T@U T@U T@U Int) Int)
(declare-fun treeDegree (T@U T@U) Int)
(declare-fun |sorted#frame| (T@U T@U T@U) Bool)
(declare-fun |presorted#frame| (T@U T@U T@U) Bool)
(declare-fun |validChildren#frame| (T@U T@U T@U) Bool)
(declare-fun treeKey (T@U T@U) Int)
(declare-fun treeSize (T@U T@U) Int)
(declare-fun treeParent (T@U T@U) T@U)
(declare-fun |heapseg#sm| (T@U T@U) T@U)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun |heap#sm| (T@U) T@U)
(declare-fun |segLength#frame| (T@U T@U T@U) Int)
(declare-fun |segSize#frame| (T@U T@U T@U) Int)
(declare-fun |segParent#frame| (T@U T@U T@U) T@U)
(declare-fun presorted (T@U T@U T@U) Bool)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |sorted#trigger| (T@U T@U T@U) Bool)
(declare-fun segParent (T@U T@U T@U) T@U)
(declare-fun |segDegree#trigger| (T@U T@U T@U Int) Bool)
(declare-fun |segDegree#frame| (T@U T@U T@U Int) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |segSize#trigger| (T@U T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |segLength#trigger| (T@U T@U T@U) Bool)
(declare-fun |treeKey#frame| (T@U T@U) Int)
(declare-fun |treeDegree#frame| (T@U T@U) Int)
(declare-fun |treeSize#frame| (T@U T@U) Int)
(declare-fun |treeParent#frame| (T@U T@U) T@U)
(declare-fun sorted (T@U T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun validChildren (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type key) (FieldType NormalFieldType intType))) (= (type degree) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type parent) (FieldType NormalFieldType RefType))) (= (type sibling) (FieldType NormalFieldType RefType))) (= (type child) (FieldType NormalFieldType RefType))) (= (type Nodes) (FieldType NormalFieldType RefType))) (= (type size) (FieldType NormalFieldType intType))))
(assert (distinct $allocated key degree parent sibling child Nodes size)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_heapsegType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@9 T@U) ) (! (= (type (heapseg arg0@@23 arg1@@9)) (FieldType PredicateType_heapsegType FrameTypeType))
 :qid |funType:heapseg|
 :pattern ( (heapseg arg0@@23 arg1@@9))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (last T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type last) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 8))) (= (segLength Heap this last) (ite (= this last) 0 (+ 1 (|segLength'| Heap (MapType0Select Heap this sibling) last)))))
 :qid |stdinbpl.781:15|
 :skolemid |45|
 :pattern ( (state Heap Mask) (segLength Heap this last))
 :pattern ( (state Heap Mask) (|segLength#triggerStateless| this last) (|heapseg#trigger| Heap (heapseg this last)))
)))
(assert  (and (and (= (type null) RefType) (= (Ctor PredicateType_treeType) 13)) (forall ((arg0@@24 T@U) ) (! (= (type (tree arg0@@24)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (this@@0 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type this@@0) RefType)) (and (state Heap@@0 Mask@@0) (or (< AssumeFunctionsAbove 9) (|treeDegree#trigger| (MapType0Select Heap@@0 null (tree this@@0)) this@@0)))) (<= 0 (|treeDegree'| Heap@@0 this@@0)))
 :qid |stdinbpl.372:15|
 :skolemid |31|
 :pattern ( (state Heap@@0 Mask@@0) (|treeDegree'| Heap@@0 this@@0))
)))
(assert (forall ((Heap@@1 T@U) (Mask@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type Mask@@1) (MapType1Type RefType realType))) (state Heap@@1 Mask@@1)) (GoodMask Mask@@1))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@1 Mask@@1))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@2 T@U) (this@@1 T@U) (last@@0 T@U) (index Int) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type last@@0) RefType)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@1 last@@0 index))))
 :qid |stdinbpl.1128:15|
 :skolemid |60|
 :pattern ( (|segDegree'| Heap@@2 this@@1 last@@0 index))
)))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (this@@2 T@U) (last@@1 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type this@@2) RefType)) (= (type last@@1) RefType)) (and (state Heap@@3 Mask@@2) (< AssumeFunctionsAbove 1))) (= (segSize Heap@@3 this@@2 last@@1) (ite (= this@@2 last@@1) 0 (+ (|treeSize'| Heap@@3 this@@2) (|segSize'| Heap@@3 (MapType0Select Heap@@3 this@@2 sibling) last@@1)))))
 :qid |stdinbpl.957:15|
 :skolemid |54|
 :pattern ( (state Heap@@3 Mask@@2) (segSize Heap@@3 this@@2 last@@1))
 :pattern ( (state Heap@@3 Mask@@2) (|segSize#triggerStateless| this@@2 last@@1) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)))
)))
(assert (forall ((this@@3 T@U) (last@@2 T@U) ) (!  (=> (and (= (type this@@3) RefType) (= (type last@@2) RefType)) (IsPredicateField (heapseg this@@3 last@@2)))
 :qid |stdinbpl.2402:15|
 :skolemid |98|
 :pattern ( (heapseg this@@3 last@@2))
)))
(assert (forall ((Heap@@4 T@U) (this@@4 T@U) (last@@3 T@U) ) (!  (=> (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@4) RefType)) (= (type last@@3) RefType)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@4 last@@3))))
 :qid |stdinbpl.775:15|
 :skolemid |44|
 :pattern ( (|segLength'| Heap@@4 this@@4 last@@3))
)))
(assert (forall ((Heap@@5 T@U) (this@@5 T@U) (last@@4 T@U) ) (!  (=> (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@5) RefType)) (= (type last@@4) RefType)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@5 last@@4))))
 :qid |stdinbpl.951:15|
 :skolemid |53|
 :pattern ( (|segSize'| Heap@@5 this@@5 last@@4))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (= (type (|segParent'| arg0@@25 arg1@@10 arg2@@3)) RefType)
 :qid |funType:segParent'|
 :pattern ( (|segParent'| arg0@@25 arg1@@10 arg2@@3))
)) (forall ((arg0@@26 T@U) (arg1@@11 T@U) ) (! (= (type (|segParent#triggerStateless| arg0@@26 arg1@@11)) RefType)
 :qid |funType:segParent#triggerStateless|
 :pattern ( (|segParent#triggerStateless| arg0@@26 arg1@@11))
))))
(assert (forall ((Heap@@6 T@U) (this@@6 T@U) (last@@5 T@U) ) (!  (=> (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@6) RefType)) (= (type last@@5) RefType)) (dummyFunction (|segParent#triggerStateless| this@@6 last@@5)))
 :qid |stdinbpl.1330:15|
 :skolemid |67|
 :pattern ( (|segParent'| Heap@@6 this@@6 last@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@7 T@U) (last@@6 T@U) ) (!  (=> (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@7) RefType)) (= (type last@@6) RefType)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@7 last@@6))))
 :qid |stdinbpl.1469:15|
 :skolemid |73|
 :pattern ( (|sorted'| Heap@@7 this@@7 last@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@8 T@U) (last@@7 T@U) ) (!  (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@8) RefType)) (= (type last@@7) RefType)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@8 last@@7))))
 :qid |stdinbpl.1706:15|
 :skolemid |80|
 :pattern ( (|presorted'| Heap@@8 this@@8 last@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@9 T@U) (last@@8 T@U) ) (!  (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@9) RefType)) (= (type last@@8) RefType)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@9 last@@8))))
 :qid |stdinbpl.2007:15|
 :skolemid |86|
 :pattern ( (|validChildren'| Heap@@9 this@@9 last@@8))
)))
(assert (forall ((Heap@@10 T@U) (this@@10 T@U) (last@@9 T@U) ) (!  (=> (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@10) RefType)) (= (type last@@9) RefType)) (|heapseg#everUsed| (heapseg this@@10 last@@9)))
 :qid |stdinbpl.2421:15|
 :skolemid |102|
 :pattern ( (|heapseg#trigger| Heap@@10 (heapseg this@@10 last@@9)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap T@U) (Mask@@3 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3)) (and (HasDirectPerm Mask@@3 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@11 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@0 T@U) (Mask@@4 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4)) (and (HasDirectPerm Mask@@4 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@12 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (= (type this@@11) RefType) (IsPredicateField (tree this@@11)))
 :qid |stdinbpl.2209:15|
 :skolemid |92|
 :pattern ( (tree this@@11))
)))
(assert  (and (= (Ctor PredicateType_heapType) 14) (forall ((arg0@@29 T@U) ) (! (= (type (heap arg0@@29)) (FieldType PredicateType_heapType FrameTypeType))
 :qid |funType:heap|
 :pattern ( (heap arg0@@29))
))))
(assert (forall ((this@@12 T@U) ) (!  (=> (= (type this@@12) RefType) (IsPredicateField (heap this@@12)))
 :qid |stdinbpl.2520:15|
 :skolemid |104|
 :pattern ( (heap this@@12))
)))
(assert (forall ((Heap@@13 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@13) RefType)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@13))))
 :qid |stdinbpl.224:15|
 :skolemid |23|
 :pattern ( (|treeKey'| Heap@@13 this@@13))
)))
(assert (forall ((Heap@@14 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@14) RefType)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@14))))
 :qid |stdinbpl.353:15|
 :skolemid |28|
 :pattern ( (|treeDegree'| Heap@@14 this@@14))
)))
(assert (forall ((Heap@@15 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@15) RefType)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@15))))
 :qid |stdinbpl.494:15|
 :skolemid |34|
 :pattern ( (|treeSize'| Heap@@15 this@@15))
)))
(assert  (and (forall ((arg0@@30 T@U) (arg1@@12 T@U) ) (! (= (type (|treeParent'| arg0@@30 arg1@@12)) RefType)
 :qid |funType:treeParent'|
 :pattern ( (|treeParent'| arg0@@30 arg1@@12))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|treeParent#triggerStateless| arg0@@31)) RefType)
 :qid |funType:treeParent#triggerStateless|
 :pattern ( (|treeParent#triggerStateless| arg0@@31))
))))
(assert (forall ((Heap@@16 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@16) RefType)) (dummyFunction (|treeParent#triggerStateless| this@@16)))
 :qid |stdinbpl.646:15|
 :skolemid |39|
 :pattern ( (|treeParent'| Heap@@16 this@@16))
)))
(assert (forall ((Heap@@17 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@17) RefType)) (|tree#everUsed| (tree this@@17)))
 :qid |stdinbpl.2228:15|
 :skolemid |96|
 :pattern ( (|tree#trigger| Heap@@17 (tree this@@17)))
)))
(assert (forall ((Heap@@18 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@18) RefType)) (|heap#everUsed| (heap this@@18)))
 :qid |stdinbpl.2539:15|
 :skolemid |108|
 :pattern ( (|heap#trigger| Heap@@18 (heap this@@18)))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@5 T@U) (this@@19 T@U) (last@@10 T@U) (index@@0 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type this@@19) RefType)) (= (type last@@10) RefType)) (and (state Heap@@19 Mask@@5) (< AssumeFunctionsAbove 7))) (and (<= 0 index@@0) (< index@@0 (segLength Heap@@19 this@@19 last@@10)))) (= (segDegree Heap@@19 this@@19 last@@10 index@@0) (ite (= index@@0 0) (treeDegree Heap@@19 this@@19) (|segDegree'| Heap@@19 (MapType0Select Heap@@19 this@@19 sibling) last@@10 (- index@@0 1)))))
 :qid |stdinbpl.1134:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@5) (segDegree Heap@@19 this@@19 last@@10 index@@0))
 :pattern ( (state Heap@@19 Mask@@5) (|segDegree#triggerStateless| this@@19 last@@10 index@@0) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@6 T@U) (this@@20 T@U) (last@@11 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@20) RefType)) (= (type last@@11) RefType)) (state Heap@@20 Mask@@6)) (= (|sorted'| Heap@@20 this@@20 last@@11) (|sorted#frame| (MapType0Select Heap@@20 null (heapseg this@@20 last@@11)) this@@20 last@@11)))
 :qid |stdinbpl.1482:15|
 :skolemid |75|
 :pattern ( (state Heap@@20 Mask@@6) (|sorted'| Heap@@20 this@@20 last@@11))
 :pattern ( (state Heap@@20 Mask@@6) (|sorted#triggerStateless| this@@20 last@@11) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)))
)))
(assert (forall ((Heap@@21 T@U) (Mask@@7 T@U) (this@@21 T@U) (last@@12 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type last@@12) RefType)) (state Heap@@21 Mask@@7)) (= (|presorted'| Heap@@21 this@@21 last@@12) (|presorted#frame| (MapType0Select Heap@@21 null (heapseg this@@21 last@@12)) this@@21 last@@12)))
 :qid |stdinbpl.1719:15|
 :skolemid |82|
 :pattern ( (state Heap@@21 Mask@@7) (|presorted'| Heap@@21 this@@21 last@@12))
 :pattern ( (state Heap@@21 Mask@@7) (|presorted#triggerStateless| this@@21 last@@12) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)))
)))
(assert (forall ((Heap@@22 T@U) (Mask@@8 T@U) (this@@22 T@U) (last@@13 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type last@@13) RefType)) (state Heap@@22 Mask@@8)) (= (|validChildren'| Heap@@22 this@@22 last@@13) (|validChildren#frame| (MapType0Select Heap@@22 null (heapseg this@@22 last@@13)) this@@22 last@@13)))
 :qid |stdinbpl.2020:15|
 :skolemid |88|
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren'| Heap@@22 this@@22 last@@13))
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren#triggerStateless| this@@22 last@@13) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)))
)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@1 T@U) (Mask@@9 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9)) (U_2_bool (MapType0Select Heap@@23 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@24 T@U) (this@@23 T@U) ) (!  (=> (and (= (type Heap@@24) (MapType0Type RefType)) (= (type this@@23) RefType)) (and (= (treeKey Heap@@24 this@@23) (|treeKey'| Heap@@24 this@@23)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@23)))))
 :qid |stdinbpl.220:15|
 :skolemid |22|
 :pattern ( (treeKey Heap@@24 this@@23))
)))
(assert (forall ((Heap@@25 T@U) (this@@24 T@U) ) (!  (=> (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@24) RefType)) (and (= (treeDegree Heap@@25 this@@24) (|treeDegree'| Heap@@25 this@@24)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@24)))))
 :qid |stdinbpl.349:15|
 :skolemid |27|
 :pattern ( (treeDegree Heap@@25 this@@24))
)))
(assert (forall ((Heap@@26 T@U) (this@@25 T@U) ) (!  (=> (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@25) RefType)) (and (= (treeSize Heap@@26 this@@25) (|treeSize'| Heap@@26 this@@25)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@25)))))
 :qid |stdinbpl.490:15|
 :skolemid |33|
 :pattern ( (treeSize Heap@@26 this@@25))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@13 T@U) ) (! (= (type (treeParent arg0@@32 arg1@@13)) RefType)
 :qid |funType:treeParent|
 :pattern ( (treeParent arg0@@32 arg1@@13))
)))
(assert (forall ((Heap@@27 T@U) (this@@26 T@U) ) (!  (=> (and (= (type Heap@@27) (MapType0Type RefType)) (= (type this@@26) RefType)) (and (= (treeParent Heap@@27 this@@26) (|treeParent'| Heap@@27 this@@26)) (dummyFunction (|treeParent#triggerStateless| this@@26))))
 :qid |stdinbpl.642:15|
 :skolemid |38|
 :pattern ( (treeParent Heap@@27 this@@26))
)))
(assert (forall ((this@@27 T@U) (last@@14 T@U) (this2 T@U) (last2 T@U) ) (!  (=> (and (and (and (and (= (type this@@27) RefType) (= (type last@@14) RefType)) (= (type this2) RefType)) (= (type last2) RefType)) (= (heapseg this@@27 last@@14) (heapseg this2 last2))) (and (= this@@27 this2) (= last@@14 last2)))
 :qid |stdinbpl.2412:15|
 :skolemid |100|
 :pattern ( (heapseg this@@27 last@@14) (heapseg this2 last2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|heapseg#sm| arg0@@33 arg1@@14)) (FieldType PredicateType_heapsegType (MapType1Type RefType boolType)))
 :qid |funType:heapseg#sm|
 :pattern ( (|heapseg#sm| arg0@@33 arg1@@14))
)))
(assert (forall ((this@@28 T@U) (last@@15 T@U) (this2@@0 T@U) (last2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@28) RefType) (= (type last@@15) RefType)) (= (type this2@@0) RefType)) (= (type last2@@0) RefType)) (= (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))) (and (= this@@28 this2@@0) (= last@@15 last2@@0)))
 :qid |stdinbpl.2416:15|
 :skolemid |101|
 :pattern ( (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))
)))
(assert (forall ((this@@29 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@1) RefType)) (= (tree this@@29) (tree this2@@1))) (= this@@29 this2@@1))
 :qid |stdinbpl.2219:15|
 :skolemid |94|
 :pattern ( (tree this@@29) (tree this2@@1))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|tree#sm| arg0@@34)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@34))
)))
(assert (forall ((this@@30 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@2) RefType)) (= (|tree#sm| this@@30) (|tree#sm| this2@@2))) (= this@@30 this2@@2))
 :qid |stdinbpl.2223:15|
 :skolemid |95|
 :pattern ( (|tree#sm| this@@30) (|tree#sm| this2@@2))
)))
(assert (forall ((this@@31 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@3) RefType)) (= (heap this@@31) (heap this2@@3))) (= this@@31 this2@@3))
 :qid |stdinbpl.2530:15|
 :skolemid |106|
 :pattern ( (heap this@@31) (heap this2@@3))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|heap#sm| arg0@@35)) (FieldType PredicateType_heapType (MapType1Type RefType boolType)))
 :qid |funType:heap#sm|
 :pattern ( (|heap#sm| arg0@@35))
)))
(assert (forall ((this@@32 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@4) RefType)) (= (|heap#sm| this@@32) (|heap#sm| this2@@4))) (= this@@32 this2@@4))
 :qid |stdinbpl.2534:15|
 :skolemid |107|
 :pattern ( (|heap#sm| this@@32) (|heap#sm| this2@@4))
)))
(assert (forall ((Heap@@28 T@U) (Mask@@10 T@U) (this@@33 T@U) (last@@16 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@33) RefType)) (= (type last@@16) RefType)) (state Heap@@28 Mask@@10)) (= (|segLength'| Heap@@28 this@@33 last@@16) (|segLength#frame| (MapType0Select Heap@@28 null (heapseg this@@33 last@@16)) this@@33 last@@16)))
 :qid |stdinbpl.788:15|
 :skolemid |46|
 :pattern ( (state Heap@@28 Mask@@10) (|segLength'| Heap@@28 this@@33 last@@16))
 :pattern ( (state Heap@@28 Mask@@10) (|segLength#triggerStateless| this@@33 last@@16) (|heapseg#trigger| Heap@@28 (heapseg this@@33 last@@16)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@11 T@U) (this@@34 T@U) (last@@17 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (= (type last@@17) RefType)) (state Heap@@29 Mask@@11)) (= (|segSize'| Heap@@29 this@@34 last@@17) (|segSize#frame| (MapType0Select Heap@@29 null (heapseg this@@34 last@@17)) this@@34 last@@17)))
 :qid |stdinbpl.964:15|
 :skolemid |55|
 :pattern ( (state Heap@@29 Mask@@11) (|segSize'| Heap@@29 this@@34 last@@17))
 :pattern ( (state Heap@@29 Mask@@11) (|segSize#triggerStateless| this@@34 last@@17) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@15 T@U) (arg2@@4 T@U) ) (! (= (type (|segParent#frame| arg0@@36 arg1@@15 arg2@@4)) RefType)
 :qid |funType:segParent#frame|
 :pattern ( (|segParent#frame| arg0@@36 arg1@@15 arg2@@4))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@12 T@U) (this@@35 T@U) (last@@18 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type last@@18) RefType)) (state Heap@@30 Mask@@12)) (= (|segParent'| Heap@@30 this@@35 last@@18) (|segParent#frame| (MapType0Select Heap@@30 null (heapseg this@@35 last@@18)) this@@35 last@@18)))
 :qid |stdinbpl.1343:15|
 :skolemid |69|
 :pattern ( (state Heap@@30 Mask@@12) (|segParent'| Heap@@30 this@@35 last@@18))
 :pattern ( (state Heap@@30 Mask@@12) (|segParent#triggerStateless| this@@35 last@@18) (|heapseg#trigger| Heap@@30 (heapseg this@@35 last@@18)))
)))
(assert (forall ((Heap@@31 T@U) (ExhaleHeap@@2 T@U) (Mask@@13 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13)) (HasDirectPerm Mask@@13 o_1@@0 f_2)) (= (MapType0Select Heap@@31 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@14 T@U) (this@@36 T@U) (last@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (= (type last@@19) RefType)) (and (state Heap@@32 Mask@@14) (< AssumeFunctionsAbove 5))) (= (presorted Heap@@32 this@@36 last@@19)  (and (=> (< 1 (segLength Heap@@32 this@@36 last@@19)) (and (<= (treeDegree Heap@@32 this@@36) (segDegree Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19 0)) (|presorted'| Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19))) (=> (and (< 2 (segLength Heap@@32 this@@36 last@@19)) (= (segDegree Heap@@32 this@@36 last@@19 0) (segDegree Heap@@32 this@@36 last@@19 1))) (< (segDegree Heap@@32 this@@36 last@@19 1) (segDegree Heap@@32 this@@36 last@@19 2))))))
 :qid |stdinbpl.1712:15|
 :skolemid |81|
 :pattern ( (state Heap@@32 Mask@@14) (presorted Heap@@32 this@@36 last@@19))
 :pattern ( (state Heap@@32 Mask@@14) (|presorted#triggerStateless| this@@36 last@@19) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.182:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField degree)))
(assert  (not (IsWandField degree)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField sibling)))
(assert  (not (IsWandField sibling)))
(assert  (not (IsPredicateField child)))
(assert  (not (IsWandField child)))
(assert  (not (IsPredicateField Nodes)))
(assert  (not (IsWandField Nodes)))
(assert  (not (IsPredicateField size)))
(assert  (not (IsWandField size)))
(assert (forall ((Heap@@33 T@U) (ExhaleHeap@@3 T@U) (Mask@@15 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@15) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15)) (succHeap Heap@@33 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@16 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@34 Mask@@16) (< AssumeFunctionsAbove 1))) (= (treeSize Heap@@34 this@@37) (ite (= (U_2_int (MapType0Select Heap@@34 this@@37 degree)) 0) 1 (+ 1 (|segSize'| Heap@@34 (MapType0Select Heap@@34 this@@37 child) null)))))
 :qid |stdinbpl.500:15|
 :skolemid |35|
 :pattern ( (state Heap@@34 Mask@@16) (treeSize Heap@@34 this@@37))
 :pattern ( (state Heap@@34 Mask@@16) (|treeSize#triggerStateless| this@@37) (|tree#trigger| Heap@@34 (tree this@@37)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.170:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@17 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@17) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@17 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@17 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@17 o_2@@0 f_4@@0))
)))
(assert (forall ((Heap@@35 T@U) (Mask@@18 T@U) (this@@38 T@U) (last@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type last@@20) RefType)) (and (state Heap@@35 Mask@@18) (or (< AssumeFunctionsAbove 0) (|sorted#trigger| (MapType0Select Heap@@35 null (heapseg this@@38 last@@20)) this@@38 last@@20)))) (|sorted'| Heap@@35 this@@38 last@@20)) (presorted Heap@@35 this@@38 last@@20))
 :qid |stdinbpl.1488:15|
 :skolemid |76|
 :pattern ( (state Heap@@35 Mask@@18) (|sorted'| Heap@@35 this@@38 last@@20))
)))
(assert (forall ((Heap@@36 T@U) (this@@39 T@U) (last@@21 T@U) ) (!  (=> (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type this@@39) RefType)) (= (type last@@21) RefType)) (and (= (segLength Heap@@36 this@@39 last@@21) (|segLength'| Heap@@36 this@@39 last@@21)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@39 last@@21)))))
 :qid |stdinbpl.771:15|
 :skolemid |43|
 :pattern ( (segLength Heap@@36 this@@39 last@@21))
)))
(assert (forall ((Heap@@37 T@U) (this@@40 T@U) (last@@22 T@U) ) (!  (=> (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type this@@40) RefType)) (= (type last@@22) RefType)) (and (= (segSize Heap@@37 this@@40 last@@22) (|segSize'| Heap@@37 this@@40 last@@22)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@40 last@@22)))))
 :qid |stdinbpl.947:15|
 :skolemid |52|
 :pattern ( (segSize Heap@@37 this@@40 last@@22))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@17 T@U) (arg2@@5 T@U) ) (! (= (type (segParent arg0@@38 arg1@@17 arg2@@5)) RefType)
 :qid |funType:segParent|
 :pattern ( (segParent arg0@@38 arg1@@17 arg2@@5))
)))
(assert (forall ((Heap@@38 T@U) (this@@41 T@U) (last@@23 T@U) ) (!  (=> (and (and (= (type Heap@@38) (MapType0Type RefType)) (= (type this@@41) RefType)) (= (type last@@23) RefType)) (and (= (segParent Heap@@38 this@@41 last@@23) (|segParent'| Heap@@38 this@@41 last@@23)) (dummyFunction (|segParent#triggerStateless| this@@41 last@@23))))
 :qid |stdinbpl.1326:15|
 :skolemid |66|
 :pattern ( (segParent Heap@@38 this@@41 last@@23))
)))
(assert (forall ((Heap@@39 T@U) (Mask@@19 T@U) (this@@42 T@U) (last@@24 T@U) (index@@1 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@39) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (= (type last@@24) RefType)) (and (state Heap@@39 Mask@@19) (or (< AssumeFunctionsAbove 7) (|segDegree#trigger| (MapType0Select Heap@@39 null (heapseg this@@42 last@@24)) this@@42 last@@24 index@@1)))) (and (<= 0 index@@1) (< index@@1 (segLength Heap@@39 this@@42 last@@24)))) (<= 0 (|segDegree'| Heap@@39 this@@42 last@@24 index@@1)))
 :qid |stdinbpl.1147:15|
 :skolemid |63|
 :pattern ( (state Heap@@39 Mask@@19) (|segDegree'| Heap@@39 this@@42 last@@24 index@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@40 T@U) (Mask@@20 T@U) (this@@43 T@U) (last@@25 T@U) (index@@2 Int) ) (!  (=> (and (and (and (and (= (type Heap@@40) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (= (type last@@25) RefType)) (state Heap@@40 Mask@@20)) (= (|segDegree'| Heap@@40 this@@43 last@@25 index@@2) (|segDegree#frame| (MapType0Select Heap@@40 null (heapseg this@@43 last@@25)) this@@43 last@@25 index@@2)))
 :qid |stdinbpl.1141:15|
 :skolemid |62|
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree'| Heap@@40 this@@43 last@@25 index@@2))
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree#triggerStateless| this@@43 last@@25 index@@2) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)))
)))
(assert (forall ((Heap@@41 T@U) (this@@44 T@U) (last@@26 T@U) (index@@3 Int) ) (!  (=> (and (and (= (type Heap@@41) (MapType0Type RefType)) (= (type this@@44) RefType)) (= (type last@@26) RefType)) (and (= (segDegree Heap@@41 this@@44 last@@26 index@@3) (|segDegree'| Heap@@41 this@@44 last@@26 index@@3)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@44 last@@26 index@@3)))))
 :qid |stdinbpl.1124:15|
 :skolemid |59|
 :pattern ( (segDegree Heap@@41 this@@44 last@@26 index@@3))
)))
(assert (forall ((this@@45 T@U) (last@@27 T@U) ) (!  (=> (and (= (type this@@45) RefType) (= (type last@@27) RefType)) (= (getPredWandId (heapseg this@@45 last@@27)) 1))
 :qid |stdinbpl.2406:15|
 :skolemid |99|
 :pattern ( (heapseg this@@45 last@@27))
)))
(assert (forall ((Heap@@42 T@U) (Mask@@21 T@U) (this@@46 T@U) (last@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@42) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@46) RefType)) (= (type last@@28) RefType)) (and (state Heap@@42 Mask@@21) (or (< AssumeFunctionsAbove 1) (|segSize#trigger| (MapType0Select Heap@@42 null (heapseg this@@46 last@@28)) this@@46 last@@28)))) (= this@@46 last@@28)) (= (|segSize'| Heap@@42 this@@46 last@@28) 0))
 :qid |stdinbpl.970:15|
 :skolemid |56|
 :pattern ( (state Heap@@42 Mask@@21) (|segSize'| Heap@@42 this@@46 last@@28))
)))
(assert (forall ((Heap@@43 T@U) (ExhaleHeap@@4 T@U) (Mask@@22 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@43) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22)) (and (HasDirectPerm Mask@@22 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@43 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@43 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@44 T@U) (ExhaleHeap@@5 T@U) (Mask@@23 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@44) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23)) (and (HasDirectPerm Mask@@23 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@44 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@44 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (getPredWandId (tree this@@47)) 0))
 :qid |stdinbpl.2213:15|
 :skolemid |93|
 :pattern ( (tree this@@47))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (getPredWandId (heap this@@48)) 2))
 :qid |stdinbpl.2524:15|
 :skolemid |105|
 :pattern ( (heap this@@48))
)))
(assert (forall ((Mask@@24 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@24) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@24)) (and (>= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@24) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@24) (MapType1Select Mask@@24 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@45 T@U) (Mask@@25 T@U) (this@@49 T@U) (last@@29 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@45) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@49) RefType)) (= (type last@@29) RefType)) (and (state Heap@@45 Mask@@25) (or (< AssumeFunctionsAbove 8) (|segLength#trigger| (MapType0Select Heap@@45 null (heapseg this@@49 last@@29)) this@@49 last@@29)))) (<= 0 (|segLength'| Heap@@45 this@@49 last@@29)))
 :qid |stdinbpl.794:15|
 :skolemid |47|
 :pattern ( (state Heap@@45 Mask@@25) (|segLength'| Heap@@45 this@@49 last@@29))
)))
(assert (forall ((Heap@@46 T@U) (Mask@@26 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@46) (MapType0Type RefType)) (= (type Mask@@26) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (state Heap@@46 Mask@@26)) (= (|treeKey'| Heap@@46 this@@50) (|treeKey#frame| (MapType0Select Heap@@46 null (tree this@@50)) this@@50)))
 :qid |stdinbpl.237:15|
 :skolemid |25|
 :pattern ( (state Heap@@46 Mask@@26) (|treeKey'| Heap@@46 this@@50))
)))
(assert (forall ((Heap@@47 T@U) (Mask@@27 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@47) (MapType0Type RefType)) (= (type Mask@@27) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (state Heap@@47 Mask@@27)) (= (|treeDegree'| Heap@@47 this@@51) (|treeDegree#frame| (MapType0Select Heap@@47 null (tree this@@51)) this@@51)))
 :qid |stdinbpl.366:15|
 :skolemid |30|
 :pattern ( (state Heap@@47 Mask@@27) (|treeDegree'| Heap@@47 this@@51))
)))
(assert (forall ((Heap@@48 T@U) (Mask@@28 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@48) (MapType0Type RefType)) (= (type Mask@@28) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (state Heap@@48 Mask@@28)) (= (|treeSize'| Heap@@48 this@@52) (|treeSize#frame| (MapType0Select Heap@@48 null (tree this@@52)) this@@52)))
 :qid |stdinbpl.507:15|
 :skolemid |36|
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize'| Heap@@48 this@@52))
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize#triggerStateless| this@@52) (|tree#trigger| Heap@@48 (tree this@@52)))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@18 T@U) ) (! (= (type (|treeParent#frame| arg0@@39 arg1@@18)) RefType)
 :qid |funType:treeParent#frame|
 :pattern ( (|treeParent#frame| arg0@@39 arg1@@18))
)))
(assert (forall ((Heap@@49 T@U) (Mask@@29 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@49) (MapType0Type RefType)) (= (type Mask@@29) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (state Heap@@49 Mask@@29)) (= (|treeParent'| Heap@@49 this@@53) (|treeParent#frame| (MapType0Select Heap@@49 null (tree this@@53)) this@@53)))
 :qid |stdinbpl.659:15|
 :skolemid |41|
 :pattern ( (state Heap@@49 Mask@@29) (|treeParent'| Heap@@49 this@@53))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@50 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@50) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@50 o $allocated))) (U_2_bool (MapType0Select Heap@@50 (MapType0Select Heap@@50 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@50 o f))
)))
(assert (forall ((this@@54 T@U) (last@@30 T@U) ) (!  (=> (and (= (type this@@54) RefType) (= (type last@@30) RefType)) (= (PredicateMaskField (heapseg this@@54 last@@30)) (|heapseg#sm| this@@54 last@@30)))
 :qid |stdinbpl.2398:15|
 :skolemid |97|
 :pattern ( (PredicateMaskField (heapseg this@@54 last@@30)))
)))
(assert (forall ((Heap@@51 T@U) (Mask@@30 T@U) (this@@55 T@U) (last@@31 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@51) (MapType0Type RefType)) (= (type Mask@@30) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type last@@31) RefType)) (and (state Heap@@51 Mask@@30) (< AssumeFunctionsAbove 0))) (= (sorted Heap@@51 this@@55 last@@31)  (=> (< 1 (segLength Heap@@51 this@@55 last@@31)) (and (< (treeDegree Heap@@51 this@@55) (segDegree Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31 0)) (|sorted'| Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31)))))
 :qid |stdinbpl.1475:15|
 :skolemid |74|
 :pattern ( (state Heap@@51 Mask@@30) (sorted Heap@@51 this@@55 last@@31))
 :pattern ( (state Heap@@51 Mask@@30) (|sorted#triggerStateless| this@@55 last@@31) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)))
)))
(assert (forall ((this@@56 T@U) ) (!  (=> (= (type this@@56) RefType) (= (PredicateMaskField (tree this@@56)) (|tree#sm| this@@56)))
 :qid |stdinbpl.2205:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (tree this@@56)))
)))
(assert (forall ((this@@57 T@U) ) (!  (=> (= (type this@@57) RefType) (= (PredicateMaskField (heap this@@57)) (|heap#sm| this@@57)))
 :qid |stdinbpl.2516:15|
 :skolemid |103|
 :pattern ( (PredicateMaskField (heap this@@57)))
)))
(assert (forall ((Heap@@52 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@52) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@52 (MapType0Store Heap@@52 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@52 o@@0 f_3 v))
)))
(assert (forall ((Heap@@53 T@U) (Mask@@31 T@U) (this@@58 T@U) ) (!  (=> (and (and (and (= (type Heap@@53) (MapType0Type RefType)) (= (type Mask@@31) (MapType1Type RefType realType))) (= (type this@@58) RefType)) (and (state Heap@@53 Mask@@31) (< AssumeFunctionsAbove 3))) (= (treeKey Heap@@53 this@@58) (U_2_int (MapType0Select Heap@@53 this@@58 key))))
 :qid |stdinbpl.230:15|
 :skolemid |24|
 :pattern ( (state Heap@@53 Mask@@31) (treeKey Heap@@53 this@@58))
 :pattern ( (state Heap@@53 Mask@@31) (|treeKey#triggerStateless| this@@58) (|tree#trigger| Heap@@53 (tree this@@58)))
)))
(assert (forall ((Heap@@54 T@U) (Mask@@32 T@U) (this@@59 T@U) ) (!  (=> (and (and (and (= (type Heap@@54) (MapType0Type RefType)) (= (type Mask@@32) (MapType1Type RefType realType))) (= (type this@@59) RefType)) (and (state Heap@@54 Mask@@32) (< AssumeFunctionsAbove 6))) (= (treeParent Heap@@54 this@@59) (MapType0Select Heap@@54 this@@59 parent)))
 :qid |stdinbpl.652:15|
 :skolemid |40|
 :pattern ( (state Heap@@54 Mask@@32) (treeParent Heap@@54 this@@59))
 :pattern ( (state Heap@@54 Mask@@32) (|treeParent#triggerStateless| this@@59) (|tree#trigger| Heap@@54 (tree this@@59)))
)))
(assert (forall ((Heap@@55 T@U) (Mask@@33 T@U) (this@@60 T@U) ) (!  (=> (and (and (and (= (type Heap@@55) (MapType0Type RefType)) (= (type Mask@@33) (MapType1Type RefType realType))) (= (type this@@60) RefType)) (and (state Heap@@55 Mask@@33) (< AssumeFunctionsAbove 9))) (= (treeDegree Heap@@55 this@@60) (U_2_int (MapType0Select Heap@@55 this@@60 degree))))
 :qid |stdinbpl.359:15|
 :skolemid |29|
 :pattern ( (state Heap@@55 Mask@@33) (treeDegree Heap@@55 this@@60))
 :pattern ( (state Heap@@55 Mask@@33) (|treeDegree#triggerStateless| this@@60) (|tree#trigger| Heap@@55 (tree this@@60)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((Heap@@56 T@U) (Mask@@34 T@U) (this@@61 T@U) (last@@32 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@56) (MapType0Type RefType)) (= (type Mask@@34) (MapType1Type RefType realType))) (= (type this@@61) RefType)) (= (type last@@32) RefType)) (and (state Heap@@56 Mask@@34) (< AssumeFunctionsAbove 2))) (= (validChildren Heap@@56 this@@61 last@@32)  (=> (< 1 (segLength Heap@@56 this@@61 last@@32)) (and (= (treeDegree Heap@@56 this@@61) (+ (segDegree Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32 0) 1)) (|validChildren'| Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32)))))
 :qid |stdinbpl.2013:15|
 :skolemid |87|
 :pattern ( (state Heap@@56 Mask@@34) (validChildren Heap@@56 this@@61 last@@32))
 :pattern ( (state Heap@@56 Mask@@34) (|validChildren#triggerStateless| this@@61 last@@32) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.177:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((Heap@@57 T@U) (Mask@@35 T@U) (this@@62 T@U) (last@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@57) (MapType0Type RefType)) (= (type Mask@@35) (MapType1Type RefType realType))) (= (type this@@62) RefType)) (= (type last@@33) RefType)) (and (state Heap@@57 Mask@@35) (< AssumeFunctionsAbove 4))) (not (= this@@62 last@@33))) (= (segParent Heap@@57 this@@62 last@@33) (treeParent Heap@@57 this@@62)))
 :qid |stdinbpl.1336:15|
 :skolemid |68|
 :pattern ( (state Heap@@57 Mask@@35) (segParent Heap@@57 this@@62 last@@33))
 :pattern ( (state Heap@@57 Mask@@35) (|segParent#triggerStateless| this@@62 last@@33) (|heapseg#trigger| Heap@@57 (heapseg this@@62 last@@33)))
)))
(assert (forall ((Heap@@58 T@U) (this@@63 T@U) (last@@34 T@U) ) (!  (=> (and (and (= (type Heap@@58) (MapType0Type RefType)) (= (type this@@63) RefType)) (= (type last@@34) RefType)) (and (= (sorted Heap@@58 this@@63 last@@34) (|sorted'| Heap@@58 this@@63 last@@34)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@63 last@@34)))))
 :qid |stdinbpl.1465:15|
 :skolemid |72|
 :pattern ( (sorted Heap@@58 this@@63 last@@34))
)))
(assert (forall ((Heap@@59 T@U) (this@@64 T@U) (last@@35 T@U) ) (!  (=> (and (and (= (type Heap@@59) (MapType0Type RefType)) (= (type this@@64) RefType)) (= (type last@@35) RefType)) (and (= (presorted Heap@@59 this@@64 last@@35) (|presorted'| Heap@@59 this@@64 last@@35)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@64 last@@35)))))
 :qid |stdinbpl.1702:15|
 :skolemid |79|
 :pattern ( (presorted Heap@@59 this@@64 last@@35))
)))
(assert (forall ((Heap@@60 T@U) (this@@65 T@U) (last@@36 T@U) ) (!  (=> (and (and (= (type Heap@@60) (MapType0Type RefType)) (= (type this@@65) RefType)) (= (type last@@36) RefType)) (and (= (validChildren Heap@@60 this@@65 last@@36) (|validChildren'| Heap@@60 this@@65 last@@36)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@65 last@@36)))))
 :qid |stdinbpl.2003:15|
 :skolemid |85|
 :pattern ( (validChildren Heap@@60 this@@65 last@@36))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@215 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun binHeap () T@U)
(declare-fun Mask@216 () T@U)
(declare-fun Heap@@61 () T@U)
(declare-fun this@@66 () T@U)
(declare-fun PostMask@2 () T@U)
(declare-fun PostMask@1 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun Mask@168 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun prevTemp@0 () T@U)
(declare-fun Mask@209 () T@U)
(declare-fun Mask@172 () T@U)
(declare-fun nextTemp@1 () T@U)
(declare-fun temp@1 () T@U)
(declare-fun Mask@211 () T@U)
(declare-fun Mask@174 () T@U)
(declare-fun Mask@199 () T@U)
(declare-fun Mask@175 () T@U)
(declare-fun Mask@200 () T@U)
(declare-fun Mask@201 () T@U)
(declare-fun Mask@189 () T@U)
(declare-fun Mask@190 () T@U)
(declare-fun Mask@192 () T@U)
(declare-fun Mask@186 () T@U)
(declare-fun Mask@178 () T@U)
(declare-fun Mask@173 () T@U)
(declare-fun Mask@170 () T@U)
(declare-fun Mask@171 () T@U)
(declare-fun Mask@169 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun Mask@165 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Heap@114 () T@U)
(declare-fun temp@3 () T@U)
(declare-fun prevTemp@1 () T@U)
(declare-fun nextTemp@2 () T@U)
(declare-fun Mask@162 () T@U)
(declare-fun Mask@161 () T@U)
(declare-fun Mask@163 () T@U)
(declare-fun Mask@160 () T@U)
(declare-fun Mask@159 () T@U)
(declare-fun Mask@158 () T@U)
(declare-fun Mask@157 () T@U)
(declare-fun Mask@156 () T@U)
(declare-fun Mask@155 () T@U)
(declare-fun Mask@154 () T@U)
(declare-fun Heap@113 () T@U)
(declare-fun Mask@153 () T@U)
(declare-fun Heap@112 () T@U)
(declare-fun Mask@152 () T@U)
(declare-fun Heap@108 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun Heap@109 () T@U)
(declare-fun Heap@110 () T@U)
(declare-fun newPMask@19 () T@U)
(declare-fun Heap@111 () T@U)
(declare-fun Heap@106 () T@U)
(declare-fun Heap@107 () T@U)
(declare-fun freshVersion@11 () T@U)
(declare-fun Mask@151 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun Mask@150 () T@U)
(declare-fun Mask@149 () T@U)
(declare-fun Mask@148 () T@U)
(declare-fun ExhaleHeap@6 () T@U)
(declare-fun Mask@147 () T@U)
(declare-fun arg_a@0 () T@U)
(declare-fun Heap@105 () T@U)
(declare-fun Mask@145 () T@U)
(declare-fun Mask@146 () T@U)
(declare-fun Mask@144 () T@U)
(declare-fun Mask@143 () T@U)
(declare-fun Mask@142 () T@U)
(declare-fun Mask@141 () T@U)
(declare-fun Mask@140 () T@U)
(declare-fun Heap@101 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun Heap@102 () T@U)
(declare-fun Heap@103 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@104 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun Heap@99 () T@U)
(declare-fun Heap@100 () T@U)
(declare-fun freshVersion@10 () T@U)
(declare-fun Mask@139 () T@U)
(declare-fun Mask@138 () T@U)
(declare-fun Mask@137 () T@U)
(declare-fun Mask@136 () T@U)
(declare-fun Mask@135 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun Heap@97 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun freshVersion@9 () T@U)
(declare-fun Mask@134 () T@U)
(declare-fun Mask@133 () T@U)
(declare-fun Mask@132 () T@U)
(declare-fun Mask@131 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun Mask@128 () T@U)
(declare-fun temp@2 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Mask@127 () T@U)
(declare-fun Heap@82 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun freshVersion@8 () T@U)
(declare-fun Mask@126 () T@U)
(declare-fun Mask@125 () T@U)
(declare-fun Mask@124 () T@U)
(declare-fun Mask@123 () T@U)
(declare-fun Mask@122 () T@U)
(declare-fun Mask@121 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun freshVersion@7 () T@U)
(declare-fun Mask@120 () T@U)
(declare-fun Mask@119 () T@U)
(declare-fun Mask@118 () T@U)
(declare-fun Mask@117 () T@U)
(declare-fun Mask@116 () T@U)
(declare-fun Heap@72 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun Mask@112 () T@U)
(declare-fun Mask@111 () T@U)
(declare-fun Mask@113 () T@U)
(declare-fun Mask@114 () T@U)
(declare-fun Mask@115 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun newVersion@5 () T@U)
(declare-fun Mask@110 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun freshVersion@6 () T@U)
(declare-fun Mask@109 () T@U)
(declare-fun Mask@108 () T@U)
(declare-fun Mask@107 () T@U)
(declare-fun Mask@106 () T@U)
(declare-fun Mask@105 () T@U)
(declare-fun Mask@104 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun Mask@100 () T@U)
(declare-fun Mask@99 () T@U)
(declare-fun Mask@101 () T@U)
(declare-fun Mask@102 () T@U)
(declare-fun Mask@103 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun newVersion@4 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun Mask@98 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun freshVersion@5 () T@U)
(declare-fun Mask@97 () T@U)
(declare-fun Mask@96 () T@U)
(declare-fun Mask@95 () T@U)
(declare-fun Mask@94 () T@U)
(declare-fun Mask@93 () T@U)
(declare-fun Mask@92 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun freshVersion@4 () T@U)
(declare-fun Mask@91 () T@U)
(declare-fun Mask@90 () T@U)
(declare-fun Mask@89 () T@U)
(declare-fun Mask@88 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Mask@83 () T@U)
(declare-fun Mask@82 () T@U)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun Mask@86 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun newVersion@3 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun freshVersion@3 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun Mask@78 () T@U)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun Mask@73 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun Mask@67 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Mask@58 () T@U)
(declare-fun Mask@60 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun arg_a_1@0 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun Mask@53 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun temp@0 () T@U)
(declare-fun nextTemp@0 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun prevTemp () T@U)
(declare-fun temp () T@U)
(declare-fun nextTemp () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@1) (MapType1Type RefType realType)) (= (type Heap@@61) (MapType0Type RefType))) (= (type this@@66) RefType)) (= (type Mask@2) (MapType1Type RefType realType))) (= (type binHeap) RefType)) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type prevTemp@0) RefType)) (= (type arg_a_1@0) RefType)) (= (type Heap@22) (MapType0Type RefType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@18) (MapType0Type RefType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@21) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Mask@46) (MapType1Type RefType realType))) (forall ((arg0@@40 T@U) ) (! (= (type (FrameFragment arg0@@40)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@40))
))) (forall ((arg0@@41 T@U) (arg1@@19 T@U) ) (! (= (type (CombineFrames arg0@@41 arg1@@19)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@41 arg1@@19))
))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type temp@1) RefType)) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Heap@10) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@41) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type nextTemp@1) RefType)) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@2) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Heap@114) (MapType0Type RefType))) (= (type temp@3) RefType)) (= (type prevTemp@1) RefType)) (= (type nextTemp@2) RefType)) (= (type Mask@163) (MapType1Type RefType realType))) (= (type Mask@160) (MapType1Type RefType realType))) (= (type Mask@162) (MapType1Type RefType realType))) (= (type Mask@161) (MapType1Type RefType realType))) (= (type Mask@159) (MapType1Type RefType realType))) (= (type Mask@158) (MapType1Type RefType realType))) (= (type Mask@157) (MapType1Type RefType realType))) (= (type Mask@155) (MapType1Type RefType realType))) (= (type Mask@156) (MapType1Type RefType realType))) (= (type Mask@154) (MapType1Type RefType realType))) (= (type Heap@91) (MapType0Type RefType))) (= (type Mask@128) (MapType1Type RefType realType))) (= (type temp@2) RefType)) (= (type Heap@55) (MapType0Type RefType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Mask@98) (MapType1Type RefType realType))) (= (type Heap@52) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type Heap@53) (MapType0Type RefType))) (= (type freshVersion@5) FrameTypeType)) (= (type Mask@97) (MapType1Type RefType realType))) (= (type Mask@96) (MapType1Type RefType realType))) (= (type Mask@95) (MapType1Type RefType realType))) (= (type Mask@94) (MapType1Type RefType realType))) (= (type Mask@93) (MapType1Type RefType realType))) (= (type Mask@92) (MapType1Type RefType realType))) (= (type Heap@49) (MapType0Type RefType))) (= (type Heap@50) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Heap@46) (MapType0Type RefType))) (= (type Heap@47) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@48) (MapType0Type RefType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Heap@44) (MapType0Type RefType))) (= (type freshVersion@4) FrameTypeType)) (= (type Mask@91) (MapType1Type RefType realType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@90) (MapType1Type RefType realType))) (= (type Mask@89) (MapType1Type RefType realType))) (= (type Mask@88) (MapType1Type RefType realType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type Mask@82) (MapType1Type RefType realType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type Mask@86) (MapType1Type RefType realType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type newVersion@3) FrameTypeType)) (= (type Mask@81) (MapType1Type RefType realType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Heap@36) (MapType0Type RefType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Heap@38) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Heap@33) (MapType0Type RefType))) (= (type freshVersion@3) FrameTypeType)) (= (type Mask@80) (MapType1Type RefType realType))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Mask@73) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Heap@28) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Heap@26) (MapType0Type RefType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Heap@86) (MapType0Type RefType))) (= (type Heap@85) (MapType0Type RefType))) (= (type Heap@87) (MapType0Type RefType))) (= (type Heap@88) (MapType0Type RefType))) (= (type Heap@89) (MapType0Type RefType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type Heap@90) (MapType0Type RefType))) (= (type Mask@127) (MapType1Type RefType realType))) (= (type Heap@83) (MapType0Type RefType))) (= (type Heap@82) (MapType0Type RefType))) (= (type Heap@84) (MapType0Type RefType))) (= (type freshVersion@8) FrameTypeType)) (= (type Mask@126) (MapType1Type RefType realType))) (= (type Mask@125) (MapType1Type RefType realType))) (= (type Mask@124) (MapType1Type RefType realType))) (= (type Mask@123) (MapType1Type RefType realType))) (= (type Mask@122) (MapType1Type RefType realType))) (= (type Mask@121) (MapType1Type RefType realType))) (= (type Heap@78) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@80) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Heap@81) (MapType0Type RefType))) (= (type Heap@75) (MapType0Type RefType))) (= (type Heap@76) (MapType0Type RefType))) (= (type Heap@77) (MapType0Type RefType))) (= (type freshVersion@7) FrameTypeType)) (= (type Mask@120) (MapType1Type RefType realType))) (= (type Mask@116) (MapType1Type RefType realType))) (= (type Mask@119) (MapType1Type RefType realType))) (= (type Mask@118) (MapType1Type RefType realType))) (= (type Mask@117) (MapType1Type RefType realType))) (= (type Heap@72) (MapType0Type RefType))) (= (type Heap@73) (MapType0Type RefType))) (= (type Heap@74) (MapType0Type RefType))) (= (type Mask@112) (MapType1Type RefType realType))) (= (type Mask@111) (MapType1Type RefType realType))) (= (type Mask@113) (MapType1Type RefType realType))) (= (type Mask@114) (MapType1Type RefType realType))) (= (type Mask@115) (MapType1Type RefType realType))) (= (type Heap@71) (MapType0Type RefType))) (= (type Heap@70) (MapType0Type RefType))) (= (type newVersion@5) FrameTypeType)) (= (type Mask@110) (MapType1Type RefType realType))) (= (type Heap@66) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type Heap@67) (MapType0Type RefType))) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@69) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@63) (MapType0Type RefType))) (= (type Heap@62) (MapType0Type RefType))) (= (type Heap@64) (MapType0Type RefType))) (= (type freshVersion@6) FrameTypeType)) (= (type Mask@109) (MapType1Type RefType realType))) (= (type Mask@108) (MapType1Type RefType realType))) (= (type Mask@107) (MapType1Type RefType realType))) (= (type Mask@106) (MapType1Type RefType realType))) (= (type Mask@105) (MapType1Type RefType realType))) (= (type Mask@104) (MapType1Type RefType realType))) (= (type Heap@61) (MapType0Type RefType))) (= (type Mask@100) (MapType1Type RefType realType))) (= (type Mask@99) (MapType1Type RefType realType))) (= (type Mask@101) (MapType1Type RefType realType))) (= (type Mask@102) (MapType1Type RefType realType))) (= (type Mask@103) (MapType1Type RefType realType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Heap@25) (MapType0Type RefType))) (= (type newVersion@4) FrameTypeType)) (= (type Heap@113) (MapType0Type RefType))) (= (type Mask@153) (MapType1Type RefType realType))) (= (type ExhaleHeap@6) (MapType0Type RefType))) (= (type Mask@147) (MapType1Type RefType realType))) (= (type arg_a@0) RefType)) (= (type Heap@105) (MapType0Type RefType))) (= (type Mask@146) (MapType1Type RefType realType))) (= (type Mask@145) (MapType1Type RefType realType))) (= (type Mask@144) (MapType1Type RefType realType))) (= (type Mask@142) (MapType1Type RefType realType))) (= (type Mask@143) (MapType1Type RefType realType))) (= (type Mask@141) (MapType1Type RefType realType))) (= (type Mask@140) (MapType1Type RefType realType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type Heap@101) (MapType0Type RefType))) (= (type Heap@102) (MapType0Type RefType))) (= (type Heap@103) (MapType0Type RefType))) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@104) (MapType0Type RefType))) (= (type Heap@99) (MapType0Type RefType))) (= (type Heap@98) (MapType0Type RefType))) (= (type Heap@100) (MapType0Type RefType))) (= (type freshVersion@10) FrameTypeType)) (= (type Mask@139) (MapType1Type RefType realType))) (= (type Mask@135) (MapType1Type RefType realType))) (= (type Mask@138) (MapType1Type RefType realType))) (= (type Mask@137) (MapType1Type RefType realType))) (= (type Mask@136) (MapType1Type RefType realType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type Heap@94) (MapType0Type RefType))) (= (type Heap@95) (MapType0Type RefType))) (= (type Heap@96) (MapType0Type RefType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type Heap@97) (MapType0Type RefType))) (= (type Heap@92) (MapType0Type RefType))) (= (type Heap@93) (MapType0Type RefType))) (= (type freshVersion@9) FrameTypeType)) (= (type Mask@134) (MapType1Type RefType realType))) (= (type Mask@133) (MapType1Type RefType realType))) (= (type Mask@132) (MapType1Type RefType realType))) (= (type Mask@131) (MapType1Type RefType realType))) (= (type Heap@112) (MapType0Type RefType))) (= (type Mask@152) (MapType1Type RefType realType))) (= (type Heap@108) (MapType0Type RefType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type Heap@109) (MapType0Type RefType))) (= (type Heap@110) (MapType0Type RefType))) (= (type newPMask@19) (MapType1Type RefType boolType))) (= (type Heap@111) (MapType0Type RefType))) (= (type Heap@106) (MapType0Type RefType))) (= (type Heap@107) (MapType0Type RefType))) (= (type freshVersion@11) FrameTypeType)) (= (type Mask@151) (MapType1Type RefType realType))) (= (type Mask@150) (MapType1Type RefType realType))) (= (type Mask@149) (MapType1Type RefType realType))) (= (type Mask@148) (MapType1Type RefType realType))) (= (type Mask@165) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Heap@23) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@170) (MapType1Type RefType realType))) (= (type Mask@175) (MapType1Type RefType realType))) (= (type Mask@178) (MapType1Type RefType realType))) (= (type Mask@186) (MapType1Type RefType realType))) (= (type Mask@192) (MapType1Type RefType realType))) (= (type Mask@190) (MapType1Type RefType realType))) (= (type Mask@189) (MapType1Type RefType realType))) (= (type Mask@201) (MapType1Type RefType realType))) (= (type Mask@200) (MapType1Type RefType realType))) (= (type Mask@199) (MapType1Type RefType realType))) (= (type Mask@172) (MapType1Type RefType realType))) (= (type Mask@174) (MapType1Type RefType realType))) (= (type Mask@173) (MapType1Type RefType realType))) (= (type Mask@211) (MapType1Type RefType realType))) (= (type Mask@209) (MapType1Type RefType realType))) (= (type Mask@171) (MapType1Type RefType realType))) (= (type Mask@169) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@168) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type temp@0) RefType)) (= (type nextTemp@0) RefType)) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type prevTemp) RefType)) (= (type temp) RefType)) (= (type nextTemp) RefType)) (= (type PostMask@1) (MapType1Type RefType realType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type PostMask@2) (MapType1Type RefType realType))) (= (type PostMask@0) (MapType1Type RefType realType))) (= (type Mask@216) (MapType1Type RefType realType))) (= (type Mask@215) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))))
(set-info :boogie-vc-id unionNodes)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1082) (let ((anon16_correct  (=> (and (= Mask@215 (MapType1Store Mask@2 null (heapseg binHeap null) (real_2_U (- (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))) FullPerm)))) (= (ControlFlow 0 1070) (- 0 1069))) (not (= binHeap null)))))
(let ((anon682_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1073) 1070)) anon16_correct)))
(let ((anon682_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1071) (- 0 1072)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1071) 1070) anon16_correct))))))
(let ((anon12_correct  (=> (and (= Mask@216 (MapType1Store Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))) (= (ControlFlow 0 1065) (- 0 1064))) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon680_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1068) 1065)) anon12_correct)))
(let ((anon680_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1066) (- 0 1067)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1066) 1065) anon12_correct))))))
(let ((anon42_correct  (=> (= (ControlFlow 0 1045) (- 0 1044)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon695_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1048) 1045)) anon42_correct)))
(let ((anon695_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1046) (- 0 1047)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1046) 1045) anon42_correct))))))
(let ((anon694_Else_correct true))
(let ((anon692_Else_correct  (and (=> (= (ControlFlow 0 1049) (- 0 1050)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1049) 1043) anon694_Else_correct) (=> (= (ControlFlow 0 1049) 1046) anon695_Then_correct)) (=> (= (ControlFlow 0 1049) 1048) anon695_Else_correct))))))
(let ((anon38_correct  (=> (and (= PostMask@2 (MapType1Store PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))) FullPerm)))) (= (ControlFlow 0 1039) (- 0 1038))) (not (= (MapType0Select PostHeap@0 this@@66 Nodes) null)))))
(let ((anon693_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1042) 1039)) anon38_correct)))
(let ((anon693_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1040) (- 0 1041)) (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1040) 1039) anon38_correct))))))
(let ((anon690_Else_correct  (=> (= (segSize PostHeap@0 (MapType0Select PostHeap@0 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (=> (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1051) (- 0 1052)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1051) 1049) anon692_Else_correct) (=> (= (ControlFlow 0 1051) 1040) anon693_Then_correct)) (=> (= (ControlFlow 0 1051) 1042) anon693_Else_correct))))))))
(let ((anon34_correct true))
(let ((anon691_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1037) 1034)) anon34_correct)))
(let ((anon691_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1035) (- 0 1036)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1035) 1034) anon34_correct))))))
(let ((anon30_correct true))
(let ((anon689_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1033) 1030)) anon30_correct)))
(let ((anon689_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1031) (- 0 1032)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1031) 1030) anon30_correct))))))
(let ((anon686_Else_correct  (and (=> (= (ControlFlow 0 1053) (- 0 1054)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1053) 1051) anon690_Else_correct) (=> (= (ControlFlow 0 1053) 1035) anon691_Then_correct)) (=> (= (ControlFlow 0 1053) 1037) anon691_Else_correct)) (=> (= (ControlFlow 0 1053) 1031) anon689_Then_correct)) (=> (= (ControlFlow 0 1053) 1033) anon689_Else_correct))))))
(let ((anon26_correct true))
(let ((anon687_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1029) 1026)) anon26_correct)))
(let ((anon687_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1027) (- 0 1028)) (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1027) 1026) anon26_correct))))))
(let ((anon684_Else_correct  (=> (and (sorted PostHeap@0 (MapType0Select PostHeap@0 this@@66 Nodes) null) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1055) (- 0 1057)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (=> (not (= (MapType0Select PostHeap@0 this@@66 Nodes) null)) (=> (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1055) (- 0 1056)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1055) 1053) anon686_Else_correct) (=> (= (ControlFlow 0 1055) 1027) anon687_Then_correct)) (=> (= (ControlFlow 0 1055) 1029) anon687_Else_correct)))))))))))
(let ((anon22_correct true))
(let ((anon685_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1025) 1022)) anon22_correct)))
(let ((anon685_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1023) (- 0 1024)) (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1023) 1022) anon22_correct))))))
(let ((anon683_Then_correct  (=> (and (and (state PostHeap@0 ZeroMask) (not (= this@@66 null))) (and (= PostMask@0 (MapType1Store ZeroMask this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@66 Nodes)) FullPerm)))) (state PostHeap@0 PostMask@0))) (and (=> (= (ControlFlow 0 1058) (- 0 1060)) (HasDirectPerm PostMask@0 this@@66 Nodes)) (=> (HasDirectPerm PostMask@0 this@@66 Nodes) (=> (= PostMask@1 (MapType1Store PostMask@0 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select PostMask@0 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))) FullPerm)))) (=> (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1058) (- 0 1059)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1058) 1055) anon684_Else_correct) (=> (= (ControlFlow 0 1058) 1023) anon685_Then_correct)) (=> (= (ControlFlow 0 1058) 1025) anon685_Else_correct)))))))))))
(let ((anon99_correct true))
(let ((anon725_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 914) 911)) anon99_correct)))
(let ((anon725_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 912) (- 0 913)) (<= FullPerm (U_2_real (MapType1Select Mask@168 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@168 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 912) 911) anon99_correct))))))
(let ((anon123_correct  (=> (and (= Mask@209 (MapType1Store Mask@172 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@172 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 896) (- 0 895))) (not (= nextTemp@1 null)))))
(let ((anon737_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 899) 896)) anon123_correct)))
(let ((anon737_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 897) (- 0 898)) (<= FullPerm (U_2_real (MapType1Select Mask@172 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 897) 896) anon123_correct))))))
(let ((anon119_correct true))
(let ((anon735_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 894) 891)) anon119_correct)))
(let ((anon735_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 892) (- 0 893)) (<= FullPerm (U_2_real (MapType1Select Mask@172 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 null (tree temp@1)))) (=> (= (ControlFlow 0 892) 891) anon119_correct))))))
(let ((anon115_correct  (=> (and (= Mask@211 (MapType1Store Mask@172 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@172 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 886) (- 0 885))) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon733_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 889) 886)) anon115_correct)))
(let ((anon733_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 887) (- 0 888)) (<= FullPerm (U_2_real (MapType1Select Mask@172 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 887) 886) anon115_correct))))))
(let ((anon111_correct true))
(let ((anon731_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 884) 881)) anon111_correct)))
(let ((anon731_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 882) (- 0 883)) (<= FullPerm (U_2_real (MapType1Select Mask@172 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 null (tree temp@1)))) (=> (= (ControlFlow 0 882) 881) anon111_correct))))))
(let ((anon141_correct true))
(let ((anon746_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 875) 872)) anon141_correct)))
(let ((anon746_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 873) (- 0 874)) (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree temp@1)))) (=> (= (ControlFlow 0 873) 872) anon141_correct))))))
(let ((anon137_correct true))
(let ((anon744_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 871) 868)) anon137_correct)))
(let ((anon744_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 869) (- 0 870)) (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 869) 868) anon137_correct))))))
(let ((anon133_correct true))
(let ((anon742_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 866) 863)) anon133_correct)))
(let ((anon742_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 864) (- 0 865)) (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree temp@1)))) (=> (= (ControlFlow 0 864) 863) anon133_correct))))))
(let ((anon129_correct true))
(let ((anon740_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 862) 859)) anon129_correct)))
(let ((anon740_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 860) (- 0 861)) (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@174 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 860) 859) anon129_correct))))))
(let ((anon170_correct  (=> (and (= Mask@199 (MapType1Store Mask@175 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 848) (- 0 847))) (< 1 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon762_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 851) 848)) anon170_correct)))
(let ((anon762_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 849) (- 0 850)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 849) 848) anon170_correct))))))
(let ((anon166_correct  (=> (and (= Mask@200 (MapType1Store Mask@175 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 843) (- 0 842))) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon760_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 846) 843)) anon166_correct)))
(let ((anon760_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 844) (- 0 845)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 844) 843) anon166_correct))))))
(let ((anon161_correct  (=> (and (= Mask@201 (MapType1Store Mask@175 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 838) (- 0 837))) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon757_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 841) 838)) anon161_correct)))
(let ((anon757_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 839) (- 0 840)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 839) 838) anon161_correct))))))
(let ((anon157_correct true))
(let ((anon755_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 836) 833)) anon157_correct)))
(let ((anon755_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 834) (- 0 835)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 834) 833) anon157_correct))))))
(let ((anon152_correct true))
(let ((anon752_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 831) 828)) anon152_correct)))
(let ((anon752_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 829) (- 0 830)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 829) 828) anon152_correct))))))
(let ((anon147_correct true))
(let ((anon749_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 826) 823)) anon147_correct)))
(let ((anon749_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 824) (- 0 825)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 824) 823) anon147_correct))))))
(let ((anon179_correct true))
(let ((anon767_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 819) 816)) anon179_correct)))
(let ((anon767_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 817) (- 0 818)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 817) 816) anon179_correct))))))
(let ((anon175_correct true))
(let ((anon765_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 815) 812)) anon175_correct)))
(let ((anon765_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 813) (- 0 814)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 813) 812) anon175_correct))))))
(let ((anon189_correct true))
(let ((anon772_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 807) 804)) anon189_correct)))
(let ((anon772_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 805) (- 0 806)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 805) 804) anon189_correct))))))
(let ((anon185_correct true))
(let ((anon770_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 803) 800)) anon185_correct)))
(let ((anon770_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 801) (- 0 802)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 801) 800) anon185_correct))))))
(let ((anon215_correct  (=> (and (= Mask@189 (MapType1Store Mask@175 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 791) (- 0 790))) (< 1 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon786_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 794) 791)) anon215_correct)))
(let ((anon786_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 792) (- 0 793)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 792) 791) anon215_correct))))))
(let ((anon211_correct  (=> (and (= Mask@190 (MapType1Store Mask@175 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 786) (- 0 785))) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon784_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 789) 786)) anon211_correct)))
(let ((anon784_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 787) (- 0 788)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 787) 786) anon211_correct))))))
(let ((anon206_correct true))
(let ((anon781_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 783) 780)) anon206_correct)))
(let ((anon781_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 781) (- 0 782)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 781) 780) anon206_correct))))))
(let ((anon202_correct  (=> (and (= Mask@192 (MapType1Store Mask@175 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))) FullPerm)))) (= (ControlFlow 0 775) (- 0 774))) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null)))))
(let ((anon779_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 778) 775)) anon202_correct)))
(let ((anon779_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 776) (- 0 777)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 776) 775) anon202_correct))))))
(let ((anon198_correct true))
(let ((anon777_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 773) 770)) anon198_correct)))
(let ((anon777_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 771) (- 0 772)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 771) 770) anon198_correct))))))
(let ((anon194_correct true))
(let ((anon775_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 769) 766)) anon194_correct)))
(let ((anon775_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 767) (- 0 768)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 767) 766) anon194_correct))))))
(let ((anon221_correct true))
(let ((anon789_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 761) 758)) anon221_correct)))
(let ((anon789_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 759) (- 0 760)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 759) 758) anon221_correct))))))
(let ((anon234_correct true))
(let ((anon796_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 753) 750)) anon234_correct)))
(let ((anon796_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 751) (- 0 752)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 751) 750) anon234_correct))))))
(let ((anon230_correct  (=> (= Mask@186 (MapType1Store Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 745) (- 0 746)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 1)) (=> (= (ControlFlow 0 745) (- 0 744)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 1) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))))))
(let ((anon794_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 749) 745)) anon230_correct)))
(let ((anon794_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 747) (- 0 748)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 747) 745) anon230_correct))))))
(let ((anon226_correct true))
(let ((anon792_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 743) 740)) anon226_correct)))
(let ((anon792_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 741) (- 0 742)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 741) 740) anon226_correct))))))
(let ((anon260_correct true))
(let ((anon809_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 732) 729)) anon260_correct)))
(let ((anon809_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 730) (- 0 731)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 730) 729) anon260_correct))))))
(let ((anon256_correct true))
(let ((anon807_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 728) 725)) anon256_correct)))
(let ((anon807_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 726) (- 0 727)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 726) 725) anon256_correct))))))
(let ((anon252_correct true))
(let ((anon805_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 723) 720)) anon252_correct)))
(let ((anon805_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 721) (- 0 722)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 721) 720) anon252_correct))))))
(let ((anon248_correct true))
(let ((anon803_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 719) 716)) anon248_correct)))
(let ((anon803_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 717) (- 0 718)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 717) 716) anon248_correct))))))
(let ((anon244_correct true))
(let ((anon801_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 715) 712)) anon244_correct)))
(let ((anon801_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 713) (- 0 714)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 713) 712) anon244_correct))))))
(let ((anon240_correct true))
(let ((anon799_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 711) 708)) anon240_correct)))
(let ((anon799_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 709) (- 0 710)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 709) 708) anon240_correct))))))
(let ((anon278_correct true))
(let ((anon818_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 702) 699)) anon278_correct)))
(let ((anon818_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 700) (- 0 701)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 700) 699) anon278_correct))))))
(let ((anon274_correct true))
(let ((anon816_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 698) 695)) anon274_correct)))
(let ((anon816_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 696) (- 0 697)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 696) 695) anon274_correct))))))
(let ((anon270_correct true))
(let ((anon814_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 693) 690)) anon270_correct)))
(let ((anon814_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 691) (- 0 692)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 691) 690) anon270_correct))))))
(let ((anon266_correct true))
(let ((anon812_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 689) 686)) anon266_correct)))
(let ((anon812_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 687) (- 0 688)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 687) 686) anon266_correct))))))
(let ((anon290_correct true))
(let ((anon824_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 678) 675)) anon290_correct)))
(let ((anon824_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 676) (- 0 677)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 676) 675) anon290_correct))))))
(let ((anon286_correct  (=> (and (= Mask@178 (MapType1Store Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) FullPerm)))) (= (ControlFlow 0 671) (- 0 670))) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))))
(let ((anon822_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 674) 671)) anon286_correct)))
(let ((anon822_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 672) (- 0 673)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (=> (= (ControlFlow 0 672) 671) anon286_correct))))))
(let ((anon299_correct  (=> (= (ControlFlow 0 661) (- 0 660)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon828_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 664) 661)) anon299_correct)))
(let ((anon828_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 662) (- 0 663)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 662) 661) anon299_correct))))))
(let ((anon827_Else_correct true))
(let ((anon825_Else_correct  (and (=> (= (ControlFlow 0 665) (- 0 666)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 665) 659) anon827_Else_correct) (=> (= (ControlFlow 0 665) 662) anon828_Then_correct)) (=> (= (ControlFlow 0 665) 664) anon828_Else_correct))))))
(let ((anon295_correct true))
(let ((anon826_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 658) 655)) anon295_correct)))
(let ((anon826_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 656) (- 0 657)) (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@175 null (tree temp@1)))) (=> (= (ControlFlow 0 656) 655) anon295_correct))))))
(let ((anon292_correct  (=> (and (state ExhaleHeap@1 Mask@175) (state ExhaleHeap@1 Mask@175)) (and (and (=> (= (ControlFlow 0 667) 665) anon825_Else_correct) (=> (= (ControlFlow 0 667) 656) anon826_Then_correct)) (=> (= (ControlFlow 0 667) 658) anon826_Else_correct)))))
(let ((anon823_Else_correct  (=> (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (treeParent ExhaleHeap@1 prevTemp@0)) (= (ControlFlow 0 669) 667)) anon292_correct)))
(let ((anon820_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) (state ExhaleHeap@1 Mask@175)) (and (=> (= (ControlFlow 0 679) (- 0 680)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 679) 669) anon823_Else_correct) (=> (= (ControlFlow 0 679) 676) anon824_Then_correct)) (=> (= (ControlFlow 0 679) 678) anon824_Else_correct)) (=> (= (ControlFlow 0 679) 672) anon822_Then_correct)) (=> (= (ControlFlow 0 679) 674) anon822_Else_correct)))))))
(let ((anon820_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (= (ControlFlow 0 668) 667)) anon292_correct)))
(let ((anon819_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 683) 679) anon820_Then_correct) (=> (= (ControlFlow 0 683) 668) anon820_Else_correct)))))
(let ((anon819_Then_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 681) (- 0 682)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (=> (= (ControlFlow 0 681) 679) anon820_Then_correct) (=> (= (ControlFlow 0 681) 668) anon820_Else_correct)))))))
(let ((anon280_correct  (=> (state ExhaleHeap@1 Mask@175) (and (=> (= (ControlFlow 0 684) 681) anon819_Then_correct) (=> (= (ControlFlow 0 684) 683) anon819_Else_correct)))))
(let ((anon817_Else_correct  (=> (and (= (+ (treeSize ExhaleHeap@1 temp@1) (segSize ExhaleHeap@1 nextTemp@1 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (= (ControlFlow 0 694) 684)) anon280_correct)))
(let ((anon813_Else_correct  (and (=> (= (ControlFlow 0 703) (- 0 704)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 703) 694) anon817_Else_correct) (=> (= (ControlFlow 0 703) 700) anon818_Then_correct)) (=> (= (ControlFlow 0 703) 702) anon818_Else_correct)) (=> (= (ControlFlow 0 703) 696) anon816_Then_correct)) (=> (= (ControlFlow 0 703) 698) anon816_Else_correct))))))
(let ((anon810_Then_correct  (=> (and (= prevTemp@0 null) (state ExhaleHeap@1 Mask@175)) (and (and (and (and (=> (= (ControlFlow 0 705) 703) anon813_Else_correct) (=> (= (ControlFlow 0 705) 691) anon814_Then_correct)) (=> (= (ControlFlow 0 705) 693) anon814_Else_correct)) (=> (= (ControlFlow 0 705) 687) anon812_Then_correct)) (=> (= (ControlFlow 0 705) 689) anon812_Else_correct)))))
(let ((anon810_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 685) 684)) anon280_correct)))
(let ((anon262_correct  (=> (state ExhaleHeap@1 Mask@175) (and (=> (= (ControlFlow 0 706) 705) anon810_Then_correct) (=> (= (ControlFlow 0 706) 685) anon810_Else_correct)))))
(let ((anon808_Else_correct  (=> (and (= (+ (+ (+ (segSize ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (treeSize ExhaleHeap@1 prevTemp@0)) (treeSize ExhaleHeap@1 temp@1)) (segSize ExhaleHeap@1 nextTemp@1 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (= (ControlFlow 0 724) 706)) anon262_correct)))
(let ((anon804_Else_correct  (and (=> (= (ControlFlow 0 733) (- 0 734)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 733) 724) anon808_Else_correct) (=> (= (ControlFlow 0 733) 730) anon809_Then_correct)) (=> (= (ControlFlow 0 733) 732) anon809_Else_correct)) (=> (= (ControlFlow 0 733) 726) anon807_Then_correct)) (=> (= (ControlFlow 0 733) 728) anon807_Else_correct))))))
(let ((anon797_Then_correct  (=> (and (not (= prevTemp@0 null)) (state ExhaleHeap@1 Mask@175)) (and (=> (= (ControlFlow 0 735) (- 0 736)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 735) 733) anon804_Else_correct) (=> (= (ControlFlow 0 735) 721) anon805_Then_correct)) (=> (= (ControlFlow 0 735) 723) anon805_Else_correct)) (=> (= (ControlFlow 0 735) 717) anon803_Then_correct)) (=> (= (ControlFlow 0 735) 719) anon803_Else_correct)) (=> (= (ControlFlow 0 735) 713) anon801_Then_correct)) (=> (= (ControlFlow 0 735) 715) anon801_Else_correct)) (=> (= (ControlFlow 0 735) 709) anon799_Then_correct)) (=> (= (ControlFlow 0 735) 711) anon799_Else_correct)))))))
(let ((anon797_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 707) 706)) anon262_correct)))
(let ((anon236_correct  (=> (state ExhaleHeap@1 Mask@175) (and (=> (= (ControlFlow 0 737) 735) anon797_Then_correct) (=> (= (ControlFlow 0 737) 707) anon797_Else_correct)))))
(let ((anon795_Else_correct  (=> (and (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 1)) (treeDegree ExhaleHeap@1 prevTemp@0)) (= (ControlFlow 0 739) 737)) anon236_correct)))
(let ((anon790_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) (state ExhaleHeap@1 Mask@175)) (and (=> (= (ControlFlow 0 754) (- 0 756)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (=> (= (ControlFlow 0 754) (- 0 755)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 754) 739) anon795_Else_correct) (=> (= (ControlFlow 0 754) 751) anon796_Then_correct)) (=> (= (ControlFlow 0 754) 753) anon796_Else_correct)) (=> (= (ControlFlow 0 754) 747) anon794_Then_correct)) (=> (= (ControlFlow 0 754) 749) anon794_Else_correct)) (=> (= (ControlFlow 0 754) 741) anon792_Then_correct)) (=> (= (ControlFlow 0 754) 743) anon792_Else_correct)))))))))
(let ((anon790_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (= (ControlFlow 0 738) 737)) anon236_correct)))
(let ((anon787_Then_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 762) (- 0 763)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 762) 754) anon790_Then_correct) (=> (= (ControlFlow 0 762) 738) anon790_Else_correct)) (=> (= (ControlFlow 0 762) 759) anon789_Then_correct)) (=> (= (ControlFlow 0 762) 761) anon789_Else_correct)))))))
(let ((anon787_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 757) 754) anon790_Then_correct) (=> (= (ControlFlow 0 757) 738) anon790_Else_correct)))))
(let ((anon217_correct  (=> (state ExhaleHeap@1 Mask@175) (and (=> (= (ControlFlow 0 764) 762) anon787_Then_correct) (=> (= (ControlFlow 0 764) 757) anon787_Else_correct)))))
(let ((anon785_Else_correct  (=> (and (< (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1)) (= (ControlFlow 0 784) 764)) anon217_correct)))
(let ((anon782_Then_correct  (=> (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (state ExhaleHeap@1 Mask@175)) (and (and (and (and (=> (= (ControlFlow 0 795) 784) anon785_Else_correct) (=> (= (ControlFlow 0 795) 792) anon786_Then_correct)) (=> (= (ControlFlow 0 795) 794) anon786_Else_correct)) (=> (= (ControlFlow 0 795) 787) anon784_Then_correct)) (=> (= (ControlFlow 0 795) 789) anon784_Else_correct)))))
(let ((anon782_Else_correct  (=> (and (< (segLength ExhaleHeap@1 nextTemp@1 null) 2) (= (ControlFlow 0 779) 764)) anon217_correct)))
(let ((anon778_Else_correct  (=> (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (and (and (and (=> (= (ControlFlow 0 796) 795) anon782_Then_correct) (=> (= (ControlFlow 0 796) 779) anon782_Else_correct)) (=> (= (ControlFlow 0 796) 781) anon781_Then_correct)) (=> (= (ControlFlow 0 796) 783) anon781_Else_correct)))))
(let ((anon774_Else_correct  (=> (and (< 0 (segLength ExhaleHeap@1 nextTemp@1 null)) (state ExhaleHeap@1 Mask@175)) (and (and (and (and (=> (= (ControlFlow 0 797) 796) anon778_Else_correct) (=> (= (ControlFlow 0 797) 776) anon779_Then_correct)) (=> (= (ControlFlow 0 797) 778) anon779_Else_correct)) (=> (= (ControlFlow 0 797) 771) anon777_Then_correct)) (=> (= (ControlFlow 0 797) 773) anon777_Else_correct)))))
(let ((anon773_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1))) (state ExhaleHeap@1 Mask@175)) (and (and (=> (= (ControlFlow 0 798) 797) anon774_Else_correct) (=> (= (ControlFlow 0 798) 767) anon775_Then_correct)) (=> (= (ControlFlow 0 798) 769) anon775_Else_correct)))))
(let ((anon773_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)))) (= (ControlFlow 0 765) 764)) anon217_correct)))
(let ((anon768_Then_correct  (=> (not (= prevTemp@0 null)) (and (and (and (and (and (=> (= (ControlFlow 0 808) 798) anon773_Then_correct) (=> (= (ControlFlow 0 808) 765) anon773_Else_correct)) (=> (= (ControlFlow 0 808) 805) anon772_Then_correct)) (=> (= (ControlFlow 0 808) 807) anon772_Else_correct)) (=> (= (ControlFlow 0 808) 801) anon770_Then_correct)) (=> (= (ControlFlow 0 808) 803) anon770_Else_correct)))))
(let ((anon768_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 799) 798) anon773_Then_correct) (=> (= (ControlFlow 0 799) 765) anon773_Else_correct)))))
(let ((anon181_correct  (=> (state ExhaleHeap@1 Mask@175) (and (=> (= (ControlFlow 0 809) 808) anon768_Then_correct) (=> (= (ControlFlow 0 809) 799) anon768_Else_correct)))))
(let ((anon766_Else_correct  (=> (and (< (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)) (= (ControlFlow 0 811) 809)) anon181_correct)))
(let ((anon763_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (= (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1)))))) (state ExhaleHeap@1 Mask@175)) (and (and (and (and (=> (= (ControlFlow 0 820) 811) anon766_Else_correct) (=> (= (ControlFlow 0 820) 817) anon767_Then_correct)) (=> (= (ControlFlow 0 820) 819) anon767_Else_correct)) (=> (= (ControlFlow 0 820) 813) anon765_Then_correct)) (=> (= (ControlFlow 0 820) 815) anon765_Else_correct)))))
(let ((anon763_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (= (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1))))))) (= (ControlFlow 0 810) 809)) anon181_correct)))
(let ((anon758_Then_correct  (=> (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (and (and (and (and (and (=> (= (ControlFlow 0 852) 820) anon763_Then_correct) (=> (= (ControlFlow 0 852) 810) anon763_Else_correct)) (=> (= (ControlFlow 0 852) 849) anon762_Then_correct)) (=> (= (ControlFlow 0 852) 851) anon762_Else_correct)) (=> (= (ControlFlow 0 852) 844) anon760_Then_correct)) (=> (= (ControlFlow 0 852) 846) anon760_Else_correct)))))
(let ((anon758_Else_correct  (=> (not (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0))) (and (=> (= (ControlFlow 0 832) 820) anon763_Then_correct) (=> (= (ControlFlow 0 832) 810) anon763_Else_correct)))))
(let ((anon753_Then_correct  (=> (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (and (and (and (and (=> (= (ControlFlow 0 853) 852) anon758_Then_correct) (=> (= (ControlFlow 0 853) 832) anon758_Else_correct)) (=> (= (ControlFlow 0 853) 839) anon757_Then_correct)) (=> (= (ControlFlow 0 853) 841) anon757_Else_correct)) (=> (= (ControlFlow 0 853) 834) anon755_Then_correct)) (=> (= (ControlFlow 0 853) 836) anon755_Else_correct)))))
(let ((anon753_Else_correct  (=> (< (segLength ExhaleHeap@1 nextTemp@1 null) 2) (and (=> (= (ControlFlow 0 827) 820) anon763_Then_correct) (=> (= (ControlFlow 0 827) 810) anon763_Else_correct)))))
(let ((anon750_Then_correct  (=> (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (and (and (=> (= (ControlFlow 0 854) 853) anon753_Then_correct) (=> (= (ControlFlow 0 854) 827) anon753_Else_correct)) (=> (= (ControlFlow 0 854) 829) anon752_Then_correct)) (=> (= (ControlFlow 0 854) 831) anon752_Else_correct)))))
(let ((anon750_Else_correct  (=> (<= (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 0) (and (=> (= (ControlFlow 0 822) 820) anon763_Then_correct) (=> (= (ControlFlow 0 822) 810) anon763_Else_correct)))))
(let ((anon747_Then_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 855) (- 0 856)) (HasDirectPerm Mask@175 this@@66 Nodes)) (=> (HasDirectPerm Mask@175 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 855) 854) anon750_Then_correct) (=> (= (ControlFlow 0 855) 822) anon750_Else_correct)) (=> (= (ControlFlow 0 855) 824) anon749_Then_correct)) (=> (= (ControlFlow 0 855) 826) anon749_Else_correct)))))))
(let ((anon747_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 821) 820) anon763_Then_correct) (=> (= (ControlFlow 0 821) 810) anon763_Else_correct)))))
(let ((anon143_correct  (=> (state ExhaleHeap@1 Mask@175) (and (=> (= (ControlFlow 0 857) 855) anon747_Then_correct) (=> (= (ControlFlow 0 857) 821) anon747_Else_correct)))))
(let ((anon745_Else_correct  (=> (= (treeParent ExhaleHeap@1 prevTemp@0) (treeParent ExhaleHeap@1 temp@1)) (=> (and (= Mask@175 Mask@174) (= (ControlFlow 0 867) 857)) anon143_correct))))
(let ((anon741_Else_correct  (=> (and (<= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)) (state ExhaleHeap@1 Mask@174)) (and (and (and (and (=> (= (ControlFlow 0 876) 867) anon745_Else_correct) (=> (= (ControlFlow 0 876) 873) anon746_Then_correct)) (=> (= (ControlFlow 0 876) 875) anon746_Else_correct)) (=> (= (ControlFlow 0 876) 869) anon744_Then_correct)) (=> (= (ControlFlow 0 876) 871) anon744_Else_correct)))))
(let ((anon738_Then_correct  (=> (and (not (= prevTemp@0 null)) (= Mask@173 (MapType1Store Mask@172 null (tree prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@172 null (tree prevTemp@0))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@173) (not (= prevTemp@0 null))) (and (= Mask@174 (MapType1Store Mask@173 prevTemp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@173 prevTemp@0 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@174))) (and (=> (= (ControlFlow 0 877) (- 0 878)) (HasDirectPerm Mask@174 prevTemp@0 sibling)) (=> (HasDirectPerm Mask@174 prevTemp@0 sibling) (=> (and (= (MapType0Select ExhaleHeap@1 prevTemp@0 sibling) temp@1) (state ExhaleHeap@1 Mask@174)) (and (and (and (and (=> (= (ControlFlow 0 877) 876) anon741_Else_correct) (=> (= (ControlFlow 0 877) 864) anon742_Then_correct)) (=> (= (ControlFlow 0 877) 866) anon742_Else_correct)) (=> (= (ControlFlow 0 877) 860) anon740_Then_correct)) (=> (= (ControlFlow 0 877) 862) anon740_Else_correct)))))))))
(let ((anon738_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Mask@175 Mask@172) (= (ControlFlow 0 858) 857)) anon143_correct))))
(let ((anon125_correct  (=> (state ExhaleHeap@1 Mask@172) (and (=> (= (ControlFlow 0 879) 877) anon738_Then_correct) (=> (= (ControlFlow 0 879) 858) anon738_Else_correct)))))
(let ((anon736_Else_correct  (=> (and (= (treeParent ExhaleHeap@1 temp@1) (segParent ExhaleHeap@1 nextTemp@1 null)) (= (ControlFlow 0 890) 879)) anon125_correct)))
(let ((anon732_Else_correct  (=> (and (<= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (state ExhaleHeap@1 Mask@172)) (and (and (and (and (=> (= (ControlFlow 0 900) 890) anon736_Else_correct) (=> (= (ControlFlow 0 900) 897) anon737_Then_correct)) (=> (= (ControlFlow 0 900) 899) anon737_Else_correct)) (=> (= (ControlFlow 0 900) 892) anon735_Then_correct)) (=> (= (ControlFlow 0 900) 894) anon735_Else_correct)))))
(let ((anon729_Then_correct  (=> (and (not (= nextTemp@1 null)) (state ExhaleHeap@1 Mask@172)) (and (and (and (and (=> (= (ControlFlow 0 901) 900) anon732_Else_correct) (=> (= (ControlFlow 0 901) 887) anon733_Then_correct)) (=> (= (ControlFlow 0 901) 889) anon733_Else_correct)) (=> (= (ControlFlow 0 901) 882) anon731_Then_correct)) (=> (= (ControlFlow 0 901) 884) anon731_Else_correct)))))
(let ((anon729_Else_correct  (=> (and (= nextTemp@1 null) (= (ControlFlow 0 880) 879)) anon125_correct)))
(let ((anon727_Else_correct  (=> (presorted ExhaleHeap@1 nextTemp@1 null) (=> (and (state ExhaleHeap@1 Mask@170) (= Mask@171 (MapType1Store Mask@170 null (tree temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@170 null (tree temp@1))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@171) (not (= temp@1 null))) (and (= Mask@172 (MapType1Store Mask@171 temp@1 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@171 temp@1 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@172))) (and (=> (= (ControlFlow 0 902) (- 0 903)) (HasDirectPerm Mask@172 temp@1 sibling)) (=> (HasDirectPerm Mask@172 temp@1 sibling) (=> (= (MapType0Select ExhaleHeap@1 temp@1 sibling) nextTemp@1) (and (=> (= (ControlFlow 0 902) 901) anon729_Then_correct) (=> (= (ControlFlow 0 902) 880) anon729_Else_correct))))))))))
(let ((anon106_correct true))
(let ((anon728_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 654) 651)) anon106_correct)))
(let ((anon728_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 652) (- 0 653)) (<= FullPerm (U_2_real (MapType1Select Mask@170 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@170 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 652) 651) anon106_correct))))))
(let ((anon103_correct  (=> (and (and (state ExhaleHeap@1 Mask@169) (= Mask@170 (MapType1Store Mask@169 null (heapseg nextTemp@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@169 null (heapseg nextTemp@1 null))) FullPerm))))) (and (state ExhaleHeap@1 Mask@170) (state ExhaleHeap@1 Mask@170))) (and (and (=> (= (ControlFlow 0 904) 902) anon727_Else_correct) (=> (= (ControlFlow 0 904) 652) anon728_Then_correct)) (=> (= (ControlFlow 0 904) 654) anon728_Else_correct)))))
(let ((anon726_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 907) 904)) anon103_correct)))
(let ((anon726_Then_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 905) (- 0 906)) (HasDirectPerm Mask@169 this@@66 Nodes)) (=> (HasDirectPerm Mask@169 this@@66 Nodes) (=> (and (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp@1) (= (ControlFlow 0 905) 904)) anon103_correct))))))
(let ((anon101_correct  (=> (state ExhaleHeap@1 Mask@169) (and (=> (= (ControlFlow 0 908) 905) anon726_Then_correct) (=> (= (ControlFlow 0 908) 907) anon726_Else_correct)))))
(let ((anon724_Else_correct  (=> (sorted ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (=> (and (= Mask@169 Mask@168) (= (ControlFlow 0 910) 908)) anon101_correct))))
(let ((anon723_Then_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 915) (- 0 917)) (HasDirectPerm Mask@22 this@@66 Nodes)) (=> (HasDirectPerm Mask@22 this@@66 Nodes) (=> (= Mask@168 (MapType1Store Mask@22 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@22 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) FullPerm)))) (=> (and (state ExhaleHeap@1 Mask@168) (state ExhaleHeap@1 Mask@168)) (and (=> (= (ControlFlow 0 915) (- 0 916)) (HasDirectPerm Mask@168 this@@66 Nodes)) (=> (HasDirectPerm Mask@168 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 915) 910) anon724_Else_correct) (=> (= (ControlFlow 0 915) 912) anon725_Then_correct)) (=> (= (ControlFlow 0 915) 914) anon725_Else_correct)))))))))))
(let ((anon723_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Mask@169 Mask@22) (= (ControlFlow 0 909) 908)) anon101_correct))))
(let ((anon722_Then_correct  (=> (and (and (not (= this@@66 null)) (= Mask@22 (MapType1Store Mask@21 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@21 this@@66 Nodes)) FullPerm))))) (and (state ExhaleHeap@1 Mask@22) (state ExhaleHeap@1 Mask@22))) (and (=> (= (ControlFlow 0 918) 915) anon723_Then_correct) (=> (= (ControlFlow 0 918) 909) anon723_Else_correct)))))
(let ((anon347_correct true))
(let ((anon854_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 610) 607)) anon347_correct)))
(let ((anon854_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 608) (- 0 609)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1)))) (=> (= (ControlFlow 0 608) 607) anon347_correct))))))
(let ((anon343_correct  (=> (and (= Mask@165 (MapType1Store Mask@69 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@69 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null))) FullPerm)))) (= (ControlFlow 0 603) (- 0 602))) (< 0 (segLength Heap@24 (MapType0Select Heap@24 nextTemp@1 sibling) null)))))
(let ((anon852_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 606) 603)) anon343_correct)))
(let ((anon852_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 604) (- 0 605)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null)))) (=> (= (ControlFlow 0 604) 603) anon343_correct))))))
(let ((anon586_correct  (=> (= (ControlFlow 0 165) (- 0 164)) (= (treeParent Heap@114 temp@3) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon974_Else_correct  (=> (and (not (and (not (= prevTemp@1 null)) (not (= (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1)))) (= (ControlFlow 0 168) 165)) anon586_correct)))
(let ((anon974_Then_correct  (=> (and (not (= prevTemp@1 null)) (not (= (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1))) (and (=> (= (ControlFlow 0 166) (- 0 167)) (= (segParent Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) (treeParent Heap@114 prevTemp@1))) (=> (= (segParent Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) (treeParent Heap@114 prevTemp@1)) (=> (= (ControlFlow 0 166) 165) anon586_correct))))))
(let ((anon973_Else_correct  (=> (not (= prevTemp@1 null)) (and (=> (= (ControlFlow 0 171) 166) anon974_Then_correct) (=> (= (ControlFlow 0 171) 168) anon974_Else_correct)))))
(let ((anon973_Then_correct  (=> (= prevTemp@1 null) (and (=> (= (ControlFlow 0 169) (- 0 170)) (= (+ (treeSize Heap@114 temp@3) (segSize Heap@114 nextTemp@2 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (treeSize Heap@114 temp@3) (segSize Heap@114 nextTemp@2 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 169) 166) anon974_Then_correct) (=> (= (ControlFlow 0 169) 168) anon974_Else_correct)))))))
(let ((anon972_Else_correct  (=> (= prevTemp@1 null) (and (=> (= (ControlFlow 0 174) 169) anon973_Then_correct) (=> (= (ControlFlow 0 174) 171) anon973_Else_correct)))))
(let ((anon972_Then_correct  (=> (not (= prevTemp@1 null)) (and (=> (= (ControlFlow 0 172) (- 0 173)) (= (+ (+ (+ (segSize Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) (treeSize Heap@114 prevTemp@1)) (treeSize Heap@114 temp@3)) (segSize Heap@114 nextTemp@2 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (+ (+ (segSize Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) (treeSize Heap@114 prevTemp@1)) (treeSize Heap@114 temp@3)) (segSize Heap@114 nextTemp@2 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 172) 169) anon973_Then_correct) (=> (= (ControlFlow 0 172) 171) anon973_Else_correct)))))))
(let ((anon971_Else_correct  (=> (not (and (not (= prevTemp@1 null)) (< 0 (segLength Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1)))) (and (=> (= (ControlFlow 0 177) 172) anon972_Then_correct) (=> (= (ControlFlow 0 177) 174) anon972_Else_correct)))))
(let ((anon971_Then_correct  (=> (and (not (= prevTemp@1 null)) (< 0 (segLength Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1))) (and (=> (= (ControlFlow 0 175) (- 0 176)) (< (segDegree Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1 (- (segLength Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) 1)) (treeDegree Heap@114 prevTemp@1))) (=> (< (segDegree Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1 (- (segLength Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) 1)) (treeDegree Heap@114 prevTemp@1)) (and (=> (= (ControlFlow 0 175) 172) anon972_Then_correct) (=> (= (ControlFlow 0 175) 174) anon972_Else_correct)))))))
(let ((anon970_Else_correct  (=> (< (segLength Heap@114 nextTemp@2 null) 2) (and (=> (= (ControlFlow 0 181) 175) anon971_Then_correct) (=> (= (ControlFlow 0 181) 177) anon971_Else_correct)))))
(let ((anon970_Then_correct  (=> (<= 2 (segLength Heap@114 nextTemp@2 null)) (and (=> (= (ControlFlow 0 179) (- 0 180)) (< (segDegree Heap@114 nextTemp@2 null 0) (segDegree Heap@114 nextTemp@2 null 1))) (=> (< (segDegree Heap@114 nextTemp@2 null 0) (segDegree Heap@114 nextTemp@2 null 1)) (and (=> (= (ControlFlow 0 179) 175) anon971_Then_correct) (=> (= (ControlFlow 0 179) 177) anon971_Else_correct)))))))
(let ((anon969_Then_correct  (=> (and (not (= prevTemp@1 null)) (= (treeDegree Heap@114 prevTemp@1) (treeDegree Heap@114 temp@3))) (and (=> (= (ControlFlow 0 182) (- 0 184)) (< 0 (segLength Heap@114 nextTemp@2 null))) (=> (< 0 (segLength Heap@114 nextTemp@2 null)) (and (=> (= (ControlFlow 0 182) (- 0 183)) (= (treeDegree Heap@114 temp@3) (segDegree Heap@114 nextTemp@2 null 0))) (=> (= (treeDegree Heap@114 temp@3) (segDegree Heap@114 nextTemp@2 null 0)) (and (=> (= (ControlFlow 0 182) 179) anon970_Then_correct) (=> (= (ControlFlow 0 182) 181) anon970_Else_correct)))))))))
(let ((anon969_Else_correct  (=> (not (and (not (= prevTemp@1 null)) (= (treeDegree Heap@114 prevTemp@1) (treeDegree Heap@114 temp@3)))) (and (=> (= (ControlFlow 0 178) 175) anon971_Then_correct) (=> (= (ControlFlow 0 178) 177) anon971_Else_correct)))))
(let ((anon968_Else_correct  (=> (not (and (not (= prevTemp@1 null)) (and (< 0 (segLength Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1)) (and (<= 2 (segLength Heap@114 nextTemp@2 null)) (and (= (treeDegree Heap@114 temp@3) (segDegree Heap@114 nextTemp@2 null 0)) (= (segDegree Heap@114 nextTemp@2 null 0) (segDegree Heap@114 nextTemp@2 null 1))))))) (and (=> (= (ControlFlow 0 187) 182) anon969_Then_correct) (=> (= (ControlFlow 0 187) 178) anon969_Else_correct)))))
(let ((anon968_Then_correct  (=> (and (not (= prevTemp@1 null)) (and (< 0 (segLength Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1)) (and (<= 2 (segLength Heap@114 nextTemp@2 null)) (and (= (treeDegree Heap@114 temp@3) (segDegree Heap@114 nextTemp@2 null 0)) (= (segDegree Heap@114 nextTemp@2 null 0) (segDegree Heap@114 nextTemp@2 null 1)))))) (and (=> (= (ControlFlow 0 185) (- 0 186)) (< (treeDegree Heap@114 prevTemp@1) (treeDegree Heap@114 temp@3))) (=> (< (treeDegree Heap@114 prevTemp@1) (treeDegree Heap@114 temp@3)) (and (=> (= (ControlFlow 0 185) 182) anon969_Then_correct) (=> (= (ControlFlow 0 185) 178) anon969_Else_correct)))))))
(let ((anon572_correct  (=> (= Mask@162 (MapType1Store Mask@161 prevTemp@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@161 prevTemp@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 189) (- 0 192)) (= (MapType0Select Heap@114 prevTemp@1 sibling) temp@3)) (=> (= (MapType0Select Heap@114 prevTemp@1 sibling) temp@3) (and (=> (= (ControlFlow 0 189) (- 0 191)) (<= (treeDegree Heap@114 prevTemp@1) (treeDegree Heap@114 temp@3))) (=> (<= (treeDegree Heap@114 prevTemp@1) (treeDegree Heap@114 temp@3)) (and (=> (= (ControlFlow 0 189) (- 0 190)) (= (treeParent Heap@114 prevTemp@1) (treeParent Heap@114 temp@3))) (=> (= (treeParent Heap@114 prevTemp@1) (treeParent Heap@114 temp@3)) (=> (= Mask@163 Mask@162) (and (=> (= (ControlFlow 0 189) 185) anon968_Then_correct) (=> (= (ControlFlow 0 189) 187) anon968_Else_correct))))))))))))
(let ((anon967_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 195) 189)) anon572_correct)))
(let ((anon967_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 193) (- 0 194)) (<= FullPerm (U_2_real (MapType1Select Mask@161 prevTemp@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@161 prevTemp@1 sibling))) (=> (= (ControlFlow 0 193) 189) anon572_correct))))))
(let ((anon570_correct  (=> (= Mask@161 (MapType1Store Mask@160 null (tree prevTemp@1) (real_2_U (- (U_2_real (MapType1Select Mask@160 null (tree prevTemp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 196) 193) anon967_Then_correct) (=> (= (ControlFlow 0 196) 195) anon967_Else_correct)))))
(let ((anon966_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 199) 196)) anon570_correct)))
(let ((anon966_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 197) (- 0 198)) (<= FullPerm (U_2_real (MapType1Select Mask@160 null (tree prevTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@160 null (tree prevTemp@1)))) (=> (= (ControlFlow 0 197) 196) anon570_correct))))))
(let ((anon965_Then_correct  (=> (not (= prevTemp@1 null)) (and (=> (= (ControlFlow 0 200) 197) anon966_Then_correct) (=> (= (ControlFlow 0 200) 199) anon966_Else_correct)))))
(let ((anon965_Else_correct  (=> (and (= prevTemp@1 null) (= Mask@163 Mask@160)) (and (=> (= (ControlFlow 0 188) 185) anon968_Then_correct) (=> (= (ControlFlow 0 188) 187) anon968_Else_correct)))))
(let ((anon964_Else_correct  (=> (= nextTemp@2 null) (and (=> (= (ControlFlow 0 204) 200) anon965_Then_correct) (=> (= (ControlFlow 0 204) 188) anon965_Else_correct)))))
(let ((anon964_Then_correct  (=> (not (= nextTemp@2 null)) (and (=> (= (ControlFlow 0 201) (- 0 203)) (<= (treeDegree Heap@114 temp@3) (segDegree Heap@114 nextTemp@2 null 0))) (=> (<= (treeDegree Heap@114 temp@3) (segDegree Heap@114 nextTemp@2 null 0)) (and (=> (= (ControlFlow 0 201) (- 0 202)) (= (treeParent Heap@114 temp@3) (segParent Heap@114 nextTemp@2 null))) (=> (= (treeParent Heap@114 temp@3) (segParent Heap@114 nextTemp@2 null)) (and (=> (= (ControlFlow 0 201) 200) anon965_Then_correct) (=> (= (ControlFlow 0 201) 188) anon965_Else_correct)))))))))
(let ((anon565_correct  (=> (= Mask@160 (MapType1Store Mask@159 temp@3 sibling (real_2_U (- (U_2_real (MapType1Select Mask@159 temp@3 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 205) (- 0 206)) (= (MapType0Select Heap@114 temp@3 sibling) nextTemp@2)) (=> (= (MapType0Select Heap@114 temp@3 sibling) nextTemp@2) (and (=> (= (ControlFlow 0 205) 201) anon964_Then_correct) (=> (= (ControlFlow 0 205) 204) anon964_Else_correct)))))))
(let ((anon963_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 209) 205)) anon565_correct)))
(let ((anon963_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 207) (- 0 208)) (<= FullPerm (U_2_real (MapType1Select Mask@159 temp@3 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@159 temp@3 sibling))) (=> (= (ControlFlow 0 207) 205) anon565_correct))))))
(let ((anon563_correct  (=> (= Mask@159 (MapType1Store Mask@158 null (tree temp@3) (real_2_U (- (U_2_real (MapType1Select Mask@158 null (tree temp@3))) FullPerm)))) (and (=> (= (ControlFlow 0 210) 207) anon963_Then_correct) (=> (= (ControlFlow 0 210) 209) anon963_Else_correct)))))
(let ((anon962_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 213) 210)) anon563_correct)))
(let ((anon962_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 211) (- 0 212)) (<= FullPerm (U_2_real (MapType1Select Mask@158 null (tree temp@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@158 null (tree temp@3)))) (=> (= (ControlFlow 0 211) 210) anon563_correct))))))
(let ((anon561_correct  (=> (= Mask@158 (MapType1Store Mask@157 null (heapseg nextTemp@2 null) (real_2_U (- (U_2_real (MapType1Select Mask@157 null (heapseg nextTemp@2 null))) FullPerm)))) (and (=> (= (ControlFlow 0 214) (- 0 215)) (presorted Heap@114 nextTemp@2 null)) (=> (presorted Heap@114 nextTemp@2 null) (and (=> (= (ControlFlow 0 214) 211) anon962_Then_correct) (=> (= (ControlFlow 0 214) 213) anon962_Else_correct)))))))
(let ((anon961_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 218) 214)) anon561_correct)))
(let ((anon961_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 216) (- 0 217)) (<= FullPerm (U_2_real (MapType1Select Mask@157 null (heapseg nextTemp@2 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@157 null (heapseg nextTemp@2 null)))) (=> (= (ControlFlow 0 216) 214) anon561_correct))))))
(let ((anon960_Else_correct  (=> (not (= prevTemp@1 null)) (and (=> (= (ControlFlow 0 221) 216) anon961_Then_correct) (=> (= (ControlFlow 0 221) 218) anon961_Else_correct)))))
(let ((anon960_Then_correct  (=> (= prevTemp@1 null) (and (=> (= (ControlFlow 0 219) (- 0 220)) (= (MapType0Select Heap@114 this@@66 Nodes) temp@3)) (=> (= (MapType0Select Heap@114 this@@66 Nodes) temp@3) (and (=> (= (ControlFlow 0 219) 216) anon961_Then_correct) (=> (= (ControlFlow 0 219) 218) anon961_Else_correct)))))))
(let ((anon556_correct  (=> (= Mask@156 (MapType1Store Mask@155 null (heapseg (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) (real_2_U (- (U_2_real (MapType1Select Mask@155 null (heapseg (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 223) (- 0 224)) (sorted Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1)) (=> (sorted Heap@114 (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1) (=> (= Mask@157 Mask@156) (and (=> (= (ControlFlow 0 223) 219) anon960_Then_correct) (=> (= (ControlFlow 0 223) 221) anon960_Else_correct))))))))
(let ((anon959_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 227) 223)) anon556_correct)))
(let ((anon959_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 225) (- 0 226)) (<= FullPerm (U_2_real (MapType1Select Mask@155 null (heapseg (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@155 null (heapseg (MapType0Select Heap@114 this@@66 Nodes) prevTemp@1)))) (=> (= (ControlFlow 0 225) 223) anon556_correct))))))
(let ((anon958_Then_correct  (=> (not (= prevTemp@1 null)) (and (=> (= (ControlFlow 0 228) 225) anon959_Then_correct) (=> (= (ControlFlow 0 228) 227) anon959_Else_correct)))))
(let ((anon958_Else_correct  (=> (and (= prevTemp@1 null) (= Mask@157 Mask@155)) (and (=> (= (ControlFlow 0 222) 219) anon960_Then_correct) (=> (= (ControlFlow 0 222) 221) anon960_Else_correct)))))
(let ((anon553_correct  (=> (= Mask@155 (MapType1Store Mask@154 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@154 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 229) 228) anon958_Then_correct) (=> (= (ControlFlow 0 229) 222) anon958_Else_correct)))))
(let ((anon957_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 232) 229)) anon553_correct)))
(let ((anon957_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 230) (- 0 231)) (<= FullPerm (U_2_real (MapType1Select Mask@154 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@154 this@@66 Nodes))) (=> (= (ControlFlow 0 230) 229) anon553_correct))))))
(let ((anon551_correct  (=> (state Heap@114 Mask@154) (and (=> (= (ControlFlow 0 233) (- 0 234)) (HasDirectPerm Mask@154 temp@3 sibling)) (=> (HasDirectPerm Mask@154 temp@3 sibling) (=> (and (= nextTemp@2 (MapType0Select Heap@114 temp@3 sibling)) (state Heap@114 Mask@154)) (and (=> (= (ControlFlow 0 233) 230) anon957_Then_correct) (=> (= (ControlFlow 0 233) 232) anon957_Else_correct))))))))
(let ((anon413_correct  (=> (and (and (and (state Heap@113 Mask@153) (state Heap@113 Mask@153)) (and (state Heap@113 Mask@153) (= Mask@154 Mask@153))) (and (and (= prevTemp@1 temp@1) (= temp@3 nextTemp@1)) (and (= Heap@114 Heap@113) (= (ControlFlow 0 493) 233)))) anon551_correct)))
(let ((anon363_correct  (=> (state Heap@112 Mask@152) (=> (and (and (state Heap@112 Mask@152) (= Heap@113 Heap@112)) (and (= Mask@153 Mask@152) (= (ControlFlow 0 574) 493))) anon413_correct))))
(let ((anon863_Else_correct  (=> (= (MapType0Select Heap@108 this@@66 Nodes) temp@1) (=> (and (= Heap@112 Heap@108) (= (ControlFlow 0 576) 574)) anon363_correct))))
(let ((anon863_Then_correct  (=> (and (and (and (not (= (MapType0Select Heap@108 this@@66 Nodes) temp@1)) (forall ((o_105 T@U) (f_109 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_109))))
(let ((A@@12 (FieldTypeInv0 (type f_109))))
 (=> (and (and (= (type o_105) RefType) (= (type f_109) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@108 null (|heapseg#sm| (MapType0Select Heap@108 this@@66 Nodes) temp@1)) o_105 f_109)) (U_2_bool (MapType1Select (MapType0Select Heap@108 null (|tree#sm| (MapType0Select Heap@108 this@@66 Nodes))) o_105 f_109)))) (U_2_bool (MapType1Select newPMask@18 o_105 f_109)))))
 :qid |stdinbpl.14903:45|
 :skolemid |211|
 :pattern ( (MapType1Select newPMask@18 o_105 f_109))
))) (and (= Heap@109 (MapType0Store Heap@108 null (|heapseg#sm| (MapType0Select Heap@108 this@@66 Nodes) temp@1) newPMask@18)) (= Heap@110 (MapType0Store Heap@109 null (|heapseg#sm| (MapType0Select Heap@109 this@@66 Nodes) temp@1) (MapType1Store (MapType0Select Heap@109 null (|heapseg#sm| (MapType0Select Heap@109 this@@66 Nodes) temp@1)) (MapType0Select Heap@109 this@@66 Nodes) sibling (bool_2_U true)))))) (and (and (forall ((o_106 T@U) (f_110 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_110))))
(let ((A@@13 (FieldTypeInv0 (type f_110))))
 (=> (and (and (= (type o_106) RefType) (= (type f_110) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@110 null (|heapseg#sm| (MapType0Select Heap@110 this@@66 Nodes) temp@1)) o_106 f_110)) (U_2_bool (MapType1Select (MapType0Select Heap@110 null (|heapseg#sm| (MapType0Select Heap@110 (MapType0Select Heap@110 this@@66 Nodes) sibling) temp@1)) o_106 f_110)))) (U_2_bool (MapType1Select newPMask@19 o_106 f_110)))))
 :qid |stdinbpl.14910:45|
 :skolemid |212|
 :pattern ( (MapType1Select newPMask@19 o_106 f_110))
)) (= Heap@111 (MapType0Store Heap@110 null (|heapseg#sm| (MapType0Select Heap@110 this@@66 Nodes) temp@1) newPMask@19))) (and (= Heap@112 Heap@111) (= (ControlFlow 0 575) 574)))) anon363_correct)))
(let ((anon862_Else_correct  (=> (and (HasDirectPerm Mask@152 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (= Heap@108 Heap@24)) (and (=> (= (ControlFlow 0 578) 575) anon863_Then_correct) (=> (= (ControlFlow 0 578) 576) anon863_Else_correct)))))
(let ((anon862_Then_correct  (=> (and (and (not (HasDirectPerm Mask@152 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1))) (= Heap@106 (MapType0Store Heap@24 null (|heapseg#sm| (MapType0Select Heap@24 this@@66 Nodes) temp@1) ZeroPMask))) (and (= Heap@107 (MapType0Store Heap@106 null (heapseg (MapType0Select Heap@106 this@@66 Nodes) temp@1) freshVersion@11)) (= Heap@108 Heap@107))) (and (=> (= (ControlFlow 0 577) 575) anon863_Then_correct) (=> (= (ControlFlow 0 577) 576) anon863_Else_correct)))))
(let ((anon359_correct  (=> (= Mask@152 (MapType1Store Mask@151 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@151 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1))) FullPerm)))) (=> (and (and (state Heap@24 Mask@152) (state Heap@24 Mask@152)) (and (|heapseg#trigger| Heap@24 (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (= (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (FrameFragment (ite (not (= (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (CombineFrames (MapType0Select Heap@24 null (tree (MapType0Select Heap@24 this@@66 Nodes))) (CombineFrames (FrameFragment (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling)) (CombineFrames (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1)) (FrameFragment (ite (not (= (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 579) 577) anon862_Then_correct) (=> (= (ControlFlow 0 579) 578) anon862_Else_correct))))))
(let ((anon861_Else_correct  (=> (= (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1) (=> (and (= Mask@151 Mask@150) (= (ControlFlow 0 583) 579)) anon359_correct))))
(let ((anon861_Then_correct  (=> (not (= (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1)) (and (=> (= (ControlFlow 0 581) (- 0 582)) (= (treeParent Heap@24 (MapType0Select Heap@24 this@@66 Nodes)) (segParent Heap@24 (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1))) (=> (= (treeParent Heap@24 (MapType0Select Heap@24 this@@66 Nodes)) (segParent Heap@24 (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1)) (=> (and (= Mask@151 Mask@150) (= (ControlFlow 0 581) 579)) anon359_correct))))))
(let ((anon357_correct  (=> (and (= Mask@150 (MapType1Store Mask@149 null (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@149 null (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1) (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1) (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1)))) (and (=> (= (ControlFlow 0 584) 581) anon861_Then_correct) (=> (= (ControlFlow 0 584) 583) anon861_Else_correct)))))
(let ((anon860_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 587) 584)) anon357_correct)))
(let ((anon860_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 585) (- 0 586)) (<= FullPerm (U_2_real (MapType1Select Mask@149 null (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@149 null (heapseg (MapType0Select Heap@24 (MapType0Select Heap@24 this@@66 Nodes) sibling) temp@1)))) (=> (= (ControlFlow 0 585) 584) anon357_correct))))))
(let ((anon355_correct  (=> (= Mask@149 (MapType1Store Mask@148 (MapType0Select Heap@24 this@@66 Nodes) sibling (real_2_U (- (U_2_real (MapType1Select Mask@148 (MapType0Select Heap@24 this@@66 Nodes) sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 588) 585) anon860_Then_correct) (=> (= (ControlFlow 0 588) 587) anon860_Else_correct)))))
(let ((anon859_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 591) 588)) anon355_correct)))
(let ((anon859_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 589) (- 0 590)) (<= FullPerm (U_2_real (MapType1Select Mask@148 (MapType0Select Heap@24 this@@66 Nodes) sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@148 (MapType0Select Heap@24 this@@66 Nodes) sibling))) (=> (= (ControlFlow 0 589) 588) anon355_correct))))))
(let ((anon353_correct  (=> (and (= Mask@148 (MapType1Store Mask@69 null (tree (MapType0Select Heap@24 this@@66 Nodes)) (real_2_U (- (U_2_real (MapType1Select Mask@69 null (tree (MapType0Select Heap@24 this@@66 Nodes)))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1) (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (tree (MapType0Select Heap@24 this@@66 Nodes)) (MapType0Select Heap@24 null (tree (MapType0Select Heap@24 this@@66 Nodes))))) (and (=> (= (ControlFlow 0 592) 589) anon859_Then_correct) (=> (= (ControlFlow 0 592) 591) anon859_Else_correct)))))
(let ((anon858_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 595) 592)) anon353_correct)))
(let ((anon858_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 593) (- 0 594)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree (MapType0Select Heap@24 this@@66 Nodes)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree (MapType0Select Heap@24 this@@66 Nodes))))) (=> (= (ControlFlow 0 593) 592) anon353_correct))))))
(let ((anon857_Then_correct  (=> (not (= (MapType0Select Heap@24 this@@66 Nodes) temp@1)) (and (=> (= (ControlFlow 0 596) 593) anon858_Then_correct) (=> (= (ControlFlow 0 596) 595) anon858_Else_correct)))))
(let ((anon857_Else_correct  (=> (= (MapType0Select Heap@24 this@@66 Nodes) temp@1) (=> (and (= Mask@151 Mask@69) (= (ControlFlow 0 580) 579)) anon359_correct))))
(let ((anon856_Then_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 597) (- 0 598)) (HasDirectPerm Mask@69 this@@66 Nodes)) (=> (HasDirectPerm Mask@69 this@@66 Nodes) (and (=> (= (ControlFlow 0 597) 596) anon857_Then_correct) (=> (= (ControlFlow 0 597) 580) anon857_Else_correct)))))))
(let ((anon412_correct  (=> (state ExhaleHeap@6 Mask@147) (=> (and (and (state ExhaleHeap@6 Mask@147) (= Heap@113 ExhaleHeap@6)) (and (= Mask@153 Mask@147) (= (ControlFlow 0 494) 493))) anon413_correct))))
(let ((anon888_Else_correct  (=> (and (= prevTemp@0 temp@1) (= (ControlFlow 0 496) 494)) anon412_correct)))
(let ((anon888_Then_correct  (=> (and (and (not (= prevTemp@0 temp@1)) (state ExhaleHeap@6 Mask@147)) (and (= (segParent ExhaleHeap@6 arg_a@0 temp@1) (segParent Heap@105 prevTemp@0 temp@1)) (= (ControlFlow 0 495) 494))) anon412_correct)))
(let ((anon887_Else_correct  (=> (= arg_a@0 prevTemp@0) (and (=> (= (ControlFlow 0 498) 495) anon888_Then_correct) (=> (= (ControlFlow 0 498) 496) anon888_Else_correct)))))
(let ((anon887_Then_correct  (=> (not (= arg_a@0 prevTemp@0)) (=> (and (state ExhaleHeap@6 Mask@147) (= (segParent ExhaleHeap@6 arg_a@0 temp@1) (segParent Heap@105 arg_a@0 prevTemp@0))) (and (=> (= (ControlFlow 0 497) 495) anon888_Then_correct) (=> (= (ControlFlow 0 497) 496) anon888_Else_correct))))))
(let ((anon408_correct  (=> (and (state ExhaleHeap@6 Mask@147) (= (segSize ExhaleHeap@6 arg_a@0 temp@1) (+ (segSize Heap@105 arg_a@0 prevTemp@0) (segSize Heap@105 prevTemp@0 temp@1)))) (and (=> (= (ControlFlow 0 499) 497) anon887_Then_correct) (=> (= (ControlFlow 0 499) 498) anon887_Else_correct)))))
(let ((anon886_Else_correct  (=> (and (not (and (validChildren Heap@105 arg_a@0 prevTemp@0) (and (validChildren Heap@105 prevTemp@0 temp@1) (=> (and (< 0 (segLength Heap@105 arg_a@0 prevTemp@0)) (< 0 (segLength Heap@105 prevTemp@0 temp@1))) (= (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (+ (segDegree Heap@105 prevTemp@0 temp@1 0) 1)))))) (= (ControlFlow 0 501) 499)) anon408_correct)))
(let ((anon886_Then_correct  (=> (and (and (and (validChildren Heap@105 arg_a@0 prevTemp@0) (and (validChildren Heap@105 prevTemp@0 temp@1) (=> (and (< 0 (segLength Heap@105 arg_a@0 prevTemp@0)) (< 0 (segLength Heap@105 prevTemp@0 temp@1))) (= (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (+ (segDegree Heap@105 prevTemp@0 temp@1 0) 1))))) (state ExhaleHeap@6 Mask@147)) (and (validChildren ExhaleHeap@6 arg_a@0 temp@1) (= (ControlFlow 0 500) 499))) anon408_correct)))
(let ((anon885_Else_correct  (=> (not (and (presorted Heap@105 arg_a@0 prevTemp@0) (and (presorted Heap@105 prevTemp@0 temp@1) (=> (and (< 0 (segLength Heap@105 arg_a@0 prevTemp@0)) (< 0 (segLength Heap@105 prevTemp@0 temp@1))) (and (<= (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0)) (and (=> (and (<= 2 (segLength Heap@105 arg_a@0 prevTemp@0)) (= (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 2)))) (< (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0))) (=> (and (<= 2 (segLength Heap@105 prevTemp@0 temp@1)) (= (segDegree Heap@105 prevTemp@0 temp@1 0) (segDegree Heap@105 prevTemp@0 temp@1 1))) (< (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0))))))))) (and (=> (= (ControlFlow 0 503) 500) anon886_Then_correct) (=> (= (ControlFlow 0 503) 501) anon886_Else_correct)))))
(let ((anon885_Then_correct  (=> (and (and (presorted Heap@105 arg_a@0 prevTemp@0) (and (presorted Heap@105 prevTemp@0 temp@1) (=> (and (< 0 (segLength Heap@105 arg_a@0 prevTemp@0)) (< 0 (segLength Heap@105 prevTemp@0 temp@1))) (and (<= (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0)) (and (=> (and (<= 2 (segLength Heap@105 arg_a@0 prevTemp@0)) (= (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 2)))) (< (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0))) (=> (and (<= 2 (segLength Heap@105 prevTemp@0 temp@1)) (= (segDegree Heap@105 prevTemp@0 temp@1 0) (segDegree Heap@105 prevTemp@0 temp@1 1))) (< (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0)))))))) (and (state ExhaleHeap@6 Mask@147) (presorted ExhaleHeap@6 arg_a@0 temp@1))) (and (=> (= (ControlFlow 0 502) 500) anon886_Then_correct) (=> (= (ControlFlow 0 502) 501) anon886_Else_correct)))))
(let ((anon884_Else_correct  (=> (not (and (sorted Heap@105 arg_a@0 prevTemp@0) (and (sorted Heap@105 prevTemp@0 temp@1) (=> (and (< 0 (segLength Heap@105 arg_a@0 prevTemp@0)) (< 0 (segLength Heap@105 prevTemp@0 temp@1))) (< (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0)))))) (and (=> (= (ControlFlow 0 505) 502) anon885_Then_correct) (=> (= (ControlFlow 0 505) 503) anon885_Else_correct)))))
(let ((anon884_Then_correct  (=> (and (and (sorted Heap@105 arg_a@0 prevTemp@0) (and (sorted Heap@105 prevTemp@0 temp@1) (=> (and (< 0 (segLength Heap@105 arg_a@0 prevTemp@0)) (< 0 (segLength Heap@105 prevTemp@0 temp@1))) (< (segDegree Heap@105 arg_a@0 prevTemp@0 (- (segLength Heap@105 arg_a@0 prevTemp@0) 1)) (segDegree Heap@105 prevTemp@0 temp@1 0))))) (and (state ExhaleHeap@6 Mask@147) (sorted ExhaleHeap@6 arg_a@0 temp@1))) (and (=> (= (ControlFlow 0 504) 502) anon885_Then_correct) (=> (= (ControlFlow 0 504) 503) anon885_Else_correct)))))
(let ((anon883_Else_correct  (=> (and (= temp@1 null) (= Mask@147 Mask@145)) (and (=> (= (ControlFlow 0 507) 504) anon884_Then_correct) (=> (= (ControlFlow 0 507) 505) anon884_Else_correct)))))
(let ((anon883_Then_correct  (=> (and (not (= temp@1 null)) (= Mask@146 (MapType1Store Mask@145 null (tree temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@145 null (tree temp@1))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@6 Mask@146) (state ExhaleHeap@6 Mask@146)) (and (= (treeDegree ExhaleHeap@6 temp@1) (treeDegree Heap@105 temp@1)) (state ExhaleHeap@6 Mask@146))) (and (and (= (treeSize ExhaleHeap@6 temp@1) (treeSize Heap@105 temp@1)) (state ExhaleHeap@6 Mask@146)) (and (= (treeParent ExhaleHeap@6 temp@1) (treeParent Heap@105 temp@1)) (= Mask@147 Mask@146)))) (and (=> (= (ControlFlow 0 506) 504) anon884_Then_correct) (=> (= (ControlFlow 0 506) 505) anon884_Else_correct))))))
(let ((anon400_correct  (=> (IdenticalOnKnownLocations Heap@105 ExhaleHeap@6 Mask@144) (=> (and (and (and (= Mask@145 (MapType1Store Mask@144 null (heapseg arg_a@0 temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@144 null (heapseg arg_a@0 temp@1))) FullPerm)))) (state ExhaleHeap@6 Mask@145)) (and (state ExhaleHeap@6 Mask@145) (= (segLength ExhaleHeap@6 arg_a@0 temp@1) (+ (segLength Heap@105 arg_a@0 prevTemp@0) (segLength Heap@105 prevTemp@0 temp@1))))) (and (and (state ExhaleHeap@6 Mask@145) (forall ((i_5 Int) ) (!  (=> (and (<= 0 i_5) (< i_5 (segLength Heap@105 arg_a@0 prevTemp@0))) (= (segDegree ExhaleHeap@6 arg_a@0 temp@1 i_5) (segDegree Heap@105 arg_a@0 prevTemp@0 i_5)))
 :qid |stdinbpl.15092:38|
 :skolemid |217|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@6 null (heapseg arg_a@0 temp@1)) arg_a@0 temp@1 i_5))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@105 null (heapseg arg_a@0 prevTemp@0)) arg_a@0 prevTemp@0 i_5))
))) (and (state ExhaleHeap@6 Mask@145) (forall ((i_1 Int) ) (!  (=> (and (<= (segLength Heap@105 arg_a@0 prevTemp@0) i_1) (< i_1 (segLength ExhaleHeap@6 arg_a@0 temp@1))) (= (segDegree ExhaleHeap@6 arg_a@0 temp@1 i_1) (segDegree Heap@105 prevTemp@0 temp@1 (- i_1 (segLength Heap@105 arg_a@0 prevTemp@0)))))
 :qid |stdinbpl.15097:38|
 :skolemid |218|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@6 null (heapseg arg_a@0 temp@1)) arg_a@0 temp@1 i_1))
))))) (and (=> (= (ControlFlow 0 508) 506) anon883_Then_correct) (=> (= (ControlFlow 0 508) 507) anon883_Else_correct))))))
(let ((anon882_Else_correct  (=> (and (not (and (not (= arg_a@0 prevTemp@0)) (not (= prevTemp@0 temp@1)))) (= (ControlFlow 0 511) 508)) anon400_correct)))
(let ((anon882_Then_correct  (=> (and (not (= arg_a@0 prevTemp@0)) (not (= prevTemp@0 temp@1))) (and (=> (= (ControlFlow 0 509) (- 0 510)) (= (segParent Heap@105 arg_a@0 prevTemp@0) (segParent Heap@105 prevTemp@0 temp@1))) (=> (= (segParent Heap@105 arg_a@0 prevTemp@0) (segParent Heap@105 prevTemp@0 temp@1)) (=> (= (ControlFlow 0 509) 508) anon400_correct))))))
(let ((anon397_correct  (=> (and (= Mask@143 (MapType1Store Mask@142 null (tree temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@142 null (tree temp@1))) FullPerm)))) (= Mask@144 Mask@143)) (and (=> (= (ControlFlow 0 513) 509) anon882_Then_correct) (=> (= (ControlFlow 0 513) 511) anon882_Else_correct)))))
(let ((anon881_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 516) 513)) anon397_correct)))
(let ((anon881_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 514) (- 0 515)) (<= FullPerm (U_2_real (MapType1Select Mask@142 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@142 null (tree temp@1)))) (=> (= (ControlFlow 0 514) 513) anon397_correct))))))
(let ((anon880_Then_correct  (=> (not (= temp@1 null)) (and (=> (= (ControlFlow 0 517) 514) anon881_Then_correct) (=> (= (ControlFlow 0 517) 516) anon881_Else_correct)))))
(let ((anon880_Else_correct  (=> (and (= temp@1 null) (= Mask@144 Mask@142)) (and (=> (= (ControlFlow 0 512) 509) anon882_Then_correct) (=> (= (ControlFlow 0 512) 511) anon882_Else_correct)))))
(let ((anon394_correct  (=> (= Mask@142 (MapType1Store Mask@141 null (heapseg prevTemp@0 temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@141 null (heapseg prevTemp@0 temp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 518) 517) anon880_Then_correct) (=> (= (ControlFlow 0 518) 512) anon880_Else_correct)))))
(let ((anon879_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 521) 518)) anon394_correct)))
(let ((anon879_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 519) (- 0 520)) (<= FullPerm (U_2_real (MapType1Select Mask@141 null (heapseg prevTemp@0 temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@141 null (heapseg prevTemp@0 temp@1)))) (=> (= (ControlFlow 0 519) 518) anon394_correct))))))
(let ((anon392_correct  (=> (= Mask@141 (MapType1Store Mask@140 null (heapseg arg_a@0 prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@140 null (heapseg arg_a@0 prevTemp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 522) 519) anon879_Then_correct) (=> (= (ControlFlow 0 522) 521) anon879_Else_correct)))))
(let ((anon878_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 525) 522)) anon392_correct)))
(let ((anon878_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 523) (- 0 524)) (<= FullPerm (U_2_real (MapType1Select Mask@140 null (heapseg arg_a@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@140 null (heapseg arg_a@0 prevTemp@0)))) (=> (= (ControlFlow 0 523) 522) anon392_correct))))))
(let ((anon390_correct  (=> (and (state Heap@105 Mask@140) (state Heap@105 Mask@140)) (and (=> (= (ControlFlow 0 526) (- 0 527)) (HasDirectPerm Mask@140 this@@66 Nodes)) (=> (HasDirectPerm Mask@140 this@@66 Nodes) (=> (= arg_a@0 (MapType0Select Heap@105 this@@66 Nodes)) (and (=> (= (ControlFlow 0 526) 523) anon878_Then_correct) (=> (= (ControlFlow 0 526) 525) anon878_Else_correct))))))))
(let ((anon877_Else_correct  (=> (= prevTemp@0 temp@1) (=> (and (= Heap@105 Heap@101) (= (ControlFlow 0 529) 526)) anon390_correct))))
(let ((anon877_Then_correct  (=> (and (and (and (not (= prevTemp@0 temp@1)) (forall ((o_109 T@U) (f_113 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_113))))
(let ((A@@14 (FieldTypeInv0 (type f_113))))
 (=> (and (and (= (type o_109) RefType) (= (type f_113) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@101 null (|heapseg#sm| prevTemp@0 temp@1)) o_109 f_113)) (U_2_bool (MapType1Select (MapType0Select Heap@101 null (|tree#sm| prevTemp@0)) o_109 f_113)))) (U_2_bool (MapType1Select newPMask@16 o_109 f_113)))))
 :qid |stdinbpl.15028:45|
 :skolemid |215|
 :pattern ( (MapType1Select newPMask@16 o_109 f_113))
))) (and (= Heap@102 (MapType0Store Heap@101 null (|heapseg#sm| prevTemp@0 temp@1) newPMask@16)) (= Heap@103 (MapType0Store Heap@102 null (|heapseg#sm| prevTemp@0 temp@1) (MapType1Store (MapType0Select Heap@102 null (|heapseg#sm| prevTemp@0 temp@1)) prevTemp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_110 T@U) (f_114 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_114))))
(let ((A@@15 (FieldTypeInv0 (type f_114))))
 (=> (and (and (= (type o_110) RefType) (= (type f_114) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@103 null (|heapseg#sm| prevTemp@0 temp@1)) o_110 f_114)) (U_2_bool (MapType1Select (MapType0Select Heap@103 null (|heapseg#sm| (MapType0Select Heap@103 prevTemp@0 sibling) temp@1)) o_110 f_114)))) (U_2_bool (MapType1Select newPMask@17 o_110 f_114)))))
 :qid |stdinbpl.15035:45|
 :skolemid |216|
 :pattern ( (MapType1Select newPMask@17 o_110 f_114))
)) (= Heap@104 (MapType0Store Heap@103 null (|heapseg#sm| prevTemp@0 temp@1) newPMask@17))) (and (= Heap@105 Heap@104) (= (ControlFlow 0 528) 526)))) anon390_correct)))
(let ((anon876_Else_correct  (=> (and (HasDirectPerm Mask@140 null (heapseg prevTemp@0 temp@1)) (= Heap@101 Heap@98)) (and (=> (= (ControlFlow 0 531) 528) anon877_Then_correct) (=> (= (ControlFlow 0 531) 529) anon877_Else_correct)))))
(let ((anon876_Then_correct  (=> (and (and (not (HasDirectPerm Mask@140 null (heapseg prevTemp@0 temp@1))) (= Heap@99 (MapType0Store Heap@98 null (|heapseg#sm| prevTemp@0 temp@1) ZeroPMask))) (and (= Heap@100 (MapType0Store Heap@99 null (heapseg prevTemp@0 temp@1) freshVersion@10)) (= Heap@101 Heap@100))) (and (=> (= (ControlFlow 0 530) 528) anon877_Then_correct) (=> (= (ControlFlow 0 530) 529) anon877_Else_correct)))))
(let ((anon386_correct  (=> (= Mask@140 (MapType1Store Mask@139 null (heapseg prevTemp@0 temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@139 null (heapseg prevTemp@0 temp@1))) FullPerm)))) (=> (and (and (state Heap@98 Mask@140) (state Heap@98 Mask@140)) (and (|heapseg#trigger| Heap@98 (heapseg prevTemp@0 temp@1)) (= (MapType0Select Heap@98 null (heapseg prevTemp@0 temp@1)) (FrameFragment (ite (not (= prevTemp@0 temp@1)) (CombineFrames (MapType0Select Heap@98 null (tree prevTemp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@98 prevTemp@0 sibling)) (CombineFrames (MapType0Select Heap@98 null (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1)) (FrameFragment (ite (not (= (MapType0Select Heap@98 prevTemp@0 sibling) temp@1)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 532) 530) anon876_Then_correct) (=> (= (ControlFlow 0 532) 531) anon876_Else_correct))))))
(let ((anon875_Else_correct  (=> (= (MapType0Select Heap@98 prevTemp@0 sibling) temp@1) (=> (and (= Mask@139 Mask@138) (= (ControlFlow 0 536) 532)) anon386_correct))))
(let ((anon875_Then_correct  (=> (not (= (MapType0Select Heap@98 prevTemp@0 sibling) temp@1)) (and (=> (= (ControlFlow 0 534) (- 0 535)) (= (treeParent Heap@98 prevTemp@0) (segParent Heap@98 (MapType0Select Heap@98 prevTemp@0 sibling) temp@1))) (=> (= (treeParent Heap@98 prevTemp@0) (segParent Heap@98 (MapType0Select Heap@98 prevTemp@0 sibling) temp@1)) (=> (and (= Mask@139 Mask@138) (= (ControlFlow 0 534) 532)) anon386_correct))))))
(let ((anon384_correct  (=> (and (= Mask@138 (MapType1Store Mask@137 null (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@137 null (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 temp@1) (MapType0Select Heap@98 null (heapseg prevTemp@0 temp@1)) (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1) (MapType0Select Heap@98 null (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1)))) (and (=> (= (ControlFlow 0 537) 534) anon875_Then_correct) (=> (= (ControlFlow 0 537) 536) anon875_Else_correct)))))
(let ((anon874_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 540) 537)) anon384_correct)))
(let ((anon874_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 538) (- 0 539)) (<= FullPerm (U_2_real (MapType1Select Mask@137 null (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@137 null (heapseg (MapType0Select Heap@98 prevTemp@0 sibling) temp@1)))) (=> (= (ControlFlow 0 538) 537) anon384_correct))))))
(let ((anon382_correct  (=> (= Mask@137 (MapType1Store Mask@136 prevTemp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@136 prevTemp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 541) 538) anon874_Then_correct) (=> (= (ControlFlow 0 541) 540) anon874_Else_correct)))))
(let ((anon873_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 544) 541)) anon382_correct)))
(let ((anon873_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 542) (- 0 543)) (<= FullPerm (U_2_real (MapType1Select Mask@136 prevTemp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@136 prevTemp@0 sibling))) (=> (= (ControlFlow 0 542) 541) anon382_correct))))))
(let ((anon380_correct  (=> (and (= Mask@136 (MapType1Store Mask@135 null (tree prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@135 null (tree prevTemp@0))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 temp@1) (MapType0Select Heap@98 null (heapseg prevTemp@0 temp@1)) (tree prevTemp@0) (MapType0Select Heap@98 null (tree prevTemp@0)))) (and (=> (= (ControlFlow 0 545) 542) anon873_Then_correct) (=> (= (ControlFlow 0 545) 544) anon873_Else_correct)))))
(let ((anon872_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 548) 545)) anon380_correct)))
(let ((anon872_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 546) (- 0 547)) (<= FullPerm (U_2_real (MapType1Select Mask@135 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@135 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 546) 545) anon380_correct))))))
(let ((anon871_Then_correct  (=> (not (= prevTemp@0 temp@1)) (and (=> (= (ControlFlow 0 549) 546) anon872_Then_correct) (=> (= (ControlFlow 0 549) 548) anon872_Else_correct)))))
(let ((anon871_Else_correct  (=> (= prevTemp@0 temp@1) (=> (and (= Mask@139 Mask@135) (= (ControlFlow 0 533) 532)) anon386_correct))))
(let ((anon377_correct  (=> (and (state Heap@98 Mask@135) (state Heap@98 Mask@135)) (and (=> (= (ControlFlow 0 550) 549) anon871_Then_correct) (=> (= (ControlFlow 0 550) 533) anon871_Else_correct)))))
(let ((anon870_Else_correct  (=> (= temp@1 temp@1) (=> (and (= Heap@98 Heap@94) (= (ControlFlow 0 552) 550)) anon377_correct))))
(let ((anon870_Then_correct  (=> (and (and (and (not (= temp@1 temp@1)) (forall ((o_107 T@U) (f_111 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_111))))
(let ((A@@16 (FieldTypeInv0 (type f_111))))
 (=> (and (and (= (type o_107) RefType) (= (type f_111) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|heapseg#sm| temp@1 temp@1)) o_107 f_111)) (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|tree#sm| temp@1)) o_107 f_111)))) (U_2_bool (MapType1Select newPMask@14 o_107 f_111)))))
 :qid |stdinbpl.14966:45|
 :skolemid |213|
 :pattern ( (MapType1Select newPMask@14 o_107 f_111))
))) (and (= Heap@95 (MapType0Store Heap@94 null (|heapseg#sm| temp@1 temp@1) newPMask@14)) (= Heap@96 (MapType0Store Heap@95 null (|heapseg#sm| temp@1 temp@1) (MapType1Store (MapType0Select Heap@95 null (|heapseg#sm| temp@1 temp@1)) temp@1 sibling (bool_2_U true)))))) (and (and (forall ((o_108 T@U) (f_112 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_112))))
(let ((A@@17 (FieldTypeInv0 (type f_112))))
 (=> (and (and (= (type o_108) RefType) (= (type f_112) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@96 null (|heapseg#sm| temp@1 temp@1)) o_108 f_112)) (U_2_bool (MapType1Select (MapType0Select Heap@96 null (|heapseg#sm| (MapType0Select Heap@96 temp@1 sibling) temp@1)) o_108 f_112)))) (U_2_bool (MapType1Select newPMask@15 o_108 f_112)))))
 :qid |stdinbpl.14973:45|
 :skolemid |214|
 :pattern ( (MapType1Select newPMask@15 o_108 f_112))
)) (= Heap@97 (MapType0Store Heap@96 null (|heapseg#sm| temp@1 temp@1) newPMask@15))) (and (= Heap@98 Heap@97) (= (ControlFlow 0 551) 550)))) anon377_correct)))
(let ((anon869_Else_correct  (=> (and (HasDirectPerm Mask@135 null (heapseg temp@1 temp@1)) (= Heap@94 Heap@24)) (and (=> (= (ControlFlow 0 554) 551) anon870_Then_correct) (=> (= (ControlFlow 0 554) 552) anon870_Else_correct)))))
(let ((anon869_Then_correct  (=> (and (and (not (HasDirectPerm Mask@135 null (heapseg temp@1 temp@1))) (= Heap@92 (MapType0Store Heap@24 null (|heapseg#sm| temp@1 temp@1) ZeroPMask))) (and (= Heap@93 (MapType0Store Heap@92 null (heapseg temp@1 temp@1) freshVersion@9)) (= Heap@94 Heap@93))) (and (=> (= (ControlFlow 0 553) 551) anon870_Then_correct) (=> (= (ControlFlow 0 553) 552) anon870_Else_correct)))))
(let ((anon373_correct  (=> (= Mask@135 (MapType1Store Mask@134 null (heapseg temp@1 temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@134 null (heapseg temp@1 temp@1))) FullPerm)))) (=> (and (and (state Heap@24 Mask@135) (state Heap@24 Mask@135)) (and (|heapseg#trigger| Heap@24 (heapseg temp@1 temp@1)) (= (MapType0Select Heap@24 null (heapseg temp@1 temp@1)) (FrameFragment (ite (not (= temp@1 temp@1)) (CombineFrames (MapType0Select Heap@24 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@24 temp@1 sibling)) (CombineFrames (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1)) (FrameFragment (ite (not (= (MapType0Select Heap@24 temp@1 sibling) temp@1)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 555) 553) anon869_Then_correct) (=> (= (ControlFlow 0 555) 554) anon869_Else_correct))))))
(let ((anon868_Else_correct  (=> (= (MapType0Select Heap@24 temp@1 sibling) temp@1) (=> (and (= Mask@134 Mask@133) (= (ControlFlow 0 559) 555)) anon373_correct))))
(let ((anon868_Then_correct  (=> (not (= (MapType0Select Heap@24 temp@1 sibling) temp@1)) (and (=> (= (ControlFlow 0 557) (- 0 558)) (= (treeParent Heap@24 temp@1) (segParent Heap@24 (MapType0Select Heap@24 temp@1 sibling) temp@1))) (=> (= (treeParent Heap@24 temp@1) (segParent Heap@24 (MapType0Select Heap@24 temp@1 sibling) temp@1)) (=> (and (= Mask@134 Mask@133) (= (ControlFlow 0 557) 555)) anon373_correct))))))
(let ((anon371_correct  (=> (and (= Mask@133 (MapType1Store Mask@132 null (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@132 null (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1))) FullPerm)))) (InsidePredicate (heapseg temp@1 temp@1) (MapType0Select Heap@24 null (heapseg temp@1 temp@1)) (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1) (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1)))) (and (=> (= (ControlFlow 0 560) 557) anon868_Then_correct) (=> (= (ControlFlow 0 560) 559) anon868_Else_correct)))))
(let ((anon867_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 563) 560)) anon371_correct)))
(let ((anon867_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 561) (- 0 562)) (<= FullPerm (U_2_real (MapType1Select Mask@132 null (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@132 null (heapseg (MapType0Select Heap@24 temp@1 sibling) temp@1)))) (=> (= (ControlFlow 0 561) 560) anon371_correct))))))
(let ((anon369_correct  (=> (= Mask@132 (MapType1Store Mask@131 temp@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@131 temp@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 564) 561) anon867_Then_correct) (=> (= (ControlFlow 0 564) 563) anon867_Else_correct)))))
(let ((anon866_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 567) 564)) anon369_correct)))
(let ((anon866_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 565) (- 0 566)) (<= FullPerm (U_2_real (MapType1Select Mask@131 temp@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 temp@1 sibling))) (=> (= (ControlFlow 0 565) 564) anon369_correct))))))
(let ((anon367_correct  (=> (and (= Mask@131 (MapType1Store Mask@69 null (tree temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@69 null (tree temp@1))) FullPerm)))) (InsidePredicate (heapseg temp@1 temp@1) (MapType0Select Heap@24 null (heapseg temp@1 temp@1)) (tree temp@1) (MapType0Select Heap@24 null (tree temp@1)))) (and (=> (= (ControlFlow 0 568) 565) anon866_Then_correct) (=> (= (ControlFlow 0 568) 567) anon866_Else_correct)))))
(let ((anon865_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 571) 568)) anon367_correct)))
(let ((anon865_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 569) (- 0 570)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1)))) (=> (= (ControlFlow 0 569) 568) anon367_correct))))))
(let ((anon864_Then_correct  (=> (not (= temp@1 temp@1)) (and (=> (= (ControlFlow 0 572) 569) anon865_Then_correct) (=> (= (ControlFlow 0 572) 571) anon865_Else_correct)))))
(let ((anon864_Else_correct  (=> (= temp@1 temp@1) (=> (and (= Mask@134 Mask@69) (= (ControlFlow 0 556) 555)) anon373_correct))))
(let ((anon856_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 573) 572) anon864_Then_correct) (=> (= (ControlFlow 0 573) 556) anon864_Else_correct)))))
(let ((anon855_Then_correct  (=> (or (not (= (treeDegree Heap@24 temp@1) (treeDegree Heap@24 nextTemp@1))) (and (not (= (MapType0Select Heap@24 nextTemp@1 sibling) null)) (= (segDegree Heap@24 (MapType0Select Heap@24 nextTemp@1 sibling) null 0) (treeDegree Heap@24 temp@1)))) (and (=> (= (ControlFlow 0 599) 597) anon856_Then_correct) (=> (= (ControlFlow 0 599) 573) anon856_Else_correct)))))
(let ((anon550_correct  (=> (and (state Heap@91 Mask@128) (= Mask@154 Mask@128)) (=> (and (and (= prevTemp@1 prevTemp@0) (= temp@3 temp@2)) (and (= Heap@114 Heap@91) (= (ControlFlow 0 235) 233))) anon551_correct))))
(let ((anon484_correct  (=> (and (and (= Heap@86 (MapType0Store Heap@85 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@85 null (|tree#sm| temp@1)) temp@1 key (bool_2_U true)))) (= Heap@87 (MapType0Store Heap@86 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@86 null (|tree#sm| temp@1)) temp@1 degree (bool_2_U true))))) (and (= Heap@88 (MapType0Store Heap@87 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@87 null (|tree#sm| temp@1)) temp@1 child (bool_2_U true)))) (= Heap@89 (MapType0Store Heap@88 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@88 null (|tree#sm| temp@1)) temp@1 parent (bool_2_U true)))))) (=> (and (and (and (forall ((o_114 T@U) (f_118 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_118))))
(let ((A@@18 (FieldTypeInv0 (type f_118))))
 (=> (and (and (= (type o_114) RefType) (= (type f_118) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@89 null (|tree#sm| temp@1)) o_114 f_118)) (U_2_bool (MapType1Select (MapType0Select Heap@89 null (|heapseg#sm| (MapType0Select Heap@89 temp@1 child) null)) o_114 f_118)))) (U_2_bool (MapType1Select newPMask@13 o_114 f_118)))))
 :qid |stdinbpl.15545:43|
 :skolemid |222|
 :pattern ( (MapType1Select newPMask@13 o_114 f_118))
)) (= Heap@90 (MapType0Store Heap@89 null (|tree#sm| temp@1) newPMask@13))) (and (state Heap@90 Mask@127) (state Heap@90 Mask@127))) (and (and (= temp@2 temp@1) (= Mask@128 Mask@127)) (and (= Heap@91 Heap@90) (= (ControlFlow 0 365) 235)))) anon550_correct))))
(let ((anon924_Else_correct  (=> (HasDirectPerm Mask@127 null (tree temp@1)) (=> (and (= Heap@85 Heap@82) (= (ControlFlow 0 367) 365)) anon484_correct))))
(let ((anon924_Then_correct  (=> (not (HasDirectPerm Mask@127 null (tree temp@1))) (=> (and (and (= Heap@83 (MapType0Store Heap@82 null (|tree#sm| temp@1) ZeroPMask)) (= Heap@84 (MapType0Store Heap@83 null (tree temp@1) freshVersion@8))) (and (= Heap@85 Heap@84) (= (ControlFlow 0 366) 365))) anon484_correct))))
(let ((anon482_correct  (=> (= Mask@127 (MapType1Store Mask@126 null (tree temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@126 null (tree temp@1))) FullPerm)))) (=> (and (and (state Heap@82 Mask@127) (state Heap@82 Mask@127)) (and (|tree#trigger| Heap@82 (tree temp@1)) (= (MapType0Select Heap@82 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@82 temp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@82 temp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@82 temp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@82 temp@1 parent)) (CombineFrames (MapType0Select Heap@82 null (heapseg (MapType0Select Heap@82 temp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@82 temp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@82 temp@1 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 368) 366) anon924_Then_correct) (=> (= (ControlFlow 0 368) 367) anon924_Else_correct))))))
(let ((anon923_Else_correct  (=> (and (= (MapType0Select Heap@82 temp@1 child) null) (= (ControlFlow 0 371) 368)) anon482_correct)))
(let ((anon923_Then_correct  (=> (not (= (MapType0Select Heap@82 temp@1 child) null)) (and (=> (= (ControlFlow 0 369) (- 0 370)) (= (segParent Heap@82 (MapType0Select Heap@82 temp@1 child) null) temp@1)) (=> (= (segParent Heap@82 (MapType0Select Heap@82 temp@1 child) null) temp@1) (=> (= (ControlFlow 0 369) 368) anon482_correct))))))
(let ((anon480_correct  (and (=> (= (ControlFlow 0 372) (- 0 373)) (validChildren Heap@82 (MapType0Select Heap@82 temp@1 child) null)) (=> (validChildren Heap@82 (MapType0Select Heap@82 temp@1 child) null) (and (=> (= (ControlFlow 0 372) 369) anon923_Then_correct) (=> (= (ControlFlow 0 372) 371) anon923_Else_correct))))))
(let ((anon922_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@82 temp@1 degree)) 0) (= (ControlFlow 0 376) 372)) anon480_correct)))
(let ((anon922_Then_correct  (=> (< 0 (U_2_int (MapType0Select Heap@82 temp@1 degree))) (and (=> (= (ControlFlow 0 374) (- 0 375)) (= (segDegree Heap@82 (MapType0Select Heap@82 temp@1 child) null 0) (- (U_2_int (MapType0Select Heap@82 temp@1 degree)) 1))) (=> (= (segDegree Heap@82 (MapType0Select Heap@82 temp@1 child) null 0) (- (U_2_int (MapType0Select Heap@82 temp@1 degree)) 1)) (=> (= (ControlFlow 0 374) 372) anon480_correct))))))
(let ((anon478_correct  (=> (and (= Mask@126 (MapType1Store Mask@125 null (heapseg (MapType0Select Heap@82 temp@1 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@125 null (heapseg (MapType0Select Heap@82 temp@1 child) null))) FullPerm)))) (InsidePredicate (tree temp@1) (MapType0Select Heap@82 null (tree temp@1)) (heapseg (MapType0Select Heap@82 temp@1 child) null) (MapType0Select Heap@82 null (heapseg (MapType0Select Heap@82 temp@1 child) null)))) (and (=> (= (ControlFlow 0 377) (- 0 378)) (= (U_2_int (MapType0Select Heap@82 temp@1 degree)) (segLength Heap@82 (MapType0Select Heap@82 temp@1 child) null))) (=> (= (U_2_int (MapType0Select Heap@82 temp@1 degree)) (segLength Heap@82 (MapType0Select Heap@82 temp@1 child) null)) (and (=> (= (ControlFlow 0 377) 374) anon922_Then_correct) (=> (= (ControlFlow 0 377) 376) anon922_Else_correct)))))))
(let ((anon921_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 381) 377)) anon478_correct)))
(let ((anon921_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 379) (- 0 380)) (<= FullPerm (U_2_real (MapType1Select Mask@125 null (heapseg (MapType0Select Heap@82 temp@1 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@125 null (heapseg (MapType0Select Heap@82 temp@1 child) null)))) (=> (= (ControlFlow 0 379) 377) anon478_correct))))))
(let ((anon476_correct  (=> (= Mask@125 (MapType1Store Mask@124 temp@1 parent (real_2_U (- (U_2_real (MapType1Select Mask@124 temp@1 parent)) FullPerm)))) (and (=> (= (ControlFlow 0 382) (- 0 383)) (<= 0 (U_2_int (MapType0Select Heap@82 temp@1 degree)))) (=> (<= 0 (U_2_int (MapType0Select Heap@82 temp@1 degree))) (and (=> (= (ControlFlow 0 382) 379) anon921_Then_correct) (=> (= (ControlFlow 0 382) 381) anon921_Else_correct)))))))
(let ((anon920_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 386) 382)) anon476_correct)))
(let ((anon920_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 384) (- 0 385)) (<= FullPerm (U_2_real (MapType1Select Mask@124 temp@1 parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@124 temp@1 parent))) (=> (= (ControlFlow 0 384) 382) anon476_correct))))))
(let ((anon474_correct  (=> (= Mask@124 (MapType1Store Mask@123 temp@1 child (real_2_U (- (U_2_real (MapType1Select Mask@123 temp@1 child)) FullPerm)))) (and (=> (= (ControlFlow 0 387) 384) anon920_Then_correct) (=> (= (ControlFlow 0 387) 386) anon920_Else_correct)))))
(let ((anon919_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 390) 387)) anon474_correct)))
(let ((anon919_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 388) (- 0 389)) (<= FullPerm (U_2_real (MapType1Select Mask@123 temp@1 child)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@123 temp@1 child))) (=> (= (ControlFlow 0 388) 387) anon474_correct))))))
(let ((anon472_correct  (=> (= Mask@123 (MapType1Store Mask@122 temp@1 degree (real_2_U (- (U_2_real (MapType1Select Mask@122 temp@1 degree)) FullPerm)))) (and (=> (= (ControlFlow 0 391) 388) anon919_Then_correct) (=> (= (ControlFlow 0 391) 390) anon919_Else_correct)))))
(let ((anon918_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 394) 391)) anon472_correct)))
(let ((anon918_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 392) (- 0 393)) (<= FullPerm (U_2_real (MapType1Select Mask@122 temp@1 degree)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@122 temp@1 degree))) (=> (= (ControlFlow 0 392) 391) anon472_correct))))))
(let ((anon470_correct  (=> (= Mask@122 (MapType1Store Mask@121 temp@1 key (real_2_U (- (U_2_real (MapType1Select Mask@121 temp@1 key)) FullPerm)))) (and (=> (= (ControlFlow 0 395) 392) anon918_Then_correct) (=> (= (ControlFlow 0 395) 394) anon918_Else_correct)))))
(let ((anon917_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 398) 395)) anon470_correct)))
(let ((anon917_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 396) (- 0 397)) (<= FullPerm (U_2_real (MapType1Select Mask@121 temp@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@121 temp@1 key))) (=> (= (ControlFlow 0 396) 395) anon470_correct))))))
(let ((anon468_correct  (=> (and (state Heap@82 Mask@121) (state Heap@82 Mask@121)) (and (=> (= (ControlFlow 0 399) 396) anon917_Then_correct) (=> (= (ControlFlow 0 399) 398) anon917_Else_correct)))))
(let ((anon916_Else_correct  (=> (= (MapType0Select Heap@78 temp@1 child) null) (=> (and (= Heap@82 Heap@78) (= (ControlFlow 0 401) 399)) anon468_correct))))
(let ((anon916_Then_correct  (=> (and (and (and (not (= (MapType0Select Heap@78 temp@1 child) null)) (forall ((o_112 T@U) (f_116 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_116))))
(let ((A@@19 (FieldTypeInv0 (type f_116))))
 (=> (and (and (= (type o_112) RefType) (= (type f_116) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@78 null (|heapseg#sm| (MapType0Select Heap@78 temp@1 child) null)) o_112 f_116)) (U_2_bool (MapType1Select (MapType0Select Heap@78 null (|tree#sm| (MapType0Select Heap@78 temp@1 child))) o_112 f_116)))) (U_2_bool (MapType1Select newPMask@11 o_112 f_116)))))
 :qid |stdinbpl.15463:45|
 :skolemid |220|
 :pattern ( (MapType1Select newPMask@11 o_112 f_116))
))) (and (= Heap@79 (MapType0Store Heap@78 null (|heapseg#sm| (MapType0Select Heap@78 temp@1 child) null) newPMask@11)) (= Heap@80 (MapType0Store Heap@79 null (|heapseg#sm| (MapType0Select Heap@79 temp@1 child) null) (MapType1Store (MapType0Select Heap@79 null (|heapseg#sm| (MapType0Select Heap@79 temp@1 child) null)) (MapType0Select Heap@79 temp@1 child) sibling (bool_2_U true)))))) (and (and (forall ((o_113 T@U) (f_117 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_117))))
(let ((A@@20 (FieldTypeInv0 (type f_117))))
 (=> (and (and (= (type o_113) RefType) (= (type f_117) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@80 null (|heapseg#sm| (MapType0Select Heap@80 temp@1 child) null)) o_113 f_117)) (U_2_bool (MapType1Select (MapType0Select Heap@80 null (|heapseg#sm| (MapType0Select Heap@80 (MapType0Select Heap@80 temp@1 child) sibling) null)) o_113 f_117)))) (U_2_bool (MapType1Select newPMask@12 o_113 f_117)))))
 :qid |stdinbpl.15470:45|
 :skolemid |221|
 :pattern ( (MapType1Select newPMask@12 o_113 f_117))
)) (= Heap@81 (MapType0Store Heap@80 null (|heapseg#sm| (MapType0Select Heap@80 temp@1 child) null) newPMask@12))) (and (= Heap@82 Heap@81) (= (ControlFlow 0 400) 399)))) anon468_correct)))
(let ((anon915_Else_correct  (=> (and (HasDirectPerm Mask@121 null (heapseg (MapType0Select Heap@75 temp@1 child) null)) (= Heap@78 Heap@75)) (and (=> (= (ControlFlow 0 403) 400) anon916_Then_correct) (=> (= (ControlFlow 0 403) 401) anon916_Else_correct)))))
(let ((anon915_Then_correct  (=> (and (and (not (HasDirectPerm Mask@121 null (heapseg (MapType0Select Heap@75 temp@1 child) null))) (= Heap@76 (MapType0Store Heap@75 null (|heapseg#sm| (MapType0Select Heap@75 temp@1 child) null) ZeroPMask))) (and (= Heap@77 (MapType0Store Heap@76 null (heapseg (MapType0Select Heap@76 temp@1 child) null) freshVersion@7)) (= Heap@78 Heap@77))) (and (=> (= (ControlFlow 0 402) 400) anon916_Then_correct) (=> (= (ControlFlow 0 402) 401) anon916_Else_correct)))))
(let ((anon464_correct  (=> (= Mask@121 (MapType1Store Mask@120 null (heapseg (MapType0Select Heap@75 temp@1 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@120 null (heapseg (MapType0Select Heap@75 temp@1 child) null))) FullPerm)))) (=> (and (and (state Heap@75 Mask@121) (state Heap@75 Mask@121)) (and (|heapseg#trigger| Heap@75 (heapseg (MapType0Select Heap@75 temp@1 child) null)) (= (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 temp@1 child) null)) (FrameFragment (ite (not (= (MapType0Select Heap@75 temp@1 child) null)) (CombineFrames (MapType0Select Heap@75 null (tree (MapType0Select Heap@75 temp@1 child))) (CombineFrames (FrameFragment (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling)) (CombineFrames (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 404) 402) anon915_Then_correct) (=> (= (ControlFlow 0 404) 403) anon915_Else_correct))))))
(let ((anon914_Else_correct  (=> (= (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null) (=> (and (= Mask@120 Mask@119) (= (ControlFlow 0 408) 404)) anon464_correct))))
(let ((anon914_Then_correct  (=> (not (= (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null)) (and (=> (= (ControlFlow 0 406) (- 0 407)) (= (treeParent Heap@75 (MapType0Select Heap@75 temp@1 child)) (segParent Heap@75 (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null))) (=> (= (treeParent Heap@75 (MapType0Select Heap@75 temp@1 child)) (segParent Heap@75 (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null)) (=> (and (= Mask@120 Mask@119) (= (ControlFlow 0 406) 404)) anon464_correct))))))
(let ((anon462_correct  (=> (and (= Mask@119 (MapType1Store Mask@118 null (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@118 null (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@75 temp@1 child) null) (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 temp@1 child) null)) (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null) (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null)))) (and (=> (= (ControlFlow 0 409) 406) anon914_Then_correct) (=> (= (ControlFlow 0 409) 408) anon914_Else_correct)))))
(let ((anon913_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 412) 409)) anon462_correct)))
(let ((anon913_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 410) (- 0 411)) (<= FullPerm (U_2_real (MapType1Select Mask@118 null (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@118 null (heapseg (MapType0Select Heap@75 (MapType0Select Heap@75 temp@1 child) sibling) null)))) (=> (= (ControlFlow 0 410) 409) anon462_correct))))))
(let ((anon460_correct  (=> (= Mask@118 (MapType1Store Mask@117 (MapType0Select Heap@75 temp@1 child) sibling (real_2_U (- (U_2_real (MapType1Select Mask@117 (MapType0Select Heap@75 temp@1 child) sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 413) 410) anon913_Then_correct) (=> (= (ControlFlow 0 413) 412) anon913_Else_correct)))))
(let ((anon912_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 416) 413)) anon460_correct)))
(let ((anon912_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 414) (- 0 415)) (<= FullPerm (U_2_real (MapType1Select Mask@117 (MapType0Select Heap@75 temp@1 child) sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@117 (MapType0Select Heap@75 temp@1 child) sibling))) (=> (= (ControlFlow 0 414) 413) anon460_correct))))))
(let ((anon458_correct  (=> (and (= Mask@117 (MapType1Store Mask@116 null (tree (MapType0Select Heap@75 temp@1 child)) (real_2_U (- (U_2_real (MapType1Select Mask@116 null (tree (MapType0Select Heap@75 temp@1 child)))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@75 temp@1 child) null) (MapType0Select Heap@75 null (heapseg (MapType0Select Heap@75 temp@1 child) null)) (tree (MapType0Select Heap@75 temp@1 child)) (MapType0Select Heap@75 null (tree (MapType0Select Heap@75 temp@1 child))))) (and (=> (= (ControlFlow 0 417) 414) anon912_Then_correct) (=> (= (ControlFlow 0 417) 416) anon912_Else_correct)))))
(let ((anon911_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 420) 417)) anon458_correct)))
(let ((anon911_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 418) (- 0 419)) (<= FullPerm (U_2_real (MapType1Select Mask@116 null (tree (MapType0Select Heap@75 temp@1 child)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@116 null (tree (MapType0Select Heap@75 temp@1 child))))) (=> (= (ControlFlow 0 418) 417) anon458_correct))))))
(let ((anon910_Then_correct  (=> (not (= (MapType0Select Heap@75 temp@1 child) null)) (and (=> (= (ControlFlow 0 421) 418) anon911_Then_correct) (=> (= (ControlFlow 0 421) 420) anon911_Else_correct)))))
(let ((anon910_Else_correct  (=> (= (MapType0Select Heap@75 temp@1 child) null) (=> (and (= Mask@120 Mask@116) (= (ControlFlow 0 405) 404)) anon464_correct))))
(let ((anon455_correct  (=> (and (state Heap@72 Mask@116) (state Heap@72 Mask@116)) (and (=> (= (ControlFlow 0 422) (- 0 428)) (HasDirectPerm Mask@116 temp@1 child)) (=> (HasDirectPerm Mask@116 temp@1 child) (and (=> (= (ControlFlow 0 422) (- 0 427)) (= FullPerm (U_2_real (MapType1Select Mask@116 nextTemp@1 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@116 nextTemp@1 sibling))) (=> (and (= Heap@73 (MapType0Store Heap@72 nextTemp@1 sibling (MapType0Select Heap@72 temp@1 child))) (state Heap@73 Mask@116)) (and (=> (= (ControlFlow 0 422) (- 0 426)) (= FullPerm (U_2_real (MapType1Select Mask@116 temp@1 child)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@116 temp@1 child))) (=> (and (= Heap@74 (MapType0Store Heap@73 temp@1 child nextTemp@1)) (state Heap@74 Mask@116)) (and (=> (= (ControlFlow 0 422) (- 0 425)) (HasDirectPerm Mask@116 temp@1 degree)) (=> (HasDirectPerm Mask@116 temp@1 degree) (and (=> (= (ControlFlow 0 422) (- 0 424)) (= FullPerm (U_2_real (MapType1Select Mask@116 temp@1 degree)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@116 temp@1 degree))) (=> (and (= Heap@75 (MapType0Store Heap@74 temp@1 degree (int_2_U (+ (U_2_int (MapType0Select Heap@74 temp@1 degree)) 1)))) (state Heap@75 Mask@116)) (and (=> (= (ControlFlow 0 422) (- 0 423)) (HasDirectPerm Mask@116 temp@1 child)) (=> (HasDirectPerm Mask@116 temp@1 child) (and (=> (= (ControlFlow 0 422) 421) anon910_Then_correct) (=> (= (ControlFlow 0 422) 405) anon910_Else_correct))))))))))))))))))))
(let ((anon909_Else_correct  (=> (and (= (MapType0Select Heap@72 temp@1 child) null) (= (ControlFlow 0 430) 422)) anon455_correct)))
(let ((anon909_Then_correct  (=> (and (and (not (= (MapType0Select Heap@72 temp@1 child) null)) (state Heap@72 Mask@116)) (and (= (segParent Heap@72 (MapType0Select Heap@72 temp@1 child) null) temp@1) (= (ControlFlow 0 429) 422))) anon455_correct)))
(let ((anon453_correct  (=> (and (state Heap@72 Mask@116) (validChildren Heap@72 (MapType0Select Heap@72 temp@1 child) null)) (and (=> (= (ControlFlow 0 431) 429) anon909_Then_correct) (=> (= (ControlFlow 0 431) 430) anon909_Else_correct)))))
(let ((anon908_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@72 temp@1 degree)) 0) (= (ControlFlow 0 433) 431)) anon453_correct)))
(let ((anon908_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@72 temp@1 degree))) (state Heap@72 Mask@116)) (and (= (segDegree Heap@72 (MapType0Select Heap@72 temp@1 child) null 0) (- (U_2_int (MapType0Select Heap@72 temp@1 degree)) 1)) (= (ControlFlow 0 432) 431))) anon453_correct)))
(let ((anon451_correct  (=> (and (not (= temp@1 null)) (= Mask@112 (MapType1Store Mask@111 temp@1 key (real_2_U (+ (U_2_real (MapType1Select Mask@111 temp@1 key)) FullPerm))))) (=> (and (and (and (and (state Heap@72 Mask@112) (not (= temp@1 null))) (and (= Mask@113 (MapType1Store Mask@112 temp@1 degree (real_2_U (+ (U_2_real (MapType1Select Mask@112 temp@1 degree)) FullPerm)))) (state Heap@72 Mask@113))) (and (and (not (= temp@1 null)) (= Mask@114 (MapType1Store Mask@113 temp@1 child (real_2_U (+ (U_2_real (MapType1Select Mask@113 temp@1 child)) FullPerm))))) (and (state Heap@72 Mask@114) (not (= temp@1 null))))) (and (and (and (= Mask@115 (MapType1Store Mask@114 temp@1 parent (real_2_U (+ (U_2_real (MapType1Select Mask@114 temp@1 parent)) FullPerm)))) (state Heap@72 Mask@115)) (and (<= 0 (U_2_int (MapType0Select Heap@72 temp@1 degree))) (= Mask@116 (MapType1Store Mask@115 null (heapseg (MapType0Select Heap@72 temp@1 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@115 null (heapseg (MapType0Select Heap@72 temp@1 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree temp@1) (MapType0Select Heap@72 null (tree temp@1)) (heapseg (MapType0Select Heap@72 temp@1 child) null) (MapType0Select Heap@72 null (heapseg (MapType0Select Heap@72 temp@1 child) null))) (state Heap@72 Mask@116)) (and (state Heap@72 Mask@116) (= (U_2_int (MapType0Select Heap@72 temp@1 degree)) (segLength Heap@72 (MapType0Select Heap@72 temp@1 child) null)))))) (and (=> (= (ControlFlow 0 434) 432) anon908_Then_correct) (=> (= (ControlFlow 0 434) 433) anon908_Else_correct))))))
(let ((anon907_Else_correct  (=> (HasDirectPerm Mask@111 null (tree temp@1)) (=> (and (= Heap@72 Heap@70) (= (ControlFlow 0 436) 434)) anon451_correct))))
(let ((anon907_Then_correct  (=> (and (and (not (HasDirectPerm Mask@111 null (tree temp@1))) (= Heap@71 (MapType0Store Heap@70 null (tree temp@1) newVersion@5))) (and (= Heap@72 Heap@71) (= (ControlFlow 0 435) 434))) anon451_correct)))
(let ((anon449_correct  (=> (= Mask@111 (MapType1Store Mask@110 null (tree temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@110 null (tree temp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 437) 435) anon907_Then_correct) (=> (= (ControlFlow 0 437) 436) anon907_Else_correct)))))
(let ((anon906_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 440) 437)) anon449_correct)))
(let ((anon906_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 438) (- 0 439)) (<= FullPerm (U_2_real (MapType1Select Mask@110 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@110 null (tree temp@1)))) (=> (= (ControlFlow 0 438) 437) anon449_correct))))))
(let ((anon447_correct  (=> (and (= Heap@66 (MapType0Store Heap@65 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@65 null (|tree#sm| nextTemp@1)) nextTemp@1 key (bool_2_U true)))) (= Heap@67 (MapType0Store Heap@66 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@66 null (|tree#sm| nextTemp@1)) nextTemp@1 degree (bool_2_U true))))) (=> (and (and (and (= Heap@68 (MapType0Store Heap@67 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@67 null (|tree#sm| nextTemp@1)) nextTemp@1 child (bool_2_U true)))) (= Heap@69 (MapType0Store Heap@68 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@68 null (|tree#sm| nextTemp@1)) nextTemp@1 parent (bool_2_U true))))) (and (forall ((o_111 T@U) (f_115 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_115))))
(let ((A@@21 (FieldTypeInv0 (type f_115))))
 (=> (and (and (= (type o_111) RefType) (= (type f_115) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@69 null (|tree#sm| nextTemp@1)) o_111 f_115)) (U_2_bool (MapType1Select (MapType0Select Heap@69 null (|heapseg#sm| (MapType0Select Heap@69 nextTemp@1 child) null)) o_111 f_115)))) (U_2_bool (MapType1Select newPMask@10 o_111 f_115)))))
 :qid |stdinbpl.15324:43|
 :skolemid |219|
 :pattern ( (MapType1Select newPMask@10 o_111 f_115))
)) (= Heap@70 (MapType0Store Heap@69 null (|tree#sm| nextTemp@1) newPMask@10)))) (and (and (state Heap@70 Mask@110) (state Heap@70 Mask@110)) (and (|tree#trigger| Heap@70 (tree temp@1)) (= (MapType0Select Heap@70 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@70 temp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@70 temp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@70 temp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@70 temp@1 parent)) (CombineFrames (MapType0Select Heap@70 null (heapseg (MapType0Select Heap@70 temp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@70 temp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@70 temp@1 child) null)) EmptyFrame EmptyFrame)))))))))))) (and (=> (= (ControlFlow 0 441) 438) anon906_Then_correct) (=> (= (ControlFlow 0 441) 440) anon906_Else_correct))))))
(let ((anon905_Else_correct  (=> (HasDirectPerm Mask@110 null (tree nextTemp@1)) (=> (and (= Heap@65 Heap@62) (= (ControlFlow 0 443) 441)) anon447_correct))))
(let ((anon905_Then_correct  (=> (not (HasDirectPerm Mask@110 null (tree nextTemp@1))) (=> (and (and (= Heap@63 (MapType0Store Heap@62 null (|tree#sm| nextTemp@1) ZeroPMask)) (= Heap@64 (MapType0Store Heap@63 null (tree nextTemp@1) freshVersion@6))) (and (= Heap@65 Heap@64) (= (ControlFlow 0 442) 441))) anon447_correct))))
(let ((anon445_correct  (=> (= Mask@110 (MapType1Store Mask@109 null (tree nextTemp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@109 null (tree nextTemp@1))) FullPerm)))) (=> (and (and (state Heap@62 Mask@110) (state Heap@62 Mask@110)) (and (|tree#trigger| Heap@62 (tree nextTemp@1)) (= (MapType0Select Heap@62 null (tree nextTemp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@62 nextTemp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@62 nextTemp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@62 nextTemp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@62 nextTemp@1 parent)) (CombineFrames (MapType0Select Heap@62 null (heapseg (MapType0Select Heap@62 nextTemp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@62 nextTemp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@62 nextTemp@1 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 444) 442) anon905_Then_correct) (=> (= (ControlFlow 0 444) 443) anon905_Else_correct))))))
(let ((anon904_Else_correct  (=> (and (= (MapType0Select Heap@62 nextTemp@1 child) null) (= (ControlFlow 0 447) 444)) anon445_correct)))
(let ((anon904_Then_correct  (=> (not (= (MapType0Select Heap@62 nextTemp@1 child) null)) (and (=> (= (ControlFlow 0 445) (- 0 446)) (= (segParent Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null) nextTemp@1)) (=> (= (segParent Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null) nextTemp@1) (=> (= (ControlFlow 0 445) 444) anon445_correct))))))
(let ((anon443_correct  (and (=> (= (ControlFlow 0 448) (- 0 449)) (validChildren Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null)) (=> (validChildren Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null) (and (=> (= (ControlFlow 0 448) 445) anon904_Then_correct) (=> (= (ControlFlow 0 448) 447) anon904_Else_correct))))))
(let ((anon903_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@62 nextTemp@1 degree)) 0) (= (ControlFlow 0 452) 448)) anon443_correct)))
(let ((anon903_Then_correct  (=> (< 0 (U_2_int (MapType0Select Heap@62 nextTemp@1 degree))) (and (=> (= (ControlFlow 0 450) (- 0 451)) (= (segDegree Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null 0) (- (U_2_int (MapType0Select Heap@62 nextTemp@1 degree)) 1))) (=> (= (segDegree Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null 0) (- (U_2_int (MapType0Select Heap@62 nextTemp@1 degree)) 1)) (=> (= (ControlFlow 0 450) 448) anon443_correct))))))
(let ((anon441_correct  (=> (and (= Mask@109 (MapType1Store Mask@108 null (heapseg (MapType0Select Heap@62 nextTemp@1 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@108 null (heapseg (MapType0Select Heap@62 nextTemp@1 child) null))) FullPerm)))) (InsidePredicate (tree nextTemp@1) (MapType0Select Heap@62 null (tree nextTemp@1)) (heapseg (MapType0Select Heap@62 nextTemp@1 child) null) (MapType0Select Heap@62 null (heapseg (MapType0Select Heap@62 nextTemp@1 child) null)))) (and (=> (= (ControlFlow 0 453) (- 0 454)) (= (U_2_int (MapType0Select Heap@62 nextTemp@1 degree)) (segLength Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null))) (=> (= (U_2_int (MapType0Select Heap@62 nextTemp@1 degree)) (segLength Heap@62 (MapType0Select Heap@62 nextTemp@1 child) null)) (and (=> (= (ControlFlow 0 453) 450) anon903_Then_correct) (=> (= (ControlFlow 0 453) 452) anon903_Else_correct)))))))
(let ((anon902_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 457) 453)) anon441_correct)))
(let ((anon902_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 455) (- 0 456)) (<= FullPerm (U_2_real (MapType1Select Mask@108 null (heapseg (MapType0Select Heap@62 nextTemp@1 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@108 null (heapseg (MapType0Select Heap@62 nextTemp@1 child) null)))) (=> (= (ControlFlow 0 455) 453) anon441_correct))))))
(let ((anon439_correct  (=> (= Mask@108 (MapType1Store Mask@107 nextTemp@1 parent (real_2_U (- (U_2_real (MapType1Select Mask@107 nextTemp@1 parent)) FullPerm)))) (and (=> (= (ControlFlow 0 458) (- 0 459)) (<= 0 (U_2_int (MapType0Select Heap@62 nextTemp@1 degree)))) (=> (<= 0 (U_2_int (MapType0Select Heap@62 nextTemp@1 degree))) (and (=> (= (ControlFlow 0 458) 455) anon902_Then_correct) (=> (= (ControlFlow 0 458) 457) anon902_Else_correct)))))))
(let ((anon901_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 462) 458)) anon439_correct)))
(let ((anon901_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 460) (- 0 461)) (<= FullPerm (U_2_real (MapType1Select Mask@107 nextTemp@1 parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@107 nextTemp@1 parent))) (=> (= (ControlFlow 0 460) 458) anon439_correct))))))
(let ((anon437_correct  (=> (= Mask@107 (MapType1Store Mask@106 nextTemp@1 child (real_2_U (- (U_2_real (MapType1Select Mask@106 nextTemp@1 child)) FullPerm)))) (and (=> (= (ControlFlow 0 463) 460) anon901_Then_correct) (=> (= (ControlFlow 0 463) 462) anon901_Else_correct)))))
(let ((anon900_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 466) 463)) anon437_correct)))
(let ((anon900_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 464) (- 0 465)) (<= FullPerm (U_2_real (MapType1Select Mask@106 nextTemp@1 child)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@106 nextTemp@1 child))) (=> (= (ControlFlow 0 464) 463) anon437_correct))))))
(let ((anon435_correct  (=> (= Mask@106 (MapType1Store Mask@105 nextTemp@1 degree (real_2_U (- (U_2_real (MapType1Select Mask@105 nextTemp@1 degree)) FullPerm)))) (and (=> (= (ControlFlow 0 467) 464) anon900_Then_correct) (=> (= (ControlFlow 0 467) 466) anon900_Else_correct)))))
(let ((anon899_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 470) 467)) anon435_correct)))
(let ((anon899_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 468) (- 0 469)) (<= FullPerm (U_2_real (MapType1Select Mask@105 nextTemp@1 degree)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@105 nextTemp@1 degree))) (=> (= (ControlFlow 0 468) 467) anon435_correct))))))
(let ((anon433_correct  (=> (= Mask@105 (MapType1Store Mask@104 nextTemp@1 key (real_2_U (- (U_2_real (MapType1Select Mask@104 nextTemp@1 key)) FullPerm)))) (and (=> (= (ControlFlow 0 471) 468) anon899_Then_correct) (=> (= (ControlFlow 0 471) 470) anon899_Else_correct)))))
(let ((anon898_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 474) 471)) anon433_correct)))
(let ((anon898_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 472) (- 0 473)) (<= FullPerm (U_2_real (MapType1Select Mask@104 nextTemp@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@104 nextTemp@1 key))) (=> (= (ControlFlow 0 472) 471) anon433_correct))))))
(let ((anon431_correct  (=> (and (state Heap@61 Mask@104) (state Heap@61 Mask@104)) (and (=> (= (ControlFlow 0 475) (- 0 476)) (= FullPerm (U_2_real (MapType1Select Mask@104 nextTemp@1 parent)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@104 nextTemp@1 parent))) (=> (and (= Heap@62 (MapType0Store Heap@61 nextTemp@1 parent temp@1)) (state Heap@62 Mask@104)) (and (=> (= (ControlFlow 0 475) 472) anon898_Then_correct) (=> (= (ControlFlow 0 475) 474) anon898_Else_correct))))))))
(let ((anon897_Else_correct  (=> (and (= (MapType0Select Heap@61 nextTemp@1 child) null) (= (ControlFlow 0 478) 475)) anon431_correct)))
(let ((anon897_Then_correct  (=> (and (and (not (= (MapType0Select Heap@61 nextTemp@1 child) null)) (state Heap@61 Mask@104)) (and (= (segParent Heap@61 (MapType0Select Heap@61 nextTemp@1 child) null) nextTemp@1) (= (ControlFlow 0 477) 475))) anon431_correct)))
(let ((anon429_correct  (=> (and (state Heap@61 Mask@104) (validChildren Heap@61 (MapType0Select Heap@61 nextTemp@1 child) null)) (and (=> (= (ControlFlow 0 479) 477) anon897_Then_correct) (=> (= (ControlFlow 0 479) 478) anon897_Else_correct)))))
(let ((anon896_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@61 nextTemp@1 degree)) 0) (= (ControlFlow 0 481) 479)) anon429_correct)))
(let ((anon896_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@61 nextTemp@1 degree))) (state Heap@61 Mask@104)) (and (= (segDegree Heap@61 (MapType0Select Heap@61 nextTemp@1 child) null 0) (- (U_2_int (MapType0Select Heap@61 nextTemp@1 degree)) 1)) (= (ControlFlow 0 480) 479))) anon429_correct)))
(let ((anon427_correct  (=> (and (not (= nextTemp@1 null)) (= Mask@100 (MapType1Store Mask@99 nextTemp@1 key (real_2_U (+ (U_2_real (MapType1Select Mask@99 nextTemp@1 key)) FullPerm))))) (=> (and (and (and (and (state Heap@61 Mask@100) (not (= nextTemp@1 null))) (and (= Mask@101 (MapType1Store Mask@100 nextTemp@1 degree (real_2_U (+ (U_2_real (MapType1Select Mask@100 nextTemp@1 degree)) FullPerm)))) (state Heap@61 Mask@101))) (and (and (not (= nextTemp@1 null)) (= Mask@102 (MapType1Store Mask@101 nextTemp@1 child (real_2_U (+ (U_2_real (MapType1Select Mask@101 nextTemp@1 child)) FullPerm))))) (and (state Heap@61 Mask@102) (not (= nextTemp@1 null))))) (and (and (and (= Mask@103 (MapType1Store Mask@102 nextTemp@1 parent (real_2_U (+ (U_2_real (MapType1Select Mask@102 nextTemp@1 parent)) FullPerm)))) (state Heap@61 Mask@103)) (and (<= 0 (U_2_int (MapType0Select Heap@61 nextTemp@1 degree))) (= Mask@104 (MapType1Store Mask@103 null (heapseg (MapType0Select Heap@61 nextTemp@1 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@103 null (heapseg (MapType0Select Heap@61 nextTemp@1 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree nextTemp@1) (MapType0Select Heap@61 null (tree nextTemp@1)) (heapseg (MapType0Select Heap@61 nextTemp@1 child) null) (MapType0Select Heap@61 null (heapseg (MapType0Select Heap@61 nextTemp@1 child) null))) (state Heap@61 Mask@104)) (and (state Heap@61 Mask@104) (= (U_2_int (MapType0Select Heap@61 nextTemp@1 degree)) (segLength Heap@61 (MapType0Select Heap@61 nextTemp@1 child) null)))))) (and (=> (= (ControlFlow 0 482) 480) anon896_Then_correct) (=> (= (ControlFlow 0 482) 481) anon896_Else_correct))))))
(let ((anon895_Else_correct  (=> (HasDirectPerm Mask@99 null (tree nextTemp@1)) (=> (and (= Heap@61 Heap@25) (= (ControlFlow 0 484) 482)) anon427_correct))))
(let ((anon895_Then_correct  (=> (and (and (not (HasDirectPerm Mask@99 null (tree nextTemp@1))) (= Heap@60 (MapType0Store Heap@25 null (tree nextTemp@1) newVersion@4))) (and (= Heap@61 Heap@60) (= (ControlFlow 0 483) 482))) anon427_correct)))
(let ((anon425_correct  (=> (= Mask@99 (MapType1Store Mask@69 null (tree nextTemp@1) (real_2_U (- (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 485) 483) anon895_Then_correct) (=> (= (ControlFlow 0 485) 484) anon895_Else_correct)))))
(let ((anon894_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 488) 485)) anon425_correct)))
(let ((anon894_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 486) (- 0 487)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1)))) (=> (= (ControlFlow 0 486) 485) anon425_correct))))))
(let ((anon893_Then_correct  (=> (<= (treeKey Heap@24 temp@1) (treeKey Heap@24 nextTemp@1)) (and (=> (= (ControlFlow 0 489) (- 0 491)) (HasDirectPerm Mask@69 nextTemp@1 sibling)) (=> (HasDirectPerm Mask@69 nextTemp@1 sibling) (and (=> (= (ControlFlow 0 489) (- 0 490)) (= FullPerm (U_2_real (MapType1Select Mask@69 temp@1 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@69 temp@1 sibling))) (=> (and (and (= Heap@25 (MapType0Store Heap@24 temp@1 sibling (MapType0Select Heap@24 nextTemp@1 sibling))) (state Heap@25 Mask@69)) (and (|tree#trigger| Heap@25 (tree nextTemp@1)) (= (MapType0Select Heap@25 null (tree nextTemp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@25 nextTemp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@25 nextTemp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@25 nextTemp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@25 nextTemp@1 parent)) (CombineFrames (MapType0Select Heap@25 null (heapseg (MapType0Select Heap@25 nextTemp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@25 nextTemp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@25 nextTemp@1 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 489) 486) anon894_Then_correct) (=> (= (ControlFlow 0 489) 488) anon894_Else_correct))))))))))
(let ((anon549_correct  (=> (= Heap@55 (MapType0Store Heap@54 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@54 null (|tree#sm| nextTemp@1)) nextTemp@1 key (bool_2_U true)))) (=> (and (and (= Heap@56 (MapType0Store Heap@55 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@55 null (|tree#sm| nextTemp@1)) nextTemp@1 degree (bool_2_U true)))) (= Heap@57 (MapType0Store Heap@56 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@56 null (|tree#sm| nextTemp@1)) nextTemp@1 child (bool_2_U true))))) (and (= Heap@58 (MapType0Store Heap@57 null (|tree#sm| nextTemp@1) (MapType1Store (MapType0Select Heap@57 null (|tree#sm| nextTemp@1)) nextTemp@1 parent (bool_2_U true)))) (forall ((o_118 T@U) (f_122 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_122))))
(let ((A@@22 (FieldTypeInv0 (type f_122))))
 (=> (and (and (= (type o_118) RefType) (= (type f_122) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|tree#sm| nextTemp@1)) o_118 f_122)) (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|heapseg#sm| (MapType0Select Heap@58 nextTemp@1 child) null)) o_118 f_122)))) (U_2_bool (MapType1Select newPMask@9 o_118 f_122)))))
 :qid |stdinbpl.15916:43|
 :skolemid |226|
 :pattern ( (MapType1Select newPMask@9 o_118 f_122))
)))) (=> (and (and (and (= Heap@59 (MapType0Store Heap@58 null (|tree#sm| nextTemp@1) newPMask@9)) (state Heap@59 Mask@98)) (and (state Heap@59 Mask@98) (state Heap@59 Mask@98))) (and (and (= temp@2 nextTemp@1) (= Mask@128 Mask@98)) (and (= Heap@91 Heap@59) (= (ControlFlow 0 236) 235)))) anon550_correct)))))
(let ((anon956_Else_correct  (=> (HasDirectPerm Mask@98 null (tree nextTemp@1)) (=> (and (= Heap@54 Heap@51) (= (ControlFlow 0 238) 236)) anon549_correct))))
(let ((anon956_Then_correct  (=> (not (HasDirectPerm Mask@98 null (tree nextTemp@1))) (=> (and (and (= Heap@52 (MapType0Store Heap@51 null (|tree#sm| nextTemp@1) ZeroPMask)) (= Heap@53 (MapType0Store Heap@52 null (tree nextTemp@1) freshVersion@5))) (and (= Heap@54 Heap@53) (= (ControlFlow 0 237) 236))) anon549_correct))))
(let ((anon547_correct  (=> (= Mask@98 (MapType1Store Mask@97 null (tree nextTemp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@97 null (tree nextTemp@1))) FullPerm)))) (=> (and (and (state Heap@51 Mask@98) (state Heap@51 Mask@98)) (and (|tree#trigger| Heap@51 (tree nextTemp@1)) (= (MapType0Select Heap@51 null (tree nextTemp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@51 nextTemp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@51 nextTemp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@51 nextTemp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@51 nextTemp@1 parent)) (CombineFrames (MapType0Select Heap@51 null (heapseg (MapType0Select Heap@51 nextTemp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@51 nextTemp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@51 nextTemp@1 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 239) 237) anon956_Then_correct) (=> (= (ControlFlow 0 239) 238) anon956_Else_correct))))))
(let ((anon955_Else_correct  (=> (and (= (MapType0Select Heap@51 nextTemp@1 child) null) (= (ControlFlow 0 242) 239)) anon547_correct)))
(let ((anon955_Then_correct  (=> (not (= (MapType0Select Heap@51 nextTemp@1 child) null)) (and (=> (= (ControlFlow 0 240) (- 0 241)) (= (segParent Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null) nextTemp@1)) (=> (= (segParent Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null) nextTemp@1) (=> (= (ControlFlow 0 240) 239) anon547_correct))))))
(let ((anon545_correct  (and (=> (= (ControlFlow 0 243) (- 0 244)) (validChildren Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null)) (=> (validChildren Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null) (and (=> (= (ControlFlow 0 243) 240) anon955_Then_correct) (=> (= (ControlFlow 0 243) 242) anon955_Else_correct))))))
(let ((anon954_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@51 nextTemp@1 degree)) 0) (= (ControlFlow 0 247) 243)) anon545_correct)))
(let ((anon954_Then_correct  (=> (< 0 (U_2_int (MapType0Select Heap@51 nextTemp@1 degree))) (and (=> (= (ControlFlow 0 245) (- 0 246)) (= (segDegree Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null 0) (- (U_2_int (MapType0Select Heap@51 nextTemp@1 degree)) 1))) (=> (= (segDegree Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null 0) (- (U_2_int (MapType0Select Heap@51 nextTemp@1 degree)) 1)) (=> (= (ControlFlow 0 245) 243) anon545_correct))))))
(let ((anon543_correct  (=> (and (= Mask@97 (MapType1Store Mask@96 null (heapseg (MapType0Select Heap@51 nextTemp@1 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@96 null (heapseg (MapType0Select Heap@51 nextTemp@1 child) null))) FullPerm)))) (InsidePredicate (tree nextTemp@1) (MapType0Select Heap@51 null (tree nextTemp@1)) (heapseg (MapType0Select Heap@51 nextTemp@1 child) null) (MapType0Select Heap@51 null (heapseg (MapType0Select Heap@51 nextTemp@1 child) null)))) (and (=> (= (ControlFlow 0 248) (- 0 249)) (= (U_2_int (MapType0Select Heap@51 nextTemp@1 degree)) (segLength Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null))) (=> (= (U_2_int (MapType0Select Heap@51 nextTemp@1 degree)) (segLength Heap@51 (MapType0Select Heap@51 nextTemp@1 child) null)) (and (=> (= (ControlFlow 0 248) 245) anon954_Then_correct) (=> (= (ControlFlow 0 248) 247) anon954_Else_correct)))))))
(let ((anon953_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 252) 248)) anon543_correct)))
(let ((anon953_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 250) (- 0 251)) (<= FullPerm (U_2_real (MapType1Select Mask@96 null (heapseg (MapType0Select Heap@51 nextTemp@1 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@96 null (heapseg (MapType0Select Heap@51 nextTemp@1 child) null)))) (=> (= (ControlFlow 0 250) 248) anon543_correct))))))
(let ((anon541_correct  (=> (= Mask@96 (MapType1Store Mask@95 nextTemp@1 parent (real_2_U (- (U_2_real (MapType1Select Mask@95 nextTemp@1 parent)) FullPerm)))) (and (=> (= (ControlFlow 0 253) (- 0 254)) (<= 0 (U_2_int (MapType0Select Heap@51 nextTemp@1 degree)))) (=> (<= 0 (U_2_int (MapType0Select Heap@51 nextTemp@1 degree))) (and (=> (= (ControlFlow 0 253) 250) anon953_Then_correct) (=> (= (ControlFlow 0 253) 252) anon953_Else_correct)))))))
(let ((anon952_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 257) 253)) anon541_correct)))
(let ((anon952_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 255) (- 0 256)) (<= FullPerm (U_2_real (MapType1Select Mask@95 nextTemp@1 parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@95 nextTemp@1 parent))) (=> (= (ControlFlow 0 255) 253) anon541_correct))))))
(let ((anon539_correct  (=> (= Mask@95 (MapType1Store Mask@94 nextTemp@1 child (real_2_U (- (U_2_real (MapType1Select Mask@94 nextTemp@1 child)) FullPerm)))) (and (=> (= (ControlFlow 0 258) 255) anon952_Then_correct) (=> (= (ControlFlow 0 258) 257) anon952_Else_correct)))))
(let ((anon951_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 261) 258)) anon539_correct)))
(let ((anon951_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 259) (- 0 260)) (<= FullPerm (U_2_real (MapType1Select Mask@94 nextTemp@1 child)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@94 nextTemp@1 child))) (=> (= (ControlFlow 0 259) 258) anon539_correct))))))
(let ((anon537_correct  (=> (= Mask@94 (MapType1Store Mask@93 nextTemp@1 degree (real_2_U (- (U_2_real (MapType1Select Mask@93 nextTemp@1 degree)) FullPerm)))) (and (=> (= (ControlFlow 0 262) 259) anon951_Then_correct) (=> (= (ControlFlow 0 262) 261) anon951_Else_correct)))))
(let ((anon950_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 265) 262)) anon537_correct)))
(let ((anon950_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 263) (- 0 264)) (<= FullPerm (U_2_real (MapType1Select Mask@93 nextTemp@1 degree)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@93 nextTemp@1 degree))) (=> (= (ControlFlow 0 263) 262) anon537_correct))))))
(let ((anon535_correct  (=> (= Mask@93 (MapType1Store Mask@92 nextTemp@1 key (real_2_U (- (U_2_real (MapType1Select Mask@92 nextTemp@1 key)) FullPerm)))) (and (=> (= (ControlFlow 0 266) 263) anon950_Then_correct) (=> (= (ControlFlow 0 266) 265) anon950_Else_correct)))))
(let ((anon949_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 269) 266)) anon535_correct)))
(let ((anon949_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 267) (- 0 268)) (<= FullPerm (U_2_real (MapType1Select Mask@92 nextTemp@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@92 nextTemp@1 key))) (=> (= (ControlFlow 0 267) 266) anon535_correct))))))
(let ((anon533_correct  (=> (and (state Heap@49 Mask@92) (state Heap@49 Mask@92)) (and (=> (= (ControlFlow 0 270) (- 0 273)) (= FullPerm (U_2_real (MapType1Select Mask@92 nextTemp@1 child)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@92 nextTemp@1 child))) (=> (and (= Heap@50 (MapType0Store Heap@49 nextTemp@1 child temp@1)) (state Heap@50 Mask@92)) (and (=> (= (ControlFlow 0 270) (- 0 272)) (HasDirectPerm Mask@92 nextTemp@1 degree)) (=> (HasDirectPerm Mask@92 nextTemp@1 degree) (and (=> (= (ControlFlow 0 270) (- 0 271)) (= FullPerm (U_2_real (MapType1Select Mask@92 nextTemp@1 degree)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@92 nextTemp@1 degree))) (=> (and (= Heap@51 (MapType0Store Heap@50 nextTemp@1 degree (int_2_U (+ (U_2_int (MapType0Select Heap@50 nextTemp@1 degree)) 1)))) (state Heap@51 Mask@92)) (and (=> (= (ControlFlow 0 270) 267) anon949_Then_correct) (=> (= (ControlFlow 0 270) 269) anon949_Else_correct)))))))))))))
(let ((anon948_Else_correct  (=> (= temp@1 null) (=> (and (= Heap@49 Heap@45) (= (ControlFlow 0 275) 270)) anon533_correct))))
(let ((anon948_Then_correct  (=> (and (and (and (not (= temp@1 null)) (forall ((o_116 T@U) (f_120 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_120))))
(let ((A@@23 (FieldTypeInv0 (type f_120))))
 (=> (and (and (= (type o_116) RefType) (= (type f_120) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@45 null (|heapseg#sm| temp@1 null)) o_116 f_120)) (U_2_bool (MapType1Select (MapType0Select Heap@45 null (|tree#sm| temp@1)) o_116 f_120)))) (U_2_bool (MapType1Select newPMask@7 o_116 f_120)))))
 :qid |stdinbpl.15818:45|
 :skolemid |224|
 :pattern ( (MapType1Select newPMask@7 o_116 f_120))
))) (and (= Heap@46 (MapType0Store Heap@45 null (|heapseg#sm| temp@1 null) newPMask@7)) (= Heap@47 (MapType0Store Heap@46 null (|heapseg#sm| temp@1 null) (MapType1Store (MapType0Select Heap@46 null (|heapseg#sm| temp@1 null)) temp@1 sibling (bool_2_U true)))))) (and (and (forall ((o_117 T@U) (f_121 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_121))))
(let ((A@@24 (FieldTypeInv0 (type f_121))))
 (=> (and (and (= (type o_117) RefType) (= (type f_121) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|heapseg#sm| temp@1 null)) o_117 f_121)) (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|heapseg#sm| (MapType0Select Heap@47 temp@1 sibling) null)) o_117 f_121)))) (U_2_bool (MapType1Select newPMask@8 o_117 f_121)))))
 :qid |stdinbpl.15825:45|
 :skolemid |225|
 :pattern ( (MapType1Select newPMask@8 o_117 f_121))
)) (= Heap@48 (MapType0Store Heap@47 null (|heapseg#sm| temp@1 null) newPMask@8))) (and (= Heap@49 Heap@48) (= (ControlFlow 0 274) 270)))) anon533_correct)))
(let ((anon947_Else_correct  (=> (and (HasDirectPerm Mask@92 null (heapseg temp@1 null)) (= Heap@45 Heap@42)) (and (=> (= (ControlFlow 0 277) 274) anon948_Then_correct) (=> (= (ControlFlow 0 277) 275) anon948_Else_correct)))))
(let ((anon947_Then_correct  (=> (and (and (not (HasDirectPerm Mask@92 null (heapseg temp@1 null))) (= Heap@43 (MapType0Store Heap@42 null (|heapseg#sm| temp@1 null) ZeroPMask))) (and (= Heap@44 (MapType0Store Heap@43 null (heapseg temp@1 null) freshVersion@4)) (= Heap@45 Heap@44))) (and (=> (= (ControlFlow 0 276) 274) anon948_Then_correct) (=> (= (ControlFlow 0 276) 275) anon948_Else_correct)))))
(let ((anon529_correct  (=> (= Mask@92 (MapType1Store Mask@91 null (heapseg temp@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@91 null (heapseg temp@1 null))) FullPerm)))) (=> (and (and (state Heap@42 Mask@92) (state Heap@42 Mask@92)) (and (|heapseg#trigger| Heap@42 (heapseg temp@1 null)) (= (MapType0Select Heap@42 null (heapseg temp@1 null)) (FrameFragment (ite (not (= temp@1 null)) (CombineFrames (MapType0Select Heap@42 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@42 temp@1 sibling)) (CombineFrames (MapType0Select Heap@42 null (heapseg (MapType0Select Heap@42 temp@1 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@42 temp@1 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 278) 276) anon947_Then_correct) (=> (= (ControlFlow 0 278) 277) anon947_Else_correct))))))
(let ((anon946_Else_correct  (=> (= (MapType0Select Heap@42 temp@1 sibling) null) (=> (and (= Mask@91 Mask@90) (= (ControlFlow 0 282) 278)) anon529_correct))))
(let ((anon946_Then_correct  (=> (not (= (MapType0Select Heap@42 temp@1 sibling) null)) (and (=> (= (ControlFlow 0 280) (- 0 281)) (= (treeParent Heap@42 temp@1) (segParent Heap@42 (MapType0Select Heap@42 temp@1 sibling) null))) (=> (= (treeParent Heap@42 temp@1) (segParent Heap@42 (MapType0Select Heap@42 temp@1 sibling) null)) (=> (and (= Mask@91 Mask@90) (= (ControlFlow 0 280) 278)) anon529_correct))))))
(let ((anon527_correct  (=> (and (= Mask@90 (MapType1Store Mask@89 null (heapseg (MapType0Select Heap@42 temp@1 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@89 null (heapseg (MapType0Select Heap@42 temp@1 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp@1 null) (MapType0Select Heap@42 null (heapseg temp@1 null)) (heapseg (MapType0Select Heap@42 temp@1 sibling) null) (MapType0Select Heap@42 null (heapseg (MapType0Select Heap@42 temp@1 sibling) null)))) (and (=> (= (ControlFlow 0 283) 280) anon946_Then_correct) (=> (= (ControlFlow 0 283) 282) anon946_Else_correct)))))
(let ((anon945_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 286) 283)) anon527_correct)))
(let ((anon945_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 284) (- 0 285)) (<= FullPerm (U_2_real (MapType1Select Mask@89 null (heapseg (MapType0Select Heap@42 temp@1 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@89 null (heapseg (MapType0Select Heap@42 temp@1 sibling) null)))) (=> (= (ControlFlow 0 284) 283) anon527_correct))))))
(let ((anon525_correct  (=> (= Mask@89 (MapType1Store Mask@88 temp@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@88 temp@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 287) 284) anon945_Then_correct) (=> (= (ControlFlow 0 287) 286) anon945_Else_correct)))))
(let ((anon944_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 290) 287)) anon525_correct)))
(let ((anon944_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 288) (- 0 289)) (<= FullPerm (U_2_real (MapType1Select Mask@88 temp@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@88 temp@1 sibling))) (=> (= (ControlFlow 0 288) 287) anon525_correct))))))
(let ((anon523_correct  (=> (and (= Mask@88 (MapType1Store Mask@87 null (tree temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (tree temp@1))) FullPerm)))) (InsidePredicate (heapseg temp@1 null) (MapType0Select Heap@42 null (heapseg temp@1 null)) (tree temp@1) (MapType0Select Heap@42 null (tree temp@1)))) (and (=> (= (ControlFlow 0 291) 288) anon944_Then_correct) (=> (= (ControlFlow 0 291) 290) anon944_Else_correct)))))
(let ((anon943_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 294) 291)) anon523_correct)))
(let ((anon943_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 292) (- 0 293)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (tree temp@1)))) (=> (= (ControlFlow 0 292) 291) anon523_correct))))))
(let ((anon942_Then_correct  (=> (not (= temp@1 null)) (and (=> (= (ControlFlow 0 295) 292) anon943_Then_correct) (=> (= (ControlFlow 0 295) 294) anon943_Else_correct)))))
(let ((anon942_Else_correct  (=> (= temp@1 null) (=> (and (= Mask@91 Mask@87) (= (ControlFlow 0 279) 278)) anon529_correct))))
(let ((anon520_correct  (=> (and (state Heap@41 Mask@87) (state Heap@41 Mask@87)) (and (=> (= (ControlFlow 0 296) (- 0 298)) (HasDirectPerm Mask@87 nextTemp@1 child)) (=> (HasDirectPerm Mask@87 nextTemp@1 child) (and (=> (= (ControlFlow 0 296) (- 0 297)) (= FullPerm (U_2_real (MapType1Select Mask@87 temp@1 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@87 temp@1 sibling))) (=> (and (= Heap@42 (MapType0Store Heap@41 temp@1 sibling (MapType0Select Heap@41 nextTemp@1 child))) (state Heap@42 Mask@87)) (and (=> (= (ControlFlow 0 296) 295) anon942_Then_correct) (=> (= (ControlFlow 0 296) 279) anon942_Else_correct))))))))))
(let ((anon941_Else_correct  (=> (and (= (MapType0Select Heap@41 nextTemp@1 child) null) (= (ControlFlow 0 300) 296)) anon520_correct)))
(let ((anon941_Then_correct  (=> (and (and (not (= (MapType0Select Heap@41 nextTemp@1 child) null)) (state Heap@41 Mask@87)) (and (= (segParent Heap@41 (MapType0Select Heap@41 nextTemp@1 child) null) nextTemp@1) (= (ControlFlow 0 299) 296))) anon520_correct)))
(let ((anon518_correct  (=> (and (state Heap@41 Mask@87) (validChildren Heap@41 (MapType0Select Heap@41 nextTemp@1 child) null)) (and (=> (= (ControlFlow 0 301) 299) anon941_Then_correct) (=> (= (ControlFlow 0 301) 300) anon941_Else_correct)))))
(let ((anon940_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@41 nextTemp@1 degree)) 0) (= (ControlFlow 0 303) 301)) anon518_correct)))
(let ((anon940_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@41 nextTemp@1 degree))) (state Heap@41 Mask@87)) (and (= (segDegree Heap@41 (MapType0Select Heap@41 nextTemp@1 child) null 0) (- (U_2_int (MapType0Select Heap@41 nextTemp@1 degree)) 1)) (= (ControlFlow 0 302) 301))) anon518_correct)))
(let ((anon516_correct  (=> (and (not (= nextTemp@1 null)) (= Mask@83 (MapType1Store Mask@82 nextTemp@1 key (real_2_U (+ (U_2_real (MapType1Select Mask@82 nextTemp@1 key)) FullPerm))))) (=> (and (and (and (and (state Heap@41 Mask@83) (not (= nextTemp@1 null))) (and (= Mask@84 (MapType1Store Mask@83 nextTemp@1 degree (real_2_U (+ (U_2_real (MapType1Select Mask@83 nextTemp@1 degree)) FullPerm)))) (state Heap@41 Mask@84))) (and (and (not (= nextTemp@1 null)) (= Mask@85 (MapType1Store Mask@84 nextTemp@1 child (real_2_U (+ (U_2_real (MapType1Select Mask@84 nextTemp@1 child)) FullPerm))))) (and (state Heap@41 Mask@85) (not (= nextTemp@1 null))))) (and (and (and (= Mask@86 (MapType1Store Mask@85 nextTemp@1 parent (real_2_U (+ (U_2_real (MapType1Select Mask@85 nextTemp@1 parent)) FullPerm)))) (state Heap@41 Mask@86)) (and (<= 0 (U_2_int (MapType0Select Heap@41 nextTemp@1 degree))) (= Mask@87 (MapType1Store Mask@86 null (heapseg (MapType0Select Heap@41 nextTemp@1 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@86 null (heapseg (MapType0Select Heap@41 nextTemp@1 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree nextTemp@1) (MapType0Select Heap@41 null (tree nextTemp@1)) (heapseg (MapType0Select Heap@41 nextTemp@1 child) null) (MapType0Select Heap@41 null (heapseg (MapType0Select Heap@41 nextTemp@1 child) null))) (state Heap@41 Mask@87)) (and (state Heap@41 Mask@87) (= (U_2_int (MapType0Select Heap@41 nextTemp@1 degree)) (segLength Heap@41 (MapType0Select Heap@41 nextTemp@1 child) null)))))) (and (=> (= (ControlFlow 0 304) 302) anon940_Then_correct) (=> (= (ControlFlow 0 304) 303) anon940_Else_correct))))))
(let ((anon939_Else_correct  (=> (HasDirectPerm Mask@82 null (tree nextTemp@1)) (=> (and (= Heap@41 Heap@39) (= (ControlFlow 0 306) 304)) anon516_correct))))
(let ((anon939_Then_correct  (=> (and (and (not (HasDirectPerm Mask@82 null (tree nextTemp@1))) (= Heap@40 (MapType0Store Heap@39 null (tree nextTemp@1) newVersion@3))) (and (= Heap@41 Heap@40) (= (ControlFlow 0 305) 304))) anon516_correct)))
(let ((anon514_correct  (=> (= Mask@82 (MapType1Store Mask@81 null (tree nextTemp@1) (real_2_U (- (U_2_real (MapType1Select Mask@81 null (tree nextTemp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 307) 305) anon939_Then_correct) (=> (= (ControlFlow 0 307) 306) anon939_Else_correct)))))
(let ((anon938_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 310) 307)) anon514_correct)))
(let ((anon938_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 308) (- 0 309)) (<= FullPerm (U_2_real (MapType1Select Mask@81 null (tree nextTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@81 null (tree nextTemp@1)))) (=> (= (ControlFlow 0 308) 307) anon514_correct))))))
(let ((anon512_correct  (=> (and (= Heap@35 (MapType0Store Heap@34 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@34 null (|tree#sm| temp@1)) temp@1 key (bool_2_U true)))) (= Heap@36 (MapType0Store Heap@35 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@35 null (|tree#sm| temp@1)) temp@1 degree (bool_2_U true))))) (=> (and (and (and (= Heap@37 (MapType0Store Heap@36 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@36 null (|tree#sm| temp@1)) temp@1 child (bool_2_U true)))) (= Heap@38 (MapType0Store Heap@37 null (|tree#sm| temp@1) (MapType1Store (MapType0Select Heap@37 null (|tree#sm| temp@1)) temp@1 parent (bool_2_U true))))) (and (forall ((o_115 T@U) (f_119 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_119))))
(let ((A@@25 (FieldTypeInv0 (type f_119))))
 (=> (and (and (= (type o_115) RefType) (= (type f_119) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Heap@38 null (|tree#sm| temp@1)) o_115 f_119)) (U_2_bool (MapType1Select (MapType0Select Heap@38 null (|heapseg#sm| (MapType0Select Heap@38 temp@1 child) null)) o_115 f_119)))) (U_2_bool (MapType1Select newPMask@6 o_115 f_119)))))
 :qid |stdinbpl.15699:43|
 :skolemid |223|
 :pattern ( (MapType1Select newPMask@6 o_115 f_119))
)) (= Heap@39 (MapType0Store Heap@38 null (|tree#sm| temp@1) newPMask@6)))) (and (and (state Heap@39 Mask@81) (state Heap@39 Mask@81)) (and (|tree#trigger| Heap@39 (tree nextTemp@1)) (= (MapType0Select Heap@39 null (tree nextTemp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@39 nextTemp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@39 nextTemp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@39 nextTemp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@39 nextTemp@1 parent)) (CombineFrames (MapType0Select Heap@39 null (heapseg (MapType0Select Heap@39 nextTemp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@39 nextTemp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@39 nextTemp@1 child) null)) EmptyFrame EmptyFrame)))))))))))) (and (=> (= (ControlFlow 0 311) 308) anon938_Then_correct) (=> (= (ControlFlow 0 311) 310) anon938_Else_correct))))))
(let ((anon937_Else_correct  (=> (HasDirectPerm Mask@81 null (tree temp@1)) (=> (and (= Heap@34 Heap@31) (= (ControlFlow 0 313) 311)) anon512_correct))))
(let ((anon937_Then_correct  (=> (not (HasDirectPerm Mask@81 null (tree temp@1))) (=> (and (and (= Heap@32 (MapType0Store Heap@31 null (|tree#sm| temp@1) ZeroPMask)) (= Heap@33 (MapType0Store Heap@32 null (tree temp@1) freshVersion@3))) (and (= Heap@34 Heap@33) (= (ControlFlow 0 312) 311))) anon512_correct))))
(let ((anon510_correct  (=> (= Mask@81 (MapType1Store Mask@80 null (tree temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@80 null (tree temp@1))) FullPerm)))) (=> (and (and (state Heap@31 Mask@81) (state Heap@31 Mask@81)) (and (|tree#trigger| Heap@31 (tree temp@1)) (= (MapType0Select Heap@31 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@31 temp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@31 temp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@31 temp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@31 temp@1 parent)) (CombineFrames (MapType0Select Heap@31 null (heapseg (MapType0Select Heap@31 temp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@31 temp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@31 temp@1 child) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 314) 312) anon937_Then_correct) (=> (= (ControlFlow 0 314) 313) anon937_Else_correct))))))
(let ((anon936_Else_correct  (=> (and (= (MapType0Select Heap@31 temp@1 child) null) (= (ControlFlow 0 317) 314)) anon510_correct)))
(let ((anon936_Then_correct  (=> (not (= (MapType0Select Heap@31 temp@1 child) null)) (and (=> (= (ControlFlow 0 315) (- 0 316)) (= (segParent Heap@31 (MapType0Select Heap@31 temp@1 child) null) temp@1)) (=> (= (segParent Heap@31 (MapType0Select Heap@31 temp@1 child) null) temp@1) (=> (= (ControlFlow 0 315) 314) anon510_correct))))))
(let ((anon508_correct  (and (=> (= (ControlFlow 0 318) (- 0 319)) (validChildren Heap@31 (MapType0Select Heap@31 temp@1 child) null)) (=> (validChildren Heap@31 (MapType0Select Heap@31 temp@1 child) null) (and (=> (= (ControlFlow 0 318) 315) anon936_Then_correct) (=> (= (ControlFlow 0 318) 317) anon936_Else_correct))))))
(let ((anon935_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@31 temp@1 degree)) 0) (= (ControlFlow 0 322) 318)) anon508_correct)))
(let ((anon935_Then_correct  (=> (< 0 (U_2_int (MapType0Select Heap@31 temp@1 degree))) (and (=> (= (ControlFlow 0 320) (- 0 321)) (= (segDegree Heap@31 (MapType0Select Heap@31 temp@1 child) null 0) (- (U_2_int (MapType0Select Heap@31 temp@1 degree)) 1))) (=> (= (segDegree Heap@31 (MapType0Select Heap@31 temp@1 child) null 0) (- (U_2_int (MapType0Select Heap@31 temp@1 degree)) 1)) (=> (= (ControlFlow 0 320) 318) anon508_correct))))))
(let ((anon506_correct  (=> (and (= Mask@80 (MapType1Store Mask@79 null (heapseg (MapType0Select Heap@31 temp@1 child) null) (real_2_U (- (U_2_real (MapType1Select Mask@79 null (heapseg (MapType0Select Heap@31 temp@1 child) null))) FullPerm)))) (InsidePredicate (tree temp@1) (MapType0Select Heap@31 null (tree temp@1)) (heapseg (MapType0Select Heap@31 temp@1 child) null) (MapType0Select Heap@31 null (heapseg (MapType0Select Heap@31 temp@1 child) null)))) (and (=> (= (ControlFlow 0 323) (- 0 324)) (= (U_2_int (MapType0Select Heap@31 temp@1 degree)) (segLength Heap@31 (MapType0Select Heap@31 temp@1 child) null))) (=> (= (U_2_int (MapType0Select Heap@31 temp@1 degree)) (segLength Heap@31 (MapType0Select Heap@31 temp@1 child) null)) (and (=> (= (ControlFlow 0 323) 320) anon935_Then_correct) (=> (= (ControlFlow 0 323) 322) anon935_Else_correct)))))))
(let ((anon934_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 327) 323)) anon506_correct)))
(let ((anon934_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 325) (- 0 326)) (<= FullPerm (U_2_real (MapType1Select Mask@79 null (heapseg (MapType0Select Heap@31 temp@1 child) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@79 null (heapseg (MapType0Select Heap@31 temp@1 child) null)))) (=> (= (ControlFlow 0 325) 323) anon506_correct))))))
(let ((anon504_correct  (=> (= Mask@79 (MapType1Store Mask@78 temp@1 parent (real_2_U (- (U_2_real (MapType1Select Mask@78 temp@1 parent)) FullPerm)))) (and (=> (= (ControlFlow 0 328) (- 0 329)) (<= 0 (U_2_int (MapType0Select Heap@31 temp@1 degree)))) (=> (<= 0 (U_2_int (MapType0Select Heap@31 temp@1 degree))) (and (=> (= (ControlFlow 0 328) 325) anon934_Then_correct) (=> (= (ControlFlow 0 328) 327) anon934_Else_correct)))))))
(let ((anon933_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 332) 328)) anon504_correct)))
(let ((anon933_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 330) (- 0 331)) (<= FullPerm (U_2_real (MapType1Select Mask@78 temp@1 parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@78 temp@1 parent))) (=> (= (ControlFlow 0 330) 328) anon504_correct))))))
(let ((anon502_correct  (=> (= Mask@78 (MapType1Store Mask@77 temp@1 child (real_2_U (- (U_2_real (MapType1Select Mask@77 temp@1 child)) FullPerm)))) (and (=> (= (ControlFlow 0 333) 330) anon933_Then_correct) (=> (= (ControlFlow 0 333) 332) anon933_Else_correct)))))
(let ((anon932_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 336) 333)) anon502_correct)))
(let ((anon932_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 334) (- 0 335)) (<= FullPerm (U_2_real (MapType1Select Mask@77 temp@1 child)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@77 temp@1 child))) (=> (= (ControlFlow 0 334) 333) anon502_correct))))))
(let ((anon500_correct  (=> (= Mask@77 (MapType1Store Mask@76 temp@1 degree (real_2_U (- (U_2_real (MapType1Select Mask@76 temp@1 degree)) FullPerm)))) (and (=> (= (ControlFlow 0 337) 334) anon932_Then_correct) (=> (= (ControlFlow 0 337) 336) anon932_Else_correct)))))
(let ((anon931_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 340) 337)) anon500_correct)))
(let ((anon931_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 338) (- 0 339)) (<= FullPerm (U_2_real (MapType1Select Mask@76 temp@1 degree)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@76 temp@1 degree))) (=> (= (ControlFlow 0 338) 337) anon500_correct))))))
(let ((anon498_correct  (=> (= Mask@76 (MapType1Store Mask@75 temp@1 key (real_2_U (- (U_2_real (MapType1Select Mask@75 temp@1 key)) FullPerm)))) (and (=> (= (ControlFlow 0 341) 338) anon931_Then_correct) (=> (= (ControlFlow 0 341) 340) anon931_Else_correct)))))
(let ((anon930_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 344) 341)) anon498_correct)))
(let ((anon930_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 342) (- 0 343)) (<= FullPerm (U_2_real (MapType1Select Mask@75 temp@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@75 temp@1 key))) (=> (= (ControlFlow 0 342) 341) anon498_correct))))))
(let ((anon496_correct  (=> (and (state Heap@30 Mask@75) (state Heap@30 Mask@75)) (and (=> (= (ControlFlow 0 345) (- 0 346)) (= FullPerm (U_2_real (MapType1Select Mask@75 temp@1 parent)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@75 temp@1 parent))) (=> (and (= Heap@31 (MapType0Store Heap@30 temp@1 parent nextTemp@1)) (state Heap@31 Mask@75)) (and (=> (= (ControlFlow 0 345) 342) anon930_Then_correct) (=> (= (ControlFlow 0 345) 344) anon930_Else_correct))))))))
(let ((anon929_Else_correct  (=> (and (= (MapType0Select Heap@30 temp@1 child) null) (= (ControlFlow 0 348) 345)) anon496_correct)))
(let ((anon929_Then_correct  (=> (and (and (not (= (MapType0Select Heap@30 temp@1 child) null)) (state Heap@30 Mask@75)) (and (= (segParent Heap@30 (MapType0Select Heap@30 temp@1 child) null) temp@1) (= (ControlFlow 0 347) 345))) anon496_correct)))
(let ((anon494_correct  (=> (and (state Heap@30 Mask@75) (validChildren Heap@30 (MapType0Select Heap@30 temp@1 child) null)) (and (=> (= (ControlFlow 0 349) 347) anon929_Then_correct) (=> (= (ControlFlow 0 349) 348) anon929_Else_correct)))))
(let ((anon928_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@30 temp@1 degree)) 0) (= (ControlFlow 0 351) 349)) anon494_correct)))
(let ((anon928_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@30 temp@1 degree))) (state Heap@30 Mask@75)) (and (= (segDegree Heap@30 (MapType0Select Heap@30 temp@1 child) null 0) (- (U_2_int (MapType0Select Heap@30 temp@1 degree)) 1)) (= (ControlFlow 0 350) 349))) anon494_correct)))
(let ((anon492_correct  (=> (and (not (= temp@1 null)) (= Mask@71 (MapType1Store Mask@70 temp@1 key (real_2_U (+ (U_2_real (MapType1Select Mask@70 temp@1 key)) FullPerm))))) (=> (and (and (and (and (state Heap@30 Mask@71) (not (= temp@1 null))) (and (= Mask@72 (MapType1Store Mask@71 temp@1 degree (real_2_U (+ (U_2_real (MapType1Select Mask@71 temp@1 degree)) FullPerm)))) (state Heap@30 Mask@72))) (and (and (not (= temp@1 null)) (= Mask@73 (MapType1Store Mask@72 temp@1 child (real_2_U (+ (U_2_real (MapType1Select Mask@72 temp@1 child)) FullPerm))))) (and (state Heap@30 Mask@73) (not (= temp@1 null))))) (and (and (and (= Mask@74 (MapType1Store Mask@73 temp@1 parent (real_2_U (+ (U_2_real (MapType1Select Mask@73 temp@1 parent)) FullPerm)))) (state Heap@30 Mask@74)) (and (<= 0 (U_2_int (MapType0Select Heap@30 temp@1 degree))) (= Mask@75 (MapType1Store Mask@74 null (heapseg (MapType0Select Heap@30 temp@1 child) null) (real_2_U (+ (U_2_real (MapType1Select Mask@74 null (heapseg (MapType0Select Heap@30 temp@1 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree temp@1) (MapType0Select Heap@30 null (tree temp@1)) (heapseg (MapType0Select Heap@30 temp@1 child) null) (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp@1 child) null))) (state Heap@30 Mask@75)) (and (state Heap@30 Mask@75) (= (U_2_int (MapType0Select Heap@30 temp@1 degree)) (segLength Heap@30 (MapType0Select Heap@30 temp@1 child) null)))))) (and (=> (= (ControlFlow 0 352) 350) anon928_Then_correct) (=> (= (ControlFlow 0 352) 351) anon928_Else_correct))))))
(let ((anon927_Else_correct  (=> (HasDirectPerm Mask@70 null (tree temp@1)) (=> (and (= Heap@30 Heap@28) (= (ControlFlow 0 354) 352)) anon492_correct))))
(let ((anon927_Then_correct  (=> (and (and (not (HasDirectPerm Mask@70 null (tree temp@1))) (= Heap@29 (MapType0Store Heap@28 null (tree temp@1) newVersion@2))) (and (= Heap@30 Heap@29) (= (ControlFlow 0 353) 352))) anon492_correct)))
(let ((anon490_correct  (=> (= Mask@70 (MapType1Store Mask@69 null (tree temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@69 null (tree temp@1))) FullPerm)))) (and (=> (= (ControlFlow 0 355) 353) anon927_Then_correct) (=> (= (ControlFlow 0 355) 354) anon927_Else_correct)))))
(let ((anon926_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 358) 355)) anon490_correct)))
(let ((anon926_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 356) (- 0 357)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1)))) (=> (= (ControlFlow 0 356) 355) anon490_correct))))))
(let ((anon488_correct  (=> (state Heap@28 Mask@69) (=> (and (|tree#trigger| Heap@28 (tree temp@1)) (= (MapType0Select Heap@28 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@28 temp@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@28 temp@1 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@28 temp@1 child)) (CombineFrames (FrameFragment (MapType0Select Heap@28 temp@1 parent)) (CombineFrames (MapType0Select Heap@28 null (heapseg (MapType0Select Heap@28 temp@1 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@28 temp@1 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@28 temp@1 child) null)) EmptyFrame EmptyFrame)))))))))) (and (=> (= (ControlFlow 0 359) 356) anon926_Then_correct) (=> (= (ControlFlow 0 359) 358) anon926_Else_correct))))))
(let ((anon925_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 362) (- 0 363)) (= FullPerm (U_2_real (MapType1Select Mask@69 prevTemp@0 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@69 prevTemp@0 sibling))) (=> (and (and (= Heap@27 (MapType0Store Heap@24 prevTemp@0 sibling nextTemp@1)) (state Heap@27 Mask@69)) (and (= Heap@28 Heap@27) (= (ControlFlow 0 362) 359))) anon488_correct))))))
(let ((anon925_Then_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 360) (- 0 361)) (= FullPerm (U_2_real (MapType1Select Mask@69 this@@66 Nodes)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@69 this@@66 Nodes))) (=> (and (and (= Heap@26 (MapType0Store Heap@24 this@@66 Nodes nextTemp@1)) (state Heap@26 Mask@69)) (and (= Heap@28 Heap@26) (= (ControlFlow 0 360) 359))) anon488_correct))))))
(let ((anon893_Else_correct  (=> (< (treeKey Heap@24 nextTemp@1) (treeKey Heap@24 temp@1)) (and (=> (= (ControlFlow 0 364) 360) anon925_Then_correct) (=> (= (ControlFlow 0 364) 362) anon925_Else_correct)))))
(let ((anon421_correct true))
(let ((anon892_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 163) 160)) anon421_correct)))
(let ((anon892_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 161) (- 0 162)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1)))) (=> (= (ControlFlow 0 161) 160) anon421_correct))))))
(let ((anon417_correct true))
(let ((anon890_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 159) 156)) anon417_correct)))
(let ((anon890_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 157) (- 0 158)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1)))) (=> (= (ControlFlow 0 157) 156) anon417_correct))))))
(let ((anon855_Else_correct  (=> (not (or (not (= (treeDegree Heap@24 temp@1) (treeDegree Heap@24 nextTemp@1))) (and (not (= (MapType0Select Heap@24 nextTemp@1 sibling) null)) (= (segDegree Heap@24 (MapType0Select Heap@24 nextTemp@1 sibling) null 0) (treeDegree Heap@24 temp@1))))) (and (and (and (and (and (=> (= (ControlFlow 0 492) 489) anon893_Then_correct) (=> (= (ControlFlow 0 492) 364) anon893_Else_correct)) (=> (= (ControlFlow 0 492) 161) anon892_Then_correct)) (=> (= (ControlFlow 0 492) 163) anon892_Else_correct)) (=> (= (ControlFlow 0 492) 157) anon890_Then_correct)) (=> (= (ControlFlow 0 492) 159) anon890_Else_correct)))))
(let ((anon850_Then_correct  (=> (not (= (MapType0Select Heap@24 nextTemp@1 sibling) null)) (and (=> (= (ControlFlow 0 611) (- 0 612)) (HasDirectPerm Mask@69 nextTemp@1 sibling)) (=> (HasDirectPerm Mask@69 nextTemp@1 sibling) (and (and (and (and (and (=> (= (ControlFlow 0 611) 599) anon855_Then_correct) (=> (= (ControlFlow 0 611) 492) anon855_Else_correct)) (=> (= (ControlFlow 0 611) 608) anon854_Then_correct)) (=> (= (ControlFlow 0 611) 610) anon854_Else_correct)) (=> (= (ControlFlow 0 611) 604) anon852_Then_correct)) (=> (= (ControlFlow 0 611) 606) anon852_Else_correct)))))))
(let ((anon850_Else_correct  (=> (= (MapType0Select Heap@24 nextTemp@1 sibling) null) (and (=> (= (ControlFlow 0 601) 599) anon855_Then_correct) (=> (= (ControlFlow 0 601) 492) anon855_Else_correct)))))
(let ((anon849_Then_correct  (=> (not (not (= (treeDegree Heap@24 temp@1) (treeDegree Heap@24 nextTemp@1)))) (and (=> (= (ControlFlow 0 613) (- 0 614)) (HasDirectPerm Mask@69 nextTemp@1 sibling)) (=> (HasDirectPerm Mask@69 nextTemp@1 sibling) (and (=> (= (ControlFlow 0 613) 611) anon850_Then_correct) (=> (= (ControlFlow 0 613) 601) anon850_Else_correct)))))))
(let ((anon849_Else_correct  (=> (not (= (treeDegree Heap@24 temp@1) (treeDegree Heap@24 nextTemp@1))) (and (=> (= (ControlFlow 0 600) 599) anon855_Then_correct) (=> (= (ControlFlow 0 600) 492) anon855_Else_correct)))))
(let ((anon337_correct true))
(let ((anon848_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 155) 152)) anon337_correct)))
(let ((anon848_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 153) (- 0 154)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree nextTemp@1)))) (=> (= (ControlFlow 0 153) 152) anon337_correct))))))
(let ((anon333_correct true))
(let ((anon846_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 151) 148)) anon333_correct)))
(let ((anon846_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 149) (- 0 150)) (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 null (tree temp@1)))) (=> (= (ControlFlow 0 149) 148) anon333_correct))))))
(let ((anon330_correct  (=> (and (state Heap@24 Mask@69) (state Heap@24 Mask@69)) (and (and (and (and (and (=> (= (ControlFlow 0 615) 613) anon849_Then_correct) (=> (= (ControlFlow 0 615) 600) anon849_Else_correct)) (=> (= (ControlFlow 0 615) 153) anon848_Then_correct)) (=> (= (ControlFlow 0 615) 155) anon848_Else_correct)) (=> (= (ControlFlow 0 615) 149) anon846_Then_correct)) (=> (= (ControlFlow 0 615) 151) anon846_Else_correct)))))
(let ((anon844_Else_correct  (=> (= (MapType0Select Heap@24 nextTemp@1 sibling) null) (=> (and (= Mask@69 Mask@68) (= (ControlFlow 0 618) 615)) anon330_correct))))
(let ((anon844_Then_correct  (=> (not (= (MapType0Select Heap@24 nextTemp@1 sibling) null)) (=> (and (and (state Heap@24 Mask@68) (= (treeParent Heap@24 nextTemp@1) (segParent Heap@24 (MapType0Select Heap@24 nextTemp@1 sibling) null))) (and (= Mask@69 Mask@68) (= (ControlFlow 0 617) 615))) anon330_correct))))
(let ((anon843_Then_correct  (=> (and (not (= nextTemp@1 null)) (= Mask@66 (MapType1Store Mask@65 null (tree nextTemp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@65 null (tree nextTemp@1))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg nextTemp@1 null) (MapType0Select Heap@24 null (heapseg nextTemp@1 null)) (tree nextTemp@1) (MapType0Select Heap@24 null (tree nextTemp@1))) (state Heap@24 Mask@66)) (and (not (= nextTemp@1 null)) (= Mask@67 (MapType1Store Mask@66 nextTemp@1 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@66 nextTemp@1 sibling)) FullPerm)))))) (and (and (state Heap@24 Mask@67) (= Mask@68 (MapType1Store Mask@67 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@67 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg nextTemp@1 null) (MapType0Select Heap@24 null (heapseg nextTemp@1 null)) (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null) (MapType0Select Heap@24 null (heapseg (MapType0Select Heap@24 nextTemp@1 sibling) null))) (state Heap@24 Mask@68)))) (and (=> (= (ControlFlow 0 619) 617) anon844_Then_correct) (=> (= (ControlFlow 0 619) 618) anon844_Else_correct))))))
(let ((anon843_Else_correct  (=> (= nextTemp@1 null) (=> (and (= Mask@69 Mask@65) (= (ControlFlow 0 616) 615)) anon330_correct))))
(let ((anon842_Else_correct  (=> (and (HasDirectPerm Mask@65 null (heapseg nextTemp@1 null)) (= Heap@24 ExhaleHeap@1)) (and (=> (= (ControlFlow 0 621) 619) anon843_Then_correct) (=> (= (ControlFlow 0 621) 616) anon843_Else_correct)))))
(let ((anon842_Then_correct  (=> (not (HasDirectPerm Mask@65 null (heapseg nextTemp@1 null))) (=> (and (= Heap@23 (MapType0Store ExhaleHeap@1 null (heapseg nextTemp@1 null) newVersion@1)) (= Heap@24 Heap@23)) (and (=> (= (ControlFlow 0 620) 619) anon843_Then_correct) (=> (= (ControlFlow 0 620) 616) anon843_Else_correct))))))
(let ((anon325_correct  (=> (= Mask@65 (MapType1Store Mask@64 null (heapseg nextTemp@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@64 null (heapseg nextTemp@1 null))) FullPerm)))) (and (=> (= (ControlFlow 0 622) 620) anon842_Then_correct) (=> (= (ControlFlow 0 622) 621) anon842_Else_correct)))))
(let ((anon841_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 625) 622)) anon325_correct)))
(let ((anon841_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 623) (- 0 624)) (<= FullPerm (U_2_real (MapType1Select Mask@64 null (heapseg nextTemp@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@64 null (heapseg nextTemp@1 null)))) (=> (= (ControlFlow 0 623) 622) anon325_correct))))))
(let ((anon323_correct  (=> (state ExhaleHeap@1 Mask@64) (=> (and (= (treeParent ExhaleHeap@1 temp@1) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state ExhaleHeap@1 Mask@64)) (=> (and (and (not (= nextTemp@1 null)) (state ExhaleHeap@1 Mask@64)) (and (|heapseg#trigger| ExhaleHeap@1 (heapseg nextTemp@1 null)) (= (MapType0Select ExhaleHeap@1 null (heapseg nextTemp@1 null)) (FrameFragment (ite (not (= nextTemp@1 null)) (CombineFrames (MapType0Select ExhaleHeap@1 null (tree nextTemp@1)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 nextTemp@1 sibling)) (CombineFrames (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 626) 623) anon841_Then_correct) (=> (= (ControlFlow 0 626) 625) anon841_Else_correct)))))))
(let ((anon840_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (= (ControlFlow 0 628) 626)) anon323_correct)))
(let ((anon840_Then_correct  (=> (and (and (and (not (= prevTemp@0 null)) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) (state ExhaleHeap@1 Mask@64)) (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (treeParent ExhaleHeap@1 prevTemp@0)) (= (ControlFlow 0 627) 626))) anon323_correct)))
(let ((anon839_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 630) 627) anon840_Then_correct) (=> (= (ControlFlow 0 630) 628) anon840_Else_correct)))))
(let ((anon839_Then_correct  (=> (= prevTemp@0 null) (=> (and (state ExhaleHeap@1 Mask@64) (= (+ (treeSize ExhaleHeap@1 temp@1) (segSize ExhaleHeap@1 nextTemp@1 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 629) 627) anon840_Then_correct) (=> (= (ControlFlow 0 629) 628) anon840_Else_correct))))))
(let ((anon838_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 632) 629) anon839_Then_correct) (=> (= (ControlFlow 0 632) 630) anon839_Else_correct)))))
(let ((anon838_Then_correct  (=> (not (= prevTemp@0 null)) (=> (and (state ExhaleHeap@1 Mask@64) (= (+ (+ (+ (segSize ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (treeSize ExhaleHeap@1 prevTemp@0)) (treeSize ExhaleHeap@1 temp@1)) (segSize ExhaleHeap@1 nextTemp@1 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 631) 629) anon839_Then_correct) (=> (= (ControlFlow 0 631) 630) anon839_Else_correct))))))
(let ((anon837_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (and (=> (= (ControlFlow 0 634) 631) anon838_Then_correct) (=> (= (ControlFlow 0 634) 632) anon838_Else_correct)))))
(let ((anon837_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) (and (state ExhaleHeap@1 Mask@64) (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 1)) (treeDegree ExhaleHeap@1 prevTemp@0)))) (and (=> (= (ControlFlow 0 633) 631) anon838_Then_correct) (=> (= (ControlFlow 0 633) 632) anon838_Else_correct)))))
(let ((anon836_Else_correct  (=> (< (segLength ExhaleHeap@1 nextTemp@1 null) 2) (and (=> (= (ControlFlow 0 637) 633) anon837_Then_correct) (=> (= (ControlFlow 0 637) 634) anon837_Else_correct)))))
(let ((anon836_Then_correct  (=> (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (=> (and (state ExhaleHeap@1 Mask@64) (< (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1))) (and (=> (= (ControlFlow 0 636) 633) anon837_Then_correct) (=> (= (ControlFlow 0 636) 634) anon837_Else_correct))))))
(let ((anon835_Then_correct  (=> (and (not (= prevTemp@0 null)) (= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1))) (=> (and (and (state ExhaleHeap@1 Mask@64) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null))) (and (state ExhaleHeap@1 Mask@64) (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)))) (and (=> (= (ControlFlow 0 638) 636) anon836_Then_correct) (=> (= (ControlFlow 0 638) 637) anon836_Else_correct))))))
(let ((anon835_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)))) (and (=> (= (ControlFlow 0 635) 633) anon837_Then_correct) (=> (= (ControlFlow 0 635) 634) anon837_Else_correct)))))
(let ((anon834_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (= (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1))))))) (and (=> (= (ControlFlow 0 640) 638) anon835_Then_correct) (=> (= (ControlFlow 0 640) 635) anon835_Else_correct)))))
(let ((anon834_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (= (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1)))))) (and (state ExhaleHeap@1 Mask@64) (< (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)))) (and (=> (= (ControlFlow 0 639) 638) anon835_Then_correct) (=> (= (ControlFlow 0 639) 635) anon835_Else_correct)))))
(let ((anon833_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@64 Mask@61)) (and (=> (= (ControlFlow 0 642) 639) anon834_Then_correct) (=> (= (ControlFlow 0 642) 640) anon834_Else_correct)))))
(let ((anon833_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= Mask@62 (MapType1Store Mask@61 null (tree prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@61 null (tree prevTemp@0))) FullPerm))))) (and (state ExhaleHeap@1 Mask@62) (not (= prevTemp@0 null)))) (=> (and (and (and (= Mask@63 (MapType1Store Mask@62 prevTemp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@62 prevTemp@0 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@63)) (and (= (MapType0Select ExhaleHeap@1 prevTemp@0 sibling) temp@1) (state ExhaleHeap@1 Mask@63))) (and (and (<= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)) (state ExhaleHeap@1 Mask@63)) (and (= (treeParent ExhaleHeap@1 prevTemp@0) (treeParent ExhaleHeap@1 temp@1)) (= Mask@64 Mask@63)))) (and (=> (= (ControlFlow 0 641) 639) anon834_Then_correct) (=> (= (ControlFlow 0 641) 640) anon834_Else_correct))))))
(let ((anon832_Else_correct  (=> (= nextTemp@1 null) (and (=> (= (ControlFlow 0 644) 641) anon833_Then_correct) (=> (= (ControlFlow 0 644) 642) anon833_Else_correct)))))
(let ((anon832_Then_correct  (=> (not (= nextTemp@1 null)) (=> (and (and (state ExhaleHeap@1 Mask@61) (<= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0))) (and (state ExhaleHeap@1 Mask@61) (= (treeParent ExhaleHeap@1 temp@1) (segParent ExhaleHeap@1 nextTemp@1 null)))) (and (=> (= (ControlFlow 0 643) 641) anon833_Then_correct) (=> (= (ControlFlow 0 643) 642) anon833_Else_correct))))))
(let ((anon306_correct  (=> (and (= Mask@59 (MapType1Store Mask@58 null (heapseg nextTemp@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@58 null (heapseg nextTemp@1 null))) FullPerm)))) (state ExhaleHeap@1 Mask@59)) (=> (and (and (and (state ExhaleHeap@1 Mask@59) (presorted ExhaleHeap@1 nextTemp@1 null)) (and (= Mask@60 (MapType1Store Mask@59 null (tree temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@59 null (tree temp@1))) FullPerm)))) (state ExhaleHeap@1 Mask@60))) (and (and (not (= temp@1 null)) (= Mask@61 (MapType1Store Mask@60 temp@1 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@60 temp@1 sibling)) FullPerm))))) (and (state ExhaleHeap@1 Mask@61) (= (MapType0Select ExhaleHeap@1 temp@1 sibling) nextTemp@1)))) (and (=> (= (ControlFlow 0 645) 643) anon832_Then_correct) (=> (= (ControlFlow 0 645) 644) anon832_Else_correct))))))
(let ((anon831_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 647) 645)) anon306_correct)))
(let ((anon831_Then_correct  (=> (= prevTemp@0 null) (=> (and (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp@1) (= (ControlFlow 0 646) 645)) anon306_correct))))
(let ((anon830_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@58 Mask@23)) (and (=> (= (ControlFlow 0 649) 646) anon831_Then_correct) (=> (= (ControlFlow 0 649) 647) anon831_Else_correct)))))
(let ((anon830_Then_correct  (=> (and (not (= prevTemp@0 null)) (= Mask@57 (MapType1Store Mask@23 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@23 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@57) (state ExhaleHeap@1 Mask@57)) (and (sorted ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (= Mask@58 Mask@57))) (and (=> (= (ControlFlow 0 648) 646) anon831_Then_correct) (=> (= (ControlFlow 0 648) 647) anon831_Else_correct))))))
(let ((anon829_Then_correct  (=> (and (and (state ExhaleHeap@1 ZeroMask) (not (= this@@66 null))) (and (= Mask@23 (MapType1Store ZeroMask this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@66 Nodes)) FullPerm)))) (state ExhaleHeap@1 Mask@23))) (and (=> (= (ControlFlow 0 650) 648) anon830_Then_correct) (=> (= (ControlFlow 0 650) 649) anon830_Else_correct)))))
(let ((anon673_correct  (=> (= Mask@56 (MapType1Store Mask@55 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null))) FullPerm)))) (and (=> (= (ControlFlow 0 10) (- 0 13)) (sorted ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null)) (=> (sorted ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (and (=> (= (ControlFlow 0 10) (- 0 12)) (not (= (MapType0Select ExhaleHeap@2 this@@66 Nodes) null))) (=> (not (= (MapType0Select ExhaleHeap@2 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (= (segSize ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (segSize ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (=> (= (ControlFlow 0 10) (- 0 9)) (= (segParent ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))))))))))))
(let ((anon1019_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 16) 10)) anon673_correct)))
(let ((anon1019_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= FullPerm (U_2_real (MapType1Select Mask@55 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@55 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 14) 10) anon673_correct))))))
(let ((anon671_correct  (=> (= Mask@55 (MapType1Store Mask@54 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@54 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 17) 14) anon1019_Then_correct) (=> (= (ControlFlow 0 17) 16) anon1019_Else_correct)))))
(let ((anon1018_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 20) 17)) anon671_correct)))
(let ((anon1018_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (<= FullPerm (U_2_real (MapType1Select Mask@54 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@54 this@@66 Nodes))) (=> (= (ControlFlow 0 18) 17) anon671_correct))))))
(let ((anon669_correct  (=> (and (state ExhaleHeap@2 Mask@54) (state ExhaleHeap@2 Mask@54)) (and (=> (= (ControlFlow 0 21) 18) anon1018_Then_correct) (=> (= (ControlFlow 0 21) 20) anon1018_Else_correct)))))
(let ((anon1017_Else_correct  (=> (and (= prevTemp@0 null) (= (ControlFlow 0 23) 21)) anon669_correct)))
(let ((anon1017_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (state ExhaleHeap@2 Mask@54)) (and (= (segParent ExhaleHeap@2 arg_a_1@0 null) (segParent Heap@22 prevTemp@0 null)) (= (ControlFlow 0 22) 21))) anon669_correct)))
(let ((anon1016_Else_correct  (=> (= arg_a_1@0 prevTemp@0) (and (=> (= (ControlFlow 0 25) 22) anon1017_Then_correct) (=> (= (ControlFlow 0 25) 23) anon1017_Else_correct)))))
(let ((anon1016_Then_correct  (=> (not (= arg_a_1@0 prevTemp@0)) (=> (and (state ExhaleHeap@2 Mask@54) (= (segParent ExhaleHeap@2 arg_a_1@0 null) (segParent Heap@22 arg_a_1@0 prevTemp@0))) (and (=> (= (ControlFlow 0 24) 22) anon1017_Then_correct) (=> (= (ControlFlow 0 24) 23) anon1017_Else_correct))))))
(let ((anon665_correct  (=> (and (state ExhaleHeap@2 Mask@54) (= (segSize ExhaleHeap@2 arg_a_1@0 null) (+ (segSize Heap@22 arg_a_1@0 prevTemp@0) (segSize Heap@22 prevTemp@0 null)))) (and (=> (= (ControlFlow 0 26) 24) anon1016_Then_correct) (=> (= (ControlFlow 0 26) 25) anon1016_Else_correct)))))
(let ((anon1015_Else_correct  (=> (and (not (and (validChildren Heap@22 arg_a_1@0 prevTemp@0) (and (validChildren Heap@22 prevTemp@0 null) (=> (and (< 0 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (< 0 (segLength Heap@22 prevTemp@0 null))) (= (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (+ (segDegree Heap@22 prevTemp@0 null 0) 1)))))) (= (ControlFlow 0 28) 26)) anon665_correct)))
(let ((anon1015_Then_correct  (=> (and (and (and (validChildren Heap@22 arg_a_1@0 prevTemp@0) (and (validChildren Heap@22 prevTemp@0 null) (=> (and (< 0 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (< 0 (segLength Heap@22 prevTemp@0 null))) (= (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (+ (segDegree Heap@22 prevTemp@0 null 0) 1))))) (state ExhaleHeap@2 Mask@54)) (and (validChildren ExhaleHeap@2 arg_a_1@0 null) (= (ControlFlow 0 27) 26))) anon665_correct)))
(let ((anon1014_Else_correct  (=> (not (and (presorted Heap@22 arg_a_1@0 prevTemp@0) (and (presorted Heap@22 prevTemp@0 null) (=> (and (< 0 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (< 0 (segLength Heap@22 prevTemp@0 null))) (and (<= (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0)) (and (=> (and (<= 2 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (= (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 2)))) (< (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0))) (=> (and (<= 2 (segLength Heap@22 prevTemp@0 null)) (= (segDegree Heap@22 prevTemp@0 null 0) (segDegree Heap@22 prevTemp@0 null 1))) (< (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0))))))))) (and (=> (= (ControlFlow 0 30) 27) anon1015_Then_correct) (=> (= (ControlFlow 0 30) 28) anon1015_Else_correct)))))
(let ((anon1014_Then_correct  (=> (and (and (presorted Heap@22 arg_a_1@0 prevTemp@0) (and (presorted Heap@22 prevTemp@0 null) (=> (and (< 0 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (< 0 (segLength Heap@22 prevTemp@0 null))) (and (<= (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0)) (and (=> (and (<= 2 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (= (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 2)))) (< (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0))) (=> (and (<= 2 (segLength Heap@22 prevTemp@0 null)) (= (segDegree Heap@22 prevTemp@0 null 0) (segDegree Heap@22 prevTemp@0 null 1))) (< (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0)))))))) (and (state ExhaleHeap@2 Mask@54) (presorted ExhaleHeap@2 arg_a_1@0 null))) (and (=> (= (ControlFlow 0 29) 27) anon1015_Then_correct) (=> (= (ControlFlow 0 29) 28) anon1015_Else_correct)))))
(let ((anon1013_Else_correct  (=> (not (and (sorted Heap@22 arg_a_1@0 prevTemp@0) (and (sorted Heap@22 prevTemp@0 null) (=> (and (< 0 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (< 0 (segLength Heap@22 prevTemp@0 null))) (< (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0)))))) (and (=> (= (ControlFlow 0 32) 29) anon1014_Then_correct) (=> (= (ControlFlow 0 32) 30) anon1014_Else_correct)))))
(let ((anon1013_Then_correct  (=> (and (and (sorted Heap@22 arg_a_1@0 prevTemp@0) (and (sorted Heap@22 prevTemp@0 null) (=> (and (< 0 (segLength Heap@22 arg_a_1@0 prevTemp@0)) (< 0 (segLength Heap@22 prevTemp@0 null))) (< (segDegree Heap@22 arg_a_1@0 prevTemp@0 (- (segLength Heap@22 arg_a_1@0 prevTemp@0) 1)) (segDegree Heap@22 prevTemp@0 null 0))))) (and (state ExhaleHeap@2 Mask@54) (sorted ExhaleHeap@2 arg_a_1@0 null))) (and (=> (= (ControlFlow 0 31) 29) anon1014_Then_correct) (=> (= (ControlFlow 0 31) 30) anon1014_Else_correct)))))
(let ((anon1012_Else_correct  (=> (and (= null null) (= Mask@54 Mask@52)) (and (=> (= (ControlFlow 0 34) 31) anon1013_Then_correct) (=> (= (ControlFlow 0 34) 32) anon1013_Else_correct)))))
(let ((anon1012_Then_correct  (=> (and (not (= null null)) (= Mask@53 (MapType1Store Mask@52 null (tree null) (real_2_U (+ (U_2_real (MapType1Select Mask@52 null (tree null))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@2 Mask@53) (state ExhaleHeap@2 Mask@53)) (and (= (treeDegree ExhaleHeap@2 null) (treeDegree Heap@22 null)) (state ExhaleHeap@2 Mask@53))) (and (and (= (treeSize ExhaleHeap@2 null) (treeSize Heap@22 null)) (state ExhaleHeap@2 Mask@53)) (and (= (treeParent ExhaleHeap@2 null) (treeParent Heap@22 null)) (= Mask@54 Mask@53)))) (and (=> (= (ControlFlow 0 33) 31) anon1013_Then_correct) (=> (= (ControlFlow 0 33) 32) anon1013_Else_correct))))))
(let ((anon657_correct  (=> (IdenticalOnKnownLocations Heap@22 ExhaleHeap@2 Mask@51) (=> (and (and (and (= Mask@52 (MapType1Store Mask@51 null (heapseg arg_a_1@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@51 null (heapseg arg_a_1@0 null))) FullPerm)))) (state ExhaleHeap@2 Mask@52)) (and (state ExhaleHeap@2 Mask@52) (= (segLength ExhaleHeap@2 arg_a_1@0 null) (+ (segLength Heap@22 arg_a_1@0 prevTemp@0) (segLength Heap@22 prevTemp@0 null))))) (and (and (state ExhaleHeap@2 Mask@52) (forall ((i_2_1 Int) ) (!  (=> (and (<= 0 i_2_1) (< i_2_1 (segLength Heap@22 arg_a_1@0 prevTemp@0))) (= (segDegree ExhaleHeap@2 arg_a_1@0 null i_2_1) (segDegree Heap@22 arg_a_1@0 prevTemp@0 i_2_1)))
 :qid |stdinbpl.16369:22|
 :skolemid |233|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@2 null (heapseg arg_a_1@0 null)) arg_a_1@0 null i_2_1))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@22 null (heapseg arg_a_1@0 prevTemp@0)) arg_a_1@0 prevTemp@0 i_2_1))
))) (and (state ExhaleHeap@2 Mask@52) (forall ((i_3 Int) ) (!  (=> (and (<= (segLength Heap@22 arg_a_1@0 prevTemp@0) i_3) (< i_3 (segLength ExhaleHeap@2 arg_a_1@0 null))) (= (segDegree ExhaleHeap@2 arg_a_1@0 null i_3) (segDegree Heap@22 prevTemp@0 null (- i_3 (segLength Heap@22 arg_a_1@0 prevTemp@0)))))
 :qid |stdinbpl.16374:22|
 :skolemid |234|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@2 null (heapseg arg_a_1@0 null)) arg_a_1@0 null i_3))
))))) (and (=> (= (ControlFlow 0 35) 33) anon1012_Then_correct) (=> (= (ControlFlow 0 35) 34) anon1012_Else_correct))))))
(let ((anon1011_Else_correct  (=> (and (not (and (not (= arg_a_1@0 prevTemp@0)) (not (= prevTemp@0 null)))) (= (ControlFlow 0 38) 35)) anon657_correct)))
(let ((anon1011_Then_correct  (=> (and (not (= arg_a_1@0 prevTemp@0)) (not (= prevTemp@0 null))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (= (segParent Heap@22 arg_a_1@0 prevTemp@0) (segParent Heap@22 prevTemp@0 null))) (=> (= (segParent Heap@22 arg_a_1@0 prevTemp@0) (segParent Heap@22 prevTemp@0 null)) (=> (= (ControlFlow 0 36) 35) anon657_correct))))))
(let ((anon654_correct  (=> (and (= Mask@50 (MapType1Store Mask@49 null (tree null) (real_2_U (- (U_2_real (MapType1Select Mask@49 null (tree null))) FullPerm)))) (= Mask@51 Mask@50)) (and (=> (= (ControlFlow 0 40) 36) anon1011_Then_correct) (=> (= (ControlFlow 0 40) 38) anon1011_Else_correct)))))
(let ((anon1010_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 43) 40)) anon654_correct)))
(let ((anon1010_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (<= FullPerm (U_2_real (MapType1Select Mask@49 null (tree null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@49 null (tree null)))) (=> (= (ControlFlow 0 41) 40) anon654_correct))))))
(let ((anon1009_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 44) 41) anon1010_Then_correct) (=> (= (ControlFlow 0 44) 43) anon1010_Else_correct)))))
(let ((anon1009_Else_correct  (=> (and (= null null) (= Mask@51 Mask@49)) (and (=> (= (ControlFlow 0 39) 36) anon1011_Then_correct) (=> (= (ControlFlow 0 39) 38) anon1011_Else_correct)))))
(let ((anon651_correct  (=> (= Mask@49 (MapType1Store Mask@48 null (heapseg prevTemp@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@48 null (heapseg prevTemp@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 45) 44) anon1009_Then_correct) (=> (= (ControlFlow 0 45) 39) anon1009_Else_correct)))))
(let ((anon1008_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 48) 45)) anon651_correct)))
(let ((anon1008_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (<= FullPerm (U_2_real (MapType1Select Mask@48 null (heapseg prevTemp@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@48 null (heapseg prevTemp@0 null)))) (=> (= (ControlFlow 0 46) 45) anon651_correct))))))
(let ((anon649_correct  (=> (= Mask@48 (MapType1Store Mask@47 null (heapseg arg_a_1@0 prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@47 null (heapseg arg_a_1@0 prevTemp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 49) 46) anon1008_Then_correct) (=> (= (ControlFlow 0 49) 48) anon1008_Else_correct)))))
(let ((anon1007_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 52) 49)) anon649_correct)))
(let ((anon1007_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 50) (- 0 51)) (<= FullPerm (U_2_real (MapType1Select Mask@47 null (heapseg arg_a_1@0 prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@47 null (heapseg arg_a_1@0 prevTemp@0)))) (=> (= (ControlFlow 0 50) 49) anon649_correct))))))
(let ((anon647_correct  (=> (and (state Heap@22 Mask@47) (state Heap@22 Mask@47)) (and (=> (= (ControlFlow 0 53) (- 0 54)) (HasDirectPerm Mask@47 this@@66 Nodes)) (=> (HasDirectPerm Mask@47 this@@66 Nodes) (=> (= arg_a_1@0 (MapType0Select Heap@22 this@@66 Nodes)) (and (=> (= (ControlFlow 0 53) 50) anon1007_Then_correct) (=> (= (ControlFlow 0 53) 52) anon1007_Else_correct))))))))
(let ((anon1006_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Heap@22 Heap@18) (= (ControlFlow 0 56) 53)) anon647_correct))))
(let ((anon1006_Then_correct  (=> (and (and (and (not (= prevTemp@0 null)) (forall ((o_123 T@U) (f_127 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_127))))
(let ((A@@26 (FieldTypeInv0 (type f_127))))
 (=> (and (and (= (type o_123) RefType) (= (type f_127) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select Heap@18 null (|heapseg#sm| prevTemp@0 null)) o_123 f_127)) (U_2_bool (MapType1Select (MapType0Select Heap@18 null (|tree#sm| prevTemp@0)) o_123 f_127)))) (U_2_bool (MapType1Select newPMask@4 o_123 f_127)))))
 :qid |stdinbpl.16305:29|
 :skolemid |231|
 :pattern ( (MapType1Select newPMask@4 o_123 f_127))
))) (and (= Heap@19 (MapType0Store Heap@18 null (|heapseg#sm| prevTemp@0 null) newPMask@4)) (= Heap@20 (MapType0Store Heap@19 null (|heapseg#sm| prevTemp@0 null) (MapType1Store (MapType0Select Heap@19 null (|heapseg#sm| prevTemp@0 null)) prevTemp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_124 T@U) (f_128 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_128))))
(let ((A@@27 (FieldTypeInv0 (type f_128))))
 (=> (and (and (= (type o_124) RefType) (= (type f_128) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Heap@20 null (|heapseg#sm| prevTemp@0 null)) o_124 f_128)) (U_2_bool (MapType1Select (MapType0Select Heap@20 null (|heapseg#sm| (MapType0Select Heap@20 prevTemp@0 sibling) null)) o_124 f_128)))) (U_2_bool (MapType1Select newPMask@5 o_124 f_128)))))
 :qid |stdinbpl.16312:29|
 :skolemid |232|
 :pattern ( (MapType1Select newPMask@5 o_124 f_128))
)) (= Heap@21 (MapType0Store Heap@20 null (|heapseg#sm| prevTemp@0 null) newPMask@5))) (and (= Heap@22 Heap@21) (= (ControlFlow 0 55) 53)))) anon647_correct)))
(let ((anon1005_Else_correct  (=> (and (HasDirectPerm Mask@47 null (heapseg prevTemp@0 null)) (= Heap@18 Heap@15)) (and (=> (= (ControlFlow 0 58) 55) anon1006_Then_correct) (=> (= (ControlFlow 0 58) 56) anon1006_Else_correct)))))
(let ((anon1005_Then_correct  (=> (and (and (not (HasDirectPerm Mask@47 null (heapseg prevTemp@0 null))) (= Heap@16 (MapType0Store Heap@15 null (|heapseg#sm| prevTemp@0 null) ZeroPMask))) (and (= Heap@17 (MapType0Store Heap@16 null (heapseg prevTemp@0 null) freshVersion@2)) (= Heap@18 Heap@17))) (and (=> (= (ControlFlow 0 57) 55) anon1006_Then_correct) (=> (= (ControlFlow 0 57) 56) anon1006_Else_correct)))))
(let ((anon643_correct  (=> (= Mask@47 (MapType1Store Mask@46 null (heapseg prevTemp@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@46 null (heapseg prevTemp@0 null))) FullPerm)))) (=> (and (and (state Heap@15 Mask@47) (state Heap@15 Mask@47)) (and (|heapseg#trigger| Heap@15 (heapseg prevTemp@0 null)) (= (MapType0Select Heap@15 null (heapseg prevTemp@0 null)) (FrameFragment (ite (not (= prevTemp@0 null)) (CombineFrames (MapType0Select Heap@15 null (tree prevTemp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@15 prevTemp@0 sibling)) (CombineFrames (MapType0Select Heap@15 null (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@15 prevTemp@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 59) 57) anon1005_Then_correct) (=> (= (ControlFlow 0 59) 58) anon1005_Else_correct))))))
(let ((anon1004_Else_correct  (=> (= (MapType0Select Heap@15 prevTemp@0 sibling) null) (=> (and (= Mask@46 Mask@45) (= (ControlFlow 0 63) 59)) anon643_correct))))
(let ((anon1004_Then_correct  (=> (not (= (MapType0Select Heap@15 prevTemp@0 sibling) null)) (and (=> (= (ControlFlow 0 61) (- 0 62)) (= (treeParent Heap@15 prevTemp@0) (segParent Heap@15 (MapType0Select Heap@15 prevTemp@0 sibling) null))) (=> (= (treeParent Heap@15 prevTemp@0) (segParent Heap@15 (MapType0Select Heap@15 prevTemp@0 sibling) null)) (=> (and (= Mask@46 Mask@45) (= (ControlFlow 0 61) 59)) anon643_correct))))))
(let ((anon641_correct  (=> (and (= Mask@45 (MapType1Store Mask@44 null (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@44 null (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 null) (MapType0Select Heap@15 null (heapseg prevTemp@0 null)) (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null) (MapType0Select Heap@15 null (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null)))) (and (=> (= (ControlFlow 0 64) 61) anon1004_Then_correct) (=> (= (ControlFlow 0 64) 63) anon1004_Else_correct)))))
(let ((anon1003_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 67) 64)) anon641_correct)))
(let ((anon1003_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 65) (- 0 66)) (<= FullPerm (U_2_real (MapType1Select Mask@44 null (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@44 null (heapseg (MapType0Select Heap@15 prevTemp@0 sibling) null)))) (=> (= (ControlFlow 0 65) 64) anon641_correct))))))
(let ((anon639_correct  (=> (= Mask@44 (MapType1Store Mask@43 prevTemp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@43 prevTemp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 68) 65) anon1003_Then_correct) (=> (= (ControlFlow 0 68) 67) anon1003_Else_correct)))))
(let ((anon1002_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 71) 68)) anon639_correct)))
(let ((anon1002_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 69) (- 0 70)) (<= FullPerm (U_2_real (MapType1Select Mask@43 prevTemp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 prevTemp@0 sibling))) (=> (= (ControlFlow 0 69) 68) anon639_correct))))))
(let ((anon637_correct  (=> (and (= Mask@43 (MapType1Store Mask@42 null (tree prevTemp@0) (real_2_U (- (U_2_real (MapType1Select Mask@42 null (tree prevTemp@0))) FullPerm)))) (InsidePredicate (heapseg prevTemp@0 null) (MapType0Select Heap@15 null (heapseg prevTemp@0 null)) (tree prevTemp@0) (MapType0Select Heap@15 null (tree prevTemp@0)))) (and (=> (= (ControlFlow 0 72) 69) anon1002_Then_correct) (=> (= (ControlFlow 0 72) 71) anon1002_Else_correct)))))
(let ((anon1001_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 75) 72)) anon637_correct)))
(let ((anon1001_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 73) (- 0 74)) (<= FullPerm (U_2_real (MapType1Select Mask@42 null (tree prevTemp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@42 null (tree prevTemp@0)))) (=> (= (ControlFlow 0 73) 72) anon637_correct))))))
(let ((anon1000_Then_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 76) 73) anon1001_Then_correct) (=> (= (ControlFlow 0 76) 75) anon1001_Else_correct)))))
(let ((anon1000_Else_correct  (=> (= prevTemp@0 null) (=> (and (= Mask@46 Mask@42) (= (ControlFlow 0 60) 59)) anon643_correct))))
(let ((anon634_correct  (=> (and (state Heap@15 Mask@42) (state Heap@15 Mask@42)) (and (=> (= (ControlFlow 0 77) 76) anon1000_Then_correct) (=> (= (ControlFlow 0 77) 60) anon1000_Else_correct)))))
(let ((anon999_Else_correct  (=> (= temp@1 null) (=> (and (= Heap@15 Heap@11) (= (ControlFlow 0 79) 77)) anon634_correct))))
(let ((anon999_Then_correct  (=> (and (and (and (not (= temp@1 null)) (forall ((o_121 T@U) (f_125 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_125))))
(let ((A@@28 (FieldTypeInv0 (type f_125))))
 (=> (and (and (= (type o_121) RefType) (= (type f_125) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@11 null (|heapseg#sm| temp@1 null)) o_121 f_125)) (U_2_bool (MapType1Select (MapType0Select Heap@11 null (|tree#sm| temp@1)) o_121 f_125)))) (U_2_bool (MapType1Select newPMask@2 o_121 f_125)))))
 :qid |stdinbpl.16243:29|
 :skolemid |229|
 :pattern ( (MapType1Select newPMask@2 o_121 f_125))
))) (and (= Heap@12 (MapType0Store Heap@11 null (|heapseg#sm| temp@1 null) newPMask@2)) (= Heap@13 (MapType0Store Heap@12 null (|heapseg#sm| temp@1 null) (MapType1Store (MapType0Select Heap@12 null (|heapseg#sm| temp@1 null)) temp@1 sibling (bool_2_U true)))))) (and (and (forall ((o_122 T@U) (f_126 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_126))))
(let ((A@@29 (FieldTypeInv0 (type f_126))))
 (=> (and (and (= (type o_122) RefType) (= (type f_126) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select Heap@13 null (|heapseg#sm| temp@1 null)) o_122 f_126)) (U_2_bool (MapType1Select (MapType0Select Heap@13 null (|heapseg#sm| (MapType0Select Heap@13 temp@1 sibling) null)) o_122 f_126)))) (U_2_bool (MapType1Select newPMask@3 o_122 f_126)))))
 :qid |stdinbpl.16250:29|
 :skolemid |230|
 :pattern ( (MapType1Select newPMask@3 o_122 f_126))
)) (= Heap@14 (MapType0Store Heap@13 null (|heapseg#sm| temp@1 null) newPMask@3))) (and (= Heap@15 Heap@14) (= (ControlFlow 0 78) 77)))) anon634_correct)))
(let ((anon998_Else_correct  (=> (and (HasDirectPerm Mask@42 null (heapseg temp@1 null)) (= Heap@11 Heap@8)) (and (=> (= (ControlFlow 0 81) 78) anon999_Then_correct) (=> (= (ControlFlow 0 81) 79) anon999_Else_correct)))))
(let ((anon998_Then_correct  (=> (and (and (not (HasDirectPerm Mask@42 null (heapseg temp@1 null))) (= Heap@9 (MapType0Store Heap@8 null (|heapseg#sm| temp@1 null) ZeroPMask))) (and (= Heap@10 (MapType0Store Heap@9 null (heapseg temp@1 null) freshVersion@1)) (= Heap@11 Heap@10))) (and (=> (= (ControlFlow 0 80) 78) anon999_Then_correct) (=> (= (ControlFlow 0 80) 79) anon999_Else_correct)))))
(let ((anon630_correct  (=> (= Mask@42 (MapType1Store Mask@41 null (heapseg temp@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@41 null (heapseg temp@1 null))) FullPerm)))) (=> (and (and (state Heap@8 Mask@42) (state Heap@8 Mask@42)) (and (|heapseg#trigger| Heap@8 (heapseg temp@1 null)) (= (MapType0Select Heap@8 null (heapseg temp@1 null)) (FrameFragment (ite (not (= temp@1 null)) (CombineFrames (MapType0Select Heap@8 null (tree temp@1)) (CombineFrames (FrameFragment (MapType0Select Heap@8 temp@1 sibling)) (CombineFrames (MapType0Select Heap@8 null (heapseg (MapType0Select Heap@8 temp@1 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@8 temp@1 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 82) 80) anon998_Then_correct) (=> (= (ControlFlow 0 82) 81) anon998_Else_correct))))))
(let ((anon997_Else_correct  (=> (= (MapType0Select Heap@8 temp@1 sibling) null) (=> (and (= Mask@41 Mask@40) (= (ControlFlow 0 86) 82)) anon630_correct))))
(let ((anon997_Then_correct  (=> (not (= (MapType0Select Heap@8 temp@1 sibling) null)) (and (=> (= (ControlFlow 0 84) (- 0 85)) (= (treeParent Heap@8 temp@1) (segParent Heap@8 (MapType0Select Heap@8 temp@1 sibling) null))) (=> (= (treeParent Heap@8 temp@1) (segParent Heap@8 (MapType0Select Heap@8 temp@1 sibling) null)) (=> (and (= Mask@41 Mask@40) (= (ControlFlow 0 84) 82)) anon630_correct))))))
(let ((anon628_correct  (=> (and (= Mask@40 (MapType1Store Mask@39 null (heapseg (MapType0Select Heap@8 temp@1 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@39 null (heapseg (MapType0Select Heap@8 temp@1 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp@1 null) (MapType0Select Heap@8 null (heapseg temp@1 null)) (heapseg (MapType0Select Heap@8 temp@1 sibling) null) (MapType0Select Heap@8 null (heapseg (MapType0Select Heap@8 temp@1 sibling) null)))) (and (=> (= (ControlFlow 0 87) 84) anon997_Then_correct) (=> (= (ControlFlow 0 87) 86) anon997_Else_correct)))))
(let ((anon996_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 90) 87)) anon628_correct)))
(let ((anon996_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 88) (- 0 89)) (<= FullPerm (U_2_real (MapType1Select Mask@39 null (heapseg (MapType0Select Heap@8 temp@1 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@39 null (heapseg (MapType0Select Heap@8 temp@1 sibling) null)))) (=> (= (ControlFlow 0 88) 87) anon628_correct))))))
(let ((anon626_correct  (=> (= Mask@39 (MapType1Store Mask@38 temp@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@38 temp@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 91) 88) anon996_Then_correct) (=> (= (ControlFlow 0 91) 90) anon996_Else_correct)))))
(let ((anon995_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 94) 91)) anon626_correct)))
(let ((anon995_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 92) (- 0 93)) (<= FullPerm (U_2_real (MapType1Select Mask@38 temp@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@38 temp@1 sibling))) (=> (= (ControlFlow 0 92) 91) anon626_correct))))))
(let ((anon624_correct  (=> (and (= Mask@38 (MapType1Store Mask@37 null (tree temp@1) (real_2_U (- (U_2_real (MapType1Select Mask@37 null (tree temp@1))) FullPerm)))) (InsidePredicate (heapseg temp@1 null) (MapType0Select Heap@8 null (heapseg temp@1 null)) (tree temp@1) (MapType0Select Heap@8 null (tree temp@1)))) (and (=> (= (ControlFlow 0 95) 92) anon995_Then_correct) (=> (= (ControlFlow 0 95) 94) anon995_Else_correct)))))
(let ((anon994_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 98) 95)) anon624_correct)))
(let ((anon994_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 96) (- 0 97)) (<= FullPerm (U_2_real (MapType1Select Mask@37 null (tree temp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@37 null (tree temp@1)))) (=> (= (ControlFlow 0 96) 95) anon624_correct))))))
(let ((anon993_Then_correct  (=> (not (= temp@1 null)) (and (=> (= (ControlFlow 0 99) 96) anon994_Then_correct) (=> (= (ControlFlow 0 99) 98) anon994_Else_correct)))))
(let ((anon993_Else_correct  (=> (= temp@1 null) (=> (and (= Mask@41 Mask@37) (= (ControlFlow 0 83) 82)) anon630_correct))))
(let ((anon621_correct  (=> (and (state Heap@8 Mask@37) (state Heap@8 Mask@37)) (and (=> (= (ControlFlow 0 100) 99) anon993_Then_correct) (=> (= (ControlFlow 0 100) 83) anon993_Else_correct)))))
(let ((anon992_Else_correct  (=> (= nextTemp@1 null) (=> (and (= Heap@8 Heap@4) (= (ControlFlow 0 102) 100)) anon621_correct))))
(let ((anon992_Then_correct  (=> (and (and (and (not (= nextTemp@1 null)) (forall ((o_119 T@U) (f_123 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_123))))
(let ((A@@30 (FieldTypeInv0 (type f_123))))
 (=> (and (and (= (type o_119) RefType) (= (type f_123) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select Heap@4 null (|heapseg#sm| nextTemp@1 null)) o_119 f_123)) (U_2_bool (MapType1Select (MapType0Select Heap@4 null (|tree#sm| nextTemp@1)) o_119 f_123)))) (U_2_bool (MapType1Select newPMask@0 o_119 f_123)))))
 :qid |stdinbpl.16181:29|
 :skolemid |227|
 :pattern ( (MapType1Select newPMask@0 o_119 f_123))
))) (and (= Heap@5 (MapType0Store Heap@4 null (|heapseg#sm| nextTemp@1 null) newPMask@0)) (= Heap@6 (MapType0Store Heap@5 null (|heapseg#sm| nextTemp@1 null) (MapType1Store (MapType0Select Heap@5 null (|heapseg#sm| nextTemp@1 null)) nextTemp@1 sibling (bool_2_U true)))))) (and (and (forall ((o_120 T@U) (f_124 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_124))))
(let ((A@@31 (FieldTypeInv0 (type f_124))))
 (=> (and (and (= (type o_120) RefType) (= (type f_124) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select Heap@6 null (|heapseg#sm| nextTemp@1 null)) o_120 f_124)) (U_2_bool (MapType1Select (MapType0Select Heap@6 null (|heapseg#sm| (MapType0Select Heap@6 nextTemp@1 sibling) null)) o_120 f_124)))) (U_2_bool (MapType1Select newPMask@1 o_120 f_124)))))
 :qid |stdinbpl.16188:29|
 :skolemid |228|
 :pattern ( (MapType1Select newPMask@1 o_120 f_124))
)) (= Heap@7 (MapType0Store Heap@6 null (|heapseg#sm| nextTemp@1 null) newPMask@1))) (and (= Heap@8 Heap@7) (= (ControlFlow 0 101) 100)))) anon621_correct)))
(let ((anon991_Else_correct  (=> (and (HasDirectPerm Mask@37 null (heapseg nextTemp@1 null)) (= Heap@4 ExhaleHeap@1)) (and (=> (= (ControlFlow 0 104) 101) anon992_Then_correct) (=> (= (ControlFlow 0 104) 102) anon992_Else_correct)))))
(let ((anon991_Then_correct  (=> (and (and (not (HasDirectPerm Mask@37 null (heapseg nextTemp@1 null))) (= Heap@2 (MapType0Store ExhaleHeap@1 null (|heapseg#sm| nextTemp@1 null) ZeroPMask))) (and (= Heap@3 (MapType0Store Heap@2 null (heapseg nextTemp@1 null) freshVersion@0)) (= Heap@4 Heap@3))) (and (=> (= (ControlFlow 0 103) 101) anon992_Then_correct) (=> (= (ControlFlow 0 103) 102) anon992_Else_correct)))))
(let ((anon617_correct  (=> (= Mask@37 (MapType1Store Mask@36 null (heapseg nextTemp@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@36 null (heapseg nextTemp@1 null))) FullPerm)))) (=> (and (and (state ExhaleHeap@1 Mask@37) (state ExhaleHeap@1 Mask@37)) (and (|heapseg#trigger| ExhaleHeap@1 (heapseg nextTemp@1 null)) (= (MapType0Select ExhaleHeap@1 null (heapseg nextTemp@1 null)) (FrameFragment (ite (not (= nextTemp@1 null)) (CombineFrames (MapType0Select ExhaleHeap@1 null (tree nextTemp@1)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 nextTemp@1 sibling)) (CombineFrames (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 105) 103) anon991_Then_correct) (=> (= (ControlFlow 0 105) 104) anon991_Else_correct))))))
(let ((anon990_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null) (=> (and (= Mask@36 Mask@35) (= (ControlFlow 0 109) 105)) anon617_correct))))
(let ((anon990_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)) (and (=> (= (ControlFlow 0 107) (- 0 108)) (= (treeParent ExhaleHeap@1 nextTemp@1) (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null))) (=> (= (treeParent ExhaleHeap@1 nextTemp@1) (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)) (=> (and (= Mask@36 Mask@35) (= (ControlFlow 0 107) 105)) anon617_correct))))))
(let ((anon615_correct  (=> (and (= Mask@35 (MapType1Store Mask@34 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null))) FullPerm)))) (InsidePredicate (heapseg nextTemp@1 null) (MapType0Select ExhaleHeap@1 null (heapseg nextTemp@1 null)) (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null) (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)))) (and (=> (= (ControlFlow 0 110) 107) anon990_Then_correct) (=> (= (ControlFlow 0 110) 109) anon990_Else_correct)))))
(let ((anon989_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 113) 110)) anon615_correct)))
(let ((anon989_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 111) (- 0 112)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg (MapType0Select ExhaleHeap@1 nextTemp@1 sibling) null)))) (=> (= (ControlFlow 0 111) 110) anon615_correct))))))
(let ((anon613_correct  (=> (= Mask@34 (MapType1Store Mask@33 nextTemp@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@33 nextTemp@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 114) 111) anon989_Then_correct) (=> (= (ControlFlow 0 114) 113) anon989_Else_correct)))))
(let ((anon988_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 117) 114)) anon613_correct)))
(let ((anon988_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 115) (- 0 116)) (<= FullPerm (U_2_real (MapType1Select Mask@33 nextTemp@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@33 nextTemp@1 sibling))) (=> (= (ControlFlow 0 115) 114) anon613_correct))))))
(let ((anon611_correct  (=> (and (= Mask@33 (MapType1Store Mask@32 null (tree nextTemp@1) (real_2_U (- (U_2_real (MapType1Select Mask@32 null (tree nextTemp@1))) FullPerm)))) (InsidePredicate (heapseg nextTemp@1 null) (MapType0Select ExhaleHeap@1 null (heapseg nextTemp@1 null)) (tree nextTemp@1) (MapType0Select ExhaleHeap@1 null (tree nextTemp@1)))) (and (=> (= (ControlFlow 0 118) 115) anon988_Then_correct) (=> (= (ControlFlow 0 118) 117) anon988_Else_correct)))))
(let ((anon987_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 121) 118)) anon611_correct)))
(let ((anon987_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 119) (- 0 120)) (<= FullPerm (U_2_real (MapType1Select Mask@32 null (tree nextTemp@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@32 null (tree nextTemp@1)))) (=> (= (ControlFlow 0 119) 118) anon611_correct))))))
(let ((anon986_Then_correct  (=> (not (= nextTemp@1 null)) (and (=> (= (ControlFlow 0 122) 119) anon987_Then_correct) (=> (= (ControlFlow 0 122) 121) anon987_Else_correct)))))
(let ((anon986_Else_correct  (=> (= nextTemp@1 null) (=> (and (= Mask@36 Mask@32) (= (ControlFlow 0 106) 105)) anon617_correct))))
(let ((anon608_correct  (=> (and (and (state ExhaleHeap@1 Mask@32) (= (treeParent ExhaleHeap@1 temp@1) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (state ExhaleHeap@1 Mask@32) (state ExhaleHeap@1 Mask@32))) (and (=> (= (ControlFlow 0 123) 122) anon986_Then_correct) (=> (= (ControlFlow 0 123) 106) anon986_Else_correct)))))
(let ((anon985_Else_correct  (=> (and (not (and (not (= prevTemp@0 null)) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (= (ControlFlow 0 125) 123)) anon608_correct)))
(let ((anon985_Then_correct  (=> (and (and (and (not (= prevTemp@0 null)) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) (state ExhaleHeap@1 Mask@32)) (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (treeParent ExhaleHeap@1 prevTemp@0)) (= (ControlFlow 0 124) 123))) anon608_correct)))
(let ((anon984_Else_correct  (=> (not (= prevTemp@0 null)) (and (=> (= (ControlFlow 0 127) 124) anon985_Then_correct) (=> (= (ControlFlow 0 127) 125) anon985_Else_correct)))))
(let ((anon984_Then_correct  (=> (= prevTemp@0 null) (=> (and (state ExhaleHeap@1 Mask@32) (= (+ (treeSize ExhaleHeap@1 temp@1) (segSize ExhaleHeap@1 nextTemp@1 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 126) 124) anon985_Then_correct) (=> (= (ControlFlow 0 126) 125) anon985_Else_correct))))))
(let ((anon983_Else_correct  (=> (= prevTemp@0 null) (and (=> (= (ControlFlow 0 129) 126) anon984_Then_correct) (=> (= (ControlFlow 0 129) 127) anon984_Else_correct)))))
(let ((anon983_Then_correct  (=> (not (= prevTemp@0 null)) (=> (and (state ExhaleHeap@1 Mask@32) (= (+ (+ (+ (segSize ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (treeSize ExhaleHeap@1 prevTemp@0)) (treeSize ExhaleHeap@1 temp@1)) (segSize ExhaleHeap@1 nextTemp@1 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 128) 126) anon984_Then_correct) (=> (= (ControlFlow 0 128) 127) anon984_Else_correct))))))
(let ((anon982_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)))) (and (=> (= (ControlFlow 0 131) 128) anon983_Then_correct) (=> (= (ControlFlow 0 131) 129) anon983_Else_correct)))))
(let ((anon982_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) (and (state ExhaleHeap@1 Mask@32) (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) 1)) (treeDegree ExhaleHeap@1 prevTemp@0)))) (and (=> (= (ControlFlow 0 130) 128) anon983_Then_correct) (=> (= (ControlFlow 0 130) 129) anon983_Else_correct)))))
(let ((anon981_Else_correct  (=> (< (segLength ExhaleHeap@1 nextTemp@1 null) 2) (and (=> (= (ControlFlow 0 134) 130) anon982_Then_correct) (=> (= (ControlFlow 0 134) 131) anon982_Else_correct)))))
(let ((anon981_Then_correct  (=> (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (=> (and (state ExhaleHeap@1 Mask@32) (< (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1))) (and (=> (= (ControlFlow 0 133) 130) anon982_Then_correct) (=> (= (ControlFlow 0 133) 131) anon982_Else_correct))))))
(let ((anon980_Then_correct  (=> (and (not (= prevTemp@0 null)) (= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1))) (=> (and (and (state ExhaleHeap@1 Mask@32) (< 0 (segLength ExhaleHeap@1 nextTemp@1 null))) (and (state ExhaleHeap@1 Mask@32) (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)))) (and (=> (= (ControlFlow 0 135) 133) anon981_Then_correct) (=> (= (ControlFlow 0 135) 134) anon981_Else_correct))))))
(let ((anon980_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)))) (and (=> (= (ControlFlow 0 132) 130) anon982_Then_correct) (=> (= (ControlFlow 0 132) 131) anon982_Else_correct)))))
(let ((anon979_Else_correct  (=> (not (and (not (= prevTemp@0 null)) (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (= (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1))))))) (and (=> (= (ControlFlow 0 137) 135) anon980_Then_correct) (=> (= (ControlFlow 0 137) 132) anon980_Else_correct)))))
(let ((anon979_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0)) (and (<= 2 (segLength ExhaleHeap@1 nextTemp@1 null)) (and (= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0)) (= (segDegree ExhaleHeap@1 nextTemp@1 null 0) (segDegree ExhaleHeap@1 nextTemp@1 null 1)))))) (and (state ExhaleHeap@1 Mask@32) (< (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)))) (and (=> (= (ControlFlow 0 136) 135) anon980_Then_correct) (=> (= (ControlFlow 0 136) 132) anon980_Else_correct)))))
(let ((anon978_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@32 Mask@29)) (and (=> (= (ControlFlow 0 139) 136) anon979_Then_correct) (=> (= (ControlFlow 0 139) 137) anon979_Else_correct)))))
(let ((anon978_Then_correct  (=> (and (and (not (= prevTemp@0 null)) (= Mask@30 (MapType1Store Mask@29 null (tree prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@29 null (tree prevTemp@0))) FullPerm))))) (and (state ExhaleHeap@1 Mask@30) (not (= prevTemp@0 null)))) (=> (and (and (and (= Mask@31 (MapType1Store Mask@30 prevTemp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@30 prevTemp@0 sibling)) FullPerm)))) (state ExhaleHeap@1 Mask@31)) (and (= (MapType0Select ExhaleHeap@1 prevTemp@0 sibling) temp@1) (state ExhaleHeap@1 Mask@31))) (and (and (<= (treeDegree ExhaleHeap@1 prevTemp@0) (treeDegree ExhaleHeap@1 temp@1)) (state ExhaleHeap@1 Mask@31)) (and (= (treeParent ExhaleHeap@1 prevTemp@0) (treeParent ExhaleHeap@1 temp@1)) (= Mask@32 Mask@31)))) (and (=> (= (ControlFlow 0 138) 136) anon979_Then_correct) (=> (= (ControlFlow 0 138) 137) anon979_Else_correct))))))
(let ((anon977_Else_correct  (=> (= nextTemp@1 null) (and (=> (= (ControlFlow 0 141) 138) anon978_Then_correct) (=> (= (ControlFlow 0 141) 139) anon978_Else_correct)))))
(let ((anon977_Then_correct  (=> (not (= nextTemp@1 null)) (=> (and (and (state ExhaleHeap@1 Mask@29) (<= (treeDegree ExhaleHeap@1 temp@1) (segDegree ExhaleHeap@1 nextTemp@1 null 0))) (and (state ExhaleHeap@1 Mask@29) (= (treeParent ExhaleHeap@1 temp@1) (segParent ExhaleHeap@1 nextTemp@1 null)))) (and (=> (= (ControlFlow 0 140) 138) anon978_Then_correct) (=> (= (ControlFlow 0 140) 139) anon978_Else_correct))))))
(let ((anon591_correct  (=> (and (= Mask@27 (MapType1Store Mask@26 null (heapseg nextTemp@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@26 null (heapseg nextTemp@1 null))) FullPerm)))) (state ExhaleHeap@1 Mask@27)) (=> (and (and (and (state ExhaleHeap@1 Mask@27) (presorted ExhaleHeap@1 nextTemp@1 null)) (and (= Mask@28 (MapType1Store Mask@27 null (tree temp@1) (real_2_U (+ (U_2_real (MapType1Select Mask@27 null (tree temp@1))) FullPerm)))) (state ExhaleHeap@1 Mask@28))) (and (and (not (= temp@1 null)) (= Mask@29 (MapType1Store Mask@28 temp@1 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@28 temp@1 sibling)) FullPerm))))) (and (state ExhaleHeap@1 Mask@29) (= (MapType0Select ExhaleHeap@1 temp@1 sibling) nextTemp@1)))) (and (=> (= (ControlFlow 0 142) 140) anon977_Then_correct) (=> (= (ControlFlow 0 142) 141) anon977_Else_correct))))))
(let ((anon976_Else_correct  (=> (and (not (= prevTemp@0 null)) (= (ControlFlow 0 144) 142)) anon591_correct)))
(let ((anon976_Then_correct  (=> (= prevTemp@0 null) (=> (and (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp@1) (= (ControlFlow 0 143) 142)) anon591_correct))))
(let ((anon975_Else_correct  (=> (and (= prevTemp@0 null) (= Mask@26 Mask@24)) (and (=> (= (ControlFlow 0 146) 143) anon976_Then_correct) (=> (= (ControlFlow 0 146) 144) anon976_Else_correct)))))
(let ((anon975_Then_correct  (=> (and (not (= prevTemp@0 null)) (= Mask@25 (MapType1Store Mask@24 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@24 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0))) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@25) (state ExhaleHeap@1 Mask@25)) (and (sorted ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) prevTemp@0) (= Mask@26 Mask@25))) (and (=> (= (ControlFlow 0 145) 143) anon976_Then_correct) (=> (= (ControlFlow 0 145) 144) anon976_Else_correct))))))
(let ((anon829_Else_correct  (=> (not (not (= nextTemp@1 null))) (=> (and (and (state ExhaleHeap@1 Mask@21) (not (= this@@66 null))) (and (= Mask@24 (MapType1Store Mask@21 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@21 this@@66 Nodes)) FullPerm)))) (state ExhaleHeap@1 Mask@24))) (and (=> (= (ControlFlow 0 147) 145) anon975_Then_correct) (=> (= (ControlFlow 0 147) 146) anon975_Else_correct))))))
(let ((anon94_correct  (and (=> (= (ControlFlow 0 919) (- 0 920)) (= (treeParent Heap@1 temp@0) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (treeParent Heap@1 temp@0) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (and (and (IdenticalOnKnownLocations Heap@1 ExhaleHeap@1 Mask@21) (U_2_bool (MapType0Select ExhaleHeap@1 nextTemp@1 $allocated))) (and (U_2_bool (MapType0Select ExhaleHeap@1 temp@1 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@1 prevTemp@0 $allocated)))) (and (and (=> (= (ControlFlow 0 919) 918) anon722_Then_correct) (=> (= (ControlFlow 0 919) 650) anon829_Then_correct)) (=> (= (ControlFlow 0 919) 147) anon829_Else_correct)))))))
(let ((anon721_Else_correct  (=> (and (not (and (not (= null null)) (not (= (MapType0Select Heap@1 this@@66 Nodes) null)))) (= (ControlFlow 0 923) 919)) anon94_correct)))
(let ((anon721_Then_correct  (=> (and (not (= null null)) (not (= (MapType0Select Heap@1 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 921) (- 0 922)) (= (segParent Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) (treeParent Heap@1 null))) (=> (= (segParent Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) (treeParent Heap@1 null)) (=> (= (ControlFlow 0 921) 919) anon94_correct))))))
(let ((anon720_Else_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 926) 921) anon721_Then_correct) (=> (= (ControlFlow 0 926) 923) anon721_Else_correct)))))
(let ((anon720_Then_correct  (=> (= null null) (and (=> (= (ControlFlow 0 924) (- 0 925)) (= (+ (treeSize Heap@1 temp@0) (segSize Heap@1 nextTemp@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (treeSize Heap@1 temp@0) (segSize Heap@1 nextTemp@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 924) 921) anon721_Then_correct) (=> (= (ControlFlow 0 924) 923) anon721_Else_correct)))))))
(let ((anon719_Else_correct  (=> (= null null) (and (=> (= (ControlFlow 0 929) 924) anon720_Then_correct) (=> (= (ControlFlow 0 929) 926) anon720_Else_correct)))))
(let ((anon719_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 927) (- 0 928)) (= (+ (+ (+ (segSize Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) (treeSize Heap@1 null)) (treeSize Heap@1 temp@0)) (segSize Heap@1 nextTemp@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (+ (+ (segSize Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) (treeSize Heap@1 null)) (treeSize Heap@1 temp@0)) (segSize Heap@1 nextTemp@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 927) 924) anon720_Then_correct) (=> (= (ControlFlow 0 927) 926) anon720_Else_correct)))))))
(let ((anon718_Else_correct  (=> (not (and (not (= null null)) (< 0 (segLength Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null)))) (and (=> (= (ControlFlow 0 932) 927) anon719_Then_correct) (=> (= (ControlFlow 0 932) 929) anon719_Else_correct)))))
(let ((anon718_Then_correct  (=> (and (not (= null null)) (< 0 (segLength Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 930) (- 0 931)) (< (segDegree Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null (- (segLength Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) 1)) (treeDegree Heap@1 null))) (=> (< (segDegree Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null (- (segLength Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) 1)) (treeDegree Heap@1 null)) (and (=> (= (ControlFlow 0 930) 927) anon719_Then_correct) (=> (= (ControlFlow 0 930) 929) anon719_Else_correct)))))))
(let ((anon717_Else_correct  (=> (< (segLength Heap@1 nextTemp@0 null) 2) (and (=> (= (ControlFlow 0 936) 930) anon718_Then_correct) (=> (= (ControlFlow 0 936) 932) anon718_Else_correct)))))
(let ((anon717_Then_correct  (=> (<= 2 (segLength Heap@1 nextTemp@0 null)) (and (=> (= (ControlFlow 0 934) (- 0 935)) (< (segDegree Heap@1 nextTemp@0 null 0) (segDegree Heap@1 nextTemp@0 null 1))) (=> (< (segDegree Heap@1 nextTemp@0 null 0) (segDegree Heap@1 nextTemp@0 null 1)) (and (=> (= (ControlFlow 0 934) 930) anon718_Then_correct) (=> (= (ControlFlow 0 934) 932) anon718_Else_correct)))))))
(let ((anon716_Then_correct  (=> (and (not (= null null)) (= (treeDegree Heap@1 null) (treeDegree Heap@1 temp@0))) (and (=> (= (ControlFlow 0 937) (- 0 939)) (< 0 (segLength Heap@1 nextTemp@0 null))) (=> (< 0 (segLength Heap@1 nextTemp@0 null)) (and (=> (= (ControlFlow 0 937) (- 0 938)) (= (treeDegree Heap@1 temp@0) (segDegree Heap@1 nextTemp@0 null 0))) (=> (= (treeDegree Heap@1 temp@0) (segDegree Heap@1 nextTemp@0 null 0)) (and (=> (= (ControlFlow 0 937) 934) anon717_Then_correct) (=> (= (ControlFlow 0 937) 936) anon717_Else_correct)))))))))
(let ((anon716_Else_correct  (=> (not (and (not (= null null)) (= (treeDegree Heap@1 null) (treeDegree Heap@1 temp@0)))) (and (=> (= (ControlFlow 0 933) 930) anon718_Then_correct) (=> (= (ControlFlow 0 933) 932) anon718_Else_correct)))))
(let ((anon715_Else_correct  (=> (not (and (not (= null null)) (and (< 0 (segLength Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null)) (and (<= 2 (segLength Heap@1 nextTemp@0 null)) (and (= (treeDegree Heap@1 temp@0) (segDegree Heap@1 nextTemp@0 null 0)) (= (segDegree Heap@1 nextTemp@0 null 0) (segDegree Heap@1 nextTemp@0 null 1))))))) (and (=> (= (ControlFlow 0 942) 937) anon716_Then_correct) (=> (= (ControlFlow 0 942) 933) anon716_Else_correct)))))
(let ((anon715_Then_correct  (=> (and (not (= null null)) (and (< 0 (segLength Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null)) (and (<= 2 (segLength Heap@1 nextTemp@0 null)) (and (= (treeDegree Heap@1 temp@0) (segDegree Heap@1 nextTemp@0 null 0)) (= (segDegree Heap@1 nextTemp@0 null 0) (segDegree Heap@1 nextTemp@0 null 1)))))) (and (=> (= (ControlFlow 0 940) (- 0 941)) (< (treeDegree Heap@1 null) (treeDegree Heap@1 temp@0))) (=> (< (treeDegree Heap@1 null) (treeDegree Heap@1 temp@0)) (and (=> (= (ControlFlow 0 940) 937) anon716_Then_correct) (=> (= (ControlFlow 0 940) 933) anon716_Else_correct)))))))
(let ((anon80_correct  (=> (= Mask@20 (MapType1Store Mask@19 null sibling (real_2_U (- (U_2_real (MapType1Select Mask@19 null sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 944) (- 0 947)) (= (MapType0Select Heap@1 null sibling) temp@0)) (=> (= (MapType0Select Heap@1 null sibling) temp@0) (and (=> (= (ControlFlow 0 944) (- 0 946)) (<= (treeDegree Heap@1 null) (treeDegree Heap@1 temp@0))) (=> (<= (treeDegree Heap@1 null) (treeDegree Heap@1 temp@0)) (and (=> (= (ControlFlow 0 944) (- 0 945)) (= (treeParent Heap@1 null) (treeParent Heap@1 temp@0))) (=> (= (treeParent Heap@1 null) (treeParent Heap@1 temp@0)) (=> (= Mask@21 Mask@20) (and (=> (= (ControlFlow 0 944) 940) anon715_Then_correct) (=> (= (ControlFlow 0 944) 942) anon715_Else_correct))))))))))))
(let ((anon714_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 950) 944)) anon80_correct)))
(let ((anon714_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 948) (- 0 949)) (<= FullPerm (U_2_real (MapType1Select Mask@19 null sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@19 null sibling))) (=> (= (ControlFlow 0 948) 944) anon80_correct))))))
(let ((anon78_correct  (=> (= Mask@19 (MapType1Store Mask@18 null (tree null) (real_2_U (- (U_2_real (MapType1Select Mask@18 null (tree null))) FullPerm)))) (and (=> (= (ControlFlow 0 951) 948) anon714_Then_correct) (=> (= (ControlFlow 0 951) 950) anon714_Else_correct)))))
(let ((anon713_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 954) 951)) anon78_correct)))
(let ((anon713_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 952) (- 0 953)) (<= FullPerm (U_2_real (MapType1Select Mask@18 null (tree null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@18 null (tree null)))) (=> (= (ControlFlow 0 952) 951) anon78_correct))))))
(let ((anon712_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 955) 952) anon713_Then_correct) (=> (= (ControlFlow 0 955) 954) anon713_Else_correct)))))
(let ((anon712_Else_correct  (=> (and (= null null) (= Mask@21 Mask@18)) (and (=> (= (ControlFlow 0 943) 940) anon715_Then_correct) (=> (= (ControlFlow 0 943) 942) anon715_Else_correct)))))
(let ((anon711_Else_correct  (=> (= nextTemp@0 null) (and (=> (= (ControlFlow 0 959) 955) anon712_Then_correct) (=> (= (ControlFlow 0 959) 943) anon712_Else_correct)))))
(let ((anon711_Then_correct  (=> (not (= nextTemp@0 null)) (and (=> (= (ControlFlow 0 956) (- 0 958)) (<= (treeDegree Heap@1 temp@0) (segDegree Heap@1 nextTemp@0 null 0))) (=> (<= (treeDegree Heap@1 temp@0) (segDegree Heap@1 nextTemp@0 null 0)) (and (=> (= (ControlFlow 0 956) (- 0 957)) (= (treeParent Heap@1 temp@0) (segParent Heap@1 nextTemp@0 null))) (=> (= (treeParent Heap@1 temp@0) (segParent Heap@1 nextTemp@0 null)) (and (=> (= (ControlFlow 0 956) 955) anon712_Then_correct) (=> (= (ControlFlow 0 956) 943) anon712_Else_correct)))))))))
(let ((anon73_correct  (=> (= Mask@18 (MapType1Store Mask@17 temp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@17 temp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 960) (- 0 961)) (= (MapType0Select Heap@1 temp@0 sibling) nextTemp@0)) (=> (= (MapType0Select Heap@1 temp@0 sibling) nextTemp@0) (and (=> (= (ControlFlow 0 960) 956) anon711_Then_correct) (=> (= (ControlFlow 0 960) 959) anon711_Else_correct)))))))
(let ((anon710_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 964) 960)) anon73_correct)))
(let ((anon710_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 962) (- 0 963)) (<= FullPerm (U_2_real (MapType1Select Mask@17 temp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@17 temp@0 sibling))) (=> (= (ControlFlow 0 962) 960) anon73_correct))))))
(let ((anon71_correct  (=> (= Mask@17 (MapType1Store Mask@16 null (tree temp@0) (real_2_U (- (U_2_real (MapType1Select Mask@16 null (tree temp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 965) 962) anon710_Then_correct) (=> (= (ControlFlow 0 965) 964) anon710_Else_correct)))))
(let ((anon709_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 968) 965)) anon71_correct)))
(let ((anon709_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 966) (- 0 967)) (<= FullPerm (U_2_real (MapType1Select Mask@16 null (tree temp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@16 null (tree temp@0)))) (=> (= (ControlFlow 0 966) 965) anon71_correct))))))
(let ((anon69_correct  (=> (= Mask@16 (MapType1Store Mask@15 null (heapseg nextTemp@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@15 null (heapseg nextTemp@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 969) (- 0 970)) (presorted Heap@1 nextTemp@0 null)) (=> (presorted Heap@1 nextTemp@0 null) (and (=> (= (ControlFlow 0 969) 966) anon709_Then_correct) (=> (= (ControlFlow 0 969) 968) anon709_Else_correct)))))))
(let ((anon708_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 973) 969)) anon69_correct)))
(let ((anon708_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 971) (- 0 972)) (<= FullPerm (U_2_real (MapType1Select Mask@15 null (heapseg nextTemp@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@15 null (heapseg nextTemp@0 null)))) (=> (= (ControlFlow 0 971) 969) anon69_correct))))))
(let ((anon707_Else_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 976) 971) anon708_Then_correct) (=> (= (ControlFlow 0 976) 973) anon708_Else_correct)))))
(let ((anon707_Then_correct  (=> (= null null) (and (=> (= (ControlFlow 0 974) (- 0 975)) (= (MapType0Select Heap@1 this@@66 Nodes) temp@0)) (=> (= (MapType0Select Heap@1 this@@66 Nodes) temp@0) (and (=> (= (ControlFlow 0 974) 971) anon708_Then_correct) (=> (= (ControlFlow 0 974) 973) anon708_Else_correct)))))))
(let ((anon64_correct  (=> (= Mask@14 (MapType1Store Mask@13 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@13 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null))) FullPerm)))) (and (=> (= (ControlFlow 0 978) (- 0 979)) (sorted Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null)) (=> (sorted Heap@1 (MapType0Select Heap@1 this@@66 Nodes) null) (=> (= Mask@15 Mask@14) (and (=> (= (ControlFlow 0 978) 974) anon707_Then_correct) (=> (= (ControlFlow 0 978) 976) anon707_Else_correct))))))))
(let ((anon706_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 982) 978)) anon64_correct)))
(let ((anon706_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 980) (- 0 981)) (<= FullPerm (U_2_real (MapType1Select Mask@13 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@13 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 980) 978) anon64_correct))))))
(let ((anon705_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 983) 980) anon706_Then_correct) (=> (= (ControlFlow 0 983) 982) anon706_Else_correct)))))
(let ((anon705_Else_correct  (=> (and (= null null) (= Mask@15 Mask@13)) (and (=> (= (ControlFlow 0 977) 974) anon707_Then_correct) (=> (= (ControlFlow 0 977) 976) anon707_Else_correct)))))
(let ((anon61_correct  (=> (= Mask@13 (MapType1Store Mask@12 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@12 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 984) 983) anon705_Then_correct) (=> (= (ControlFlow 0 984) 977) anon705_Else_correct)))))
(let ((anon704_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 987) 984)) anon61_correct)))
(let ((anon704_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 985) (- 0 986)) (<= FullPerm (U_2_real (MapType1Select Mask@12 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@12 this@@66 Nodes))) (=> (= (ControlFlow 0 985) 984) anon61_correct))))))
(let ((anon59_correct  (=> (and (state Heap@1 Mask@12) (state Heap@1 Mask@12)) (and (=> (= (ControlFlow 0 988) (- 0 989)) (HasDirectPerm Mask@12 temp@0 sibling)) (=> (HasDirectPerm Mask@12 temp@0 sibling) (=> (and (= nextTemp@0 (MapType0Select Heap@1 temp@0 sibling)) (state Heap@1 Mask@12)) (and (=> (= (ControlFlow 0 988) 985) anon704_Then_correct) (=> (= (ControlFlow 0 988) 987) anon704_Else_correct))))))))
(let ((anon703_Else_correct  (=> (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null) (=> (and (= Mask@12 Mask@11) (= (ControlFlow 0 992) 988)) anon59_correct))))
(let ((anon703_Then_correct  (=> (not (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null)) (=> (and (and (state Heap@1 Mask@11) (= (treeParent Heap@1 (MapType0Select Heap@1 this@@66 Nodes)) (segParent Heap@1 (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null))) (and (= Mask@12 Mask@11) (= (ControlFlow 0 991) 988))) anon59_correct))))
(let ((anon702_Then_correct  (=> (and (not (= (MapType0Select Heap@1 this@@66 Nodes) null)) (= Mask@9 (MapType1Store Mask@8 null (tree (MapType0Select Heap@1 this@@66 Nodes)) (real_2_U (+ (U_2_real (MapType1Select Mask@8 null (tree (MapType0Select Heap@1 this@@66 Nodes)))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg (MapType0Select Heap@1 this@@66 Nodes) null) (MapType0Select Heap@1 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null)) (tree (MapType0Select Heap@1 this@@66 Nodes)) (MapType0Select Heap@1 null (tree (MapType0Select Heap@1 this@@66 Nodes)))) (state Heap@1 Mask@9)) (and (not (= (MapType0Select Heap@1 this@@66 Nodes) null)) (= Mask@10 (MapType1Store Mask@9 (MapType0Select Heap@1 this@@66 Nodes) sibling (real_2_U (+ (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@1 this@@66 Nodes) sibling)) FullPerm)))))) (and (and (state Heap@1 Mask@10) (= Mask@11 (MapType1Store Mask@10 null (heapseg (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@10 null (heapseg (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg (MapType0Select Heap@1 this@@66 Nodes) null) (MapType0Select Heap@1 null (heapseg (MapType0Select Heap@1 this@@66 Nodes) null)) (heapseg (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null) (MapType0Select Heap@1 null (heapseg (MapType0Select Heap@1 (MapType0Select Heap@1 this@@66 Nodes) sibling) null))) (state Heap@1 Mask@11)))) (and (=> (= (ControlFlow 0 993) 991) anon703_Then_correct) (=> (= (ControlFlow 0 993) 992) anon703_Else_correct))))))
(let ((anon702_Else_correct  (=> (= (MapType0Select Heap@1 this@@66 Nodes) null) (=> (and (= Mask@12 Mask@8) (= (ControlFlow 0 990) 988)) anon59_correct))))
(let ((anon701_Else_correct  (=> (and (HasDirectPerm Mask@8 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)) (= Heap@1 ExhaleHeap@0)) (and (=> (= (ControlFlow 0 995) 993) anon702_Then_correct) (=> (= (ControlFlow 0 995) 990) anon702_Else_correct)))))
(let ((anon701_Then_correct  (=> (not (HasDirectPerm Mask@8 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null))) (=> (and (= Heap@0 (MapType0Store ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null) newVersion@0)) (= Heap@1 Heap@0)) (and (=> (= (ControlFlow 0 994) 993) anon702_Then_correct) (=> (= (ControlFlow 0 994) 990) anon702_Else_correct))))))
(let ((anon54_correct  (=> (= Mask@8 (MapType1Store Mask@7 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null))) FullPerm)))) (and (=> (= (ControlFlow 0 996) 994) anon701_Then_correct) (=> (= (ControlFlow 0 996) 995) anon701_Else_correct)))))
(let ((anon700_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 999) 996)) anon54_correct)))
(let ((anon700_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 997) (- 0 998)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 997) 996) anon54_correct))))))
(let ((anon52_correct  (=> (and (and (and (and (IdenticalOnKnownLocations Heap@@61 ExhaleHeap@0 Mask@5) (not (= this@@66 null))) (and (= Mask@6 (MapType1Store Mask@5 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@5 this@@66 Nodes)) FullPerm)))) (state ExhaleHeap@0 Mask@6))) (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)) (= Mask@7 (MapType1Store Mask@6 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select Mask@6 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null))) FullPerm))))) (and (state ExhaleHeap@0 Mask@7) (state ExhaleHeap@0 Mask@7)))) (and (and (and (presorted ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) null) (state ExhaleHeap@0 Mask@7)) (and (= (segSize ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (state ExhaleHeap@0 Mask@7))) (and (and (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state ExhaleHeap@0 Mask@7)) (and (state ExhaleHeap@0 Mask@7) (state ExhaleHeap@0 Mask@7))))) (and (=> (= (ControlFlow 0 1000) (- 0 1002)) (HasDirectPerm Mask@7 this@@66 Nodes)) (=> (HasDirectPerm Mask@7 this@@66 Nodes) (=> (and (= temp@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (state ExhaleHeap@0 Mask@7)) (and (=> (= (ControlFlow 0 1000) (- 0 1001)) (HasDirectPerm Mask@7 this@@66 Nodes)) (=> (HasDirectPerm Mask@7 this@@66 Nodes) (=> (and (|heapseg#trigger| ExhaleHeap@0 (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)) (= (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)) (CombineFrames (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling)) (CombineFrames (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame)))) (and (=> (= (ControlFlow 0 1000) 997) anon700_Then_correct) (=> (= (ControlFlow 0 1000) 999) anon700_Else_correct)))))))))))
(let ((anon699_Else_correct  (=> (and (= binHeap null) (= (ControlFlow 0 1005) 1000)) anon52_correct)))
(let ((anon699_Then_correct  (=> (not (= binHeap null)) (and (=> (= (ControlFlow 0 1003) (- 0 1004)) (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segParent Heap@@61 binHeap null))) (=> (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segParent Heap@@61 binHeap null)) (=> (= (ControlFlow 0 1003) 1000) anon52_correct))))))
(let ((anon50_correct  (=> (= Mask@5 (MapType1Store Mask@4 null (heapseg binHeap null) (real_2_U (- (U_2_real (MapType1Select Mask@4 null (heapseg binHeap null))) FullPerm)))) (and (=> (= (ControlFlow 0 1006) (- 0 1007)) (sorted Heap@@61 binHeap null)) (=> (sorted Heap@@61 binHeap null) (and (=> (= (ControlFlow 0 1006) 1003) anon699_Then_correct) (=> (= (ControlFlow 0 1006) 1005) anon699_Else_correct)))))))
(let ((anon698_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1010) 1006)) anon50_correct)))
(let ((anon698_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1008) (- 0 1009)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1008) 1006) anon50_correct))))))
(let ((anon48_correct  (=> (= Mask@4 (MapType1Store Mask@3 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@3 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))) (and (=> (= (ControlFlow 0 1011) (- 0 1013)) (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (and (=> (= (ControlFlow 0 1011) (- 0 1012)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1011) 1008) anon698_Then_correct) (=> (= (ControlFlow 0 1011) 1010) anon698_Else_correct)))))))))
(let ((anon697_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1016) 1011)) anon48_correct)))
(let ((anon697_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1014) (- 0 1015)) (<= FullPerm (U_2_real (MapType1Select Mask@3 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@3 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1014) 1011) anon48_correct))))))
(let ((anon46_correct  (=> (= Mask@3 (MapType1Store Mask@2 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@2 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 1017) 1014) anon697_Then_correct) (=> (= (ControlFlow 0 1017) 1016) anon697_Else_correct)))))
(let ((anon696_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1020) 1017)) anon46_correct)))
(let ((anon696_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1018) (- 0 1019)) (<= FullPerm (U_2_real (MapType1Select Mask@2 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 this@@66 Nodes))) (=> (= (ControlFlow 0 1018) 1017) anon46_correct))))))
(let ((anon683_Else_correct  (=> (U_2_bool (MapType0Select Heap@@61 prevTemp $allocated)) (=> (and (U_2_bool (MapType0Select Heap@@61 temp $allocated)) (U_2_bool (MapType0Select Heap@@61 nextTemp $allocated))) (and (=> (= (ControlFlow 0 1021) 1018) anon696_Then_correct) (=> (= (ControlFlow 0 1021) 1020) anon696_Else_correct))))))
(let ((anon18_correct  (=> (state Heap@@61 Mask@2) (and (=> (= (ControlFlow 0 1061) 1058) anon683_Then_correct) (=> (= (ControlFlow 0 1061) 1021) anon683_Else_correct)))))
(let ((anon681_Else_correct  (=> (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segParent Heap@@61 binHeap null)) (= (ControlFlow 0 1063) 1061)) anon18_correct)))
(let ((anon678_Then_correct  (=> (and (not (= binHeap null)) (state Heap@@61 Mask@2)) (and (=> (= (ControlFlow 0 1074) (- 0 1075)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1074) 1063) anon681_Else_correct) (=> (= (ControlFlow 0 1074) 1071) anon682_Then_correct)) (=> (= (ControlFlow 0 1074) 1073) anon682_Else_correct)) (=> (= (ControlFlow 0 1074) 1066) anon680_Then_correct)) (=> (= (ControlFlow 0 1074) 1068) anon680_Else_correct)))))))
(let ((anon678_Else_correct  (=> (and (= binHeap null) (= (ControlFlow 0 1062) 1061)) anon18_correct)))
(let ((anon676_Else_correct  (=> (and (sorted Heap@@61 binHeap null) (state Heap@@61 Mask@2)) (and (=> (= (ControlFlow 0 1076) 1074) anon678_Then_correct) (=> (= (ControlFlow 0 1076) 1062) anon678_Else_correct)))))
(let ((anon7_correct true))
(let ((anon677_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 8) 5)) anon7_correct)))
(let ((anon677_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 6) 5) anon7_correct))))))
(let ((anon674_Else_correct  (=> (and (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (state Heap@@61 Mask@1)) (and (=> (= (ControlFlow 0 1077) (- 0 1078)) (HasDirectPerm Mask@1 this@@66 Nodes)) (=> (HasDirectPerm Mask@1 this@@66 Nodes) (=> (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (and (and (state Heap@@61 Mask@1) (= Mask@2 (MapType1Store Mask@1 null (heapseg binHeap null) (real_2_U (+ (U_2_real (MapType1Select Mask@1 null (heapseg binHeap null))) FullPerm))))) (and (state Heap@@61 Mask@2) (state Heap@@61 Mask@2))) (and (and (=> (= (ControlFlow 0 1077) 1076) anon676_Else_correct) (=> (= (ControlFlow 0 1077) 6) anon677_Then_correct)) (=> (= (ControlFlow 0 1077) 8) anon677_Else_correct)))))))))
(let ((anon3_correct true))
(let ((anon675_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon675_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@1 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@1 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (state Heap@@61 ZeroMask) (=> (and (= AssumeFunctionsAbove (- 0 1)) (U_2_bool (MapType0Select Heap@@61 this@@66 $allocated))) (=> (and (and (U_2_bool (MapType0Select Heap@@61 binHeap $allocated)) (not (= this@@66 null))) (and (= Mask@0 (MapType1Store ZeroMask this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@66 Nodes)) FullPerm)))) (state Heap@@61 Mask@0))) (and (=> (= (ControlFlow 0 1079) (- 0 1081)) (HasDirectPerm Mask@0 this@@66 Nodes)) (=> (HasDirectPerm Mask@0 this@@66 Nodes) (=> (= Mask@1 (MapType1Store Mask@0 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select Mask@0 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))) (=> (and (state Heap@@61 Mask@1) (state Heap@@61 Mask@1)) (and (=> (= (ControlFlow 0 1079) (- 0 1080)) (HasDirectPerm Mask@1 this@@66 Nodes)) (=> (HasDirectPerm Mask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1079) 1077) anon674_Else_correct) (=> (= (ControlFlow 0 1079) 2) anon675_Then_correct)) (=> (= (ControlFlow 0 1079) 4) anon675_Else_correct)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 1082) 1079) anon0_correct)))
PreconditionGeneratedEntry_correct
))
(check-sat)
