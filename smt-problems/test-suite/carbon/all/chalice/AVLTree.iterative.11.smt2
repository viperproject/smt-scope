(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun root1 () T@U)
(declare-fun key () T@U)
(declare-fun left () T@U)
(declare-fun right () T@U)
(declare-fun parent () T@U)
(declare-fun leftDown () T@U)
(declare-fun root () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun valid1 (T@U) T@U)
(declare-fun PredicateType_valid1Type () T@T)
(declare-fun valid (T@U) T@U)
(declare-fun PredicateType_validType () T@T)
(declare-fun validRest (T@U) T@U)
(declare-fun PredicateType_validRestType () T@T)
(declare-fun rightValid (T@U) T@U)
(declare-fun PredicateType_rightValidType () T@T)
(declare-fun leftValid (T@U) T@U)
(declare-fun PredicateType_leftValidType () T@T)
(declare-fun leftOpen (T@U) T@U)
(declare-fun PredicateType_leftOpenType () T@T)
(declare-fun rightOpen (T@U) T@U)
(declare-fun PredicateType_rightOpenType () T@T)
(declare-fun udParentValid (T@U) T@U)
(declare-fun PredicateType_udParentValidType () T@T)
(declare-fun udValid (T@U) T@U)
(declare-fun PredicateType_udValidType () T@T)
(declare-fun |valid1#trigger| (T@U T@U) Bool)
(declare-fun |valid1#everUsed| (T@U) Bool)
(declare-fun |valid#trigger| (T@U T@U) Bool)
(declare-fun |valid#everUsed| (T@U) Bool)
(declare-fun |validRest#trigger| (T@U T@U) Bool)
(declare-fun |validRest#everUsed| (T@U) Bool)
(declare-fun |rightValid#trigger| (T@U T@U) Bool)
(declare-fun |rightValid#everUsed| (T@U) Bool)
(declare-fun |leftValid#trigger| (T@U T@U) Bool)
(declare-fun |leftValid#everUsed| (T@U) Bool)
(declare-fun |leftOpen#trigger| (T@U T@U) Bool)
(declare-fun |leftOpen#everUsed| (T@U) Bool)
(declare-fun |rightOpen#trigger| (T@U T@U) Bool)
(declare-fun |rightOpen#everUsed| (T@U) Bool)
(declare-fun |udParentValid#trigger| (T@U T@U) Bool)
(declare-fun |udParentValid#everUsed| (T@U) Bool)
(declare-fun |udValid#trigger| (T@U T@U) Bool)
(declare-fun |udValid#everUsed| (T@U) Bool)
(declare-fun |valid1#sm| (T@U) T@U)
(declare-fun |valid#sm| (T@U) T@U)
(declare-fun |validRest#sm| (T@U) T@U)
(declare-fun |rightValid#sm| (T@U) T@U)
(declare-fun |leftValid#sm| (T@U) T@U)
(declare-fun |leftOpen#sm| (T@U) T@U)
(declare-fun |rightOpen#sm| (T@U) T@U)
(declare-fun |udParentValid#sm| (T@U) T@U)
(declare-fun |udValid#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (Ctor RefType) 8)) (= (type root1) (FieldType NormalFieldType RefType))) (= (type key) (FieldType NormalFieldType intType))) (= (type left) (FieldType NormalFieldType RefType))) (= (type right) (FieldType NormalFieldType RefType))) (= (type parent) (FieldType NormalFieldType RefType))) (= (type leftDown) (FieldType NormalFieldType boolType))) (= (type root) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated root1 key left right parent leftDown root)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 11) (= (type null) RefType)) (forall ((arg0@@23 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@23))))
(= (type (PredicateMaskField arg0@@23)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@23))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@24 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@24))))
(= (type (WandMaskField arg0@@24)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@24))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_valid1Type) 12) (forall ((arg0@@25 T@U) ) (! (= (type (valid1 arg0@@25)) (FieldType PredicateType_valid1Type FrameTypeType))
 :qid |funType:valid1|
 :pattern ( (valid1 arg0@@25))
))))
(assert (forall ((this T@U) ) (!  (=> (= (type this) RefType) (IsPredicateField (valid1 this)))
 :qid |stdinbpl.212:15|
 :skolemid |23|
 :pattern ( (valid1 this))
)))
(assert  (and (= (Ctor PredicateType_validType) 13) (forall ((arg0@@26 T@U) ) (! (= (type (valid arg0@@26)) (FieldType PredicateType_validType FrameTypeType))
 :qid |funType:valid|
 :pattern ( (valid arg0@@26))
))))
(assert (forall ((this@@0 T@U) ) (!  (=> (= (type this@@0) RefType) (IsPredicateField (valid this@@0)))
 :qid |stdinbpl.336:15|
 :skolemid |29|
 :pattern ( (valid this@@0))
)))
(assert  (and (= (Ctor PredicateType_validRestType) 14) (forall ((arg0@@27 T@U) ) (! (= (type (validRest arg0@@27)) (FieldType PredicateType_validRestType FrameTypeType))
 :qid |funType:validRest|
 :pattern ( (validRest arg0@@27))
))))
(assert (forall ((this@@1 T@U) ) (!  (=> (= (type this@@1) RefType) (IsPredicateField (validRest this@@1)))
 :qid |stdinbpl.394:15|
 :skolemid |35|
 :pattern ( (validRest this@@1))
)))
(assert  (and (= (Ctor PredicateType_rightValidType) 15) (forall ((arg0@@28 T@U) ) (! (= (type (rightValid arg0@@28)) (FieldType PredicateType_rightValidType FrameTypeType))
 :qid |funType:rightValid|
 :pattern ( (rightValid arg0@@28))
))))
(assert (forall ((this@@2 T@U) ) (!  (=> (= (type this@@2) RefType) (IsPredicateField (rightValid this@@2)))
 :qid |stdinbpl.480:15|
 :skolemid |41|
 :pattern ( (rightValid this@@2))
)))
(assert  (and (= (Ctor PredicateType_leftValidType) 16) (forall ((arg0@@29 T@U) ) (! (= (type (leftValid arg0@@29)) (FieldType PredicateType_leftValidType FrameTypeType))
 :qid |funType:leftValid|
 :pattern ( (leftValid arg0@@29))
))))
(assert (forall ((this@@3 T@U) ) (!  (=> (= (type this@@3) RefType) (IsPredicateField (leftValid this@@3)))
 :qid |stdinbpl.612:15|
 :skolemid |47|
 :pattern ( (leftValid this@@3))
)))
(assert  (and (= (Ctor PredicateType_leftOpenType) 17) (forall ((arg0@@30 T@U) ) (! (= (type (leftOpen arg0@@30)) (FieldType PredicateType_leftOpenType FrameTypeType))
 :qid |funType:leftOpen|
 :pattern ( (leftOpen arg0@@30))
))))
(assert (forall ((this@@4 T@U) ) (!  (=> (= (type this@@4) RefType) (IsPredicateField (leftOpen this@@4)))
 :qid |stdinbpl.744:15|
 :skolemid |53|
 :pattern ( (leftOpen this@@4))
)))
(assert  (and (= (Ctor PredicateType_rightOpenType) 18) (forall ((arg0@@31 T@U) ) (! (= (type (rightOpen arg0@@31)) (FieldType PredicateType_rightOpenType FrameTypeType))
 :qid |funType:rightOpen|
 :pattern ( (rightOpen arg0@@31))
))))
(assert (forall ((this@@5 T@U) ) (!  (=> (= (type this@@5) RefType) (IsPredicateField (rightOpen this@@5)))
 :qid |stdinbpl.834:15|
 :skolemid |59|
 :pattern ( (rightOpen this@@5))
)))
(assert  (and (= (Ctor PredicateType_udParentValidType) 19) (forall ((arg0@@32 T@U) ) (! (= (type (udParentValid arg0@@32)) (FieldType PredicateType_udParentValidType FrameTypeType))
 :qid |funType:udParentValid|
 :pattern ( (udParentValid arg0@@32))
))))
(assert (forall ((this@@6 T@U) ) (!  (=> (= (type this@@6) RefType) (IsPredicateField (udParentValid this@@6)))
 :qid |stdinbpl.924:15|
 :skolemid |65|
 :pattern ( (udParentValid this@@6))
)))
(assert  (and (= (Ctor PredicateType_udValidType) 20) (forall ((arg0@@33 T@U) ) (! (= (type (udValid arg0@@33)) (FieldType PredicateType_udValidType FrameTypeType))
 :qid |funType:udValid|
 :pattern ( (udValid arg0@@33))
))))
(assert (forall ((this@@7 T@U) ) (!  (=> (= (type this@@7) RefType) (IsPredicateField (udValid this@@7)))
 :qid |stdinbpl.1122:15|
 :skolemid |71|
 :pattern ( (udValid this@@7))
)))
(assert (forall ((Heap@@2 T@U) (this@@8 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@8) RefType)) (|valid1#everUsed| (valid1 this@@8)))
 :qid |stdinbpl.231:15|
 :skolemid |27|
 :pattern ( (|valid1#trigger| Heap@@2 (valid1 this@@8)))
)))
(assert (forall ((Heap@@3 T@U) (this@@9 T@U) ) (!  (=> (and (= (type Heap@@3) (MapType0Type RefType)) (= (type this@@9) RefType)) (|valid#everUsed| (valid this@@9)))
 :qid |stdinbpl.355:15|
 :skolemid |33|
 :pattern ( (|valid#trigger| Heap@@3 (valid this@@9)))
)))
(assert (forall ((Heap@@4 T@U) (this@@10 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@10) RefType)) (|validRest#everUsed| (validRest this@@10)))
 :qid |stdinbpl.413:15|
 :skolemid |39|
 :pattern ( (|validRest#trigger| Heap@@4 (validRest this@@10)))
)))
(assert (forall ((Heap@@5 T@U) (this@@11 T@U) ) (!  (=> (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@11) RefType)) (|rightValid#everUsed| (rightValid this@@11)))
 :qid |stdinbpl.499:15|
 :skolemid |45|
 :pattern ( (|rightValid#trigger| Heap@@5 (rightValid this@@11)))
)))
(assert (forall ((Heap@@6 T@U) (this@@12 T@U) ) (!  (=> (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@12) RefType)) (|leftValid#everUsed| (leftValid this@@12)))
 :qid |stdinbpl.631:15|
 :skolemid |51|
 :pattern ( (|leftValid#trigger| Heap@@6 (leftValid this@@12)))
)))
(assert (forall ((Heap@@7 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@13) RefType)) (|leftOpen#everUsed| (leftOpen this@@13)))
 :qid |stdinbpl.763:15|
 :skolemid |57|
 :pattern ( (|leftOpen#trigger| Heap@@7 (leftOpen this@@13)))
)))
(assert (forall ((Heap@@8 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@14) RefType)) (|rightOpen#everUsed| (rightOpen this@@14)))
 :qid |stdinbpl.853:15|
 :skolemid |63|
 :pattern ( (|rightOpen#trigger| Heap@@8 (rightOpen this@@14)))
)))
(assert (forall ((Heap@@9 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@15) RefType)) (|udParentValid#everUsed| (udParentValid this@@15)))
 :qid |stdinbpl.943:15|
 :skolemid |69|
 :pattern ( (|udParentValid#trigger| Heap@@9 (udParentValid this@@15)))
)))
(assert (forall ((Heap@@10 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@16) RefType)) (|udValid#everUsed| (udValid this@@16)))
 :qid |stdinbpl.1141:15|
 :skolemid |75|
 :pattern ( (|udValid#trigger| Heap@@10 (udValid this@@16)))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@11 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((this@@17 T@U) (this2 T@U) ) (!  (=> (and (and (= (type this@@17) RefType) (= (type this2) RefType)) (= (valid1 this@@17) (valid1 this2))) (= this@@17 this2))
 :qid |stdinbpl.222:15|
 :skolemid |25|
 :pattern ( (valid1 this@@17) (valid1 this2))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|valid1#sm| arg0@@34)) (FieldType PredicateType_valid1Type (MapType1Type RefType boolType)))
 :qid |funType:valid1#sm|
 :pattern ( (|valid1#sm| arg0@@34))
)))
(assert (forall ((this@@18 T@U) (this2@@0 T@U) ) (!  (=> (and (and (= (type this@@18) RefType) (= (type this2@@0) RefType)) (= (|valid1#sm| this@@18) (|valid1#sm| this2@@0))) (= this@@18 this2@@0))
 :qid |stdinbpl.226:15|
 :skolemid |26|
 :pattern ( (|valid1#sm| this@@18) (|valid1#sm| this2@@0))
)))
(assert (forall ((this@@19 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@19) RefType) (= (type this2@@1) RefType)) (= (valid this@@19) (valid this2@@1))) (= this@@19 this2@@1))
 :qid |stdinbpl.346:15|
 :skolemid |31|
 :pattern ( (valid this@@19) (valid this2@@1))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|valid#sm| arg0@@35)) (FieldType PredicateType_validType (MapType1Type RefType boolType)))
 :qid |funType:valid#sm|
 :pattern ( (|valid#sm| arg0@@35))
)))
(assert (forall ((this@@20 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@20) RefType) (= (type this2@@2) RefType)) (= (|valid#sm| this@@20) (|valid#sm| this2@@2))) (= this@@20 this2@@2))
 :qid |stdinbpl.350:15|
 :skolemid |32|
 :pattern ( (|valid#sm| this@@20) (|valid#sm| this2@@2))
)))
(assert (forall ((this@@21 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@21) RefType) (= (type this2@@3) RefType)) (= (validRest this@@21) (validRest this2@@3))) (= this@@21 this2@@3))
 :qid |stdinbpl.404:15|
 :skolemid |37|
 :pattern ( (validRest this@@21) (validRest this2@@3))
)))
(assert (forall ((arg0@@36 T@U) ) (! (= (type (|validRest#sm| arg0@@36)) (FieldType PredicateType_validRestType (MapType1Type RefType boolType)))
 :qid |funType:validRest#sm|
 :pattern ( (|validRest#sm| arg0@@36))
)))
(assert (forall ((this@@22 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@22) RefType) (= (type this2@@4) RefType)) (= (|validRest#sm| this@@22) (|validRest#sm| this2@@4))) (= this@@22 this2@@4))
 :qid |stdinbpl.408:15|
 :skolemid |38|
 :pattern ( (|validRest#sm| this@@22) (|validRest#sm| this2@@4))
)))
(assert (forall ((this@@23 T@U) (this2@@5 T@U) ) (!  (=> (and (and (= (type this@@23) RefType) (= (type this2@@5) RefType)) (= (rightValid this@@23) (rightValid this2@@5))) (= this@@23 this2@@5))
 :qid |stdinbpl.490:15|
 :skolemid |43|
 :pattern ( (rightValid this@@23) (rightValid this2@@5))
)))
(assert (forall ((arg0@@37 T@U) ) (! (= (type (|rightValid#sm| arg0@@37)) (FieldType PredicateType_rightValidType (MapType1Type RefType boolType)))
 :qid |funType:rightValid#sm|
 :pattern ( (|rightValid#sm| arg0@@37))
)))
(assert (forall ((this@@24 T@U) (this2@@6 T@U) ) (!  (=> (and (and (= (type this@@24) RefType) (= (type this2@@6) RefType)) (= (|rightValid#sm| this@@24) (|rightValid#sm| this2@@6))) (= this@@24 this2@@6))
 :qid |stdinbpl.494:15|
 :skolemid |44|
 :pattern ( (|rightValid#sm| this@@24) (|rightValid#sm| this2@@6))
)))
(assert (forall ((this@@25 T@U) (this2@@7 T@U) ) (!  (=> (and (and (= (type this@@25) RefType) (= (type this2@@7) RefType)) (= (leftValid this@@25) (leftValid this2@@7))) (= this@@25 this2@@7))
 :qid |stdinbpl.622:15|
 :skolemid |49|
 :pattern ( (leftValid this@@25) (leftValid this2@@7))
)))
(assert (forall ((arg0@@38 T@U) ) (! (= (type (|leftValid#sm| arg0@@38)) (FieldType PredicateType_leftValidType (MapType1Type RefType boolType)))
 :qid |funType:leftValid#sm|
 :pattern ( (|leftValid#sm| arg0@@38))
)))
(assert (forall ((this@@26 T@U) (this2@@8 T@U) ) (!  (=> (and (and (= (type this@@26) RefType) (= (type this2@@8) RefType)) (= (|leftValid#sm| this@@26) (|leftValid#sm| this2@@8))) (= this@@26 this2@@8))
 :qid |stdinbpl.626:15|
 :skolemid |50|
 :pattern ( (|leftValid#sm| this@@26) (|leftValid#sm| this2@@8))
)))
(assert (forall ((this@@27 T@U) (this2@@9 T@U) ) (!  (=> (and (and (= (type this@@27) RefType) (= (type this2@@9) RefType)) (= (leftOpen this@@27) (leftOpen this2@@9))) (= this@@27 this2@@9))
 :qid |stdinbpl.754:15|
 :skolemid |55|
 :pattern ( (leftOpen this@@27) (leftOpen this2@@9))
)))
(assert (forall ((arg0@@39 T@U) ) (! (= (type (|leftOpen#sm| arg0@@39)) (FieldType PredicateType_leftOpenType (MapType1Type RefType boolType)))
 :qid |funType:leftOpen#sm|
 :pattern ( (|leftOpen#sm| arg0@@39))
)))
(assert (forall ((this@@28 T@U) (this2@@10 T@U) ) (!  (=> (and (and (= (type this@@28) RefType) (= (type this2@@10) RefType)) (= (|leftOpen#sm| this@@28) (|leftOpen#sm| this2@@10))) (= this@@28 this2@@10))
 :qid |stdinbpl.758:15|
 :skolemid |56|
 :pattern ( (|leftOpen#sm| this@@28) (|leftOpen#sm| this2@@10))
)))
(assert (forall ((this@@29 T@U) (this2@@11 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@11) RefType)) (= (rightOpen this@@29) (rightOpen this2@@11))) (= this@@29 this2@@11))
 :qid |stdinbpl.844:15|
 :skolemid |61|
 :pattern ( (rightOpen this@@29) (rightOpen this2@@11))
)))
(assert (forall ((arg0@@40 T@U) ) (! (= (type (|rightOpen#sm| arg0@@40)) (FieldType PredicateType_rightOpenType (MapType1Type RefType boolType)))
 :qid |funType:rightOpen#sm|
 :pattern ( (|rightOpen#sm| arg0@@40))
)))
(assert (forall ((this@@30 T@U) (this2@@12 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@12) RefType)) (= (|rightOpen#sm| this@@30) (|rightOpen#sm| this2@@12))) (= this@@30 this2@@12))
 :qid |stdinbpl.848:15|
 :skolemid |62|
 :pattern ( (|rightOpen#sm| this@@30) (|rightOpen#sm| this2@@12))
)))
(assert (forall ((this@@31 T@U) (this2@@13 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@13) RefType)) (= (udParentValid this@@31) (udParentValid this2@@13))) (= this@@31 this2@@13))
 :qid |stdinbpl.934:15|
 :skolemid |67|
 :pattern ( (udParentValid this@@31) (udParentValid this2@@13))
)))
(assert (forall ((arg0@@41 T@U) ) (! (= (type (|udParentValid#sm| arg0@@41)) (FieldType PredicateType_udParentValidType (MapType1Type RefType boolType)))
 :qid |funType:udParentValid#sm|
 :pattern ( (|udParentValid#sm| arg0@@41))
)))
(assert (forall ((this@@32 T@U) (this2@@14 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@14) RefType)) (= (|udParentValid#sm| this@@32) (|udParentValid#sm| this2@@14))) (= this@@32 this2@@14))
 :qid |stdinbpl.938:15|
 :skolemid |68|
 :pattern ( (|udParentValid#sm| this@@32) (|udParentValid#sm| this2@@14))
)))
(assert (forall ((this@@33 T@U) (this2@@15 T@U) ) (!  (=> (and (and (= (type this@@33) RefType) (= (type this2@@15) RefType)) (= (udValid this@@33) (udValid this2@@15))) (= this@@33 this2@@15))
 :qid |stdinbpl.1132:15|
 :skolemid |73|
 :pattern ( (udValid this@@33) (udValid this2@@15))
)))
(assert (forall ((arg0@@42 T@U) ) (! (= (type (|udValid#sm| arg0@@42)) (FieldType PredicateType_udValidType (MapType1Type RefType boolType)))
 :qid |funType:udValid#sm|
 :pattern ( (|udValid#sm| arg0@@42))
)))
(assert (forall ((this@@34 T@U) (this2@@16 T@U) ) (!  (=> (and (and (= (type this@@34) RefType) (= (type this2@@16) RefType)) (= (|udValid#sm| this@@34) (|udValid#sm| this2@@16))) (= this@@34 this2@@16))
 :qid |stdinbpl.1136:15|
 :skolemid |74|
 :pattern ( (|udValid#sm| this@@34) (|udValid#sm| this2@@16))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@12 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField root1)))
(assert  (not (IsWandField root1)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField left)))
(assert  (not (IsWandField left)))
(assert  (not (IsPredicateField right)))
(assert  (not (IsWandField right)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField leftDown)))
(assert  (not (IsWandField leftDown)))
(assert  (not (IsPredicateField root)))
(assert  (not (IsWandField root)))
(assert (forall ((Heap@@13 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@13) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@13 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@43 Real) (arg1@@9 T@U) ) (! (= (type (ConditionalFrame arg0@@43 arg1@@9)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@43 arg1@@9))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@14 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@14) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@14 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@14 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@14 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@14 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@15 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@15) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@15 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@15 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@15 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@15 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@35 T@U) ) (!  (=> (= (type this@@35) RefType) (= (getPredWandId (valid1 this@@35)) 0))
 :qid |stdinbpl.216:15|
 :skolemid |24|
 :pattern ( (valid1 this@@35))
)))
(assert (forall ((this@@36 T@U) ) (!  (=> (= (type this@@36) RefType) (= (getPredWandId (valid this@@36)) 1))
 :qid |stdinbpl.340:15|
 :skolemid |30|
 :pattern ( (valid this@@36))
)))
(assert (forall ((this@@37 T@U) ) (!  (=> (= (type this@@37) RefType) (= (getPredWandId (validRest this@@37)) 2))
 :qid |stdinbpl.398:15|
 :skolemid |36|
 :pattern ( (validRest this@@37))
)))
(assert (forall ((this@@38 T@U) ) (!  (=> (= (type this@@38) RefType) (= (getPredWandId (rightValid this@@38)) 3))
 :qid |stdinbpl.484:15|
 :skolemid |42|
 :pattern ( (rightValid this@@38))
)))
(assert (forall ((this@@39 T@U) ) (!  (=> (= (type this@@39) RefType) (= (getPredWandId (leftValid this@@39)) 4))
 :qid |stdinbpl.616:15|
 :skolemid |48|
 :pattern ( (leftValid this@@39))
)))
(assert (forall ((this@@40 T@U) ) (!  (=> (= (type this@@40) RefType) (= (getPredWandId (leftOpen this@@40)) 5))
 :qid |stdinbpl.748:15|
 :skolemid |54|
 :pattern ( (leftOpen this@@40))
)))
(assert (forall ((this@@41 T@U) ) (!  (=> (= (type this@@41) RefType) (= (getPredWandId (rightOpen this@@41)) 6))
 :qid |stdinbpl.838:15|
 :skolemid |60|
 :pattern ( (rightOpen this@@41))
)))
(assert (forall ((this@@42 T@U) ) (!  (=> (= (type this@@42) RefType) (= (getPredWandId (udParentValid this@@42)) 7))
 :qid |stdinbpl.928:15|
 :skolemid |66|
 :pattern ( (udParentValid this@@42))
)))
(assert (forall ((this@@43 T@U) ) (!  (=> (= (type this@@43) RefType) (= (getPredWandId (udValid this@@43)) 8))
 :qid |stdinbpl.1126:15|
 :skolemid |72|
 :pattern ( (udValid this@@43))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@16 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@16) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@16 o $allocated))) (U_2_bool (MapType0Select Heap@@16 (MapType0Select Heap@@16 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@16 o f))
)))
(assert (forall ((this@@44 T@U) ) (!  (=> (= (type this@@44) RefType) (= (PredicateMaskField (valid1 this@@44)) (|valid1#sm| this@@44)))
 :qid |stdinbpl.208:15|
 :skolemid |22|
 :pattern ( (PredicateMaskField (valid1 this@@44)))
)))
(assert (forall ((this@@45 T@U) ) (!  (=> (= (type this@@45) RefType) (= (PredicateMaskField (valid this@@45)) (|valid#sm| this@@45)))
 :qid |stdinbpl.332:15|
 :skolemid |28|
 :pattern ( (PredicateMaskField (valid this@@45)))
)))
(assert (forall ((this@@46 T@U) ) (!  (=> (= (type this@@46) RefType) (= (PredicateMaskField (validRest this@@46)) (|validRest#sm| this@@46)))
 :qid |stdinbpl.390:15|
 :skolemid |34|
 :pattern ( (PredicateMaskField (validRest this@@46)))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (PredicateMaskField (rightValid this@@47)) (|rightValid#sm| this@@47)))
 :qid |stdinbpl.476:15|
 :skolemid |40|
 :pattern ( (PredicateMaskField (rightValid this@@47)))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (PredicateMaskField (leftValid this@@48)) (|leftValid#sm| this@@48)))
 :qid |stdinbpl.608:15|
 :skolemid |46|
 :pattern ( (PredicateMaskField (leftValid this@@48)))
)))
(assert (forall ((this@@49 T@U) ) (!  (=> (= (type this@@49) RefType) (= (PredicateMaskField (leftOpen this@@49)) (|leftOpen#sm| this@@49)))
 :qid |stdinbpl.740:15|
 :skolemid |52|
 :pattern ( (PredicateMaskField (leftOpen this@@49)))
)))
(assert (forall ((this@@50 T@U) ) (!  (=> (= (type this@@50) RefType) (= (PredicateMaskField (rightOpen this@@50)) (|rightOpen#sm| this@@50)))
 :qid |stdinbpl.830:15|
 :skolemid |58|
 :pattern ( (PredicateMaskField (rightOpen this@@50)))
)))
(assert (forall ((this@@51 T@U) ) (!  (=> (= (type this@@51) RefType) (= (PredicateMaskField (udParentValid this@@51)) (|udParentValid#sm| this@@51)))
 :qid |stdinbpl.920:15|
 :skolemid |64|
 :pattern ( (PredicateMaskField (udParentValid this@@51)))
)))
(assert (forall ((this@@52 T@U) ) (!  (=> (= (type this@@52) RefType) (= (PredicateMaskField (udValid this@@52)) (|udValid#sm| this@@52)))
 :qid |stdinbpl.1118:15|
 :skolemid |70|
 :pattern ( (PredicateMaskField (udValid this@@52)))
)))
(assert (forall ((Heap@@17 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@17) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@17 (MapType0Store Heap@@17 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@17 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun UnfoldingMask@202 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun n@1 () T@U)
(declare-fun UnfoldingMask@203 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun UnfoldingMask@204 () T@U)
(declare-fun UnfoldingMask@205 () T@U)
(declare-fun this@@53 () T@U)
(declare-fun newPMask@89 () T@U)
(declare-fun Heap@390 () T@U)
(declare-fun newPMask@90 () T@U)
(declare-fun Heap@391 () T@U)
(declare-fun newPMask@91 () T@U)
(declare-fun Heap@392 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun UnfoldingMask@206 () T@U)
(declare-fun UnfoldingMask@207 () T@U)
(declare-fun UnfoldingMask@208 () T@U)
(declare-fun UnfoldingMask@209 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun perm@9 () Real)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun perm@10 () Real)
(declare-fun Mask@30 () T@U)
(declare-fun UnfoldingMask@198 () T@U)
(declare-fun Mask@296 () T@U)
(declare-fun n@9 () T@U)
(declare-fun UnfoldingMask@199 () T@U)
(declare-fun Heap@386 () T@U)
(declare-fun UnfoldingMask@200 () T@U)
(declare-fun UnfoldingMask@201 () T@U)
(declare-fun Mask@301 () T@U)
(declare-fun Mask@300 () T@U)
(declare-fun Mask@299 () T@U)
(declare-fun perm@168 () Real)
(declare-fun Mask@298 () T@U)
(declare-fun Mask@297 () T@U)
(declare-fun perm@167 () Real)
(declare-fun UnfoldingMask@194 () T@U)
(declare-fun UnfoldingMask@195 () T@U)
(declare-fun Heap@383 () T@U)
(declare-fun UnfoldingMask@196 () T@U)
(declare-fun UnfoldingMask@197 () T@U)
(declare-fun newPMask@83 () T@U)
(declare-fun Heap@384 () T@U)
(declare-fun newPMask@84 () T@U)
(declare-fun Heap@385 () T@U)
(declare-fun newPMask@85 () T@U)
(declare-fun newPMask@80 () T@U)
(declare-fun Heap@379 () T@U)
(declare-fun Heap@380 () T@U)
(declare-fun newPMask@81 () T@U)
(declare-fun Heap@381 () T@U)
(declare-fun newPMask@82 () T@U)
(declare-fun Heap@382 () T@U)
(declare-fun Mask@295 () T@U)
(declare-fun Heap@376 () T@U)
(declare-fun Heap@377 () T@U)
(declare-fun Heap@378 () T@U)
(declare-fun freshVersion@18 () T@U)
(declare-fun Mask@294 () T@U)
(declare-fun Mask@293 () T@U)
(declare-fun Mask@292 () T@U)
(declare-fun Mask@291 () T@U)
(declare-fun Heap@372 () T@U)
(declare-fun Heap@371 () T@U)
(declare-fun Heap@373 () T@U)
(declare-fun Heap@374 () T@U)
(declare-fun Heap@375 () T@U)
(declare-fun Heap@253 () T@U)
(declare-fun Heap@369 () T@U)
(declare-fun Heap@370 () T@U)
(declare-fun freshVersion@17 () T@U)
(declare-fun Mask@290 () T@U)
(declare-fun Mask@289 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun Mask@288 () T@U)
(declare-fun perm@166 () Real)
(declare-fun Mask@287 () T@U)
(declare-fun perm@165 () Real)
(declare-fun Mask@286 () T@U)
(declare-fun perm@164 () Real)
(declare-fun Mask@178 () T@U)
(declare-fun k () Int)
(declare-fun Heap@368 () T@U)
(declare-fun Mask@285 () T@U)
(declare-fun n@8 () T@U)
(declare-fun Heap@367 () T@U)
(declare-fun Mask@284 () T@U)
(declare-fun n@7 () T@U)
(declare-fun newPMask@77 () T@U)
(declare-fun Heap@363 () T@U)
(declare-fun Heap@364 () T@U)
(declare-fun newPMask@78 () T@U)
(declare-fun Heap@365 () T@U)
(declare-fun newPMask@79 () T@U)
(declare-fun Heap@366 () T@U)
(declare-fun Mask@283 () T@U)
(declare-fun Heap@360 () T@U)
(declare-fun Heap@361 () T@U)
(declare-fun Heap@362 () T@U)
(declare-fun freshVersion@16 () T@U)
(declare-fun Mask@282 () T@U)
(declare-fun Mask@281 () T@U)
(declare-fun Mask@280 () T@U)
(declare-fun Mask@279 () T@U)
(declare-fun Heap@356 () T@U)
(declare-fun Heap@355 () T@U)
(declare-fun Heap@357 () T@U)
(declare-fun Heap@358 () T@U)
(declare-fun Heap@359 () T@U)
(declare-fun Heap@353 () T@U)
(declare-fun Heap@354 () T@U)
(declare-fun freshVersion@15 () T@U)
(declare-fun Mask@278 () T@U)
(declare-fun Mask@277 () T@U)
(declare-fun Mask@276 () T@U)
(declare-fun perm@163 () Real)
(declare-fun Mask@275 () T@U)
(declare-fun perm@162 () Real)
(declare-fun Mask@274 () T@U)
(declare-fun perm@161 () Real)
(declare-fun Heap@352 () T@U)
(declare-fun Mask@273 () T@U)
(declare-fun n@6 () T@U)
(declare-fun Heap@350 () T@U)
(declare-fun Heap@351 () T@U)
(declare-fun Heap@348 () T@U)
(declare-fun Heap@349 () T@U)
(declare-fun Heap@346 () T@U)
(declare-fun Heap@347 () T@U)
(declare-fun Heap@344 () T@U)
(declare-fun Heap@345 () T@U)
(declare-fun Heap@342 () T@U)
(declare-fun newPMask@76 () T@U)
(declare-fun Heap@343 () T@U)
(declare-fun Heap@341 () T@U)
(declare-fun Heap@340 () T@U)
(declare-fun Heap@337 () T@U)
(declare-fun Heap@338 () T@U)
(declare-fun Heap@339 () T@U)
(declare-fun freshVersion@14 () T@U)
(declare-fun Mask@272 () T@U)
(declare-fun Mask@271 () T@U)
(declare-fun Mask@270 () T@U)
(declare-fun perm@160 () Real)
(declare-fun Mask@269 () T@U)
(declare-fun Mask@268 () T@U)
(declare-fun perm@159 () Real)
(declare-fun Mask@267 () T@U)
(declare-fun Mask@266 () T@U)
(declare-fun perm@158 () Real)
(declare-fun Mask@265 () T@U)
(declare-fun Mask@264 () T@U)
(declare-fun perm@157 () Real)
(declare-fun Mask@263 () T@U)
(declare-fun Mask@262 () T@U)
(declare-fun Mask@261 () T@U)
(declare-fun perm@156 () Real)
(declare-fun Mask@260 () T@U)
(declare-fun perm@155 () Real)
(declare-fun newPMask@75 () T@U)
(declare-fun Heap@336 () T@U)
(declare-fun Heap@334 () T@U)
(declare-fun newPMask@74 () T@U)
(declare-fun Heap@335 () T@U)
(declare-fun Heap@332 () T@U)
(declare-fun newPMask@73 () T@U)
(declare-fun Heap@333 () T@U)
(declare-fun Heap@330 () T@U)
(declare-fun newPMask@72 () T@U)
(declare-fun Heap@331 () T@U)
(declare-fun Heap@328 () T@U)
(declare-fun newPMask@71 () T@U)
(declare-fun Heap@329 () T@U)
(declare-fun Heap@324 () T@U)
(declare-fun Heap@323 () T@U)
(declare-fun Heap@325 () T@U)
(declare-fun Heap@326 () T@U)
(declare-fun Heap@327 () T@U)
(declare-fun Heap@320 () T@U)
(declare-fun Heap@321 () T@U)
(declare-fun Heap@322 () T@U)
(declare-fun freshVersion@13 () T@U)
(declare-fun Mask@259 () T@U)
(declare-fun Mask@258 () T@U)
(declare-fun Mask@257 () T@U)
(declare-fun Mask@256 () T@U)
(declare-fun Mask@255 () T@U)
(declare-fun Mask@254 () T@U)
(declare-fun Mask@253 () T@U)
(declare-fun Mask@252 () T@U)
(declare-fun Mask@251 () T@U)
(declare-fun Mask@250 () T@U)
(declare-fun Mask@249 () T@U)
(declare-fun perm@154 () Real)
(declare-fun Mask@248 () T@U)
(declare-fun perm@153 () Real)
(declare-fun Mask@247 () T@U)
(declare-fun perm@152 () Real)
(declare-fun Mask@246 () T@U)
(declare-fun perm@151 () Real)
(declare-fun Mask@245 () T@U)
(declare-fun Heap@318 () T@U)
(declare-fun Heap@319 () T@U)
(declare-fun Heap@317 () T@U)
(declare-fun Heap@316 () T@U)
(declare-fun Heap@313 () T@U)
(declare-fun Heap@314 () T@U)
(declare-fun Heap@315 () T@U)
(declare-fun freshVersion@12 () T@U)
(declare-fun Mask@244 () T@U)
(declare-fun Mask@243 () T@U)
(declare-fun Mask@242 () T@U)
(declare-fun perm@150 () Real)
(declare-fun Mask@241 () T@U)
(declare-fun perm@149 () Real)
(declare-fun Mask@240 () T@U)
(declare-fun perm@148 () Real)
(declare-fun Heap@312 () T@U)
(declare-fun Mask@238 () T@U)
(declare-fun perm@147 () Real)
(declare-fun Mask@239 () T@U)
(declare-fun Mask@236 () T@U)
(declare-fun Mask@237 () T@U)
(declare-fun Mask@234 () T@U)
(declare-fun Mask@235 () T@U)
(declare-fun perm@145 () Real)
(declare-fun Mask@233 () T@U)
(declare-fun Mask@232 () T@U)
(declare-fun perm@146 () Real)
(declare-fun Heap@311 () T@U)
(declare-fun newVersion@9 () T@U)
(declare-fun Heap@310 () T@U)
(declare-fun Mask@231 () T@U)
(declare-fun n@5 () T@U)
(declare-fun newPMask@68 () T@U)
(declare-fun Heap@306 () T@U)
(declare-fun Heap@307 () T@U)
(declare-fun newPMask@69 () T@U)
(declare-fun Heap@308 () T@U)
(declare-fun newPMask@70 () T@U)
(declare-fun Heap@309 () T@U)
(declare-fun Mask@230 () T@U)
(declare-fun Heap@303 () T@U)
(declare-fun Heap@304 () T@U)
(declare-fun Heap@305 () T@U)
(declare-fun freshVersion@11 () T@U)
(declare-fun Mask@229 () T@U)
(declare-fun Mask@228 () T@U)
(declare-fun Mask@227 () T@U)
(declare-fun Mask@226 () T@U)
(declare-fun Heap@299 () T@U)
(declare-fun Heap@298 () T@U)
(declare-fun Heap@300 () T@U)
(declare-fun Heap@301 () T@U)
(declare-fun Heap@302 () T@U)
(declare-fun Heap@296 () T@U)
(declare-fun Heap@297 () T@U)
(declare-fun freshVersion@10 () T@U)
(declare-fun Mask@225 () T@U)
(declare-fun Mask@224 () T@U)
(declare-fun Mask@223 () T@U)
(declare-fun perm@144 () Real)
(declare-fun Mask@222 () T@U)
(declare-fun perm@143 () Real)
(declare-fun Mask@221 () T@U)
(declare-fun perm@142 () Real)
(declare-fun Heap@295 () T@U)
(declare-fun Mask@220 () T@U)
(declare-fun n@4 () T@U)
(declare-fun Heap@293 () T@U)
(declare-fun Heap@294 () T@U)
(declare-fun Heap@291 () T@U)
(declare-fun Heap@292 () T@U)
(declare-fun Heap@289 () T@U)
(declare-fun Heap@290 () T@U)
(declare-fun Heap@287 () T@U)
(declare-fun Heap@288 () T@U)
(declare-fun Heap@285 () T@U)
(declare-fun newPMask@67 () T@U)
(declare-fun Heap@286 () T@U)
(declare-fun Heap@284 () T@U)
(declare-fun Heap@283 () T@U)
(declare-fun Heap@280 () T@U)
(declare-fun Heap@281 () T@U)
(declare-fun Heap@282 () T@U)
(declare-fun freshVersion@9 () T@U)
(declare-fun Mask@219 () T@U)
(declare-fun Mask@218 () T@U)
(declare-fun Mask@217 () T@U)
(declare-fun perm@141 () Real)
(declare-fun Mask@216 () T@U)
(declare-fun Mask@215 () T@U)
(declare-fun perm@140 () Real)
(declare-fun Mask@214 () T@U)
(declare-fun Mask@213 () T@U)
(declare-fun perm@139 () Real)
(declare-fun Mask@212 () T@U)
(declare-fun Mask@211 () T@U)
(declare-fun perm@138 () Real)
(declare-fun Mask@210 () T@U)
(declare-fun Mask@209 () T@U)
(declare-fun Mask@208 () T@U)
(declare-fun perm@137 () Real)
(declare-fun Mask@207 () T@U)
(declare-fun perm@136 () Real)
(declare-fun newPMask@66 () T@U)
(declare-fun Heap@279 () T@U)
(declare-fun Heap@277 () T@U)
(declare-fun newPMask@65 () T@U)
(declare-fun Heap@278 () T@U)
(declare-fun Heap@275 () T@U)
(declare-fun newPMask@64 () T@U)
(declare-fun Heap@276 () T@U)
(declare-fun Heap@273 () T@U)
(declare-fun newPMask@63 () T@U)
(declare-fun Heap@274 () T@U)
(declare-fun Heap@271 () T@U)
(declare-fun newPMask@62 () T@U)
(declare-fun Heap@272 () T@U)
(declare-fun Heap@267 () T@U)
(declare-fun Heap@266 () T@U)
(declare-fun Heap@268 () T@U)
(declare-fun Heap@269 () T@U)
(declare-fun Heap@270 () T@U)
(declare-fun Heap@263 () T@U)
(declare-fun Heap@264 () T@U)
(declare-fun Heap@265 () T@U)
(declare-fun freshVersion@8 () T@U)
(declare-fun Mask@206 () T@U)
(declare-fun Mask@205 () T@U)
(declare-fun Mask@204 () T@U)
(declare-fun Mask@203 () T@U)
(declare-fun Mask@202 () T@U)
(declare-fun Mask@201 () T@U)
(declare-fun Mask@200 () T@U)
(declare-fun Mask@199 () T@U)
(declare-fun Mask@198 () T@U)
(declare-fun Mask@197 () T@U)
(declare-fun Mask@196 () T@U)
(declare-fun perm@135 () Real)
(declare-fun Mask@195 () T@U)
(declare-fun perm@134 () Real)
(declare-fun Mask@194 () T@U)
(declare-fun perm@133 () Real)
(declare-fun Mask@193 () T@U)
(declare-fun perm@132 () Real)
(declare-fun Mask@192 () T@U)
(declare-fun Heap@261 () T@U)
(declare-fun Heap@262 () T@U)
(declare-fun Heap@260 () T@U)
(declare-fun Heap@259 () T@U)
(declare-fun Heap@256 () T@U)
(declare-fun Heap@257 () T@U)
(declare-fun Heap@258 () T@U)
(declare-fun freshVersion@7 () T@U)
(declare-fun Mask@191 () T@U)
(declare-fun Mask@190 () T@U)
(declare-fun Mask@189 () T@U)
(declare-fun perm@131 () Real)
(declare-fun Mask@188 () T@U)
(declare-fun perm@130 () Real)
(declare-fun Mask@187 () T@U)
(declare-fun perm@129 () Real)
(declare-fun Heap@255 () T@U)
(declare-fun Mask@185 () T@U)
(declare-fun perm@128 () Real)
(declare-fun Mask@186 () T@U)
(declare-fun Mask@183 () T@U)
(declare-fun Mask@184 () T@U)
(declare-fun Mask@181 () T@U)
(declare-fun Mask@182 () T@U)
(declare-fun perm@126 () Real)
(declare-fun Mask@180 () T@U)
(declare-fun Mask@179 () T@U)
(declare-fun perm@127 () Real)
(declare-fun Heap@254 () T@U)
(declare-fun newVersion@8 () T@U)
(declare-fun Mask@174 () T@U)
(declare-fun Mask@173 () T@U)
(declare-fun perm@123 () Real)
(declare-fun Mask@175 () T@U)
(declare-fun perm@124 () Real)
(declare-fun Mask@176 () T@U)
(declare-fun perm@125 () Real)
(declare-fun Mask@177 () T@U)
(declare-fun Heap@251 () T@U)
(declare-fun Heap@252 () T@U)
(declare-fun newVersion@7 () T@U)
(declare-fun Mask@172 () T@U)
(declare-fun Mask@170 () T@U)
(declare-fun Mask@169 () T@U)
(declare-fun Mask@171 () T@U)
(declare-fun Heap@249 () T@U)
(declare-fun Heap@250 () T@U)
(declare-fun newVersion@6 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun UnfoldingMask@190 () T@U)
(declare-fun UnfoldingMask@191 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun UnfoldingMask@192 () T@U)
(declare-fun UnfoldingMask@193 () T@U)
(declare-fun newPMask@59 () T@U)
(declare-fun Heap@247 () T@U)
(declare-fun newPMask@60 () T@U)
(declare-fun Heap@248 () T@U)
(declare-fun newPMask@61 () T@U)
(declare-fun end@0 () Bool)
(declare-fun Mask@32 () T@U)
(declare-fun perm@11 () Real)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun perm@12 () Real)
(declare-fun Mask@35 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@245 () T@U)
(declare-fun UnfoldingMask@189 () T@U)
(declare-fun n@2 () T@U)
(declare-fun Heap@246 () T@U)
(declare-fun UnfoldingMask@187 () T@U)
(declare-fun perm@122 () Real)
(declare-fun UnfoldingMask@188 () T@U)
(declare-fun UnfoldingMask@185 () T@U)
(declare-fun perm@121 () Real)
(declare-fun UnfoldingMask@186 () T@U)
(declare-fun UnfoldingMask@183 () T@U)
(declare-fun perm@120 () Real)
(declare-fun UnfoldingMask@184 () T@U)
(declare-fun UnfoldingMask@181 () T@U)
(declare-fun perm@119 () Real)
(declare-fun UnfoldingMask@182 () T@U)
(declare-fun UnfoldingMask@179 () T@U)
(declare-fun UnfoldingMask@180 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun UnfoldingMask@177 () T@U)
(declare-fun perm@117 () Real)
(declare-fun UnfoldingMask@178 () T@U)
(declare-fun perm@118 () Real)
(declare-fun Heap@243 () T@U)
(declare-fun Heap@244 () T@U)
(declare-fun Heap@241 () T@U)
(declare-fun Heap@242 () T@U)
(declare-fun Heap@239 () T@U)
(declare-fun Heap@240 () T@U)
(declare-fun Heap@237 () T@U)
(declare-fun Heap@238 () T@U)
(declare-fun Heap@235 () T@U)
(declare-fun newPMask@58 () T@U)
(declare-fun Heap@236 () T@U)
(declare-fun Heap@233 () T@U)
(declare-fun UnfoldingMask@176 () T@U)
(declare-fun Heap@234 () T@U)
(declare-fun UnfoldingMask@174 () T@U)
(declare-fun perm@116 () Real)
(declare-fun UnfoldingMask@175 () T@U)
(declare-fun UnfoldingMask@172 () T@U)
(declare-fun perm@115 () Real)
(declare-fun UnfoldingMask@173 () T@U)
(declare-fun UnfoldingMask@170 () T@U)
(declare-fun perm@114 () Real)
(declare-fun UnfoldingMask@171 () T@U)
(declare-fun UnfoldingMask@168 () T@U)
(declare-fun perm@113 () Real)
(declare-fun UnfoldingMask@169 () T@U)
(declare-fun UnfoldingMask@166 () T@U)
(declare-fun UnfoldingMask@167 () T@U)
(declare-fun UnfoldingMask@164 () T@U)
(declare-fun perm@111 () Real)
(declare-fun UnfoldingMask@165 () T@U)
(declare-fun perm@112 () Real)
(declare-fun end@1 () Bool)
(declare-fun UnfoldingMask@156 () T@U)
(declare-fun UnfoldingMask@157 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun UnfoldingMask@158 () T@U)
(declare-fun UnfoldingMask@159 () T@U)
(declare-fun newPMask@55 () T@U)
(declare-fun Heap@231 () T@U)
(declare-fun newPMask@56 () T@U)
(declare-fun Heap@232 () T@U)
(declare-fun newPMask@57 () T@U)
(declare-fun UnfoldingMask@160 () T@U)
(declare-fun UnfoldingMask@161 () T@U)
(declare-fun UnfoldingMask@162 () T@U)
(declare-fun UnfoldingMask@163 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun perm@29 () Real)
(declare-fun Mask@48 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun perm@30 () Real)
(declare-fun Heap@228 () T@U)
(declare-fun n@3 () T@U)
(declare-fun Heap@230 () T@U)
(declare-fun Heap@229 () T@U)
(declare-fun Heap@226 () T@U)
(declare-fun Heap@227 () T@U)
(declare-fun Heap@224 () T@U)
(declare-fun Heap@225 () T@U)
(declare-fun Heap@222 () T@U)
(declare-fun Heap@223 () T@U)
(declare-fun Heap@220 () T@U)
(declare-fun newPMask@54 () T@U)
(declare-fun Heap@221 () T@U)
(declare-fun newPMask@51 () T@U)
(declare-fun Heap@215 () T@U)
(declare-fun Heap@216 () T@U)
(declare-fun newPMask@52 () T@U)
(declare-fun Heap@217 () T@U)
(declare-fun newPMask@53 () T@U)
(declare-fun Heap@218 () T@U)
(declare-fun Mask@168 () T@U)
(declare-fun Heap@219 () T@U)
(declare-fun UnfoldingMask@155 () T@U)
(declare-fun UnfoldingMask@153 () T@U)
(declare-fun perm@110 () Real)
(declare-fun UnfoldingMask@154 () T@U)
(declare-fun UnfoldingMask@151 () T@U)
(declare-fun perm@109 () Real)
(declare-fun UnfoldingMask@152 () T@U)
(declare-fun UnfoldingMask@149 () T@U)
(declare-fun perm@108 () Real)
(declare-fun UnfoldingMask@150 () T@U)
(declare-fun UnfoldingMask@147 () T@U)
(declare-fun perm@107 () Real)
(declare-fun UnfoldingMask@148 () T@U)
(declare-fun UnfoldingMask@145 () T@U)
(declare-fun UnfoldingMask@146 () T@U)
(declare-fun UnfoldingMask@143 () T@U)
(declare-fun Mask@163 () T@U)
(declare-fun perm@105 () Real)
(declare-fun UnfoldingMask@144 () T@U)
(declare-fun perm@106 () Real)
(declare-fun end@2 () Bool)
(declare-fun UnfoldingMask@139 () T@U)
(declare-fun UnfoldingMask@140 () T@U)
(declare-fun UnfoldingMask@141 () T@U)
(declare-fun UnfoldingMask@142 () T@U)
(declare-fun Mask@167 () T@U)
(declare-fun perm@104 () Real)
(declare-fun Mask@166 () T@U)
(declare-fun Mask@165 () T@U)
(declare-fun Mask@164 () T@U)
(declare-fun perm@103 () Real)
(declare-fun Heap@214 () T@U)
(declare-fun Heap@212 () T@U)
(declare-fun Heap@213 () T@U)
(declare-fun Heap@210 () T@U)
(declare-fun Heap@211 () T@U)
(declare-fun Heap@208 () T@U)
(declare-fun Heap@209 () T@U)
(declare-fun Heap@206 () T@U)
(declare-fun Heap@207 () T@U)
(declare-fun Heap@204 () T@U)
(declare-fun newPMask@50 () T@U)
(declare-fun Heap@205 () T@U)
(declare-fun Heap@202 () T@U)
(declare-fun UnfoldingMask@138 () T@U)
(declare-fun Heap@203 () T@U)
(declare-fun UnfoldingMask@136 () T@U)
(declare-fun perm@102 () Real)
(declare-fun UnfoldingMask@137 () T@U)
(declare-fun UnfoldingMask@134 () T@U)
(declare-fun perm@101 () Real)
(declare-fun UnfoldingMask@135 () T@U)
(declare-fun UnfoldingMask@132 () T@U)
(declare-fun perm@100 () Real)
(declare-fun UnfoldingMask@133 () T@U)
(declare-fun UnfoldingMask@130 () T@U)
(declare-fun perm@99 () Real)
(declare-fun UnfoldingMask@131 () T@U)
(declare-fun UnfoldingMask@128 () T@U)
(declare-fun UnfoldingMask@129 () T@U)
(declare-fun UnfoldingMask@126 () T@U)
(declare-fun perm@97 () Real)
(declare-fun UnfoldingMask@127 () T@U)
(declare-fun perm@98 () Real)
(declare-fun UnfoldingMask@122 () T@U)
(declare-fun UnfoldingMask@123 () T@U)
(declare-fun Heap@199 () T@U)
(declare-fun UnfoldingMask@124 () T@U)
(declare-fun UnfoldingMask@125 () T@U)
(declare-fun newPMask@47 () T@U)
(declare-fun Heap@200 () T@U)
(declare-fun newPMask@48 () T@U)
(declare-fun Heap@201 () T@U)
(declare-fun newPMask@49 () T@U)
(declare-fun Heap@198 () T@U)
(declare-fun Mask@162 () T@U)
(declare-fun Heap@196 () T@U)
(declare-fun Heap@197 () T@U)
(declare-fun Heap@194 () T@U)
(declare-fun Heap@195 () T@U)
(declare-fun Heap@192 () T@U)
(declare-fun Heap@193 () T@U)
(declare-fun Heap@190 () T@U)
(declare-fun Heap@191 () T@U)
(declare-fun Heap@188 () T@U)
(declare-fun newPMask@46 () T@U)
(declare-fun Heap@189 () T@U)
(declare-fun Heap@187 () T@U)
(declare-fun Heap@186 () T@U)
(declare-fun Heap@140 () T@U)
(declare-fun Heap@184 () T@U)
(declare-fun Heap@185 () T@U)
(declare-fun freshVersion@6 () T@U)
(declare-fun Mask@161 () T@U)
(declare-fun Mask@160 () T@U)
(declare-fun Mask@159 () T@U)
(declare-fun perm@96 () Real)
(declare-fun Mask@158 () T@U)
(declare-fun Mask@157 () T@U)
(declare-fun perm@95 () Real)
(declare-fun Mask@156 () T@U)
(declare-fun Mask@155 () T@U)
(declare-fun perm@94 () Real)
(declare-fun Mask@154 () T@U)
(declare-fun Mask@153 () T@U)
(declare-fun perm@93 () Real)
(declare-fun Mask@152 () T@U)
(declare-fun Mask@151 () T@U)
(declare-fun Mask@150 () T@U)
(declare-fun perm@92 () Real)
(declare-fun Mask@95 () T@U)
(declare-fun perm@72 () Real)
(declare-fun r_1@1 () T@U)
(declare-fun newPMask@43 () T@U)
(declare-fun Heap@180 () T@U)
(declare-fun Heap@181 () T@U)
(declare-fun newPMask@44 () T@U)
(declare-fun Heap@182 () T@U)
(declare-fun newPMask@45 () T@U)
(declare-fun Heap@183 () T@U)
(declare-fun Mask@149 () T@U)
(declare-fun Heap@177 () T@U)
(declare-fun Heap@178 () T@U)
(declare-fun Heap@179 () T@U)
(declare-fun freshVersion@5 () T@U)
(declare-fun Mask@148 () T@U)
(declare-fun Mask@147 () T@U)
(declare-fun Mask@146 () T@U)
(declare-fun Mask@145 () T@U)
(declare-fun Heap@173 () T@U)
(declare-fun Heap@172 () T@U)
(declare-fun Heap@174 () T@U)
(declare-fun Heap@175 () T@U)
(declare-fun Heap@176 () T@U)
(declare-fun Heap@169 () T@U)
(declare-fun Heap@170 () T@U)
(declare-fun Heap@171 () T@U)
(declare-fun freshVersion@4 () T@U)
(declare-fun Mask@144 () T@U)
(declare-fun Mask@143 () T@U)
(declare-fun Mask@142 () T@U)
(declare-fun perm@91 () Real)
(declare-fun Mask@141 () T@U)
(declare-fun perm@90 () Real)
(declare-fun Mask@140 () T@U)
(declare-fun perm@89 () Real)
(declare-fun Mask@139 () T@U)
(declare-fun Heap@168 () T@U)
(declare-fun Mask@138 () T@U)
(declare-fun Heap@166 () T@U)
(declare-fun Heap@167 () T@U)
(declare-fun Heap@164 () T@U)
(declare-fun Heap@165 () T@U)
(declare-fun Heap@162 () T@U)
(declare-fun newPMask@42 () T@U)
(declare-fun Heap@163 () T@U)
(declare-fun Heap@161 () T@U)
(declare-fun Heap@160 () T@U)
(declare-fun Heap@157 () T@U)
(declare-fun Heap@158 () T@U)
(declare-fun Heap@159 () T@U)
(declare-fun freshVersion@3 () T@U)
(declare-fun Mask@137 () T@U)
(declare-fun Mask@136 () T@U)
(declare-fun Mask@135 () T@U)
(declare-fun perm@88 () Real)
(declare-fun Mask@134 () T@U)
(declare-fun Mask@133 () T@U)
(declare-fun Mask@132 () T@U)
(declare-fun Mask@131 () T@U)
(declare-fun Mask@130 () T@U)
(declare-fun perm@87 () Real)
(declare-fun Mask@129 () T@U)
(declare-fun perm@86 () Real)
(declare-fun Mask@127 () T@U)
(declare-fun perm@85 () Real)
(declare-fun Mask@128 () T@U)
(declare-fun perm@83 () Real)
(declare-fun Mask@126 () T@U)
(declare-fun Mask@125 () T@U)
(declare-fun perm@84 () Real)
(declare-fun Heap@142 () T@U)
(declare-fun Heap@156 () T@U)
(declare-fun newVersion@5 () T@U)
(declare-fun Mask@110 () T@U)
(declare-fun Heap@155 () T@U)
(declare-fun Mask@124 () T@U)
(declare-fun Heap@153 () T@U)
(declare-fun Heap@154 () T@U)
(declare-fun Heap@151 () T@U)
(declare-fun Heap@152 () T@U)
(declare-fun Heap@149 () T@U)
(declare-fun newPMask@41 () T@U)
(declare-fun Heap@150 () T@U)
(declare-fun Heap@148 () T@U)
(declare-fun Heap@147 () T@U)
(declare-fun Heap@144 () T@U)
(declare-fun Heap@145 () T@U)
(declare-fun Heap@146 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun Mask@123 () T@U)
(declare-fun Mask@122 () T@U)
(declare-fun Mask@121 () T@U)
(declare-fun perm@82 () Real)
(declare-fun Mask@120 () T@U)
(declare-fun Mask@119 () T@U)
(declare-fun Mask@118 () T@U)
(declare-fun Mask@117 () T@U)
(declare-fun Mask@116 () T@U)
(declare-fun perm@81 () Real)
(declare-fun Mask@115 () T@U)
(declare-fun perm@80 () Real)
(declare-fun Mask@113 () T@U)
(declare-fun perm@79 () Real)
(declare-fun Mask@114 () T@U)
(declare-fun perm@77 () Real)
(declare-fun Mask@112 () T@U)
(declare-fun Mask@111 () T@U)
(declare-fun perm@78 () Real)
(declare-fun Heap@143 () T@U)
(declare-fun newVersion@4 () T@U)
(declare-fun Mask@109 () T@U)
(declare-fun Mask@107 () T@U)
(declare-fun Mask@108 () T@U)
(declare-fun Mask@105 () T@U)
(declare-fun Mask@106 () T@U)
(declare-fun Mask@103 () T@U)
(declare-fun Mask@104 () T@U)
(declare-fun Mask@101 () T@U)
(declare-fun Mask@102 () T@U)
(declare-fun Mask@97 () T@U)
(declare-fun Mask@96 () T@U)
(declare-fun perm@73 () Real)
(declare-fun Mask@98 () T@U)
(declare-fun perm@74 () Real)
(declare-fun Mask@99 () T@U)
(declare-fun perm@75 () Real)
(declare-fun Mask@100 () T@U)
(declare-fun perm@76 () Real)
(declare-fun Heap@141 () T@U)
(declare-fun newVersion@3 () T@U)
(declare-fun Mask@93 () T@U)
(declare-fun perm@71 () Real)
(declare-fun Mask@94 () T@U)
(declare-fun Mask@91 () T@U)
(declare-fun perm@70 () Real)
(declare-fun Mask@92 () T@U)
(declare-fun Mask@89 () T@U)
(declare-fun perm@69 () Real)
(declare-fun Mask@90 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun perm@68 () Real)
(declare-fun Mask@88 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun Mask@86 () T@U)
(declare-fun perm@66 () Real)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@83 () T@U)
(declare-fun perm@67 () Real)
(declare-fun Heap@138 () T@U)
(declare-fun Heap@139 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun Heap@137 () T@U)
(declare-fun Heap@135 () T@U)
(declare-fun Heap@136 () T@U)
(declare-fun Heap@133 () T@U)
(declare-fun Heap@134 () T@U)
(declare-fun Heap@131 () T@U)
(declare-fun Heap@132 () T@U)
(declare-fun Heap@129 () T@U)
(declare-fun Heap@130 () T@U)
(declare-fun Heap@127 () T@U)
(declare-fun newPMask@40 () T@U)
(declare-fun Heap@128 () T@U)
(declare-fun Heap@125 () T@U)
(declare-fun UnfoldingMask@121 () T@U)
(declare-fun Heap@126 () T@U)
(declare-fun UnfoldingMask@119 () T@U)
(declare-fun perm@65 () Real)
(declare-fun UnfoldingMask@120 () T@U)
(declare-fun UnfoldingMask@117 () T@U)
(declare-fun perm@64 () Real)
(declare-fun UnfoldingMask@118 () T@U)
(declare-fun UnfoldingMask@115 () T@U)
(declare-fun perm@63 () Real)
(declare-fun UnfoldingMask@116 () T@U)
(declare-fun UnfoldingMask@113 () T@U)
(declare-fun perm@62 () Real)
(declare-fun UnfoldingMask@114 () T@U)
(declare-fun UnfoldingMask@111 () T@U)
(declare-fun UnfoldingMask@112 () T@U)
(declare-fun UnfoldingMask@109 () T@U)
(declare-fun perm@60 () Real)
(declare-fun UnfoldingMask@110 () T@U)
(declare-fun perm@61 () Real)
(declare-fun UnfoldingMask@105 () T@U)
(declare-fun UnfoldingMask@106 () T@U)
(declare-fun Heap@122 () T@U)
(declare-fun UnfoldingMask@107 () T@U)
(declare-fun UnfoldingMask@108 () T@U)
(declare-fun newPMask@37 () T@U)
(declare-fun Heap@123 () T@U)
(declare-fun newPMask@38 () T@U)
(declare-fun Heap@124 () T@U)
(declare-fun newPMask@39 () T@U)
(declare-fun Heap@121 () T@U)
(declare-fun Heap@119 () T@U)
(declare-fun Heap@120 () T@U)
(declare-fun Heap@117 () T@U)
(declare-fun Heap@118 () T@U)
(declare-fun Heap@115 () T@U)
(declare-fun Heap@116 () T@U)
(declare-fun Heap@113 () T@U)
(declare-fun Heap@114 () T@U)
(declare-fun Heap@111 () T@U)
(declare-fun newPMask@36 () T@U)
(declare-fun Heap@112 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun UnfoldingMask@104 () T@U)
(declare-fun Heap@110 () T@U)
(declare-fun UnfoldingMask@102 () T@U)
(declare-fun perm@59 () Real)
(declare-fun UnfoldingMask@103 () T@U)
(declare-fun UnfoldingMask@100 () T@U)
(declare-fun perm@58 () Real)
(declare-fun UnfoldingMask@101 () T@U)
(declare-fun UnfoldingMask@98 () T@U)
(declare-fun perm@57 () Real)
(declare-fun UnfoldingMask@99 () T@U)
(declare-fun UnfoldingMask@96 () T@U)
(declare-fun perm@56 () Real)
(declare-fun UnfoldingMask@97 () T@U)
(declare-fun UnfoldingMask@94 () T@U)
(declare-fun UnfoldingMask@95 () T@U)
(declare-fun UnfoldingMask@92 () T@U)
(declare-fun perm@54 () Real)
(declare-fun UnfoldingMask@93 () T@U)
(declare-fun perm@55 () Real)
(declare-fun Mask@52 () T@U)
(declare-fun perm@31 () Real)
(declare-fun Mask@53 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun perm@32 () Real)
(declare-fun UnfoldingMask@54 () T@U)
(declare-fun UnfoldingMask@55 () T@U)
(declare-fun UnfoldingMask@56 () T@U)
(declare-fun UnfoldingMask@57 () T@U)
(declare-fun newPMask@24 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun newPMask@25 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun newPMask@26 () T@U)
(declare-fun Mask@310 () T@U)
(declare-fun Heap@403 () T@U)
(declare-fun Heap@402 () T@U)
(declare-fun Mask@309 () T@U)
(declare-fun Heap@400 () T@U)
(declare-fun Heap@401 () T@U)
(declare-fun Heap@398 () T@U)
(declare-fun Heap@399 () T@U)
(declare-fun Heap@396 () T@U)
(declare-fun newPMask@92 () T@U)
(declare-fun Heap@397 () T@U)
(declare-fun Heap@395 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Heap@393 () T@U)
(declare-fun Heap@394 () T@U)
(declare-fun freshVersion@19 () T@U)
(declare-fun Mask@308 () T@U)
(declare-fun Mask@307 () T@U)
(declare-fun Mask@306 () T@U)
(declare-fun perm@169 () Real)
(declare-fun Mask@305 () T@U)
(declare-fun Mask@304 () T@U)
(declare-fun Mask@303 () T@U)
(declare-fun Mask@302 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@109 () T@U)
(declare-fun Mask@82 () T@U)
(declare-fun Heap@107 () T@U)
(declare-fun Heap@108 () T@U)
(declare-fun Heap@105 () T@U)
(declare-fun Heap@106 () T@U)
(declare-fun Heap@103 () T@U)
(declare-fun newPMask@35 () T@U)
(declare-fun Heap@104 () T@U)
(declare-fun Heap@102 () T@U)
(declare-fun Heap@99 () T@U)
(declare-fun Heap@100 () T@U)
(declare-fun Heap@101 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun perm@53 () Real)
(declare-fun Mask@78 () T@U)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun perm@52 () Real)
(declare-fun Mask@73 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun perm@51 () Real)
(declare-fun Mask@71 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun perm@50 () Real)
(declare-fun Mask@69 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun perm@49 () Real)
(declare-fun Mask@67 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun perm@47 () Real)
(declare-fun Mask@63 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun perm@48 () Real)
(declare-fun Heap@97 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun newPMask@34 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun UnfoldingMask@91 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun UnfoldingMask@89 () T@U)
(declare-fun perm@46 () Real)
(declare-fun UnfoldingMask@90 () T@U)
(declare-fun UnfoldingMask@87 () T@U)
(declare-fun perm@45 () Real)
(declare-fun UnfoldingMask@88 () T@U)
(declare-fun UnfoldingMask@85 () T@U)
(declare-fun perm@44 () Real)
(declare-fun UnfoldingMask@86 () T@U)
(declare-fun UnfoldingMask@83 () T@U)
(declare-fun perm@43 () Real)
(declare-fun UnfoldingMask@84 () T@U)
(declare-fun UnfoldingMask@81 () T@U)
(declare-fun UnfoldingMask@82 () T@U)
(declare-fun UnfoldingMask@79 () T@U)
(declare-fun perm@41 () Real)
(declare-fun UnfoldingMask@80 () T@U)
(declare-fun perm@42 () Real)
(declare-fun UnfoldingMask@75 () T@U)
(declare-fun UnfoldingMask@76 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun UnfoldingMask@77 () T@U)
(declare-fun UnfoldingMask@78 () T@U)
(declare-fun newPMask@31 () T@U)
(declare-fun Heap@82 () T@U)
(declare-fun newPMask@32 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun newPMask@33 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun Heap@72 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun newPMask@30 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun UnfoldingMask@74 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun UnfoldingMask@72 () T@U)
(declare-fun perm@40 () Real)
(declare-fun UnfoldingMask@73 () T@U)
(declare-fun UnfoldingMask@70 () T@U)
(declare-fun perm@39 () Real)
(declare-fun UnfoldingMask@71 () T@U)
(declare-fun UnfoldingMask@68 () T@U)
(declare-fun perm@38 () Real)
(declare-fun UnfoldingMask@69 () T@U)
(declare-fun UnfoldingMask@66 () T@U)
(declare-fun perm@37 () Real)
(declare-fun UnfoldingMask@67 () T@U)
(declare-fun UnfoldingMask@64 () T@U)
(declare-fun UnfoldingMask@65 () T@U)
(declare-fun UnfoldingMask@62 () T@U)
(declare-fun perm@35 () Real)
(declare-fun UnfoldingMask@63 () T@U)
(declare-fun perm@36 () Real)
(declare-fun Mask@57 () T@U)
(declare-fun perm@33 () Real)
(declare-fun Mask@58 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Mask@60 () T@U)
(declare-fun perm@34 () Real)
(declare-fun UnfoldingMask@58 () T@U)
(declare-fun UnfoldingMask@59 () T@U)
(declare-fun UnfoldingMask@60 () T@U)
(declare-fun UnfoldingMask@61 () T@U)
(declare-fun newPMask@27 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun newPMask@28 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun newPMask@29 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun r_1@0 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun newPMask@23 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun newPMask@20 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun newPMask@21 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun newPMask@22 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun UnfoldingMask@37 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun UnfoldingMask@38 () T@U)
(declare-fun UnfoldingMask@39 () T@U)
(declare-fun UnfoldingMask@40 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun perm@22 () Real)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun perm@21 () Real)
(declare-fun Heap@34 () T@U)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun perm@13 () Real)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun perm@14 () Real)
(declare-fun Mask@40 () T@U)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun n@0 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun q_1@0 () T@U)
(declare-fun p_1@0 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun perm@8 () Real)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun perm@7 () Real)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun perm@6 () Real)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun perm@5 () Real)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun perm@4 () Real)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun perm@3 () Real)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun perm@2 () Real)
(declare-fun perm@1 () Real)
(declare-fun Mask@6 () T@U)
(declare-fun perm@0 () Real)
(declare-fun Mask@7 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@@18 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun n () T@U)
(declare-fun p_1 () T@U)
(declare-fun q_1 () T@U)
(declare-fun r_1 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@310) (MapType1Type RefType realType)) (= (type this@@53) RefType)) (= (type Heap@403) (MapType0Type RefType))) (= (type Heap@109) (MapType0Type RefType))) (= (type Mask@82) (MapType1Type RefType realType))) (= (type Heap@107) (MapType0Type RefType))) (= (type Heap@108) (MapType0Type RefType))) (= (type Heap@105) (MapType0Type RefType))) (= (type Heap@106) (MapType0Type RefType))) (= (type Heap@103) (MapType0Type RefType))) (= (type newPMask@35) (MapType1Type RefType boolType))) (= (type Heap@104) (MapType0Type RefType))) (= (type Heap@102) (MapType0Type RefType))) (= (type Heap@100) (MapType0Type RefType))) (= (type Heap@99) (MapType0Type RefType))) (= (type Heap@101) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@81) (MapType1Type RefType realType))) (forall ((arg0@@44 T@U) (arg1@@10 T@U) ) (! (= (type (CombineFrames arg0@@44 arg1@@10)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@44 arg1@@10))
))) (forall ((arg0@@45 T@U) ) (! (= (type (FrameFragment arg0@@45)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@45))
))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type n@2) RefType)) (= (type Mask@73) (MapType1Type RefType realType))) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Heap@98) (MapType0Type RefType))) (= (type Heap@97) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Heap@84) (MapType0Type RefType))) (= (type Heap@96) (MapType0Type RefType))) (= (type Heap@94) (MapType0Type RefType))) (= (type Heap@95) (MapType0Type RefType))) (= (type Heap@92) (MapType0Type RefType))) (= (type Heap@93) (MapType0Type RefType))) (= (type Heap@90) (MapType0Type RefType))) (= (type Heap@91) (MapType0Type RefType))) (= (type Heap@88) (MapType0Type RefType))) (= (type Heap@89) (MapType0Type RefType))) (= (type Heap@86) (MapType0Type RefType))) (= (type newPMask@34) (MapType1Type RefType boolType))) (= (type Heap@87) (MapType0Type RefType))) (= (type UnfoldingMask@91) (MapType1Type RefType realType))) (= (type Heap@85) (MapType0Type RefType))) (= (type UnfoldingMask@90) (MapType1Type RefType realType))) (= (type UnfoldingMask@89) (MapType1Type RefType realType))) (= (type UnfoldingMask@88) (MapType1Type RefType realType))) (= (type UnfoldingMask@87) (MapType1Type RefType realType))) (= (type UnfoldingMask@86) (MapType1Type RefType realType))) (= (type UnfoldingMask@85) (MapType1Type RefType realType))) (= (type UnfoldingMask@84) (MapType1Type RefType realType))) (= (type UnfoldingMask@83) (MapType1Type RefType realType))) (= (type UnfoldingMask@82) (MapType1Type RefType realType))) (= (type UnfoldingMask@81) (MapType1Type RefType realType))) (= (type UnfoldingMask@79) (MapType1Type RefType realType))) (= (type UnfoldingMask@80) (MapType1Type RefType realType))) (= (type UnfoldingMask@75) (MapType1Type RefType realType))) (= (type UnfoldingMask@76) (MapType1Type RefType realType))) (= (type Heap@81) (MapType0Type RefType))) (= (type UnfoldingMask@77) (MapType1Type RefType realType))) (= (type UnfoldingMask@78) (MapType1Type RefType realType))) (= (type newPMask@31) (MapType1Type RefType boolType))) (= (type Heap@82) (MapType0Type RefType))) (= (type newPMask@32) (MapType1Type RefType boolType))) (= (type Heap@83) (MapType0Type RefType))) (= (type newPMask@33) (MapType1Type RefType boolType))) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@80) (MapType0Type RefType))) (= (type Heap@78) (MapType0Type RefType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@76) (MapType0Type RefType))) (= (type Heap@77) (MapType0Type RefType))) (= (type Heap@74) (MapType0Type RefType))) (= (type Heap@75) (MapType0Type RefType))) (= (type Heap@72) (MapType0Type RefType))) (= (type Heap@73) (MapType0Type RefType))) (= (type Heap@70) (MapType0Type RefType))) (= (type newPMask@30) (MapType1Type RefType boolType))) (= (type Heap@71) (MapType0Type RefType))) (= (type UnfoldingMask@74) (MapType1Type RefType realType))) (= (type Heap@69) (MapType0Type RefType))) (= (type UnfoldingMask@73) (MapType1Type RefType realType))) (= (type UnfoldingMask@72) (MapType1Type RefType realType))) (= (type UnfoldingMask@71) (MapType1Type RefType realType))) (= (type UnfoldingMask@70) (MapType1Type RefType realType))) (= (type UnfoldingMask@69) (MapType1Type RefType realType))) (= (type UnfoldingMask@68) (MapType1Type RefType realType))) (= (type UnfoldingMask@67) (MapType1Type RefType realType))) (= (type UnfoldingMask@66) (MapType1Type RefType realType))) (= (type UnfoldingMask@65) (MapType1Type RefType realType))) (= (type UnfoldingMask@64) (MapType1Type RefType realType))) (= (type UnfoldingMask@62) (MapType1Type RefType realType))) (= (type UnfoldingMask@63) (MapType1Type RefType realType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type UnfoldingMask@58) (MapType1Type RefType realType))) (= (type UnfoldingMask@59) (MapType1Type RefType realType))) (= (type UnfoldingMask@60) (MapType1Type RefType realType))) (= (type UnfoldingMask@61) (MapType1Type RefType realType))) (= (type newPMask@27) (MapType1Type RefType boolType))) (= (type Heap@66) (MapType0Type RefType))) (= (type newPMask@28) (MapType1Type RefType boolType))) (= (type Heap@67) (MapType0Type RefType))) (= (type newPMask@29) (MapType1Type RefType boolType))) (= (type Heap@228) (MapType0Type RefType))) (= (type n@3) RefType)) (= (type Heap@229) (MapType0Type RefType))) (= (type Heap@230) (MapType0Type RefType))) (= (type Heap@226) (MapType0Type RefType))) (= (type Heap@227) (MapType0Type RefType))) (= (type Heap@224) (MapType0Type RefType))) (= (type Heap@225) (MapType0Type RefType))) (= (type Heap@222) (MapType0Type RefType))) (= (type Heap@223) (MapType0Type RefType))) (= (type Heap@220) (MapType0Type RefType))) (= (type newPMask@54) (MapType1Type RefType boolType))) (= (type Heap@221) (MapType0Type RefType))) (= (type newPMask@51) (MapType1Type RefType boolType))) (= (type Heap@215) (MapType0Type RefType))) (= (type Heap@216) (MapType0Type RefType))) (= (type newPMask@52) (MapType1Type RefType boolType))) (= (type Heap@217) (MapType0Type RefType))) (= (type newPMask@53) (MapType1Type RefType boolType))) (= (type Heap@218) (MapType0Type RefType))) (= (type Mask@168) (MapType1Type RefType realType))) (= (type Heap@219) (MapType0Type RefType))) (= (type UnfoldingMask@155) (MapType1Type RefType realType))) (= (type UnfoldingMask@154) (MapType1Type RefType realType))) (= (type UnfoldingMask@153) (MapType1Type RefType realType))) (= (type UnfoldingMask@152) (MapType1Type RefType realType))) (= (type UnfoldingMask@151) (MapType1Type RefType realType))) (= (type UnfoldingMask@150) (MapType1Type RefType realType))) (= (type UnfoldingMask@149) (MapType1Type RefType realType))) (= (type UnfoldingMask@148) (MapType1Type RefType realType))) (= (type UnfoldingMask@147) (MapType1Type RefType realType))) (= (type UnfoldingMask@146) (MapType1Type RefType realType))) (= (type UnfoldingMask@145) (MapType1Type RefType realType))) (= (type UnfoldingMask@143) (MapType1Type RefType realType))) (= (type Mask@163) (MapType1Type RefType realType))) (= (type UnfoldingMask@144) (MapType1Type RefType realType))) (= (type UnfoldingMask@139) (MapType1Type RefType realType))) (= (type UnfoldingMask@140) (MapType1Type RefType realType))) (= (type UnfoldingMask@141) (MapType1Type RefType realType))) (= (type UnfoldingMask@142) (MapType1Type RefType realType))) (= (type Mask@167) (MapType1Type RefType realType))) (= (type Mask@166) (MapType1Type RefType realType))) (= (type Mask@165) (MapType1Type RefType realType))) (= (type Mask@164) (MapType1Type RefType realType))) (= (type Heap@202) (MapType0Type RefType))) (= (type Heap@214) (MapType0Type RefType))) (= (type Heap@212) (MapType0Type RefType))) (= (type Heap@213) (MapType0Type RefType))) (= (type Heap@210) (MapType0Type RefType))) (= (type Heap@211) (MapType0Type RefType))) (= (type Heap@208) (MapType0Type RefType))) (= (type Heap@209) (MapType0Type RefType))) (= (type Heap@206) (MapType0Type RefType))) (= (type Heap@207) (MapType0Type RefType))) (= (type Heap@204) (MapType0Type RefType))) (= (type newPMask@50) (MapType1Type RefType boolType))) (= (type Heap@205) (MapType0Type RefType))) (= (type UnfoldingMask@138) (MapType1Type RefType realType))) (= (type Heap@203) (MapType0Type RefType))) (= (type UnfoldingMask@137) (MapType1Type RefType realType))) (= (type UnfoldingMask@136) (MapType1Type RefType realType))) (= (type UnfoldingMask@135) (MapType1Type RefType realType))) (= (type UnfoldingMask@134) (MapType1Type RefType realType))) (= (type UnfoldingMask@133) (MapType1Type RefType realType))) (= (type UnfoldingMask@132) (MapType1Type RefType realType))) (= (type UnfoldingMask@131) (MapType1Type RefType realType))) (= (type UnfoldingMask@130) (MapType1Type RefType realType))) (= (type UnfoldingMask@129) (MapType1Type RefType realType))) (= (type UnfoldingMask@128) (MapType1Type RefType realType))) (= (type UnfoldingMask@126) (MapType1Type RefType realType))) (= (type UnfoldingMask@127) (MapType1Type RefType realType))) (= (type UnfoldingMask@122) (MapType1Type RefType realType))) (= (type UnfoldingMask@123) (MapType1Type RefType realType))) (= (type Heap@199) (MapType0Type RefType))) (= (type UnfoldingMask@124) (MapType1Type RefType realType))) (= (type UnfoldingMask@125) (MapType1Type RefType realType))) (= (type newPMask@47) (MapType1Type RefType boolType))) (= (type Heap@200) (MapType0Type RefType))) (= (type newPMask@48) (MapType1Type RefType boolType))) (= (type Heap@201) (MapType0Type RefType))) (= (type newPMask@49) (MapType1Type RefType boolType))) (= (type newPMask@43) (MapType1Type RefType boolType))) (= (type Heap@180) (MapType0Type RefType))) (= (type r_1@1) RefType)) (= (type Heap@181) (MapType0Type RefType))) (= (type newPMask@44) (MapType1Type RefType boolType))) (= (type Heap@182) (MapType0Type RefType))) (= (type newPMask@45) (MapType1Type RefType boolType))) (= (type Heap@183) (MapType0Type RefType))) (= (type Mask@149) (MapType1Type RefType realType))) (= (type Heap@178) (MapType0Type RefType))) (= (type Heap@177) (MapType0Type RefType))) (= (type Heap@179) (MapType0Type RefType))) (= (type freshVersion@5) FrameTypeType)) (= (type Mask@148) (MapType1Type RefType realType))) (= (type Mask@147) (MapType1Type RefType realType))) (= (type Mask@146) (MapType1Type RefType realType))) (= (type Mask@145) (MapType1Type RefType realType))) (= (type Heap@173) (MapType0Type RefType))) (= (type Heap@172) (MapType0Type RefType))) (= (type Heap@174) (MapType0Type RefType))) (= (type Heap@175) (MapType0Type RefType))) (= (type Heap@176) (MapType0Type RefType))) (= (type Heap@170) (MapType0Type RefType))) (= (type Heap@169) (MapType0Type RefType))) (= (type Heap@171) (MapType0Type RefType))) (= (type freshVersion@4) FrameTypeType)) (= (type Mask@144) (MapType1Type RefType realType))) (= (type Mask@143) (MapType1Type RefType realType))) (= (type Mask@142) (MapType1Type RefType realType))) (= (type Mask@141) (MapType1Type RefType realType))) (= (type Mask@140) (MapType1Type RefType realType))) (= (type Mask@139) (MapType1Type RefType realType))) (= (type Heap@155) (MapType0Type RefType))) (= (type Mask@124) (MapType1Type RefType realType))) (= (type Heap@153) (MapType0Type RefType))) (= (type Heap@154) (MapType0Type RefType))) (= (type Heap@151) (MapType0Type RefType))) (= (type Heap@152) (MapType0Type RefType))) (= (type Heap@149) (MapType0Type RefType))) (= (type newPMask@41) (MapType1Type RefType boolType))) (= (type Heap@150) (MapType0Type RefType))) (= (type Heap@148) (MapType0Type RefType))) (= (type Heap@147) (MapType0Type RefType))) (= (type Heap@145) (MapType0Type RefType))) (= (type Heap@144) (MapType0Type RefType))) (= (type Heap@146) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Mask@123) (MapType1Type RefType realType))) (= (type Mask@121) (MapType1Type RefType realType))) (= (type Mask@122) (MapType1Type RefType realType))) (= (type Mask@119) (MapType1Type RefType realType))) (= (type Mask@120) (MapType1Type RefType realType))) (= (type Mask@117) (MapType1Type RefType realType))) (= (type Mask@118) (MapType1Type RefType realType))) (= (type Mask@116) (MapType1Type RefType realType))) (= (type Mask@115) (MapType1Type RefType realType))) (= (type Mask@114) (MapType1Type RefType realType))) (= (type Mask@113) (MapType1Type RefType realType))) (= (type Mask@112) (MapType1Type RefType realType))) (= (type Mask@111) (MapType1Type RefType realType))) (= (type Heap@143) (MapType0Type RefType))) (= (type Heap@142) (MapType0Type RefType))) (= (type newVersion@4) FrameTypeType)) (= (type Mask@110) (MapType1Type RefType realType))) (= (type Heap@168) (MapType0Type RefType))) (= (type Mask@138) (MapType1Type RefType realType))) (= (type Heap@166) (MapType0Type RefType))) (= (type Heap@167) (MapType0Type RefType))) (= (type Heap@164) (MapType0Type RefType))) (= (type Heap@165) (MapType0Type RefType))) (= (type Heap@162) (MapType0Type RefType))) (= (type newPMask@42) (MapType1Type RefType boolType))) (= (type Heap@163) (MapType0Type RefType))) (= (type Heap@161) (MapType0Type RefType))) (= (type Heap@160) (MapType0Type RefType))) (= (type Heap@158) (MapType0Type RefType))) (= (type Heap@157) (MapType0Type RefType))) (= (type Heap@159) (MapType0Type RefType))) (= (type freshVersion@3) FrameTypeType)) (= (type Mask@137) (MapType1Type RefType realType))) (= (type Mask@135) (MapType1Type RefType realType))) (= (type Mask@136) (MapType1Type RefType realType))) (= (type Mask@133) (MapType1Type RefType realType))) (= (type Mask@134) (MapType1Type RefType realType))) (= (type Mask@131) (MapType1Type RefType realType))) (= (type Mask@132) (MapType1Type RefType realType))) (= (type Mask@130) (MapType1Type RefType realType))) (= (type Mask@129) (MapType1Type RefType realType))) (= (type Mask@128) (MapType1Type RefType realType))) (= (type Mask@127) (MapType1Type RefType realType))) (= (type Mask@126) (MapType1Type RefType realType))) (= (type Mask@125) (MapType1Type RefType realType))) (= (type Heap@156) (MapType0Type RefType))) (= (type newVersion@5) FrameTypeType)) (= (type Mask@109) (MapType1Type RefType realType))) (= (type Mask@108) (MapType1Type RefType realType))) (= (type Mask@107) (MapType1Type RefType realType))) (= (type Mask@106) (MapType1Type RefType realType))) (= (type Mask@105) (MapType1Type RefType realType))) (= (type Mask@104) (MapType1Type RefType realType))) (= (type Mask@103) (MapType1Type RefType realType))) (= (type Mask@102) (MapType1Type RefType realType))) (= (type Mask@101) (MapType1Type RefType realType))) (= (type Mask@97) (MapType1Type RefType realType))) (= (type Mask@96) (MapType1Type RefType realType))) (= (type Mask@98) (MapType1Type RefType realType))) (= (type Mask@99) (MapType1Type RefType realType))) (= (type Mask@100) (MapType1Type RefType realType))) (= (type Heap@141) (MapType0Type RefType))) (= (type Heap@140) (MapType0Type RefType))) (= (type newVersion@3) FrameTypeType)) (= (type Mask@95) (MapType1Type RefType realType))) (= (type Heap@198) (MapType0Type RefType))) (= (type Mask@162) (MapType1Type RefType realType))) (= (type Heap@196) (MapType0Type RefType))) (= (type Heap@197) (MapType0Type RefType))) (= (type Heap@194) (MapType0Type RefType))) (= (type Heap@195) (MapType0Type RefType))) (= (type Heap@192) (MapType0Type RefType))) (= (type Heap@193) (MapType0Type RefType))) (= (type Heap@190) (MapType0Type RefType))) (= (type Heap@191) (MapType0Type RefType))) (= (type Heap@188) (MapType0Type RefType))) (= (type newPMask@46) (MapType1Type RefType boolType))) (= (type Heap@189) (MapType0Type RefType))) (= (type Heap@187) (MapType0Type RefType))) (= (type Heap@186) (MapType0Type RefType))) (= (type Heap@184) (MapType0Type RefType))) (= (type Heap@185) (MapType0Type RefType))) (= (type freshVersion@6) FrameTypeType)) (= (type Mask@161) (MapType1Type RefType realType))) (= (type Mask@159) (MapType1Type RefType realType))) (= (type Mask@160) (MapType1Type RefType realType))) (= (type Mask@157) (MapType1Type RefType realType))) (= (type Mask@158) (MapType1Type RefType realType))) (= (type Mask@155) (MapType1Type RefType realType))) (= (type Mask@156) (MapType1Type RefType realType))) (= (type Mask@153) (MapType1Type RefType realType))) (= (type Mask@154) (MapType1Type RefType realType))) (= (type Mask@151) (MapType1Type RefType realType))) (= (type Mask@152) (MapType1Type RefType realType))) (= (type Mask@150) (MapType1Type RefType realType))) (= (type Mask@94) (MapType1Type RefType realType))) (= (type Mask@93) (MapType1Type RefType realType))) (= (type Mask@92) (MapType1Type RefType realType))) (= (type Mask@91) (MapType1Type RefType realType))) (= (type Mask@90) (MapType1Type RefType realType))) (= (type Mask@89) (MapType1Type RefType realType))) (= (type Mask@88) (MapType1Type RefType realType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@86) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type Heap@139) (MapType0Type RefType))) (= (type Heap@138) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Heap@125) (MapType0Type RefType))) (= (type Heap@137) (MapType0Type RefType))) (= (type Heap@135) (MapType0Type RefType))) (= (type Heap@136) (MapType0Type RefType))) (= (type Heap@133) (MapType0Type RefType))) (= (type Heap@134) (MapType0Type RefType))) (= (type Heap@131) (MapType0Type RefType))) (= (type Heap@132) (MapType0Type RefType))) (= (type Heap@129) (MapType0Type RefType))) (= (type Heap@130) (MapType0Type RefType))) (= (type Heap@127) (MapType0Type RefType))) (= (type newPMask@40) (MapType1Type RefType boolType))) (= (type Heap@128) (MapType0Type RefType))) (= (type UnfoldingMask@121) (MapType1Type RefType realType))) (= (type Heap@126) (MapType0Type RefType))) (= (type UnfoldingMask@120) (MapType1Type RefType realType))) (= (type UnfoldingMask@119) (MapType1Type RefType realType))) (= (type UnfoldingMask@118) (MapType1Type RefType realType))) (= (type UnfoldingMask@117) (MapType1Type RefType realType))) (= (type UnfoldingMask@116) (MapType1Type RefType realType))) (= (type UnfoldingMask@115) (MapType1Type RefType realType))) (= (type UnfoldingMask@114) (MapType1Type RefType realType))) (= (type UnfoldingMask@113) (MapType1Type RefType realType))) (= (type UnfoldingMask@112) (MapType1Type RefType realType))) (= (type UnfoldingMask@111) (MapType1Type RefType realType))) (= (type UnfoldingMask@109) (MapType1Type RefType realType))) (= (type UnfoldingMask@110) (MapType1Type RefType realType))) (= (type UnfoldingMask@105) (MapType1Type RefType realType))) (= (type UnfoldingMask@106) (MapType1Type RefType realType))) (= (type Heap@122) (MapType0Type RefType))) (= (type UnfoldingMask@107) (MapType1Type RefType realType))) (= (type UnfoldingMask@108) (MapType1Type RefType realType))) (= (type newPMask@37) (MapType1Type RefType boolType))) (= (type Heap@123) (MapType0Type RefType))) (= (type newPMask@38) (MapType1Type RefType boolType))) (= (type Heap@124) (MapType0Type RefType))) (= (type newPMask@39) (MapType1Type RefType boolType))) (= (type Heap@65) (MapType0Type RefType))) (= (type Heap@121) (MapType0Type RefType))) (= (type Heap@119) (MapType0Type RefType))) (= (type Heap@120) (MapType0Type RefType))) (= (type Heap@117) (MapType0Type RefType))) (= (type Heap@118) (MapType0Type RefType))) (= (type Heap@115) (MapType0Type RefType))) (= (type Heap@116) (MapType0Type RefType))) (= (type Heap@113) (MapType0Type RefType))) (= (type Heap@114) (MapType0Type RefType))) (= (type Heap@111) (MapType0Type RefType))) (= (type newPMask@36) (MapType1Type RefType boolType))) (= (type Heap@112) (MapType0Type RefType))) (= (type UnfoldingMask@104) (MapType1Type RefType realType))) (= (type Heap@110) (MapType0Type RefType))) (= (type UnfoldingMask@103) (MapType1Type RefType realType))) (= (type UnfoldingMask@102) (MapType1Type RefType realType))) (= (type UnfoldingMask@101) (MapType1Type RefType realType))) (= (type UnfoldingMask@100) (MapType1Type RefType realType))) (= (type UnfoldingMask@99) (MapType1Type RefType realType))) (= (type UnfoldingMask@98) (MapType1Type RefType realType))) (= (type UnfoldingMask@97) (MapType1Type RefType realType))) (= (type UnfoldingMask@96) (MapType1Type RefType realType))) (= (type UnfoldingMask@95) (MapType1Type RefType realType))) (= (type UnfoldingMask@94) (MapType1Type RefType realType))) (= (type UnfoldingMask@92) (MapType1Type RefType realType))) (= (type UnfoldingMask@93) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type UnfoldingMask@54) (MapType1Type RefType realType))) (= (type UnfoldingMask@55) (MapType1Type RefType realType))) (= (type UnfoldingMask@56) (MapType1Type RefType realType))) (= (type UnfoldingMask@57) (MapType1Type RefType realType))) (= (type newPMask@24) (MapType1Type RefType boolType))) (= (type Heap@63) (MapType0Type RefType))) (= (type newPMask@25) (MapType1Type RefType boolType))) (= (type Heap@64) (MapType0Type RefType))) (= (type newPMask@26) (MapType1Type RefType boolType))) (= (type Heap@246) (MapType0Type RefType))) (= (type Heap@233) (MapType0Type RefType))) (= (type Heap@245) (MapType0Type RefType))) (= (type UnfoldingMask@189) (MapType1Type RefType realType))) (= (type UnfoldingMask@188) (MapType1Type RefType realType))) (= (type UnfoldingMask@187) (MapType1Type RefType realType))) (= (type UnfoldingMask@186) (MapType1Type RefType realType))) (= (type UnfoldingMask@185) (MapType1Type RefType realType))) (= (type UnfoldingMask@184) (MapType1Type RefType realType))) (= (type UnfoldingMask@183) (MapType1Type RefType realType))) (= (type UnfoldingMask@182) (MapType1Type RefType realType))) (= (type UnfoldingMask@181) (MapType1Type RefType realType))) (= (type UnfoldingMask@180) (MapType1Type RefType realType))) (= (type UnfoldingMask@179) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type UnfoldingMask@177) (MapType1Type RefType realType))) (= (type UnfoldingMask@178) (MapType1Type RefType realType))) (= (type Heap@243) (MapType0Type RefType))) (= (type Heap@244) (MapType0Type RefType))) (= (type Heap@241) (MapType0Type RefType))) (= (type Heap@242) (MapType0Type RefType))) (= (type Heap@239) (MapType0Type RefType))) (= (type Heap@240) (MapType0Type RefType))) (= (type Heap@237) (MapType0Type RefType))) (= (type Heap@238) (MapType0Type RefType))) (= (type Heap@235) (MapType0Type RefType))) (= (type newPMask@58) (MapType1Type RefType boolType))) (= (type Heap@236) (MapType0Type RefType))) (= (type UnfoldingMask@176) (MapType1Type RefType realType))) (= (type Heap@234) (MapType0Type RefType))) (= (type UnfoldingMask@175) (MapType1Type RefType realType))) (= (type UnfoldingMask@174) (MapType1Type RefType realType))) (= (type UnfoldingMask@173) (MapType1Type RefType realType))) (= (type UnfoldingMask@172) (MapType1Type RefType realType))) (= (type UnfoldingMask@171) (MapType1Type RefType realType))) (= (type UnfoldingMask@170) (MapType1Type RefType realType))) (= (type UnfoldingMask@169) (MapType1Type RefType realType))) (= (type UnfoldingMask@168) (MapType1Type RefType realType))) (= (type UnfoldingMask@167) (MapType1Type RefType realType))) (= (type UnfoldingMask@166) (MapType1Type RefType realType))) (= (type UnfoldingMask@164) (MapType1Type RefType realType))) (= (type UnfoldingMask@165) (MapType1Type RefType realType))) (= (type UnfoldingMask@156) (MapType1Type RefType realType))) (= (type UnfoldingMask@157) (MapType1Type RefType realType))) (= (type UnfoldingMask@158) (MapType1Type RefType realType))) (= (type UnfoldingMask@159) (MapType1Type RefType realType))) (= (type newPMask@55) (MapType1Type RefType boolType))) (= (type Heap@231) (MapType0Type RefType))) (= (type newPMask@56) (MapType1Type RefType boolType))) (= (type Heap@232) (MapType0Type RefType))) (= (type newPMask@57) (MapType1Type RefType boolType))) (= (type UnfoldingMask@160) (MapType1Type RefType realType))) (= (type UnfoldingMask@161) (MapType1Type RefType realType))) (= (type UnfoldingMask@162) (MapType1Type RefType realType))) (= (type UnfoldingMask@163) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Heap@62) (MapType0Type RefType))) (= (type r_1@0) RefType)) (= (type Heap@60) (MapType0Type RefType))) (= (type n@1) RefType)) (= (type Heap@61) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type Heap@52) (MapType0Type RefType))) (= (type newPMask@23) (MapType1Type RefType boolType))) (= (type Heap@53) (MapType0Type RefType))) (= (type newPMask@20) (MapType1Type RefType boolType))) (= (type Heap@47) (MapType0Type RefType))) (= (type Heap@48) (MapType0Type RefType))) (= (type newPMask@21) (MapType1Type RefType boolType))) (= (type Heap@49) (MapType0Type RefType))) (= (type newPMask@22) (MapType1Type RefType boolType))) (= (type Heap@50) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type UnfoldingMask@37) (MapType1Type RefType realType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type UnfoldingMask@38) (MapType1Type RefType realType))) (= (type UnfoldingMask@39) (MapType1Type RefType realType))) (= (type UnfoldingMask@40) (MapType1Type RefType realType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Heap@34) (MapType0Type RefType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type Heap@31) (MapType0Type RefType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type Heap@32) (MapType0Type RefType))) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@33) (MapType0Type RefType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type Heap@28) (MapType0Type RefType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type Heap@29) (MapType0Type RefType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type Heap@30) (MapType0Type RefType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@26) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@27) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type UnfoldingMask@198) (MapType1Type RefType realType))) (= (type Mask@296) (MapType1Type RefType realType))) (= (type n@9) RefType)) (= (type UnfoldingMask@199) (MapType1Type RefType realType))) (= (type Heap@386) (MapType0Type RefType))) (= (type UnfoldingMask@200) (MapType1Type RefType realType))) (= (type UnfoldingMask@201) (MapType1Type RefType realType))) (= (type Mask@301) (MapType1Type RefType realType))) (= (type Mask@300) (MapType1Type RefType realType))) (= (type Mask@299) (MapType1Type RefType realType))) (= (type Mask@298) (MapType1Type RefType realType))) (= (type Mask@297) (MapType1Type RefType realType))) (= (type UnfoldingMask@194) (MapType1Type RefType realType))) (= (type UnfoldingMask@195) (MapType1Type RefType realType))) (= (type Heap@383) (MapType0Type RefType))) (= (type UnfoldingMask@196) (MapType1Type RefType realType))) (= (type UnfoldingMask@197) (MapType1Type RefType realType))) (= (type newPMask@83) (MapType1Type RefType boolType))) (= (type Heap@384) (MapType0Type RefType))) (= (type newPMask@84) (MapType1Type RefType boolType))) (= (type Heap@385) (MapType0Type RefType))) (= (type newPMask@85) (MapType1Type RefType boolType))) (= (type Heap@368) (MapType0Type RefType))) (= (type Mask@285) (MapType1Type RefType realType))) (= (type n@8) RefType)) (= (type Heap@310) (MapType0Type RefType))) (= (type Mask@231) (MapType1Type RefType realType))) (= (type n@5) RefType)) (= (type Heap@295) (MapType0Type RefType))) (= (type Mask@220) (MapType1Type RefType realType))) (= (type n@4) RefType)) (= (type Heap@293) (MapType0Type RefType))) (= (type Heap@294) (MapType0Type RefType))) (= (type Heap@291) (MapType0Type RefType))) (= (type Heap@292) (MapType0Type RefType))) (= (type Heap@289) (MapType0Type RefType))) (= (type Heap@290) (MapType0Type RefType))) (= (type Heap@287) (MapType0Type RefType))) (= (type Heap@288) (MapType0Type RefType))) (= (type Heap@285) (MapType0Type RefType))) (= (type newPMask@67) (MapType1Type RefType boolType))) (= (type Heap@286) (MapType0Type RefType))) (= (type Heap@284) (MapType0Type RefType))) (= (type Heap@283) (MapType0Type RefType))) (= (type Heap@281) (MapType0Type RefType))) (= (type Heap@280) (MapType0Type RefType))) (= (type Heap@282) (MapType0Type RefType))) (= (type freshVersion@9) FrameTypeType)) (= (type Mask@219) (MapType1Type RefType realType))) (= (type Mask@217) (MapType1Type RefType realType))) (= (type Mask@218) (MapType1Type RefType realType))) (= (type Mask@215) (MapType1Type RefType realType))) (= (type Mask@216) (MapType1Type RefType realType))) (= (type Mask@213) (MapType1Type RefType realType))) (= (type Mask@214) (MapType1Type RefType realType))) (= (type Mask@211) (MapType1Type RefType realType))) (= (type Mask@212) (MapType1Type RefType realType))) (= (type Mask@209) (MapType1Type RefType realType))) (= (type Mask@210) (MapType1Type RefType realType))) (= (type Mask@208) (MapType1Type RefType realType))) (= (type Mask@207) (MapType1Type RefType realType))) (= (type newPMask@66) (MapType1Type RefType boolType))) (= (type Heap@279) (MapType0Type RefType))) (= (type Heap@277) (MapType0Type RefType))) (= (type newPMask@65) (MapType1Type RefType boolType))) (= (type Heap@278) (MapType0Type RefType))) (= (type Heap@275) (MapType0Type RefType))) (= (type newPMask@64) (MapType1Type RefType boolType))) (= (type Heap@276) (MapType0Type RefType))) (= (type Heap@273) (MapType0Type RefType))) (= (type newPMask@63) (MapType1Type RefType boolType))) (= (type Heap@274) (MapType0Type RefType))) (= (type Heap@271) (MapType0Type RefType))) (= (type newPMask@62) (MapType1Type RefType boolType))) (= (type Heap@272) (MapType0Type RefType))) (= (type Heap@267) (MapType0Type RefType))) (= (type Heap@266) (MapType0Type RefType))) (= (type Heap@268) (MapType0Type RefType))) (= (type Heap@269) (MapType0Type RefType))) (= (type Heap@270) (MapType0Type RefType))) (= (type Heap@264) (MapType0Type RefType))) (= (type Heap@263) (MapType0Type RefType))) (= (type Heap@265) (MapType0Type RefType))) (= (type freshVersion@8) FrameTypeType)) (= (type Mask@206) (MapType1Type RefType realType))) (= (type Mask@205) (MapType1Type RefType realType))) (= (type Mask@203) (MapType1Type RefType realType))) (= (type Mask@204) (MapType1Type RefType realType))) (= (type Mask@201) (MapType1Type RefType realType))) (= (type Mask@202) (MapType1Type RefType realType))) (= (type Mask@199) (MapType1Type RefType realType))) (= (type Mask@200) (MapType1Type RefType realType))) (= (type Mask@197) (MapType1Type RefType realType))) (= (type Mask@198) (MapType1Type RefType realType))) (= (type Mask@196) (MapType1Type RefType realType))) (= (type Mask@195) (MapType1Type RefType realType))) (= (type Mask@194) (MapType1Type RefType realType))) (= (type Mask@193) (MapType1Type RefType realType))) (= (type Mask@192) (MapType1Type RefType realType))) (= (type Heap@261) (MapType0Type RefType))) (= (type Heap@262) (MapType0Type RefType))) (= (type Heap@260) (MapType0Type RefType))) (= (type Heap@259) (MapType0Type RefType))) (= (type Heap@257) (MapType0Type RefType))) (= (type Heap@256) (MapType0Type RefType))) (= (type Heap@258) (MapType0Type RefType))) (= (type freshVersion@7) FrameTypeType)) (= (type Mask@191) (MapType1Type RefType realType))) (= (type Mask@189) (MapType1Type RefType realType))) (= (type Mask@190) (MapType1Type RefType realType))) (= (type Mask@188) (MapType1Type RefType realType))) (= (type Mask@187) (MapType1Type RefType realType))) (= (type Heap@255) (MapType0Type RefType))) (= (type Mask@186) (MapType1Type RefType realType))) (= (type Mask@185) (MapType1Type RefType realType))) (= (type Mask@184) (MapType1Type RefType realType))) (= (type Mask@183) (MapType1Type RefType realType))) (= (type Mask@182) (MapType1Type RefType realType))) (= (type Mask@181) (MapType1Type RefType realType))) (= (type Mask@180) (MapType1Type RefType realType))) (= (type Mask@179) (MapType1Type RefType realType))) (= (type Heap@254) (MapType0Type RefType))) (= (type Heap@253) (MapType0Type RefType))) (= (type newVersion@8) FrameTypeType)) (= (type Mask@178) (MapType1Type RefType realType))) (= (type newPMask@68) (MapType1Type RefType boolType))) (= (type Heap@306) (MapType0Type RefType))) (= (type Heap@307) (MapType0Type RefType))) (= (type newPMask@69) (MapType1Type RefType boolType))) (= (type Heap@308) (MapType0Type RefType))) (= (type newPMask@70) (MapType1Type RefType boolType))) (= (type Heap@309) (MapType0Type RefType))) (= (type Mask@230) (MapType1Type RefType realType))) (= (type Heap@304) (MapType0Type RefType))) (= (type Heap@303) (MapType0Type RefType))) (= (type Heap@305) (MapType0Type RefType))) (= (type freshVersion@11) FrameTypeType)) (= (type Mask@229) (MapType1Type RefType realType))) (= (type Mask@228) (MapType1Type RefType realType))) (= (type Mask@227) (MapType1Type RefType realType))) (= (type Mask@226) (MapType1Type RefType realType))) (= (type Heap@299) (MapType0Type RefType))) (= (type Heap@298) (MapType0Type RefType))) (= (type Heap@300) (MapType0Type RefType))) (= (type Heap@301) (MapType0Type RefType))) (= (type Heap@302) (MapType0Type RefType))) (= (type Heap@296) (MapType0Type RefType))) (= (type Heap@297) (MapType0Type RefType))) (= (type freshVersion@10) FrameTypeType)) (= (type Mask@225) (MapType1Type RefType realType))) (= (type Mask@224) (MapType1Type RefType realType))) (= (type Mask@223) (MapType1Type RefType realType))) (= (type Mask@222) (MapType1Type RefType realType))) (= (type Mask@221) (MapType1Type RefType realType))) (= (type Heap@367) (MapType0Type RefType))) (= (type Mask@284) (MapType1Type RefType realType))) (= (type n@7) RefType)) (= (type Heap@352) (MapType0Type RefType))) (= (type Mask@273) (MapType1Type RefType realType))) (= (type n@6) RefType)) (= (type Heap@350) (MapType0Type RefType))) (= (type Heap@351) (MapType0Type RefType))) (= (type Heap@348) (MapType0Type RefType))) (= (type Heap@349) (MapType0Type RefType))) (= (type Heap@346) (MapType0Type RefType))) (= (type Heap@347) (MapType0Type RefType))) (= (type Heap@344) (MapType0Type RefType))) (= (type Heap@345) (MapType0Type RefType))) (= (type Heap@342) (MapType0Type RefType))) (= (type newPMask@76) (MapType1Type RefType boolType))) (= (type Heap@343) (MapType0Type RefType))) (= (type Heap@341) (MapType0Type RefType))) (= (type Heap@340) (MapType0Type RefType))) (= (type Heap@338) (MapType0Type RefType))) (= (type Heap@337) (MapType0Type RefType))) (= (type Heap@339) (MapType0Type RefType))) (= (type freshVersion@14) FrameTypeType)) (= (type Mask@272) (MapType1Type RefType realType))) (= (type Mask@270) (MapType1Type RefType realType))) (= (type Mask@271) (MapType1Type RefType realType))) (= (type Mask@268) (MapType1Type RefType realType))) (= (type Mask@269) (MapType1Type RefType realType))) (= (type Mask@266) (MapType1Type RefType realType))) (= (type Mask@267) (MapType1Type RefType realType))) (= (type Mask@264) (MapType1Type RefType realType))) (= (type Mask@265) (MapType1Type RefType realType))) (= (type Mask@262) (MapType1Type RefType realType))) (= (type Mask@263) (MapType1Type RefType realType))) (= (type Mask@261) (MapType1Type RefType realType))) (= (type Mask@260) (MapType1Type RefType realType))) (= (type newPMask@75) (MapType1Type RefType boolType))) (= (type Heap@336) (MapType0Type RefType))) (= (type Heap@334) (MapType0Type RefType))) (= (type newPMask@74) (MapType1Type RefType boolType))) (= (type Heap@335) (MapType0Type RefType))) (= (type Heap@332) (MapType0Type RefType))) (= (type newPMask@73) (MapType1Type RefType boolType))) (= (type Heap@333) (MapType0Type RefType))) (= (type Heap@330) (MapType0Type RefType))) (= (type newPMask@72) (MapType1Type RefType boolType))) (= (type Heap@331) (MapType0Type RefType))) (= (type Heap@328) (MapType0Type RefType))) (= (type newPMask@71) (MapType1Type RefType boolType))) (= (type Heap@329) (MapType0Type RefType))) (= (type Heap@324) (MapType0Type RefType))) (= (type Heap@323) (MapType0Type RefType))) (= (type Heap@325) (MapType0Type RefType))) (= (type Heap@326) (MapType0Type RefType))) (= (type Heap@327) (MapType0Type RefType))) (= (type Heap@321) (MapType0Type RefType))) (= (type Heap@320) (MapType0Type RefType))) (= (type Heap@322) (MapType0Type RefType))) (= (type freshVersion@13) FrameTypeType)) (= (type Mask@259) (MapType1Type RefType realType))) (= (type Mask@258) (MapType1Type RefType realType))) (= (type Mask@256) (MapType1Type RefType realType))) (= (type Mask@257) (MapType1Type RefType realType))) (= (type Mask@254) (MapType1Type RefType realType))) (= (type Mask@255) (MapType1Type RefType realType))) (= (type Mask@252) (MapType1Type RefType realType))) (= (type Mask@253) (MapType1Type RefType realType))) (= (type Mask@250) (MapType1Type RefType realType))) (= (type Mask@251) (MapType1Type RefType realType))) (= (type Mask@249) (MapType1Type RefType realType))) (= (type Mask@248) (MapType1Type RefType realType))) (= (type Mask@247) (MapType1Type RefType realType))) (= (type Mask@246) (MapType1Type RefType realType))) (= (type Mask@245) (MapType1Type RefType realType))) (= (type Heap@318) (MapType0Type RefType))) (= (type Heap@319) (MapType0Type RefType))) (= (type Heap@317) (MapType0Type RefType))) (= (type Heap@316) (MapType0Type RefType))) (= (type Heap@314) (MapType0Type RefType))) (= (type Heap@313) (MapType0Type RefType))) (= (type Heap@315) (MapType0Type RefType))) (= (type freshVersion@12) FrameTypeType)) (= (type Mask@244) (MapType1Type RefType realType))) (= (type Mask@242) (MapType1Type RefType realType))) (= (type Mask@243) (MapType1Type RefType realType))) (= (type Mask@241) (MapType1Type RefType realType))) (= (type Mask@240) (MapType1Type RefType realType))) (= (type Heap@312) (MapType0Type RefType))) (= (type Mask@239) (MapType1Type RefType realType))) (= (type Mask@238) (MapType1Type RefType realType))) (= (type Mask@237) (MapType1Type RefType realType))) (= (type Mask@236) (MapType1Type RefType realType))) (= (type Mask@235) (MapType1Type RefType realType))) (= (type Mask@234) (MapType1Type RefType realType))) (= (type Mask@233) (MapType1Type RefType realType))) (= (type Mask@232) (MapType1Type RefType realType))) (= (type Heap@311) (MapType0Type RefType))) (= (type newVersion@9) FrameTypeType)) (= (type newPMask@77) (MapType1Type RefType boolType))) (= (type Heap@363) (MapType0Type RefType))) (= (type Heap@364) (MapType0Type RefType))) (= (type newPMask@78) (MapType1Type RefType boolType))) (= (type Heap@365) (MapType0Type RefType))) (= (type newPMask@79) (MapType1Type RefType boolType))) (= (type Heap@366) (MapType0Type RefType))) (= (type Mask@283) (MapType1Type RefType realType))) (= (type Heap@361) (MapType0Type RefType))) (= (type Heap@360) (MapType0Type RefType))) (= (type Heap@362) (MapType0Type RefType))) (= (type freshVersion@16) FrameTypeType)) (= (type Mask@282) (MapType1Type RefType realType))) (= (type Mask@281) (MapType1Type RefType realType))) (= (type Mask@280) (MapType1Type RefType realType))) (= (type Mask@279) (MapType1Type RefType realType))) (= (type Heap@356) (MapType0Type RefType))) (= (type Heap@355) (MapType0Type RefType))) (= (type Heap@357) (MapType0Type RefType))) (= (type Heap@358) (MapType0Type RefType))) (= (type Heap@359) (MapType0Type RefType))) (= (type Heap@353) (MapType0Type RefType))) (= (type Heap@354) (MapType0Type RefType))) (= (type freshVersion@15) FrameTypeType)) (= (type Mask@278) (MapType1Type RefType realType))) (= (type Mask@277) (MapType1Type RefType realType))) (= (type Mask@276) (MapType1Type RefType realType))) (= (type Mask@275) (MapType1Type RefType realType))) (= (type Mask@274) (MapType1Type RefType realType))) (= (type newPMask@80) (MapType1Type RefType boolType))) (= (type Heap@379) (MapType0Type RefType))) (= (type Heap@380) (MapType0Type RefType))) (= (type newPMask@81) (MapType1Type RefType boolType))) (= (type Heap@381) (MapType0Type RefType))) (= (type newPMask@82) (MapType1Type RefType boolType))) (= (type Heap@382) (MapType0Type RefType))) (= (type Mask@295) (MapType1Type RefType realType))) (= (type Heap@377) (MapType0Type RefType))) (= (type Heap@376) (MapType0Type RefType))) (= (type Heap@378) (MapType0Type RefType))) (= (type freshVersion@18) FrameTypeType)) (= (type Mask@294) (MapType1Type RefType realType))) (= (type Mask@293) (MapType1Type RefType realType))) (= (type Mask@292) (MapType1Type RefType realType))) (= (type Mask@291) (MapType1Type RefType realType))) (= (type Heap@372) (MapType0Type RefType))) (= (type Heap@371) (MapType0Type RefType))) (= (type Heap@373) (MapType0Type RefType))) (= (type Heap@374) (MapType0Type RefType))) (= (type Heap@375) (MapType0Type RefType))) (= (type Heap@369) (MapType0Type RefType))) (= (type Heap@370) (MapType0Type RefType))) (= (type freshVersion@17) FrameTypeType)) (= (type Mask@290) (MapType1Type RefType realType))) (= (type Mask@289) (MapType1Type RefType realType))) (= (type Mask@288) (MapType1Type RefType realType))) (= (type Mask@287) (MapType1Type RefType realType))) (= (type Mask@286) (MapType1Type RefType realType))) (= (type Mask@174) (MapType1Type RefType realType))) (= (type Mask@173) (MapType1Type RefType realType))) (= (type Mask@175) (MapType1Type RefType realType))) (= (type Mask@176) (MapType1Type RefType realType))) (= (type Mask@177) (MapType1Type RefType realType))) (= (type Heap@252) (MapType0Type RefType))) (= (type Heap@251) (MapType0Type RefType))) (= (type newVersion@7) FrameTypeType)) (= (type Mask@172) (MapType1Type RefType realType))) (= (type Mask@170) (MapType1Type RefType realType))) (= (type Mask@169) (MapType1Type RefType realType))) (= (type Mask@171) (MapType1Type RefType realType))) (= (type Heap@250) (MapType0Type RefType))) (= (type Heap@249) (MapType0Type RefType))) (= (type newVersion@6) FrameTypeType)) (= (type Mask@36) (MapType1Type RefType realType))) (= (type UnfoldingMask@190) (MapType1Type RefType realType))) (= (type UnfoldingMask@191) (MapType1Type RefType realType))) (= (type Heap@25) (MapType0Type RefType))) (= (type UnfoldingMask@192) (MapType1Type RefType realType))) (= (type UnfoldingMask@193) (MapType1Type RefType realType))) (= (type newPMask@59) (MapType1Type RefType boolType))) (= (type Heap@247) (MapType0Type RefType))) (= (type newPMask@60) (MapType1Type RefType boolType))) (= (type Heap@248) (MapType0Type RefType))) (= (type newPMask@61) (MapType1Type RefType boolType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@23) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@24) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type UnfoldingMask@202) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type UnfoldingMask@203) (MapType1Type RefType realType))) (= (type UnfoldingMask@204) (MapType1Type RefType realType))) (= (type UnfoldingMask@205) (MapType1Type RefType realType))) (= (type newPMask@89) (MapType1Type RefType boolType))) (= (type Heap@390) (MapType0Type RefType))) (= (type newPMask@90) (MapType1Type RefType boolType))) (= (type Heap@391) (MapType0Type RefType))) (= (type newPMask@91) (MapType1Type RefType boolType))) (= (type Heap@392) (MapType0Type RefType))) (= (type UnfoldingMask@206) (MapType1Type RefType realType))) (= (type UnfoldingMask@207) (MapType1Type RefType realType))) (= (type UnfoldingMask@208) (MapType1Type RefType realType))) (= (type UnfoldingMask@209) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type n@0) RefType)) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type Heap@19) (MapType0Type RefType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@20) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@21) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@22) (MapType0Type RefType))) (= (type q_1@0) RefType)) (= (type p_1@0) RefType)) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type Heap@16) (MapType0Type RefType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@17) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@18) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@402) (MapType0Type RefType))) (= (type Mask@309) (MapType1Type RefType realType))) (= (type Heap@400) (MapType0Type RefType))) (= (type Heap@401) (MapType0Type RefType))) (= (type Heap@398) (MapType0Type RefType))) (= (type Heap@399) (MapType0Type RefType))) (= (type Heap@396) (MapType0Type RefType))) (= (type newPMask@92) (MapType1Type RefType boolType))) (= (type Heap@397) (MapType0Type RefType))) (= (type Heap@395) (MapType0Type RefType))) (= (type Heap@393) (MapType0Type RefType))) (= (type Heap@394) (MapType0Type RefType))) (= (type freshVersion@19) FrameTypeType)) (= (type Mask@308) (MapType1Type RefType realType))) (= (type Mask@306) (MapType1Type RefType realType))) (= (type Mask@307) (MapType1Type RefType realType))) (= (type Mask@304) (MapType1Type RefType realType))) (= (type Mask@305) (MapType1Type RefType realType))) (= (type Mask@302) (MapType1Type RefType realType))) (= (type Mask@303) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@@18) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type Mask@0) (MapType1Type RefType realType))) (= (type n) RefType)) (= (type p_1) RefType)) (= (type q_1) RefType)) (= (type r_1) RefType)))
(set-info :boogie-vc-id has)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1544) (let ((anon105_correct  (=> (= UnfoldingMask@202 (MapType1Store Mask@31 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@31 null (valid n@1))) FullPerm)))) (=> (and (= UnfoldingMask@203 (MapType1Store UnfoldingMask@202 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@202 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (validRest n@1) (MapType0Select ExhaleHeap@0 null (validRest n@1)))) (=> (and (and (and (state ExhaleHeap@0 UnfoldingMask@203) (= UnfoldingMask@204 (MapType1Store UnfoldingMask@203 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@203 null (leftValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (leftValid n@1) (MapType0Select ExhaleHeap@0 null (leftValid n@1))) (state ExhaleHeap@0 UnfoldingMask@204))) (and (and (= UnfoldingMask@205 (MapType1Store UnfoldingMask@204 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@204 null (rightValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (rightValid n@1) (MapType0Select ExhaleHeap@0 null (rightValid n@1)))) (and (state ExhaleHeap@0 UnfoldingMask@205) (state ExhaleHeap@0 UnfoldingMask@205)))) (and (=> (= (ControlFlow 0 1363) (- 0 1365)) (HasDirectPerm UnfoldingMask@205 n@1 root)) (=> (HasDirectPerm UnfoldingMask@205 n@1 root) (and (=> (= (ControlFlow 0 1363) (- 0 1364)) (HasDirectPerm UnfoldingMask@205 this@@53 root1)) (=> (HasDirectPerm UnfoldingMask@205 this@@53 root1) (=> (forall ((o_12 T@U) (f_16 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_16))))
(let ((A@@12 (FieldTypeInv0 (type f_16))))
 (=> (and (and (= (type o_12) RefType) (= (type f_16) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@0 null (|valid#sm| n@1)) o_12 f_16)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@0 null (|validRest#sm| n@1)) o_12 f_16)))) (U_2_bool (MapType1Select newPMask@89 o_12 f_16)))))
 :qid |stdinbpl.1965:39|
 :skolemid |85|
 :pattern ( (MapType1Select newPMask@89 o_12 f_16))
)) (=> (and (= Heap@390 (MapType0Store ExhaleHeap@0 null (|valid#sm| n@1) newPMask@89)) (forall ((o_13 T@U) (f_17 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_17))))
(let ((A@@13 (FieldTypeInv0 (type f_17))))
 (=> (and (and (= (type o_13) RefType) (= (type f_17) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@390 null (|valid#sm| n@1)) o_13 f_17)) (U_2_bool (MapType1Select (MapType0Select Heap@390 null (|leftValid#sm| n@1)) o_13 f_17)))) (U_2_bool (MapType1Select newPMask@90 o_13 f_17)))))
 :qid |stdinbpl.1971:39|
 :skolemid |86|
 :pattern ( (MapType1Select newPMask@90 o_13 f_17))
))) (=> (and (and (= Heap@391 (MapType0Store Heap@390 null (|valid#sm| n@1) newPMask@90)) (forall ((o_14 T@U) (f_18 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_18))))
(let ((A@@14 (FieldTypeInv0 (type f_18))))
 (=> (and (and (= (type o_14) RefType) (= (type f_18) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@391 null (|valid#sm| n@1)) o_14 f_18)) (U_2_bool (MapType1Select (MapType0Select Heap@391 null (|rightValid#sm| n@1)) o_14 f_18)))) (U_2_bool (MapType1Select newPMask@91 o_14 f_18)))))
 :qid |stdinbpl.1977:39|
 :skolemid |87|
 :pattern ( (MapType1Select newPMask@91 o_14 f_18))
))) (and (= Heap@392 (MapType0Store Heap@391 null (|valid#sm| n@1) newPMask@91)) (state Heap@392 Mask@31))) (=> (and (and (and (and (|valid#trigger| Heap@392 (valid n@1)) (= (MapType0Select Heap@392 null (valid n@1)) (CombineFrames (MapType0Select Heap@392 null (validRest n@1)) (CombineFrames (MapType0Select Heap@392 null (leftValid n@1)) (MapType0Select Heap@392 null (rightValid n@1)))))) (and (= UnfoldingMask@206 (MapType1Store Mask@31 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@31 null (valid n@1))) FullPerm)))) (= UnfoldingMask@207 (MapType1Store UnfoldingMask@206 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@206 null (validRest n@1))) FullPerm)))))) (and (and (InsidePredicate (valid n@1) (MapType0Select Heap@392 null (valid n@1)) (validRest n@1) (MapType0Select Heap@392 null (validRest n@1))) (state Heap@392 UnfoldingMask@207)) (and (= UnfoldingMask@208 (MapType1Store UnfoldingMask@207 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@207 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@392 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@392 null (leftValid n@1)))))) (and (and (and (state Heap@392 UnfoldingMask@208) (= UnfoldingMask@209 (MapType1Store UnfoldingMask@208 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@208 null (rightValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select Heap@392 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@392 null (rightValid n@1))) (state Heap@392 UnfoldingMask@209))) (and (and (state Heap@392 UnfoldingMask@209) (= (MapType0Select Heap@392 n@1 root) (MapType0Select Heap@392 this@@53 root1))) (and (state Heap@392 Mask@31) (= (ControlFlow 0 1363) (- 0 1362)))))) (HasDirectPerm Mask@31 this@@53 root1))))))))))))))
(let ((anon1046_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1368) 1363)) anon105_correct)))
(let ((anon1046_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1366) (- 0 1367)) (<= FullPerm (U_2_real (MapType1Select Mask@31 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@31 null (valid n@1)))) (=> (= (ControlFlow 0 1366) 1363) anon105_correct))))))
(let ((anon1045_Then_correct  (=> (and (and (not (= this@@53 null)) (= Mask@27 (MapType1Store Mask@26 this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select Mask@26 this@@53 root1)) FullPerm))))) (and (state ExhaleHeap@0 Mask@27) (state ExhaleHeap@0 Mask@27))) (and (=> (= (ControlFlow 0 1369) (- 0 1373)) (HasDirectPerm Mask@27 this@@53 root1)) (=> (HasDirectPerm Mask@27 this@@53 root1) (=> (not (= (MapType0Select ExhaleHeap@0 this@@53 root1) null)) (and (=> (= (ControlFlow 0 1369) (- 0 1372)) (HasDirectPerm Mask@27 this@@53 root1)) (=> (HasDirectPerm Mask@27 this@@53 root1) (=> (= perm@9 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 1369) (- 0 1371)) (>= perm@9 NoPerm)) (=> (>= perm@9 NoPerm) (=> (and (=> (> perm@9 NoPerm) (not (= (MapType0Select ExhaleHeap@0 this@@53 root1) null))) (= Mask@28 (MapType1Store Mask@27 (MapType0Select ExhaleHeap@0 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@27 (MapType0Select ExhaleHeap@0 this@@53 root1) parent)) perm@9))))) (=> (and (and (and (state ExhaleHeap@0 Mask@28) (state ExhaleHeap@0 Mask@28)) (and (not (= n@1 null)) (state ExhaleHeap@0 Mask@28))) (and (and (= Mask@29 (MapType1Store Mask@28 null (valid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@28 null (valid n@1))) FullPerm)))) (state ExhaleHeap@0 Mask@29)) (and (state ExhaleHeap@0 Mask@29) (= perm@10 (/ (to_real 4) (to_real 10)))))) (and (=> (= (ControlFlow 0 1369) (- 0 1370)) (>= perm@10 NoPerm)) (=> (>= perm@10 NoPerm) (=> (=> (> perm@10 NoPerm) (not (= n@1 null))) (=> (and (and (and (= Mask@30 (MapType1Store Mask@29 n@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@29 n@1 root)) perm@10)))) (state ExhaleHeap@0 Mask@30)) (and (state ExhaleHeap@0 Mask@30) (= Mask@31 (MapType1Store Mask@30 null (udParentValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@30 null (udParentValid n@1))) FullPerm)))))) (and (and (state ExhaleHeap@0 Mask@31) (state ExhaleHeap@0 Mask@31)) (and (|valid#trigger| ExhaleHeap@0 (valid n@1)) (= (MapType0Select ExhaleHeap@0 null (valid n@1)) (CombineFrames (MapType0Select ExhaleHeap@0 null (validRest n@1)) (CombineFrames (MapType0Select ExhaleHeap@0 null (leftValid n@1)) (MapType0Select ExhaleHeap@0 null (rightValid n@1)))))))) (and (=> (= (ControlFlow 0 1369) 1366) anon1046_Then_correct) (=> (= (ControlFlow 0 1369) 1368) anon1046_Else_correct)))))))))))))))))))
(let ((anon423_correct  (=> (= UnfoldingMask@198 (MapType1Store Mask@296 null (valid n@9) (real_2_U (- (U_2_real (MapType1Select Mask@296 null (valid n@9))) FullPerm)))) (=> (and (= UnfoldingMask@199 (MapType1Store UnfoldingMask@198 null (validRest n@9) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@198 null (validRest n@9))) FullPerm)))) (InsidePredicate (valid n@9) (MapType0Select Heap@386 null (valid n@9)) (validRest n@9) (MapType0Select Heap@386 null (validRest n@9)))) (=> (and (and (and (state Heap@386 UnfoldingMask@199) (= UnfoldingMask@200 (MapType1Store UnfoldingMask@199 null (leftValid n@9) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@199 null (leftValid n@9))) FullPerm))))) (and (InsidePredicate (valid n@9) (MapType0Select Heap@386 null (valid n@9)) (leftValid n@9) (MapType0Select Heap@386 null (leftValid n@9))) (state Heap@386 UnfoldingMask@200))) (and (and (= UnfoldingMask@201 (MapType1Store UnfoldingMask@200 null (rightValid n@9) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@200 null (rightValid n@9))) FullPerm)))) (InsidePredicate (valid n@9) (MapType0Select Heap@386 null (valid n@9)) (rightValid n@9) (MapType0Select Heap@386 null (rightValid n@9)))) (and (state Heap@386 UnfoldingMask@201) (state Heap@386 UnfoldingMask@201)))) (and (=> (= (ControlFlow 0 793) (- 0 794)) (= (MapType0Select Heap@386 n@9 root) (MapType0Select Heap@386 this@@53 root1))) (=> (= (MapType0Select Heap@386 n@9 root) (MapType0Select Heap@386 this@@53 root1)) (=> (= (ControlFlow 0 793) (- 0 792)) (not (= (MapType0Select Heap@386 this@@53 root1) null))))))))))
(let ((anon1203_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 797) 793)) anon423_correct)))
(let ((anon1203_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 795) (- 0 796)) (<= FullPerm (U_2_real (MapType1Select Mask@296 null (valid n@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@296 null (valid n@9)))) (=> (= (ControlFlow 0 795) 793) anon423_correct))))))
(let ((anon421_correct  (=> (= Mask@301 (MapType1Store Mask@300 null (udParentValid n@9) (real_2_U (- (U_2_real (MapType1Select Mask@300 null (udParentValid n@9))) FullPerm)))) (=> (and (|valid#trigger| Heap@386 (valid n@9)) (= (MapType0Select Heap@386 null (valid n@9)) (CombineFrames (MapType0Select Heap@386 null (validRest n@9)) (CombineFrames (MapType0Select Heap@386 null (leftValid n@9)) (MapType0Select Heap@386 null (rightValid n@9)))))) (and (=> (= (ControlFlow 0 798) 795) anon1203_Then_correct) (=> (= (ControlFlow 0 798) 797) anon1203_Else_correct))))))
(let ((anon1202_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 801) 798)) anon421_correct)))
(let ((anon1202_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 799) (- 0 800)) (<= FullPerm (U_2_real (MapType1Select Mask@300 null (udParentValid n@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@300 null (udParentValid n@9)))) (=> (= (ControlFlow 0 799) 798) anon421_correct))))))
(let ((anon419_correct  (=> (= Mask@300 (MapType1Store Mask@299 n@9 root (real_2_U (- (U_2_real (MapType1Select Mask@299 n@9 root)) perm@168)))) (and (=> (= (ControlFlow 0 802) 799) anon1202_Then_correct) (=> (= (ControlFlow 0 802) 801) anon1202_Else_correct)))))
(let ((anon1201_Else_correct  (=> (and (= perm@168 NoPerm) (= (ControlFlow 0 805) 802)) anon419_correct)))
(let ((anon1201_Then_correct  (=> (not (= perm@168 NoPerm)) (and (=> (= (ControlFlow 0 803) (- 0 804)) (<= perm@168 (U_2_real (MapType1Select Mask@299 n@9 root)))) (=> (<= perm@168 (U_2_real (MapType1Select Mask@299 n@9 root))) (=> (= (ControlFlow 0 803) 802) anon419_correct))))))
(let ((anon417_correct  (=> (and (= Mask@299 (MapType1Store Mask@298 null (valid n@9) (real_2_U (- (U_2_real (MapType1Select Mask@298 null (valid n@9))) FullPerm)))) (= perm@168 (/ (to_real 4) (to_real 10)))) (and (=> (= (ControlFlow 0 806) (- 0 807)) (>= perm@168 NoPerm)) (=> (>= perm@168 NoPerm) (and (=> (= (ControlFlow 0 806) 803) anon1201_Then_correct) (=> (= (ControlFlow 0 806) 805) anon1201_Else_correct)))))))
(let ((anon1200_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 810) 806)) anon417_correct)))
(let ((anon1200_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 808) (- 0 809)) (<= FullPerm (U_2_real (MapType1Select Mask@298 null (valid n@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@298 null (valid n@9)))) (=> (= (ControlFlow 0 808) 806) anon417_correct))))))
(let ((anon415_correct  (=> (= Mask@298 (MapType1Store Mask@297 (MapType0Select Heap@386 this@@53 root1) parent (real_2_U (- (U_2_real (MapType1Select Mask@297 (MapType0Select Heap@386 this@@53 root1) parent)) perm@167)))) (and (=> (= (ControlFlow 0 811) (- 0 812)) (not (= n@9 null))) (=> (not (= n@9 null)) (and (=> (= (ControlFlow 0 811) 808) anon1200_Then_correct) (=> (= (ControlFlow 0 811) 810) anon1200_Else_correct)))))))
(let ((anon1199_Else_correct  (=> (and (= perm@167 NoPerm) (= (ControlFlow 0 815) 811)) anon415_correct)))
(let ((anon1199_Then_correct  (=> (not (= perm@167 NoPerm)) (and (=> (= (ControlFlow 0 813) (- 0 814)) (<= perm@167 (U_2_real (MapType1Select Mask@297 (MapType0Select Heap@386 this@@53 root1) parent)))) (=> (<= perm@167 (U_2_real (MapType1Select Mask@297 (MapType0Select Heap@386 this@@53 root1) parent))) (=> (= (ControlFlow 0 813) 811) anon415_correct))))))
(let ((anon413_correct  (=> (= Mask@297 (MapType1Store Mask@296 this@@53 root1 (real_2_U (- (U_2_real (MapType1Select Mask@296 this@@53 root1)) FullPerm)))) (and (=> (= (ControlFlow 0 816) (- 0 818)) (not (= (MapType0Select Heap@386 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@386 this@@53 root1) null)) (=> (= perm@167 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 816) (- 0 817)) (>= perm@167 NoPerm)) (=> (>= perm@167 NoPerm) (and (=> (= (ControlFlow 0 816) 813) anon1199_Then_correct) (=> (= (ControlFlow 0 816) 815) anon1199_Else_correct))))))))))
(let ((anon1198_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 821) 816)) anon413_correct)))
(let ((anon1198_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 819) (- 0 820)) (<= FullPerm (U_2_real (MapType1Select Mask@296 this@@53 root1)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@296 this@@53 root1))) (=> (= (ControlFlow 0 819) 816) anon413_correct))))))
(let ((anon411_correct  (=> (and (= UnfoldingMask@194 (MapType1Store Mask@296 null (valid n@9) (real_2_U (- (U_2_real (MapType1Select Mask@296 null (valid n@9))) FullPerm)))) (= UnfoldingMask@195 (MapType1Store UnfoldingMask@194 null (validRest n@9) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@194 null (validRest n@9))) FullPerm))))) (=> (and (and (and (and (InsidePredicate (valid n@9) (MapType0Select Heap@383 null (valid n@9)) (validRest n@9) (MapType0Select Heap@383 null (validRest n@9))) (state Heap@383 UnfoldingMask@195)) (and (= UnfoldingMask@196 (MapType1Store UnfoldingMask@195 null (leftValid n@9) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@195 null (leftValid n@9))) FullPerm)))) (InsidePredicate (valid n@9) (MapType0Select Heap@383 null (valid n@9)) (leftValid n@9) (MapType0Select Heap@383 null (leftValid n@9))))) (and (and (state Heap@383 UnfoldingMask@196) (= UnfoldingMask@197 (MapType1Store UnfoldingMask@196 null (rightValid n@9) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@196 null (rightValid n@9))) FullPerm))))) (and (InsidePredicate (valid n@9) (MapType0Select Heap@383 null (valid n@9)) (rightValid n@9) (MapType0Select Heap@383 null (rightValid n@9))) (state Heap@383 UnfoldingMask@197)))) (and (and (and (state Heap@383 UnfoldingMask@197) (forall ((o_42 T@U) (f_46 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_46))))
(let ((A@@15 (FieldTypeInv0 (type f_46))))
 (=> (and (and (= (type o_42) RefType) (= (type f_46) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@383 null (|valid#sm| n@9)) o_42 f_46)) (U_2_bool (MapType1Select (MapType0Select Heap@383 null (|validRest#sm| n@9)) o_42 f_46)))) (U_2_bool (MapType1Select newPMask@83 o_42 f_46)))))
 :qid |stdinbpl.3517:39|
 :skolemid |115|
 :pattern ( (MapType1Select newPMask@83 o_42 f_46))
))) (and (= Heap@384 (MapType0Store Heap@383 null (|valid#sm| n@9) newPMask@83)) (forall ((o_43 T@U) (f_47 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_47))))
(let ((A@@16 (FieldTypeInv0 (type f_47))))
 (=> (and (and (= (type o_43) RefType) (= (type f_47) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@384 null (|valid#sm| n@9)) o_43 f_47)) (U_2_bool (MapType1Select (MapType0Select Heap@384 null (|leftValid#sm| n@9)) o_43 f_47)))) (U_2_bool (MapType1Select newPMask@84 o_43 f_47)))))
 :qid |stdinbpl.3523:39|
 :skolemid |116|
 :pattern ( (MapType1Select newPMask@84 o_43 f_47))
)))) (and (and (= Heap@385 (MapType0Store Heap@384 null (|valid#sm| n@9) newPMask@84)) (forall ((o_44 T@U) (f_48 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_48))))
(let ((A@@17 (FieldTypeInv0 (type f_48))))
 (=> (and (and (= (type o_44) RefType) (= (type f_48) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@385 null (|valid#sm| n@9)) o_44 f_48)) (U_2_bool (MapType1Select (MapType0Select Heap@385 null (|rightValid#sm| n@9)) o_44 f_48)))) (U_2_bool (MapType1Select newPMask@85 o_44 f_48)))))
 :qid |stdinbpl.3529:39|
 :skolemid |117|
 :pattern ( (MapType1Select newPMask@85 o_44 f_48))
))) (and (= Heap@386 (MapType0Store Heap@385 null (|valid#sm| n@9) newPMask@85)) (state Heap@386 Mask@296))))) (and (=> (= (ControlFlow 0 822) 819) anon1198_Then_correct) (=> (= (ControlFlow 0 822) 821) anon1198_Else_correct))))))
(let ((anon1197_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 825) 822)) anon411_correct)))
(let ((anon1197_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 823) (- 0 824)) (<= FullPerm (U_2_real (MapType1Select Mask@296 null (valid n@9))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@296 null (valid n@9)))) (=> (= (ControlFlow 0 823) 822) anon411_correct))))))
(let ((anon409_correct  (=> (state Heap@383 Mask@296) (=> (and (|valid#trigger| Heap@383 (valid n@9)) (= (MapType0Select Heap@383 null (valid n@9)) (CombineFrames (MapType0Select Heap@383 null (validRest n@9)) (CombineFrames (MapType0Select Heap@383 null (leftValid n@9)) (MapType0Select Heap@383 null (rightValid n@9)))))) (and (=> (= (ControlFlow 0 826) 823) anon1197_Then_correct) (=> (= (ControlFlow 0 826) 825) anon1197_Else_correct))))))
(let ((anon138_correct  (=> (forall ((o_21 T@U) (f_25 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_25))))
(let ((A@@18 (FieldTypeInv0 (type f_25))))
 (=> (and (and (= (type o_21) RefType) (= (type f_25) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@379 null (|valid#sm| n@1)) o_21 f_25)) (U_2_bool (MapType1Select (MapType0Select Heap@379 null (|validRest#sm| n@1)) o_21 f_25)))) (U_2_bool (MapType1Select newPMask@80 o_21 f_25)))))
 :qid |stdinbpl.2366:43|
 :skolemid |94|
 :pattern ( (MapType1Select newPMask@80 o_21 f_25))
)) (=> (and (and (= Heap@380 (MapType0Store Heap@379 null (|valid#sm| n@1) newPMask@80)) (forall ((o_22 T@U) (f_26 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_26))))
(let ((A@@19 (FieldTypeInv0 (type f_26))))
 (=> (and (and (= (type o_22) RefType) (= (type f_26) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@380 null (|valid#sm| n@1)) o_22 f_26)) (U_2_bool (MapType1Select (MapType0Select Heap@380 null (|leftValid#sm| n@1)) o_22 f_26)))) (U_2_bool (MapType1Select newPMask@81 o_22 f_26)))))
 :qid |stdinbpl.2372:43|
 :skolemid |95|
 :pattern ( (MapType1Select newPMask@81 o_22 f_26))
))) (and (= Heap@381 (MapType0Store Heap@380 null (|valid#sm| n@1) newPMask@81)) (forall ((o_23 T@U) (f_27 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_27))))
(let ((A@@20 (FieldTypeInv0 (type f_27))))
 (=> (and (and (= (type o_23) RefType) (= (type f_27) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@381 null (|valid#sm| n@1)) o_23 f_27)) (U_2_bool (MapType1Select (MapType0Select Heap@381 null (|rightValid#sm| n@1)) o_23 f_27)))) (U_2_bool (MapType1Select newPMask@82 o_23 f_27)))))
 :qid |stdinbpl.2378:43|
 :skolemid |96|
 :pattern ( (MapType1Select newPMask@82 o_23 f_27))
)))) (=> (and (and (and (= Heap@382 (MapType0Store Heap@381 null (|valid#sm| n@1) newPMask@82)) (state Heap@382 Mask@295)) (and (state Heap@382 Mask@295) (state Heap@382 Mask@295))) (and (and (= Heap@383 Heap@382) (= n@9 n@1)) (and (= Mask@296 Mask@295) (= (ControlFlow 0 1294) 826)))) anon409_correct)))))
(let ((anon1063_Else_correct  (=> (HasDirectPerm Mask@295 null (valid n@1)) (=> (and (= Heap@379 Heap@376) (= (ControlFlow 0 1296) 1294)) anon138_correct))))
(let ((anon1063_Then_correct  (=> (not (HasDirectPerm Mask@295 null (valid n@1))) (=> (and (and (= Heap@377 (MapType0Store Heap@376 null (|valid#sm| n@1) ZeroPMask)) (= Heap@378 (MapType0Store Heap@377 null (valid n@1) freshVersion@18))) (and (= Heap@379 Heap@378) (= (ControlFlow 0 1295) 1294))) anon138_correct))))
(let ((anon136_correct  (=> (= Mask@294 (MapType1Store Mask@293 null (rightValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@293 null (rightValid n@1))) FullPerm)))) (=> (and (InsidePredicate (valid n@1) (MapType0Select Heap@376 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@376 null (rightValid n@1))) (= Mask@295 (MapType1Store Mask@294 null (valid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@294 null (valid n@1))) FullPerm))))) (=> (and (and (state Heap@376 Mask@295) (state Heap@376 Mask@295)) (and (|valid#trigger| Heap@376 (valid n@1)) (= (MapType0Select Heap@376 null (valid n@1)) (CombineFrames (MapType0Select Heap@376 null (validRest n@1)) (CombineFrames (MapType0Select Heap@376 null (leftValid n@1)) (MapType0Select Heap@376 null (rightValid n@1))))))) (and (=> (= (ControlFlow 0 1297) 1295) anon1063_Then_correct) (=> (= (ControlFlow 0 1297) 1296) anon1063_Else_correct)))))))
(let ((anon1062_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1300) 1297)) anon136_correct)))
(let ((anon1062_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1298) (- 0 1299)) (<= FullPerm (U_2_real (MapType1Select Mask@293 null (rightValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@293 null (rightValid n@1)))) (=> (= (ControlFlow 0 1298) 1297) anon136_correct))))))
(let ((anon134_correct  (=> (and (= Mask@293 (MapType1Store Mask@292 null (leftValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@292 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@376 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@376 null (leftValid n@1)))) (and (=> (= (ControlFlow 0 1301) 1298) anon1062_Then_correct) (=> (= (ControlFlow 0 1301) 1300) anon1062_Else_correct)))))
(let ((anon1061_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1304) 1301)) anon134_correct)))
(let ((anon1061_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1302) (- 0 1303)) (<= FullPerm (U_2_real (MapType1Select Mask@292 null (leftValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@292 null (leftValid n@1)))) (=> (= (ControlFlow 0 1302) 1301) anon134_correct))))))
(let ((anon132_correct  (=> (and (= Mask@292 (MapType1Store Mask@291 null (validRest n@1) (real_2_U (- (U_2_real (MapType1Select Mask@291 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@376 null (valid n@1)) (validRest n@1) (MapType0Select Heap@376 null (validRest n@1)))) (and (=> (= (ControlFlow 0 1305) 1302) anon1061_Then_correct) (=> (= (ControlFlow 0 1305) 1304) anon1061_Else_correct)))))
(let ((anon1060_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1308) 1305)) anon132_correct)))
(let ((anon1060_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1306) (- 0 1307)) (<= FullPerm (U_2_real (MapType1Select Mask@291 null (validRest n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@291 null (validRest n@1)))) (=> (= (ControlFlow 0 1306) 1305) anon132_correct))))))
(let ((anon130_correct  (=> (= Heap@372 (MapType0Store Heap@371 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@371 null (|validRest#sm| n@1)) n@1 key (bool_2_U true)))) (=> (and (= Heap@373 (MapType0Store Heap@372 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@372 null (|validRest#sm| n@1)) n@1 root (bool_2_U true)))) (= Heap@374 (MapType0Store Heap@373 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@373 null (|validRest#sm| n@1)) n@1 left (bool_2_U true))))) (=> (and (and (= Heap@375 (MapType0Store Heap@374 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@374 null (|validRest#sm| n@1)) n@1 right (bool_2_U true)))) (= Heap@376 (MapType0Store Heap@375 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@375 null (|validRest#sm| n@1)) n@1 leftDown (bool_2_U true))))) (and (state Heap@376 Mask@291) (state Heap@376 Mask@291))) (and (=> (= (ControlFlow 0 1309) 1306) anon1060_Then_correct) (=> (= (ControlFlow 0 1309) 1308) anon1060_Else_correct)))))))
(let ((anon1059_Else_correct  (=> (HasDirectPerm Mask@291 null (validRest n@1)) (=> (and (= Heap@371 Heap@253) (= (ControlFlow 0 1311) 1309)) anon130_correct))))
(let ((anon1059_Then_correct  (=> (not (HasDirectPerm Mask@291 null (validRest n@1))) (=> (and (and (= Heap@369 (MapType0Store Heap@253 null (|validRest#sm| n@1) ZeroPMask)) (= Heap@370 (MapType0Store Heap@369 null (validRest n@1) freshVersion@17))) (and (= Heap@371 Heap@370) (= (ControlFlow 0 1310) 1309))) anon130_correct))))
(let ((anon128_correct  (=> (= Mask@290 (MapType1Store Mask@289 n@1 leftDown (real_2_U (- (U_2_real (MapType1Select Mask@289 n@1 leftDown)) FullPerm)))) (and (=> (= (ControlFlow 0 1312) (- 0 1313)) (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null))) (=> (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null)) (=> (= Mask@291 (MapType1Store Mask@290 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@290 null (validRest n@1))) FullPerm)))) (=> (and (and (state Heap@253 Mask@291) (state Heap@253 Mask@291)) (and (|validRest#trigger| Heap@253 (validRest n@1)) (= (MapType0Select Heap@253 null (validRest n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 root)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 right)) (FrameFragment (MapType0Select Heap@253 n@1 leftDown))))))))) (and (=> (= (ControlFlow 0 1312) 1310) anon1059_Then_correct) (=> (= (ControlFlow 0 1312) 1311) anon1059_Else_correct)))))))))
(let ((anon1058_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1316) 1312)) anon128_correct)))
(let ((anon1058_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1314) (- 0 1315)) (<= FullPerm (U_2_real (MapType1Select Mask@289 n@1 leftDown)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@289 n@1 leftDown))) (=> (= (ControlFlow 0 1314) 1312) anon128_correct))))))
(let ((anon126_correct  (=> (= Mask@289 (MapType1Store Mask@288 n@1 right (real_2_U (- (U_2_real (MapType1Select Mask@288 n@1 right)) perm@166)))) (and (=> (= (ControlFlow 0 1317) 1314) anon1058_Then_correct) (=> (= (ControlFlow 0 1317) 1316) anon1058_Else_correct)))))
(let ((anon1057_Else_correct  (=> (and (= perm@166 NoPerm) (= (ControlFlow 0 1320) 1317)) anon126_correct)))
(let ((anon1057_Then_correct  (=> (not (= perm@166 NoPerm)) (and (=> (= (ControlFlow 0 1318) (- 0 1319)) (<= perm@166 (U_2_real (MapType1Select Mask@288 n@1 right)))) (=> (<= perm@166 (U_2_real (MapType1Select Mask@288 n@1 right))) (=> (= (ControlFlow 0 1318) 1317) anon126_correct))))))
(let ((anon124_correct  (=> (and (= Mask@288 (MapType1Store Mask@287 n@1 left (real_2_U (- (U_2_real (MapType1Select Mask@287 n@1 left)) perm@165)))) (= perm@166 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 1321) (- 0 1322)) (>= perm@166 NoPerm)) (=> (>= perm@166 NoPerm) (and (=> (= (ControlFlow 0 1321) 1318) anon1057_Then_correct) (=> (= (ControlFlow 0 1321) 1320) anon1057_Else_correct)))))))
(let ((anon1056_Else_correct  (=> (and (= perm@165 NoPerm) (= (ControlFlow 0 1325) 1321)) anon124_correct)))
(let ((anon1056_Then_correct  (=> (not (= perm@165 NoPerm)) (and (=> (= (ControlFlow 0 1323) (- 0 1324)) (<= perm@165 (U_2_real (MapType1Select Mask@287 n@1 left)))) (=> (<= perm@165 (U_2_real (MapType1Select Mask@287 n@1 left))) (=> (= (ControlFlow 0 1323) 1321) anon124_correct))))))
(let ((anon122_correct  (=> (and (= Mask@287 (MapType1Store Mask@286 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@286 n@1 root)) perm@164)))) (= perm@165 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 1326) (- 0 1327)) (>= perm@165 NoPerm)) (=> (>= perm@165 NoPerm) (and (=> (= (ControlFlow 0 1326) 1323) anon1056_Then_correct) (=> (= (ControlFlow 0 1326) 1325) anon1056_Else_correct)))))))
(let ((anon1055_Else_correct  (=> (and (= perm@164 NoPerm) (= (ControlFlow 0 1330) 1326)) anon122_correct)))
(let ((anon1055_Then_correct  (=> (not (= perm@164 NoPerm)) (and (=> (= (ControlFlow 0 1328) (- 0 1329)) (<= perm@164 (U_2_real (MapType1Select Mask@286 n@1 root)))) (=> (<= perm@164 (U_2_real (MapType1Select Mask@286 n@1 root))) (=> (= (ControlFlow 0 1328) 1326) anon122_correct))))))
(let ((anon120_correct  (=> (and (= Mask@286 (MapType1Store Mask@178 n@1 key (real_2_U (- (U_2_real (MapType1Select Mask@178 n@1 key)) FullPerm)))) (= perm@164 (/ (to_real 3) (to_real 10)))) (and (=> (= (ControlFlow 0 1331) (- 0 1332)) (>= perm@164 NoPerm)) (=> (>= perm@164 NoPerm) (and (=> (= (ControlFlow 0 1331) 1328) anon1055_Then_correct) (=> (= (ControlFlow 0 1331) 1330) anon1055_Else_correct)))))))
(let ((anon1054_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1335) 1331)) anon120_correct)))
(let ((anon1054_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1333) (- 0 1334)) (<= FullPerm (U_2_real (MapType1Select Mask@178 n@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 n@1 key))) (=> (= (ControlFlow 0 1333) 1331) anon120_correct))))))
(let ((anon1053_Then_correct  (=> (and (= (U_2_int (MapType0Select Heap@253 n@1 key)) k) (state Heap@253 Mask@178)) (and (=> (= (ControlFlow 0 1336) 1333) anon1054_Then_correct) (=> (= (ControlFlow 0 1336) 1335) anon1054_Else_correct)))))
(let ((anon408_correct  (=> (state Heap@368 Mask@285) (=> (and (and (= Heap@383 Heap@368) (= n@9 n@8)) (and (= Mask@296 Mask@285) (= (ControlFlow 0 827) 826))) anon409_correct))))
(let ((anon273_correct  (=> (state Heap@367 Mask@284) (=> (and (and (= Heap@368 Heap@367) (= Mask@285 Mask@284)) (and (= n@8 n@7) (= (ControlFlow 0 1060) 827))) anon408_correct))))
(let ((anon161_correct  (=> (and (and (forall ((o_24 T@U) (f_28 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_28))))
(let ((A@@21 (FieldTypeInv0 (type f_28))))
 (=> (and (and (= (type o_24) RefType) (= (type f_28) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@363 null (|valid#sm| n@1)) o_24 f_28)) (U_2_bool (MapType1Select (MapType0Select Heap@363 null (|validRest#sm| n@1)) o_24 f_28)))) (U_2_bool (MapType1Select newPMask@77 o_24 f_28)))))
 :qid |stdinbpl.2511:51|
 :skolemid |97|
 :pattern ( (MapType1Select newPMask@77 o_24 f_28))
)) (= Heap@364 (MapType0Store Heap@363 null (|valid#sm| n@1) newPMask@77))) (and (forall ((o_25 T@U) (f_29 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_29))))
(let ((A@@22 (FieldTypeInv0 (type f_29))))
 (=> (and (and (= (type o_25) RefType) (= (type f_29) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Heap@364 null (|valid#sm| n@1)) o_25 f_29)) (U_2_bool (MapType1Select (MapType0Select Heap@364 null (|leftValid#sm| n@1)) o_25 f_29)))) (U_2_bool (MapType1Select newPMask@78 o_25 f_29)))))
 :qid |stdinbpl.2517:51|
 :skolemid |98|
 :pattern ( (MapType1Select newPMask@78 o_25 f_29))
)) (= Heap@365 (MapType0Store Heap@364 null (|valid#sm| n@1) newPMask@78)))) (=> (and (and (and (forall ((o_26 T@U) (f_30 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_30))))
(let ((A@@23 (FieldTypeInv0 (type f_30))))
 (=> (and (and (= (type o_26) RefType) (= (type f_30) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@365 null (|valid#sm| n@1)) o_26 f_30)) (U_2_bool (MapType1Select (MapType0Select Heap@365 null (|rightValid#sm| n@1)) o_26 f_30)))) (U_2_bool (MapType1Select newPMask@79 o_26 f_30)))))
 :qid |stdinbpl.2523:51|
 :skolemid |99|
 :pattern ( (MapType1Select newPMask@79 o_26 f_30))
)) (= Heap@366 (MapType0Store Heap@365 null (|valid#sm| n@1) newPMask@79))) (and (state Heap@366 Mask@283) (state Heap@366 Mask@283))) (and (and (= Heap@367 Heap@366) (= n@7 n@1)) (and (= Mask@284 Mask@283) (= (ControlFlow 0 1247) 1060)))) anon273_correct))))
(let ((anon1075_Else_correct  (=> (HasDirectPerm Mask@283 null (valid n@1)) (=> (and (= Heap@363 Heap@360) (= (ControlFlow 0 1249) 1247)) anon161_correct))))
(let ((anon1075_Then_correct  (=> (not (HasDirectPerm Mask@283 null (valid n@1))) (=> (and (and (= Heap@361 (MapType0Store Heap@360 null (|valid#sm| n@1) ZeroPMask)) (= Heap@362 (MapType0Store Heap@361 null (valid n@1) freshVersion@16))) (and (= Heap@363 Heap@362) (= (ControlFlow 0 1248) 1247))) anon161_correct))))
(let ((anon159_correct  (=> (= Mask@282 (MapType1Store Mask@281 null (rightValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@281 null (rightValid n@1))) FullPerm)))) (=> (and (InsidePredicate (valid n@1) (MapType0Select Heap@360 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@360 null (rightValid n@1))) (= Mask@283 (MapType1Store Mask@282 null (valid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@282 null (valid n@1))) FullPerm))))) (=> (and (and (state Heap@360 Mask@283) (state Heap@360 Mask@283)) (and (|valid#trigger| Heap@360 (valid n@1)) (= (MapType0Select Heap@360 null (valid n@1)) (CombineFrames (MapType0Select Heap@360 null (validRest n@1)) (CombineFrames (MapType0Select Heap@360 null (leftValid n@1)) (MapType0Select Heap@360 null (rightValid n@1))))))) (and (=> (= (ControlFlow 0 1250) 1248) anon1075_Then_correct) (=> (= (ControlFlow 0 1250) 1249) anon1075_Else_correct)))))))
(let ((anon1074_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1253) 1250)) anon159_correct)))
(let ((anon1074_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1251) (- 0 1252)) (<= FullPerm (U_2_real (MapType1Select Mask@281 null (rightValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@281 null (rightValid n@1)))) (=> (= (ControlFlow 0 1251) 1250) anon159_correct))))))
(let ((anon157_correct  (=> (and (= Mask@281 (MapType1Store Mask@280 null (leftValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@280 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@360 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@360 null (leftValid n@1)))) (and (=> (= (ControlFlow 0 1254) 1251) anon1074_Then_correct) (=> (= (ControlFlow 0 1254) 1253) anon1074_Else_correct)))))
(let ((anon1073_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1257) 1254)) anon157_correct)))
(let ((anon1073_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1255) (- 0 1256)) (<= FullPerm (U_2_real (MapType1Select Mask@280 null (leftValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@280 null (leftValid n@1)))) (=> (= (ControlFlow 0 1255) 1254) anon157_correct))))))
(let ((anon155_correct  (=> (and (= Mask@280 (MapType1Store Mask@279 null (validRest n@1) (real_2_U (- (U_2_real (MapType1Select Mask@279 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@360 null (valid n@1)) (validRest n@1) (MapType0Select Heap@360 null (validRest n@1)))) (and (=> (= (ControlFlow 0 1258) 1255) anon1073_Then_correct) (=> (= (ControlFlow 0 1258) 1257) anon1073_Else_correct)))))
(let ((anon1072_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1261) 1258)) anon155_correct)))
(let ((anon1072_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1259) (- 0 1260)) (<= FullPerm (U_2_real (MapType1Select Mask@279 null (validRest n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@279 null (validRest n@1)))) (=> (= (ControlFlow 0 1259) 1258) anon155_correct))))))
(let ((anon153_correct  (=> (= Heap@356 (MapType0Store Heap@355 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@355 null (|validRest#sm| n@1)) n@1 key (bool_2_U true)))) (=> (and (= Heap@357 (MapType0Store Heap@356 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@356 null (|validRest#sm| n@1)) n@1 root (bool_2_U true)))) (= Heap@358 (MapType0Store Heap@357 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@357 null (|validRest#sm| n@1)) n@1 left (bool_2_U true))))) (=> (and (and (= Heap@359 (MapType0Store Heap@358 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@358 null (|validRest#sm| n@1)) n@1 right (bool_2_U true)))) (= Heap@360 (MapType0Store Heap@359 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@359 null (|validRest#sm| n@1)) n@1 leftDown (bool_2_U true))))) (and (state Heap@360 Mask@279) (state Heap@360 Mask@279))) (and (=> (= (ControlFlow 0 1262) 1259) anon1072_Then_correct) (=> (= (ControlFlow 0 1262) 1261) anon1072_Else_correct)))))))
(let ((anon1071_Else_correct  (=> (HasDirectPerm Mask@279 null (validRest n@1)) (=> (and (= Heap@355 Heap@253) (= (ControlFlow 0 1264) 1262)) anon153_correct))))
(let ((anon1071_Then_correct  (=> (not (HasDirectPerm Mask@279 null (validRest n@1))) (=> (and (and (= Heap@353 (MapType0Store Heap@253 null (|validRest#sm| n@1) ZeroPMask)) (= Heap@354 (MapType0Store Heap@353 null (validRest n@1) freshVersion@15))) (and (= Heap@355 Heap@354) (= (ControlFlow 0 1263) 1262))) anon153_correct))))
(let ((anon151_correct  (=> (= Mask@278 (MapType1Store Mask@277 n@1 leftDown (real_2_U (- (U_2_real (MapType1Select Mask@277 n@1 leftDown)) FullPerm)))) (and (=> (= (ControlFlow 0 1265) (- 0 1266)) (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null))) (=> (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null)) (=> (= Mask@279 (MapType1Store Mask@278 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@278 null (validRest n@1))) FullPerm)))) (=> (and (and (state Heap@253 Mask@279) (state Heap@253 Mask@279)) (and (|validRest#trigger| Heap@253 (validRest n@1)) (= (MapType0Select Heap@253 null (validRest n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 root)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 right)) (FrameFragment (MapType0Select Heap@253 n@1 leftDown))))))))) (and (=> (= (ControlFlow 0 1265) 1263) anon1071_Then_correct) (=> (= (ControlFlow 0 1265) 1264) anon1071_Else_correct)))))))))
(let ((anon1070_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1269) 1265)) anon151_correct)))
(let ((anon1070_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1267) (- 0 1268)) (<= FullPerm (U_2_real (MapType1Select Mask@277 n@1 leftDown)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@277 n@1 leftDown))) (=> (= (ControlFlow 0 1267) 1265) anon151_correct))))))
(let ((anon149_correct  (=> (= Mask@277 (MapType1Store Mask@276 n@1 right (real_2_U (- (U_2_real (MapType1Select Mask@276 n@1 right)) perm@163)))) (and (=> (= (ControlFlow 0 1270) 1267) anon1070_Then_correct) (=> (= (ControlFlow 0 1270) 1269) anon1070_Else_correct)))))
(let ((anon1069_Else_correct  (=> (and (= perm@163 NoPerm) (= (ControlFlow 0 1273) 1270)) anon149_correct)))
(let ((anon1069_Then_correct  (=> (not (= perm@163 NoPerm)) (and (=> (= (ControlFlow 0 1271) (- 0 1272)) (<= perm@163 (U_2_real (MapType1Select Mask@276 n@1 right)))) (=> (<= perm@163 (U_2_real (MapType1Select Mask@276 n@1 right))) (=> (= (ControlFlow 0 1271) 1270) anon149_correct))))))
(let ((anon147_correct  (=> (and (= Mask@276 (MapType1Store Mask@275 n@1 left (real_2_U (- (U_2_real (MapType1Select Mask@275 n@1 left)) perm@162)))) (= perm@163 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 1274) (- 0 1275)) (>= perm@163 NoPerm)) (=> (>= perm@163 NoPerm) (and (=> (= (ControlFlow 0 1274) 1271) anon1069_Then_correct) (=> (= (ControlFlow 0 1274) 1273) anon1069_Else_correct)))))))
(let ((anon1068_Else_correct  (=> (and (= perm@162 NoPerm) (= (ControlFlow 0 1278) 1274)) anon147_correct)))
(let ((anon1068_Then_correct  (=> (not (= perm@162 NoPerm)) (and (=> (= (ControlFlow 0 1276) (- 0 1277)) (<= perm@162 (U_2_real (MapType1Select Mask@275 n@1 left)))) (=> (<= perm@162 (U_2_real (MapType1Select Mask@275 n@1 left))) (=> (= (ControlFlow 0 1276) 1274) anon147_correct))))))
(let ((anon145_correct  (=> (and (= Mask@275 (MapType1Store Mask@274 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@274 n@1 root)) perm@161)))) (= perm@162 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 1279) (- 0 1280)) (>= perm@162 NoPerm)) (=> (>= perm@162 NoPerm) (and (=> (= (ControlFlow 0 1279) 1276) anon1068_Then_correct) (=> (= (ControlFlow 0 1279) 1278) anon1068_Else_correct)))))))
(let ((anon1067_Else_correct  (=> (and (= perm@161 NoPerm) (= (ControlFlow 0 1283) 1279)) anon145_correct)))
(let ((anon1067_Then_correct  (=> (not (= perm@161 NoPerm)) (and (=> (= (ControlFlow 0 1281) (- 0 1282)) (<= perm@161 (U_2_real (MapType1Select Mask@274 n@1 root)))) (=> (<= perm@161 (U_2_real (MapType1Select Mask@274 n@1 root))) (=> (= (ControlFlow 0 1281) 1279) anon145_correct))))))
(let ((anon143_correct  (=> (and (= Mask@274 (MapType1Store Mask@178 n@1 key (real_2_U (- (U_2_real (MapType1Select Mask@178 n@1 key)) FullPerm)))) (= perm@161 (/ (to_real 3) (to_real 10)))) (and (=> (= (ControlFlow 0 1284) (- 0 1285)) (>= perm@161 NoPerm)) (=> (>= perm@161 NoPerm) (and (=> (= (ControlFlow 0 1284) 1281) anon1067_Then_correct) (=> (= (ControlFlow 0 1284) 1283) anon1067_Else_correct)))))))
(let ((anon1066_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1288) 1284)) anon143_correct)))
(let ((anon1066_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1286) (- 0 1287)) (<= FullPerm (U_2_real (MapType1Select Mask@178 n@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 n@1 key))) (=> (= (ControlFlow 0 1286) 1284) anon143_correct))))))
(let ((anon1065_Then_correct  (=> (and (= (MapType0Select Heap@253 n@1 left) null) (state Heap@253 Mask@178)) (and (=> (= (ControlFlow 0 1289) 1286) anon1066_Then_correct) (=> (= (ControlFlow 0 1289) 1288) anon1066_Else_correct)))))
(let ((anon272_correct  (=> (and (state Heap@352 Mask@273) (state Heap@352 Mask@273)) (=> (and (and (= Heap@367 Heap@352) (= n@7 n@6)) (and (= Mask@284 Mask@273) (= (ControlFlow 0 1061) 1060))) anon273_correct))))
(let ((anon1130_Else_correct  (=> (= (MapType0Select Heap@350 n@6 parent) null) (=> (and (= Heap@352 Heap@350) (= (ControlFlow 0 1063) 1061)) anon272_correct))))
(let ((anon1130_Then_correct  (=> (and (and (not (= (MapType0Select Heap@350 n@6 parent) null)) (= Heap@351 (MapType0Store Heap@350 null (|udParentValid#sm| n@6) (MapType1Store (MapType0Select Heap@350 null (|udParentValid#sm| n@6)) (MapType0Select Heap@350 n@6 parent) root (bool_2_U true))))) (and (= Heap@352 Heap@351) (= (ControlFlow 0 1062) 1061))) anon272_correct)))
(let ((anon1129_Else_correct  (=> (and (= (MapType0Select Heap@348 n@6 parent) null) (= Heap@350 Heap@348)) (and (=> (= (ControlFlow 0 1065) 1062) anon1130_Then_correct) (=> (= (ControlFlow 0 1065) 1063) anon1130_Else_correct)))))
(let ((anon1129_Then_correct  (=> (not (= (MapType0Select Heap@348 n@6 parent) null)) (=> (and (= Heap@349 (MapType0Store Heap@348 null (|udParentValid#sm| n@6) (MapType1Store (MapType0Select Heap@348 null (|udParentValid#sm| n@6)) (MapType0Select Heap@348 n@6 parent) right (bool_2_U true)))) (= Heap@350 Heap@349)) (and (=> (= (ControlFlow 0 1064) 1062) anon1130_Then_correct) (=> (= (ControlFlow 0 1064) 1063) anon1130_Else_correct))))))
(let ((anon1128_Else_correct  (=> (and (= (MapType0Select Heap@346 n@6 parent) null) (= Heap@348 Heap@346)) (and (=> (= (ControlFlow 0 1067) 1064) anon1129_Then_correct) (=> (= (ControlFlow 0 1067) 1065) anon1129_Else_correct)))))
(let ((anon1128_Then_correct  (=> (not (= (MapType0Select Heap@346 n@6 parent) null)) (=> (and (= Heap@347 (MapType0Store Heap@346 null (|udParentValid#sm| n@6) (MapType1Store (MapType0Select Heap@346 null (|udParentValid#sm| n@6)) (MapType0Select Heap@346 n@6 parent) left (bool_2_U true)))) (= Heap@348 Heap@347)) (and (=> (= (ControlFlow 0 1066) 1064) anon1129_Then_correct) (=> (= (ControlFlow 0 1066) 1065) anon1129_Else_correct))))))
(let ((anon1127_Else_correct  (=> (and (= (MapType0Select Heap@344 n@6 parent) null) (= Heap@346 Heap@344)) (and (=> (= (ControlFlow 0 1069) 1066) anon1128_Then_correct) (=> (= (ControlFlow 0 1069) 1067) anon1128_Else_correct)))))
(let ((anon1127_Then_correct  (=> (not (= (MapType0Select Heap@344 n@6 parent) null)) (=> (and (= Heap@345 (MapType0Store Heap@344 null (|udParentValid#sm| n@6) (MapType1Store (MapType0Select Heap@344 null (|udParentValid#sm| n@6)) (MapType0Select Heap@344 n@6 parent) leftDown (bool_2_U true)))) (= Heap@346 Heap@345)) (and (=> (= (ControlFlow 0 1068) 1066) anon1128_Then_correct) (=> (= (ControlFlow 0 1068) 1067) anon1128_Else_correct))))))
(let ((anon1126_Else_correct  (=> (and (= (MapType0Select Heap@342 n@6 parent) null) (= Heap@344 Heap@342)) (and (=> (= (ControlFlow 0 1071) 1068) anon1127_Then_correct) (=> (= (ControlFlow 0 1071) 1069) anon1127_Else_correct)))))
(let ((anon1126_Then_correct  (=> (and (and (not (= (MapType0Select Heap@342 n@6 parent) null)) (forall ((o_32 T@U) (f_36 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_36))))
(let ((A@@24 (FieldTypeInv0 (type f_36))))
 (=> (and (and (= (type o_32) RefType) (= (type f_36) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@342 null (|udParentValid#sm| n@6)) o_32 f_36)) (U_2_bool (MapType1Select (MapType0Select Heap@342 null (|udValid#sm| (MapType0Select Heap@342 n@6 parent))) o_32 f_36)))) (U_2_bool (MapType1Select newPMask@76 o_32 f_36)))))
 :qid |stdinbpl.2914:53|
 :skolemid |105|
 :pattern ( (MapType1Select newPMask@76 o_32 f_36))
))) (and (= Heap@343 (MapType0Store Heap@342 null (|udParentValid#sm| n@6) newPMask@76)) (= Heap@344 Heap@343))) (and (=> (= (ControlFlow 0 1070) 1068) anon1127_Then_correct) (=> (= (ControlFlow 0 1070) 1069) anon1127_Else_correct)))))
(let ((anon262_correct  (=> (and (= Heap@341 (MapType0Store Heap@340 null (|udParentValid#sm| n@6) (MapType1Store (MapType0Select Heap@340 null (|udParentValid#sm| n@6)) n@6 parent (bool_2_U true)))) (= Heap@342 (MapType0Store Heap@341 null (|udParentValid#sm| n@6) (MapType1Store (MapType0Select Heap@341 null (|udParentValid#sm| n@6)) n@6 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 1072) 1070) anon1126_Then_correct) (=> (= (ControlFlow 0 1072) 1071) anon1126_Else_correct)))))
(let ((anon1125_Else_correct  (=> (HasDirectPerm Mask@273 null (udParentValid n@6)) (=> (and (= Heap@340 Heap@337) (= (ControlFlow 0 1074) 1072)) anon262_correct))))
(let ((anon1125_Then_correct  (=> (not (HasDirectPerm Mask@273 null (udParentValid n@6))) (=> (and (and (= Heap@338 (MapType0Store Heap@337 null (|udParentValid#sm| n@6) ZeroPMask)) (= Heap@339 (MapType0Store Heap@338 null (udParentValid n@6) freshVersion@14))) (and (= Heap@340 Heap@339) (= (ControlFlow 0 1073) 1072))) anon262_correct))))
(let ((anon260_correct  (=> (= Mask@273 (MapType1Store Mask@272 null (udParentValid n@6) (real_2_U (+ (U_2_real (MapType1Select Mask@272 null (udParentValid n@6))) FullPerm)))) (=> (and (and (state Heap@337 Mask@273) (state Heap@337 Mask@273)) (and (|udParentValid#trigger| Heap@337 (udParentValid n@6)) (= (MapType0Select Heap@337 null (udParentValid n@6)) (CombineFrames (FrameFragment (MapType0Select Heap@337 n@6 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@337 n@6 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) (MapType0Select Heap@337 null (udValid (MapType0Select Heap@337 n@6 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) (FrameFragment (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) (FrameFragment (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) (FrameFragment (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) (FrameFragment (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@337 n@6 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@337 n@6 parent) null) EmptyFrame EmptyFrame))))))))))))))) (and (=> (= (ControlFlow 0 1075) 1073) anon1125_Then_correct) (=> (= (ControlFlow 0 1075) 1074) anon1125_Else_correct))))))
(let ((anon1124_Else_correct  (=> (and (not (= (MapType0Select Heap@337 n@6 parent) null)) (= (ControlFlow 0 1078) 1075)) anon260_correct)))
(let ((anon1124_Then_correct  (=> (= (MapType0Select Heap@337 n@6 parent) null) (and (=> (= (ControlFlow 0 1076) (- 0 1077)) (= (MapType0Select Heap@337 n@6 root) n@6)) (=> (= (MapType0Select Heap@337 n@6 root) n@6) (=> (= (ControlFlow 0 1076) 1075) anon260_correct))))))
(let ((anon1123_Else_correct  (=> (= (MapType0Select Heap@337 n@6 parent) null) (and (=> (= (ControlFlow 0 1081) 1076) anon1124_Then_correct) (=> (= (ControlFlow 0 1081) 1078) anon1124_Else_correct)))))
(let ((anon1123_Then_correct  (=> (not (= (MapType0Select Heap@337 n@6 parent) null)) (and (=> (= (ControlFlow 0 1079) (- 0 1080)) (= (MapType0Select Heap@337 n@6 root) (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) root))) (=> (= (MapType0Select Heap@337 n@6 root) (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) root)) (and (=> (= (ControlFlow 0 1079) 1076) anon1124_Then_correct) (=> (= (ControlFlow 0 1079) 1078) anon1124_Else_correct)))))))
(let ((anon255_correct  (=> (and (= Mask@271 (MapType1Store Mask@270 (MapType0Select Heap@337 n@6 parent) root (real_2_U (- (U_2_real (MapType1Select Mask@270 (MapType0Select Heap@337 n@6 parent) root)) perm@160)))) (= Mask@272 Mask@271)) (and (=> (= (ControlFlow 0 1083) 1079) anon1123_Then_correct) (=> (= (ControlFlow 0 1083) 1081) anon1123_Else_correct)))))
(let ((anon1122_Else_correct  (=> (and (= perm@160 NoPerm) (= (ControlFlow 0 1086) 1083)) anon255_correct)))
(let ((anon1122_Then_correct  (=> (not (= perm@160 NoPerm)) (and (=> (= (ControlFlow 0 1084) (- 0 1085)) (<= perm@160 (U_2_real (MapType1Select Mask@270 (MapType0Select Heap@337 n@6 parent) root)))) (=> (<= perm@160 (U_2_real (MapType1Select Mask@270 (MapType0Select Heap@337 n@6 parent) root))) (=> (= (ControlFlow 0 1084) 1083) anon255_correct))))))
(let ((anon1121_Then_correct  (=> (and (not (= (MapType0Select Heap@337 n@6 parent) null)) (= perm@160 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1087) (- 0 1088)) (>= perm@160 NoPerm)) (=> (>= perm@160 NoPerm) (and (=> (= (ControlFlow 0 1087) 1084) anon1122_Then_correct) (=> (= (ControlFlow 0 1087) 1086) anon1122_Else_correct)))))))
(let ((anon1121_Else_correct  (=> (and (= (MapType0Select Heap@337 n@6 parent) null) (= Mask@272 Mask@270)) (and (=> (= (ControlFlow 0 1082) 1079) anon1123_Then_correct) (=> (= (ControlFlow 0 1082) 1081) anon1123_Else_correct)))))
(let ((anon1120_Else_correct  (=> (= (MapType0Select Heap@337 n@6 parent) null) (and (=> (= (ControlFlow 0 1091) 1087) anon1121_Then_correct) (=> (= (ControlFlow 0 1091) 1082) anon1121_Else_correct)))))
(let ((anon1120_Then_correct  (=> (not (= (MapType0Select Heap@337 n@6 parent) null)) (and (=> (= (ControlFlow 0 1089) (- 0 1090)) (=  (not (U_2_bool (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) leftDown))) (= (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) right) n@6))) (=> (=  (not (U_2_bool (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) leftDown))) (= (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) right) n@6)) (and (=> (= (ControlFlow 0 1089) 1087) anon1121_Then_correct) (=> (= (ControlFlow 0 1089) 1082) anon1121_Else_correct)))))))
(let ((anon249_correct  (=> (and (= Mask@269 (MapType1Store Mask@268 (MapType0Select Heap@337 n@6 parent) right (real_2_U (- (U_2_real (MapType1Select Mask@268 (MapType0Select Heap@337 n@6 parent) right)) perm@159)))) (= Mask@270 Mask@269)) (and (=> (= (ControlFlow 0 1093) 1089) anon1120_Then_correct) (=> (= (ControlFlow 0 1093) 1091) anon1120_Else_correct)))))
(let ((anon1119_Else_correct  (=> (and (= perm@159 NoPerm) (= (ControlFlow 0 1096) 1093)) anon249_correct)))
(let ((anon1119_Then_correct  (=> (not (= perm@159 NoPerm)) (and (=> (= (ControlFlow 0 1094) (- 0 1095)) (<= perm@159 (U_2_real (MapType1Select Mask@268 (MapType0Select Heap@337 n@6 parent) right)))) (=> (<= perm@159 (U_2_real (MapType1Select Mask@268 (MapType0Select Heap@337 n@6 parent) right))) (=> (= (ControlFlow 0 1094) 1093) anon249_correct))))))
(let ((anon1118_Then_correct  (=> (and (not (= (MapType0Select Heap@337 n@6 parent) null)) (= perm@159 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1097) (- 0 1098)) (>= perm@159 NoPerm)) (=> (>= perm@159 NoPerm) (and (=> (= (ControlFlow 0 1097) 1094) anon1119_Then_correct) (=> (= (ControlFlow 0 1097) 1096) anon1119_Else_correct)))))))
(let ((anon1118_Else_correct  (=> (and (= (MapType0Select Heap@337 n@6 parent) null) (= Mask@270 Mask@268)) (and (=> (= (ControlFlow 0 1092) 1089) anon1120_Then_correct) (=> (= (ControlFlow 0 1092) 1091) anon1120_Else_correct)))))
(let ((anon1117_Else_correct  (=> (= (MapType0Select Heap@337 n@6 parent) null) (and (=> (= (ControlFlow 0 1101) 1097) anon1118_Then_correct) (=> (= (ControlFlow 0 1101) 1092) anon1118_Else_correct)))))
(let ((anon1117_Then_correct  (=> (not (= (MapType0Select Heap@337 n@6 parent) null)) (and (=> (= (ControlFlow 0 1099) (- 0 1100)) (= (U_2_bool (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) leftDown)) (= (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) left) n@6))) (=> (= (U_2_bool (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) leftDown)) (= (MapType0Select Heap@337 (MapType0Select Heap@337 n@6 parent) left) n@6)) (and (=> (= (ControlFlow 0 1099) 1097) anon1118_Then_correct) (=> (= (ControlFlow 0 1099) 1092) anon1118_Else_correct)))))))
(let ((anon243_correct  (=> (and (= Mask@267 (MapType1Store Mask@266 (MapType0Select Heap@337 n@6 parent) left (real_2_U (- (U_2_real (MapType1Select Mask@266 (MapType0Select Heap@337 n@6 parent) left)) perm@158)))) (= Mask@268 Mask@267)) (and (=> (= (ControlFlow 0 1103) 1099) anon1117_Then_correct) (=> (= (ControlFlow 0 1103) 1101) anon1117_Else_correct)))))
(let ((anon1116_Else_correct  (=> (and (= perm@158 NoPerm) (= (ControlFlow 0 1106) 1103)) anon243_correct)))
(let ((anon1116_Then_correct  (=> (not (= perm@158 NoPerm)) (and (=> (= (ControlFlow 0 1104) (- 0 1105)) (<= perm@158 (U_2_real (MapType1Select Mask@266 (MapType0Select Heap@337 n@6 parent) left)))) (=> (<= perm@158 (U_2_real (MapType1Select Mask@266 (MapType0Select Heap@337 n@6 parent) left))) (=> (= (ControlFlow 0 1104) 1103) anon243_correct))))))
(let ((anon1115_Then_correct  (=> (and (not (= (MapType0Select Heap@337 n@6 parent) null)) (= perm@158 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1107) (- 0 1108)) (>= perm@158 NoPerm)) (=> (>= perm@158 NoPerm) (and (=> (= (ControlFlow 0 1107) 1104) anon1116_Then_correct) (=> (= (ControlFlow 0 1107) 1106) anon1116_Else_correct)))))))
(let ((anon1115_Else_correct  (=> (and (= (MapType0Select Heap@337 n@6 parent) null) (= Mask@268 Mask@266)) (and (=> (= (ControlFlow 0 1102) 1099) anon1117_Then_correct) (=> (= (ControlFlow 0 1102) 1101) anon1117_Else_correct)))))
(let ((anon239_correct  (=> (and (= Mask@265 (MapType1Store Mask@264 (MapType0Select Heap@337 n@6 parent) leftDown (real_2_U (- (U_2_real (MapType1Select Mask@264 (MapType0Select Heap@337 n@6 parent) leftDown)) perm@157)))) (= Mask@266 Mask@265)) (and (=> (= (ControlFlow 0 1110) 1107) anon1115_Then_correct) (=> (= (ControlFlow 0 1110) 1102) anon1115_Else_correct)))))
(let ((anon1114_Else_correct  (=> (and (= perm@157 NoPerm) (= (ControlFlow 0 1113) 1110)) anon239_correct)))
(let ((anon1114_Then_correct  (=> (not (= perm@157 NoPerm)) (and (=> (= (ControlFlow 0 1111) (- 0 1112)) (<= perm@157 (U_2_real (MapType1Select Mask@264 (MapType0Select Heap@337 n@6 parent) leftDown)))) (=> (<= perm@157 (U_2_real (MapType1Select Mask@264 (MapType0Select Heap@337 n@6 parent) leftDown))) (=> (= (ControlFlow 0 1111) 1110) anon239_correct))))))
(let ((anon1113_Then_correct  (=> (and (not (= (MapType0Select Heap@337 n@6 parent) null)) (= perm@157 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1114) (- 0 1115)) (>= perm@157 NoPerm)) (=> (>= perm@157 NoPerm) (and (=> (= (ControlFlow 0 1114) 1111) anon1114_Then_correct) (=> (= (ControlFlow 0 1114) 1113) anon1114_Else_correct)))))))
(let ((anon1113_Else_correct  (=> (and (= (MapType0Select Heap@337 n@6 parent) null) (= Mask@266 Mask@264)) (and (=> (= (ControlFlow 0 1109) 1107) anon1115_Then_correct) (=> (= (ControlFlow 0 1109) 1102) anon1115_Else_correct)))))
(let ((anon235_correct  (=> (= Mask@263 (MapType1Store Mask@262 null (udValid (MapType0Select Heap@337 n@6 parent)) (real_2_U (- (U_2_real (MapType1Select Mask@262 null (udValid (MapType0Select Heap@337 n@6 parent)))) FullPerm)))) (=> (and (InsidePredicate (udParentValid n@6) (MapType0Select Heap@337 null (udParentValid n@6)) (udValid (MapType0Select Heap@337 n@6 parent)) (MapType0Select Heap@337 null (udValid (MapType0Select Heap@337 n@6 parent)))) (= Mask@264 Mask@263)) (and (=> (= (ControlFlow 0 1117) 1114) anon1113_Then_correct) (=> (= (ControlFlow 0 1117) 1109) anon1113_Else_correct))))))
(let ((anon1112_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1120) 1117)) anon235_correct)))
(let ((anon1112_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1118) (- 0 1119)) (<= FullPerm (U_2_real (MapType1Select Mask@262 null (udValid (MapType0Select Heap@337 n@6 parent)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@262 null (udValid (MapType0Select Heap@337 n@6 parent))))) (=> (= (ControlFlow 0 1118) 1117) anon235_correct))))))
(let ((anon1111_Then_correct  (=> (not (= (MapType0Select Heap@337 n@6 parent) null)) (and (=> (= (ControlFlow 0 1121) 1118) anon1112_Then_correct) (=> (= (ControlFlow 0 1121) 1120) anon1112_Else_correct)))))
(let ((anon1111_Else_correct  (=> (and (= (MapType0Select Heap@337 n@6 parent) null) (= Mask@264 Mask@262)) (and (=> (= (ControlFlow 0 1116) 1114) anon1113_Then_correct) (=> (= (ControlFlow 0 1116) 1109) anon1113_Else_correct)))))
(let ((anon232_correct  (=> (= Mask@262 (MapType1Store Mask@261 n@6 root (real_2_U (- (U_2_real (MapType1Select Mask@261 n@6 root)) perm@156)))) (and (=> (= (ControlFlow 0 1122) 1121) anon1111_Then_correct) (=> (= (ControlFlow 0 1122) 1116) anon1111_Else_correct)))))
(let ((anon1110_Else_correct  (=> (and (= perm@156 NoPerm) (= (ControlFlow 0 1125) 1122)) anon232_correct)))
(let ((anon1110_Then_correct  (=> (not (= perm@156 NoPerm)) (and (=> (= (ControlFlow 0 1123) (- 0 1124)) (<= perm@156 (U_2_real (MapType1Select Mask@261 n@6 root)))) (=> (<= perm@156 (U_2_real (MapType1Select Mask@261 n@6 root))) (=> (= (ControlFlow 0 1123) 1122) anon232_correct))))))
(let ((anon230_correct  (=> (and (= Mask@261 (MapType1Store Mask@260 n@6 parent (real_2_U (- (U_2_real (MapType1Select Mask@260 n@6 parent)) perm@155)))) (= perm@156 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 1126) (- 0 1127)) (>= perm@156 NoPerm)) (=> (>= perm@156 NoPerm) (and (=> (= (ControlFlow 0 1126) 1123) anon1110_Then_correct) (=> (= (ControlFlow 0 1126) 1125) anon1110_Else_correct)))))))
(let ((anon1109_Else_correct  (=> (and (= perm@155 NoPerm) (= (ControlFlow 0 1130) 1126)) anon230_correct)))
(let ((anon1109_Then_correct  (=> (not (= perm@155 NoPerm)) (and (=> (= (ControlFlow 0 1128) (- 0 1129)) (<= perm@155 (U_2_real (MapType1Select Mask@260 n@6 parent)))) (=> (<= perm@155 (U_2_real (MapType1Select Mask@260 n@6 parent))) (=> (= (ControlFlow 0 1128) 1126) anon230_correct))))))
(let ((anon228_correct  (=> (forall ((o_31 T@U) (f_35 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_35))))
(let ((A@@25 (FieldTypeInv0 (type f_35))))
 (=> (and (and (= (type o_31) RefType) (= (type f_35) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Heap@336 null (|udValid#sm| n@1)) o_31 f_35)) (U_2_bool (MapType1Select (MapType0Select Heap@336 null (|udParentValid#sm| n@1)) o_31 f_35)))) (U_2_bool (MapType1Select newPMask@75 o_31 f_35)))))
 :qid |stdinbpl.2805:51|
 :skolemid |104|
 :pattern ( (MapType1Select newPMask@75 o_31 f_35))
)) (=> (and (and (= Heap@337 (MapType0Store Heap@336 null (|udValid#sm| n@1) newPMask@75)) (state Heap@337 Mask@260)) (and (state Heap@337 Mask@260) (= perm@155 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 1131) (- 0 1132)) (>= perm@155 NoPerm)) (=> (>= perm@155 NoPerm) (and (=> (= (ControlFlow 0 1131) 1128) anon1109_Then_correct) (=> (= (ControlFlow 0 1131) 1130) anon1109_Else_correct))))))))
(let ((anon1108_Else_correct  (=> (not (=> (U_2_bool (MapType0Select Heap@334 n@1 leftDown)) false)) (=> (and (= Heap@336 Heap@334) (= (ControlFlow 0 1134) 1131)) anon228_correct))))
(let ((anon1108_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@334 n@1 leftDown)) false) (=> (and (and (forall ((o_30 T@U) (f_34 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_34))))
(let ((A@@26 (FieldTypeInv0 (type f_34))))
 (=> (and (and (= (type o_30) RefType) (= (type f_34) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select Heap@334 null (|udValid#sm| n@1)) o_30 f_34)) (U_2_bool (MapType1Select (MapType0Select Heap@334 null (|rightOpen#sm| n@1)) o_30 f_34)))) (U_2_bool (MapType1Select newPMask@74 o_30 f_34)))))
 :qid |stdinbpl.2798:53|
 :skolemid |103|
 :pattern ( (MapType1Select newPMask@74 o_30 f_34))
)) (= Heap@335 (MapType0Store Heap@334 null (|udValid#sm| n@1) newPMask@74))) (and (= Heap@336 Heap@335) (= (ControlFlow 0 1133) 1131))) anon228_correct))))
(let ((anon1107_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@332 n@1 leftDown)) false)) (= Heap@334 Heap@332)) (and (=> (= (ControlFlow 0 1136) 1133) anon1108_Then_correct) (=> (= (ControlFlow 0 1136) 1134) anon1108_Else_correct)))))
(let ((anon1107_Then_correct  (=> (and (and (=> (U_2_bool (MapType0Select Heap@332 n@1 leftDown)) false) (forall ((o_29 T@U) (f_33 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_33))))
(let ((A@@27 (FieldTypeInv0 (type f_33))))
 (=> (and (and (= (type o_29) RefType) (= (type f_33) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Heap@332 null (|udValid#sm| n@1)) o_29 f_33)) (U_2_bool (MapType1Select (MapType0Select Heap@332 null (|leftValid#sm| n@1)) o_29 f_33)))) (U_2_bool (MapType1Select newPMask@73 o_29 f_33)))))
 :qid |stdinbpl.2790:53|
 :skolemid |102|
 :pattern ( (MapType1Select newPMask@73 o_29 f_33))
))) (and (= Heap@333 (MapType0Store Heap@332 null (|udValid#sm| n@1) newPMask@73)) (= Heap@334 Heap@333))) (and (=> (= (ControlFlow 0 1135) 1133) anon1108_Then_correct) (=> (= (ControlFlow 0 1135) 1134) anon1108_Else_correct)))))
(let ((anon1106_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@330 n@1 leftDown))) (= Heap@332 Heap@330)) (and (=> (= (ControlFlow 0 1138) 1135) anon1107_Then_correct) (=> (= (ControlFlow 0 1138) 1136) anon1107_Else_correct)))))
(let ((anon1106_Then_correct  (=> (and (and (U_2_bool (MapType0Select Heap@330 n@1 leftDown)) (forall ((o_28 T@U) (f_32 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_32))))
(let ((A@@28 (FieldTypeInv0 (type f_32))))
 (=> (and (and (= (type o_28) RefType) (= (type f_32) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@330 null (|udValid#sm| n@1)) o_28 f_32)) (U_2_bool (MapType1Select (MapType0Select Heap@330 null (|leftOpen#sm| n@1)) o_28 f_32)))) (U_2_bool (MapType1Select newPMask@72 o_28 f_32)))))
 :qid |stdinbpl.2782:53|
 :skolemid |101|
 :pattern ( (MapType1Select newPMask@72 o_28 f_32))
))) (and (= Heap@331 (MapType0Store Heap@330 null (|udValid#sm| n@1) newPMask@72)) (= Heap@332 Heap@331))) (and (=> (= (ControlFlow 0 1137) 1135) anon1107_Then_correct) (=> (= (ControlFlow 0 1137) 1136) anon1107_Else_correct)))))
(let ((anon1105_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@328 n@1 leftDown))) (= Heap@330 Heap@328)) (and (=> (= (ControlFlow 0 1140) 1137) anon1106_Then_correct) (=> (= (ControlFlow 0 1140) 1138) anon1106_Else_correct)))))
(let ((anon1105_Then_correct  (=> (and (and (U_2_bool (MapType0Select Heap@328 n@1 leftDown)) (forall ((o_27 T@U) (f_31 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_31))))
(let ((A@@29 (FieldTypeInv0 (type f_31))))
 (=> (and (and (= (type o_27) RefType) (= (type f_31) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select Heap@328 null (|udValid#sm| n@1)) o_27 f_31)) (U_2_bool (MapType1Select (MapType0Select Heap@328 null (|rightValid#sm| n@1)) o_27 f_31)))) (U_2_bool (MapType1Select newPMask@71 o_27 f_31)))))
 :qid |stdinbpl.2774:53|
 :skolemid |100|
 :pattern ( (MapType1Select newPMask@71 o_27 f_31))
))) (and (= Heap@329 (MapType0Store Heap@328 null (|udValid#sm| n@1) newPMask@71)) (= Heap@330 Heap@329))) (and (=> (= (ControlFlow 0 1139) 1137) anon1106_Then_correct) (=> (= (ControlFlow 0 1139) 1138) anon1106_Else_correct)))))
(let ((anon220_correct  (=> (= Heap@324 (MapType0Store Heap@323 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@323 null (|udValid#sm| n@1)) n@1 key (bool_2_U true)))) (=> (and (and (= Heap@325 (MapType0Store Heap@324 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@324 null (|udValid#sm| n@1)) n@1 leftDown (bool_2_U true)))) (= Heap@326 (MapType0Store Heap@325 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@325 null (|udValid#sm| n@1)) n@1 left (bool_2_U true))))) (and (= Heap@327 (MapType0Store Heap@326 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@326 null (|udValid#sm| n@1)) n@1 right (bool_2_U true)))) (= Heap@328 (MapType0Store Heap@327 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@327 null (|udValid#sm| n@1)) n@1 root (bool_2_U true)))))) (and (=> (= (ControlFlow 0 1141) 1139) anon1105_Then_correct) (=> (= (ControlFlow 0 1141) 1140) anon1105_Else_correct))))))
(let ((anon1104_Else_correct  (=> (HasDirectPerm Mask@260 null (udValid n@1)) (=> (and (= Heap@323 Heap@320) (= (ControlFlow 0 1143) 1141)) anon220_correct))))
(let ((anon1104_Then_correct  (=> (not (HasDirectPerm Mask@260 null (udValid n@1))) (=> (and (and (= Heap@321 (MapType0Store Heap@320 null (|udValid#sm| n@1) ZeroPMask)) (= Heap@322 (MapType0Store Heap@321 null (udValid n@1) freshVersion@13))) (and (= Heap@323 Heap@322) (= (ControlFlow 0 1142) 1141))) anon220_correct))))
(let ((anon218_correct  (=> (= Mask@259 (MapType1Store Mask@258 null (udParentValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@258 null (udParentValid n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@320 null (udValid n@1)) (udParentValid n@1) (MapType0Select Heap@320 null (udParentValid n@1))) (= Mask@260 (MapType1Store Mask@259 null (udValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@259 null (udValid n@1))) FullPerm))))) (=> (and (and (state Heap@320 Mask@260) (state Heap@320 Mask@260)) (and (|udValid#trigger| Heap@320 (udValid n@1)) (= (MapType0Select Heap@320 null (udValid n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@320 n@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@320 n@1 leftDown)) (CombineFrames (FrameFragment (MapType0Select Heap@320 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@320 n@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@320 n@1 root)) (CombineFrames (FrameFragment (ite (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) (MapType0Select Heap@320 null (rightValid n@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) (MapType0Select Heap@320 null (leftOpen n@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite  (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) false) (MapType0Select Heap@320 null (leftValid n@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite  (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) false) (MapType0Select Heap@320 null (rightOpen n@1)) EmptyFrame)) (MapType0Select Heap@320 null (udParentValid n@1)))))))))))))) (and (=> (= (ControlFlow 0 1144) 1142) anon1104_Then_correct) (=> (= (ControlFlow 0 1144) 1143) anon1104_Else_correct)))))))
(let ((anon1103_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1147) 1144)) anon218_correct)))
(let ((anon1103_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1145) (- 0 1146)) (<= FullPerm (U_2_real (MapType1Select Mask@258 null (udParentValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@258 null (udParentValid n@1)))) (=> (= (ControlFlow 0 1145) 1144) anon218_correct))))))
(let ((anon215_correct  (=> (= Mask@257 (MapType1Store Mask@256 null (rightOpen n@1) (real_2_U (- (U_2_real (MapType1Select Mask@256 null (rightOpen n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@320 null (udValid n@1)) (rightOpen n@1) (MapType0Select Heap@320 null (rightOpen n@1))) (= Mask@258 Mask@257)) (and (=> (= (ControlFlow 0 1149) 1145) anon1103_Then_correct) (=> (= (ControlFlow 0 1149) 1147) anon1103_Else_correct))))))
(let ((anon1102_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1152) 1149)) anon215_correct)))
(let ((anon1102_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1150) (- 0 1151)) (<= FullPerm (U_2_real (MapType1Select Mask@256 null (rightOpen n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@256 null (rightOpen n@1)))) (=> (= (ControlFlow 0 1150) 1149) anon215_correct))))))
(let ((anon1101_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) false) (and (=> (= (ControlFlow 0 1153) 1150) anon1102_Then_correct) (=> (= (ControlFlow 0 1153) 1152) anon1102_Else_correct)))))
(let ((anon1101_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) false)) (= Mask@258 Mask@256)) (and (=> (= (ControlFlow 0 1148) 1145) anon1103_Then_correct) (=> (= (ControlFlow 0 1148) 1147) anon1103_Else_correct)))))
(let ((anon211_correct  (=> (= Mask@255 (MapType1Store Mask@254 null (leftValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@254 null (leftValid n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@320 null (udValid n@1)) (leftValid n@1) (MapType0Select Heap@320 null (leftValid n@1))) (= Mask@256 Mask@255)) (and (=> (= (ControlFlow 0 1155) 1153) anon1101_Then_correct) (=> (= (ControlFlow 0 1155) 1148) anon1101_Else_correct))))))
(let ((anon1100_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1158) 1155)) anon211_correct)))
(let ((anon1100_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1156) (- 0 1157)) (<= FullPerm (U_2_real (MapType1Select Mask@254 null (leftValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@254 null (leftValid n@1)))) (=> (= (ControlFlow 0 1156) 1155) anon211_correct))))))
(let ((anon1099_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) false) (and (=> (= (ControlFlow 0 1159) 1156) anon1100_Then_correct) (=> (= (ControlFlow 0 1159) 1158) anon1100_Else_correct)))))
(let ((anon1099_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) false)) (= Mask@256 Mask@254)) (and (=> (= (ControlFlow 0 1154) 1153) anon1101_Then_correct) (=> (= (ControlFlow 0 1154) 1148) anon1101_Else_correct)))))
(let ((anon207_correct  (=> (= Mask@253 (MapType1Store Mask@252 null (leftOpen n@1) (real_2_U (- (U_2_real (MapType1Select Mask@252 null (leftOpen n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@320 null (udValid n@1)) (leftOpen n@1) (MapType0Select Heap@320 null (leftOpen n@1))) (= Mask@254 Mask@253)) (and (=> (= (ControlFlow 0 1161) 1159) anon1099_Then_correct) (=> (= (ControlFlow 0 1161) 1154) anon1099_Else_correct))))))
(let ((anon1098_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1164) 1161)) anon207_correct)))
(let ((anon1098_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1162) (- 0 1163)) (<= FullPerm (U_2_real (MapType1Select Mask@252 null (leftOpen n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@252 null (leftOpen n@1)))) (=> (= (ControlFlow 0 1162) 1161) anon207_correct))))))
(let ((anon1097_Then_correct  (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) (and (=> (= (ControlFlow 0 1165) 1162) anon1098_Then_correct) (=> (= (ControlFlow 0 1165) 1164) anon1098_Else_correct)))))
(let ((anon1097_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@320 n@1 leftDown))) (= Mask@254 Mask@252)) (and (=> (= (ControlFlow 0 1160) 1159) anon1099_Then_correct) (=> (= (ControlFlow 0 1160) 1154) anon1099_Else_correct)))))
(let ((anon203_correct  (=> (= Mask@251 (MapType1Store Mask@250 null (rightValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@250 null (rightValid n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@320 null (udValid n@1)) (rightValid n@1) (MapType0Select Heap@320 null (rightValid n@1))) (= Mask@252 Mask@251)) (and (=> (= (ControlFlow 0 1167) 1165) anon1097_Then_correct) (=> (= (ControlFlow 0 1167) 1160) anon1097_Else_correct))))))
(let ((anon1096_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1170) 1167)) anon203_correct)))
(let ((anon1096_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1168) (- 0 1169)) (<= FullPerm (U_2_real (MapType1Select Mask@250 null (rightValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@250 null (rightValid n@1)))) (=> (= (ControlFlow 0 1168) 1167) anon203_correct))))))
(let ((anon1095_Then_correct  (=> (U_2_bool (MapType0Select Heap@320 n@1 leftDown)) (and (=> (= (ControlFlow 0 1171) 1168) anon1096_Then_correct) (=> (= (ControlFlow 0 1171) 1170) anon1096_Else_correct)))))
(let ((anon1095_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@320 n@1 leftDown))) (= Mask@252 Mask@250)) (and (=> (= (ControlFlow 0 1166) 1165) anon1097_Then_correct) (=> (= (ControlFlow 0 1166) 1160) anon1097_Else_correct)))))
(let ((anon200_correct  (=> (= Mask@250 (MapType1Store Mask@249 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@249 n@1 root)) perm@154)))) (and (=> (= (ControlFlow 0 1172) 1171) anon1095_Then_correct) (=> (= (ControlFlow 0 1172) 1166) anon1095_Else_correct)))))
(let ((anon1094_Else_correct  (=> (and (= perm@154 NoPerm) (= (ControlFlow 0 1175) 1172)) anon200_correct)))
(let ((anon1094_Then_correct  (=> (not (= perm@154 NoPerm)) (and (=> (= (ControlFlow 0 1173) (- 0 1174)) (<= perm@154 (U_2_real (MapType1Select Mask@249 n@1 root)))) (=> (<= perm@154 (U_2_real (MapType1Select Mask@249 n@1 root))) (=> (= (ControlFlow 0 1173) 1172) anon200_correct))))))
(let ((anon198_correct  (=> (and (= Mask@249 (MapType1Store Mask@248 n@1 right (real_2_U (- (U_2_real (MapType1Select Mask@248 n@1 right)) perm@153)))) (= perm@154 (/ (to_real 1) (to_real 5)))) (and (=> (= (ControlFlow 0 1176) (- 0 1177)) (>= perm@154 NoPerm)) (=> (>= perm@154 NoPerm) (and (=> (= (ControlFlow 0 1176) 1173) anon1094_Then_correct) (=> (= (ControlFlow 0 1176) 1175) anon1094_Else_correct)))))))
(let ((anon1093_Else_correct  (=> (and (= perm@153 NoPerm) (= (ControlFlow 0 1180) 1176)) anon198_correct)))
(let ((anon1093_Then_correct  (=> (not (= perm@153 NoPerm)) (and (=> (= (ControlFlow 0 1178) (- 0 1179)) (<= perm@153 (U_2_real (MapType1Select Mask@248 n@1 right)))) (=> (<= perm@153 (U_2_real (MapType1Select Mask@248 n@1 right))) (=> (= (ControlFlow 0 1178) 1176) anon198_correct))))))
(let ((anon196_correct  (=> (and (= Mask@248 (MapType1Store Mask@247 n@1 left (real_2_U (- (U_2_real (MapType1Select Mask@247 n@1 left)) perm@152)))) (= perm@153 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 1181) (- 0 1182)) (>= perm@153 NoPerm)) (=> (>= perm@153 NoPerm) (and (=> (= (ControlFlow 0 1181) 1178) anon1093_Then_correct) (=> (= (ControlFlow 0 1181) 1180) anon1093_Else_correct)))))))
(let ((anon1092_Else_correct  (=> (and (= perm@152 NoPerm) (= (ControlFlow 0 1185) 1181)) anon196_correct)))
(let ((anon1092_Then_correct  (=> (not (= perm@152 NoPerm)) (and (=> (= (ControlFlow 0 1183) (- 0 1184)) (<= perm@152 (U_2_real (MapType1Select Mask@247 n@1 left)))) (=> (<= perm@152 (U_2_real (MapType1Select Mask@247 n@1 left))) (=> (= (ControlFlow 0 1183) 1181) anon196_correct))))))
(let ((anon194_correct  (=> (and (= Mask@247 (MapType1Store Mask@246 n@1 leftDown (real_2_U (- (U_2_real (MapType1Select Mask@246 n@1 leftDown)) perm@151)))) (= perm@152 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 1186) (- 0 1187)) (>= perm@152 NoPerm)) (=> (>= perm@152 NoPerm) (and (=> (= (ControlFlow 0 1186) 1183) anon1092_Then_correct) (=> (= (ControlFlow 0 1186) 1185) anon1092_Else_correct)))))))
(let ((anon1091_Else_correct  (=> (and (= perm@151 NoPerm) (= (ControlFlow 0 1190) 1186)) anon194_correct)))
(let ((anon1091_Then_correct  (=> (not (= perm@151 NoPerm)) (and (=> (= (ControlFlow 0 1188) (- 0 1189)) (<= perm@151 (U_2_real (MapType1Select Mask@246 n@1 leftDown)))) (=> (<= perm@151 (U_2_real (MapType1Select Mask@246 n@1 leftDown))) (=> (= (ControlFlow 0 1188) 1186) anon194_correct))))))
(let ((anon192_correct  (=> (and (= Mask@246 (MapType1Store Mask@245 n@1 key (real_2_U (- (U_2_real (MapType1Select Mask@245 n@1 key)) FullPerm)))) (= perm@151 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1191) (- 0 1192)) (>= perm@151 NoPerm)) (=> (>= perm@151 NoPerm) (and (=> (= (ControlFlow 0 1191) 1188) anon1091_Then_correct) (=> (= (ControlFlow 0 1191) 1190) anon1091_Else_correct)))))))
(let ((anon1090_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1195) 1191)) anon192_correct)))
(let ((anon1090_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1193) (- 0 1194)) (<= FullPerm (U_2_real (MapType1Select Mask@245 n@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@245 n@1 key))) (=> (= (ControlFlow 0 1193) 1191) anon192_correct))))))
(let ((anon190_correct  (=> (and (state Heap@320 Mask@245) (state Heap@320 Mask@245)) (and (=> (= (ControlFlow 0 1196) 1193) anon1090_Then_correct) (=> (= (ControlFlow 0 1196) 1195) anon1090_Else_correct)))))
(let ((anon1089_Else_correct  (=> (= (MapType0Select Heap@318 n@1 left) null) (=> (and (= Heap@320 Heap@318) (= (ControlFlow 0 1198) 1196)) anon190_correct))))
(let ((anon1089_Then_correct  (=> (and (and (not (= (MapType0Select Heap@318 n@1 left) null)) (= Heap@319 (MapType0Store Heap@318 null (|leftOpen#sm| n@1) (MapType1Store (MapType0Select Heap@318 null (|leftOpen#sm| n@1)) (MapType0Select Heap@318 n@1 left) parent (bool_2_U true))))) (and (= Heap@320 Heap@319) (= (ControlFlow 0 1197) 1196))) anon190_correct)))
(let ((anon188_correct  (=> (and (= Heap@317 (MapType0Store Heap@316 null (|leftOpen#sm| n@1) (MapType1Store (MapType0Select Heap@316 null (|leftOpen#sm| n@1)) n@1 left (bool_2_U true)))) (= Heap@318 (MapType0Store Heap@317 null (|leftOpen#sm| n@1) (MapType1Store (MapType0Select Heap@317 null (|leftOpen#sm| n@1)) n@1 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 1199) 1197) anon1089_Then_correct) (=> (= (ControlFlow 0 1199) 1198) anon1089_Else_correct)))))
(let ((anon1088_Else_correct  (=> (HasDirectPerm Mask@245 null (leftOpen n@1)) (=> (and (= Heap@316 Heap@313) (= (ControlFlow 0 1201) 1199)) anon188_correct))))
(let ((anon1088_Then_correct  (=> (not (HasDirectPerm Mask@245 null (leftOpen n@1))) (=> (and (and (= Heap@314 (MapType0Store Heap@313 null (|leftOpen#sm| n@1) ZeroPMask)) (= Heap@315 (MapType0Store Heap@314 null (leftOpen n@1) freshVersion@12))) (and (= Heap@316 Heap@315) (= (ControlFlow 0 1200) 1199))) anon188_correct))))
(let ((anon186_correct  (=> (= Mask@245 (MapType1Store Mask@244 null (leftOpen n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@244 null (leftOpen n@1))) FullPerm)))) (=> (and (and (state Heap@313 Mask@245) (state Heap@313 Mask@245)) (and (|leftOpen#trigger| Heap@313 (leftOpen n@1)) (= (MapType0Select Heap@313 null (leftOpen n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@313 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@313 n@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@313 n@1 left) null)) (FrameFragment (MapType0Select Heap@313 (MapType0Select Heap@313 n@1 left) parent)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@313 n@1 left) null)) EmptyFrame EmptyFrame)))))))) (and (=> (= (ControlFlow 0 1202) 1200) anon1088_Then_correct) (=> (= (ControlFlow 0 1202) 1201) anon1088_Else_correct))))))
(let ((anon1087_Else_correct  (=> (and (= (MapType0Select Heap@313 n@1 left) null) (= (ControlFlow 0 1205) 1202)) anon186_correct)))
(let ((anon1087_Then_correct  (=> (not (= (MapType0Select Heap@313 n@1 left) null)) (and (=> (= (ControlFlow 0 1203) (- 0 1204)) (= (MapType0Select Heap@313 (MapType0Select Heap@313 n@1 left) parent) n@1)) (=> (= (MapType0Select Heap@313 (MapType0Select Heap@313 n@1 left) parent) n@1) (=> (= (ControlFlow 0 1203) 1202) anon186_correct))))))
(let ((anon183_correct  (=> (and (= Mask@243 (MapType1Store Mask@242 (MapType0Select Heap@313 n@1 left) parent (real_2_U (- (U_2_real (MapType1Select Mask@242 (MapType0Select Heap@313 n@1 left) parent)) perm@150)))) (= Mask@244 Mask@243)) (and (=> (= (ControlFlow 0 1207) 1203) anon1087_Then_correct) (=> (= (ControlFlow 0 1207) 1205) anon1087_Else_correct)))))
(let ((anon1086_Else_correct  (=> (and (= perm@150 NoPerm) (= (ControlFlow 0 1210) 1207)) anon183_correct)))
(let ((anon1086_Then_correct  (=> (not (= perm@150 NoPerm)) (and (=> (= (ControlFlow 0 1208) (- 0 1209)) (<= perm@150 (U_2_real (MapType1Select Mask@242 (MapType0Select Heap@313 n@1 left) parent)))) (=> (<= perm@150 (U_2_real (MapType1Select Mask@242 (MapType0Select Heap@313 n@1 left) parent))) (=> (= (ControlFlow 0 1208) 1207) anon183_correct))))))
(let ((anon1085_Then_correct  (=> (and (not (= (MapType0Select Heap@313 n@1 left) null)) (= perm@150 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1211) (- 0 1212)) (>= perm@150 NoPerm)) (=> (>= perm@150 NoPerm) (and (=> (= (ControlFlow 0 1211) 1208) anon1086_Then_correct) (=> (= (ControlFlow 0 1211) 1210) anon1086_Else_correct)))))))
(let ((anon1085_Else_correct  (=> (and (= (MapType0Select Heap@313 n@1 left) null) (= Mask@244 Mask@242)) (and (=> (= (ControlFlow 0 1206) 1203) anon1087_Then_correct) (=> (= (ControlFlow 0 1206) 1205) anon1087_Else_correct)))))
(let ((anon180_correct  (=> (= Mask@242 (MapType1Store Mask@241 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@241 n@1 root)) perm@149)))) (and (=> (= (ControlFlow 0 1213) 1211) anon1085_Then_correct) (=> (= (ControlFlow 0 1213) 1206) anon1085_Else_correct)))))
(let ((anon1084_Else_correct  (=> (and (= perm@149 NoPerm) (= (ControlFlow 0 1216) 1213)) anon180_correct)))
(let ((anon1084_Then_correct  (=> (not (= perm@149 NoPerm)) (and (=> (= (ControlFlow 0 1214) (- 0 1215)) (<= perm@149 (U_2_real (MapType1Select Mask@241 n@1 root)))) (=> (<= perm@149 (U_2_real (MapType1Select Mask@241 n@1 root))) (=> (= (ControlFlow 0 1214) 1213) anon180_correct))))))
(let ((anon178_correct  (=> (and (= Mask@241 (MapType1Store Mask@240 n@1 left (real_2_U (- (U_2_real (MapType1Select Mask@240 n@1 left)) perm@148)))) (= perm@149 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 1217) (- 0 1218)) (>= perm@149 NoPerm)) (=> (>= perm@149 NoPerm) (and (=> (= (ControlFlow 0 1217) 1214) anon1084_Then_correct) (=> (= (ControlFlow 0 1217) 1216) anon1084_Else_correct)))))))
(let ((anon1083_Else_correct  (=> (and (= perm@148 NoPerm) (= (ControlFlow 0 1221) 1217)) anon178_correct)))
(let ((anon1083_Then_correct  (=> (not (= perm@148 NoPerm)) (and (=> (= (ControlFlow 0 1219) (- 0 1220)) (<= perm@148 (U_2_real (MapType1Select Mask@240 n@1 left)))) (=> (<= perm@148 (U_2_real (MapType1Select Mask@240 n@1 left))) (=> (= (ControlFlow 0 1219) 1217) anon178_correct))))))
(let ((anon176_correct  (=> (and (state Heap@312 Mask@240) (state Heap@312 Mask@240)) (and (=> (= (ControlFlow 0 1222) (- 0 1225)) (HasDirectPerm Mask@240 n@1 left)) (=> (HasDirectPerm Mask@240 n@1 left) (=> (and (= n@6 (MapType0Select Heap@312 n@1 left)) (state Heap@312 Mask@240)) (and (=> (= (ControlFlow 0 1222) (- 0 1224)) (= FullPerm (U_2_real (MapType1Select Mask@240 n@1 leftDown)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@240 n@1 leftDown))) (=> (= Heap@313 (MapType0Store Heap@312 n@1 leftDown (bool_2_U true))) (=> (and (state Heap@313 Mask@240) (= perm@148 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 1222) (- 0 1223)) (>= perm@148 NoPerm)) (=> (>= perm@148 NoPerm) (and (=> (= (ControlFlow 0 1222) 1219) anon1083_Then_correct) (=> (= (ControlFlow 0 1222) 1221) anon1083_Else_correct))))))))))))))
(let ((anon1082_Else_correct  (=> (and (= (MapType0Select Heap@312 n@1 left) null) (= (ControlFlow 0 1227) 1222)) anon176_correct)))
(let ((anon1082_Then_correct  (=> (not (= (MapType0Select Heap@312 n@1 left) null)) (=> (and (= (MapType0Select Heap@312 (MapType0Select Heap@312 n@1 left) root) (MapType0Select Heap@312 n@1 root)) (= (ControlFlow 0 1226) 1222)) anon176_correct))))
(let ((anon1081_Else_correct  (=> (and (= (MapType0Select Heap@312 n@1 left) null) (= Mask@240 Mask@238)) (and (=> (= (ControlFlow 0 1230) 1226) anon1082_Then_correct) (=> (= (ControlFlow 0 1230) 1227) anon1082_Else_correct)))))
(let ((anon1081_Then_correct  (=> (and (not (= (MapType0Select Heap@312 n@1 left) null)) (= perm@147 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1228) (- 0 1229)) (>= perm@147 NoPerm)) (=> (>= perm@147 NoPerm) (=> (and (and (=> (> perm@147 NoPerm) (not (= (MapType0Select Heap@312 n@1 left) null))) (= Mask@239 (MapType1Store Mask@238 (MapType0Select Heap@312 n@1 left) root (real_2_U (+ (U_2_real (MapType1Select Mask@238 (MapType0Select Heap@312 n@1 left) root)) perm@147))))) (and (state Heap@312 Mask@239) (= Mask@240 Mask@239))) (and (=> (= (ControlFlow 0 1228) 1226) anon1082_Then_correct) (=> (= (ControlFlow 0 1228) 1227) anon1082_Else_correct))))))))
(let ((anon1080_Else_correct  (=> (= (MapType0Select Heap@312 n@1 left) null) (and (=> (= (ControlFlow 0 1232) 1228) anon1081_Then_correct) (=> (= (ControlFlow 0 1232) 1230) anon1081_Else_correct)))))
(let ((anon1080_Then_correct  (=> (and (not (= (MapType0Select Heap@312 n@1 left) null)) (= (MapType0Select Heap@312 (MapType0Select Heap@312 n@1 left) parent) n@1)) (and (=> (= (ControlFlow 0 1231) 1228) anon1081_Then_correct) (=> (= (ControlFlow 0 1231) 1230) anon1081_Else_correct)))))
(let ((anon1079_Else_correct  (=> (and (= (MapType0Select Heap@312 n@1 left) null) (= Mask@238 Mask@236)) (and (=> (= (ControlFlow 0 1234) 1231) anon1080_Then_correct) (=> (= (ControlFlow 0 1234) 1232) anon1080_Else_correct)))))
(let ((anon1079_Then_correct  (=> (not (= (MapType0Select Heap@312 n@1 left) null)) (=> (and (and (not (= (MapType0Select Heap@312 n@1 left) null)) (= Mask@237 (MapType1Store Mask@236 (MapType0Select Heap@312 n@1 left) parent (real_2_U (+ (U_2_real (MapType1Select Mask@236 (MapType0Select Heap@312 n@1 left) parent)) FullPerm))))) (and (state Heap@312 Mask@237) (= Mask@238 Mask@237))) (and (=> (= (ControlFlow 0 1233) 1231) anon1080_Then_correct) (=> (= (ControlFlow 0 1233) 1232) anon1080_Else_correct))))))
(let ((anon1078_Else_correct  (=> (and (= (MapType0Select Heap@312 n@1 left) null) (= Mask@236 Mask@234)) (and (=> (= (ControlFlow 0 1236) 1233) anon1079_Then_correct) (=> (= (ControlFlow 0 1236) 1234) anon1079_Else_correct)))))
(let ((anon1078_Then_correct  (=> (not (= (MapType0Select Heap@312 n@1 left) null)) (=> (and (and (= Mask@235 (MapType1Store Mask@234 null (valid (MapType0Select Heap@312 n@1 left)) (real_2_U (+ (U_2_real (MapType1Select Mask@234 null (valid (MapType0Select Heap@312 n@1 left)))) FullPerm)))) (InsidePredicate (leftValid n@1) (MapType0Select Heap@312 null (leftValid n@1)) (valid (MapType0Select Heap@312 n@1 left)) (MapType0Select Heap@312 null (valid (MapType0Select Heap@312 n@1 left))))) (and (state Heap@312 Mask@235) (= Mask@236 Mask@235))) (and (=> (= (ControlFlow 0 1235) 1233) anon1079_Then_correct) (=> (= (ControlFlow 0 1235) 1234) anon1079_Else_correct))))))
(let ((anon166_correct  (=> (= perm@145 (/ (to_real 1) (to_real 4))) (and (=> (= (ControlFlow 0 1237) (- 0 1239)) (>= perm@145 NoPerm)) (=> (>= perm@145 NoPerm) (=> (and (and (=> (> perm@145 NoPerm) (not (= n@1 null))) (= Mask@233 (MapType1Store Mask@232 n@1 left (real_2_U (+ (U_2_real (MapType1Select Mask@232 n@1 left)) perm@145))))) (and (state Heap@312 Mask@233) (= perm@146 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 1237) (- 0 1238)) (>= perm@146 NoPerm)) (=> (>= perm@146 NoPerm) (=> (=> (> perm@146 NoPerm) (not (= n@1 null))) (=> (and (= Mask@234 (MapType1Store Mask@233 n@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@233 n@1 root)) perm@146)))) (state Heap@312 Mask@234)) (and (=> (= (ControlFlow 0 1237) 1235) anon1078_Then_correct) (=> (= (ControlFlow 0 1237) 1236) anon1078_Else_correct))))))))))))
(let ((anon1077_Else_correct  (=> (HasDirectPerm Mask@232 null (leftValid n@1)) (=> (and (= Heap@312 Heap@253) (= (ControlFlow 0 1241) 1237)) anon166_correct))))
(let ((anon1077_Then_correct  (=> (and (and (not (HasDirectPerm Mask@232 null (leftValid n@1))) (= Heap@311 (MapType0Store Heap@253 null (leftValid n@1) newVersion@9))) (and (= Heap@312 Heap@311) (= (ControlFlow 0 1240) 1237))) anon166_correct)))
(let ((anon164_correct  (=> (= Mask@232 (MapType1Store Mask@178 null (leftValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@178 null (leftValid n@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1242) 1240) anon1077_Then_correct) (=> (= (ControlFlow 0 1242) 1241) anon1077_Else_correct)))))
(let ((anon1076_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1245) 1242)) anon164_correct)))
(let ((anon1076_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1243) (- 0 1244)) (<= FullPerm (U_2_real (MapType1Select Mask@178 null (leftValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 null (leftValid n@1)))) (=> (= (ControlFlow 0 1243) 1242) anon164_correct))))))
(let ((anon1065_Else_correct  (=> (and (and (not (= (MapType0Select Heap@253 n@1 left) null)) (state Heap@253 Mask@178)) (and (|leftValid#trigger| Heap@253 (leftValid n@1)) (= (MapType0Select Heap@253 null (leftValid n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 left) null)) (MapType0Select Heap@253 null (valid (MapType0Select Heap@253 n@1 left))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 left) null)) (FrameFragment (MapType0Select Heap@253 (MapType0Select Heap@253 n@1 left) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 left) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 left) null)) (FrameFragment (MapType0Select Heap@253 (MapType0Select Heap@253 n@1 left) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 left) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 1246) 1243) anon1076_Then_correct) (=> (= (ControlFlow 0 1246) 1245) anon1076_Else_correct)))))
(let ((anon1064_Then_correct  (=> (< (U_2_int (MapType0Select Heap@253 n@1 key)) k) (and (=> (= (ControlFlow 0 1290) (- 0 1291)) (HasDirectPerm Mask@178 n@1 left)) (=> (HasDirectPerm Mask@178 n@1 left) (and (=> (= (ControlFlow 0 1290) 1289) anon1065_Then_correct) (=> (= (ControlFlow 0 1290) 1246) anon1065_Else_correct)))))))
(let ((anon407_correct  (=> (state Heap@310 Mask@231) (=> (and (and (= Heap@368 Heap@310) (= Mask@285 Mask@231)) (and (= n@8 n@5) (= (ControlFlow 0 828) 827))) anon408_correct))))
(let ((anon295_correct  (=> (and (and (forall ((o_33 T@U) (f_37 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_37))))
(let ((A@@30 (FieldTypeInv0 (type f_37))))
 (=> (and (and (= (type o_33) RefType) (= (type f_37) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select Heap@306 null (|valid#sm| n@1)) o_33 f_37)) (U_2_bool (MapType1Select (MapType0Select Heap@306 null (|validRest#sm| n@1)) o_33 f_37)))) (U_2_bool (MapType1Select newPMask@68 o_33 f_37)))))
 :qid |stdinbpl.3051:51|
 :skolemid |106|
 :pattern ( (MapType1Select newPMask@68 o_33 f_37))
)) (= Heap@307 (MapType0Store Heap@306 null (|valid#sm| n@1) newPMask@68))) (and (forall ((o_34 T@U) (f_38 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_38))))
(let ((A@@31 (FieldTypeInv0 (type f_38))))
 (=> (and (and (= (type o_34) RefType) (= (type f_38) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select Heap@307 null (|valid#sm| n@1)) o_34 f_38)) (U_2_bool (MapType1Select (MapType0Select Heap@307 null (|leftValid#sm| n@1)) o_34 f_38)))) (U_2_bool (MapType1Select newPMask@69 o_34 f_38)))))
 :qid |stdinbpl.3057:51|
 :skolemid |107|
 :pattern ( (MapType1Select newPMask@69 o_34 f_38))
)) (= Heap@308 (MapType0Store Heap@307 null (|valid#sm| n@1) newPMask@69)))) (=> (and (and (and (forall ((o_35 T@U) (f_39 T@U) ) (! (let ((B@@31 (FieldTypeInv1 (type f_39))))
(let ((A@@32 (FieldTypeInv0 (type f_39))))
 (=> (and (and (= (type o_35) RefType) (= (type f_39) (FieldType A@@32 B@@31))) (or (U_2_bool (MapType1Select (MapType0Select Heap@308 null (|valid#sm| n@1)) o_35 f_39)) (U_2_bool (MapType1Select (MapType0Select Heap@308 null (|rightValid#sm| n@1)) o_35 f_39)))) (U_2_bool (MapType1Select newPMask@70 o_35 f_39)))))
 :qid |stdinbpl.3063:51|
 :skolemid |108|
 :pattern ( (MapType1Select newPMask@70 o_35 f_39))
)) (= Heap@309 (MapType0Store Heap@308 null (|valid#sm| n@1) newPMask@70))) (and (state Heap@309 Mask@230) (state Heap@309 Mask@230))) (and (and (= Heap@310 Heap@309) (= n@5 n@1)) (and (= Mask@231 Mask@230) (= (ControlFlow 0 1015) 828)))) anon407_correct))))
(let ((anon1141_Else_correct  (=> (HasDirectPerm Mask@230 null (valid n@1)) (=> (and (= Heap@306 Heap@303) (= (ControlFlow 0 1017) 1015)) anon295_correct))))
(let ((anon1141_Then_correct  (=> (not (HasDirectPerm Mask@230 null (valid n@1))) (=> (and (and (= Heap@304 (MapType0Store Heap@303 null (|valid#sm| n@1) ZeroPMask)) (= Heap@305 (MapType0Store Heap@304 null (valid n@1) freshVersion@11))) (and (= Heap@306 Heap@305) (= (ControlFlow 0 1016) 1015))) anon295_correct))))
(let ((anon293_correct  (=> (= Mask@229 (MapType1Store Mask@228 null (rightValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@228 null (rightValid n@1))) FullPerm)))) (=> (and (InsidePredicate (valid n@1) (MapType0Select Heap@303 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@303 null (rightValid n@1))) (= Mask@230 (MapType1Store Mask@229 null (valid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@229 null (valid n@1))) FullPerm))))) (=> (and (and (state Heap@303 Mask@230) (state Heap@303 Mask@230)) (and (|valid#trigger| Heap@303 (valid n@1)) (= (MapType0Select Heap@303 null (valid n@1)) (CombineFrames (MapType0Select Heap@303 null (validRest n@1)) (CombineFrames (MapType0Select Heap@303 null (leftValid n@1)) (MapType0Select Heap@303 null (rightValid n@1))))))) (and (=> (= (ControlFlow 0 1018) 1016) anon1141_Then_correct) (=> (= (ControlFlow 0 1018) 1017) anon1141_Else_correct)))))))
(let ((anon1140_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1021) 1018)) anon293_correct)))
(let ((anon1140_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1019) (- 0 1020)) (<= FullPerm (U_2_real (MapType1Select Mask@228 null (rightValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@228 null (rightValid n@1)))) (=> (= (ControlFlow 0 1019) 1018) anon293_correct))))))
(let ((anon291_correct  (=> (and (= Mask@228 (MapType1Store Mask@227 null (leftValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@227 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@303 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@303 null (leftValid n@1)))) (and (=> (= (ControlFlow 0 1022) 1019) anon1140_Then_correct) (=> (= (ControlFlow 0 1022) 1021) anon1140_Else_correct)))))
(let ((anon1139_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1025) 1022)) anon291_correct)))
(let ((anon1139_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1023) (- 0 1024)) (<= FullPerm (U_2_real (MapType1Select Mask@227 null (leftValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@227 null (leftValid n@1)))) (=> (= (ControlFlow 0 1023) 1022) anon291_correct))))))
(let ((anon289_correct  (=> (and (= Mask@227 (MapType1Store Mask@226 null (validRest n@1) (real_2_U (- (U_2_real (MapType1Select Mask@226 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@303 null (valid n@1)) (validRest n@1) (MapType0Select Heap@303 null (validRest n@1)))) (and (=> (= (ControlFlow 0 1026) 1023) anon1139_Then_correct) (=> (= (ControlFlow 0 1026) 1025) anon1139_Else_correct)))))
(let ((anon1138_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1029) 1026)) anon289_correct)))
(let ((anon1138_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1027) (- 0 1028)) (<= FullPerm (U_2_real (MapType1Select Mask@226 null (validRest n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@226 null (validRest n@1)))) (=> (= (ControlFlow 0 1027) 1026) anon289_correct))))))
(let ((anon287_correct  (=> (= Heap@299 (MapType0Store Heap@298 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@298 null (|validRest#sm| n@1)) n@1 key (bool_2_U true)))) (=> (and (= Heap@300 (MapType0Store Heap@299 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@299 null (|validRest#sm| n@1)) n@1 root (bool_2_U true)))) (= Heap@301 (MapType0Store Heap@300 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@300 null (|validRest#sm| n@1)) n@1 left (bool_2_U true))))) (=> (and (and (= Heap@302 (MapType0Store Heap@301 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@301 null (|validRest#sm| n@1)) n@1 right (bool_2_U true)))) (= Heap@303 (MapType0Store Heap@302 null (|validRest#sm| n@1) (MapType1Store (MapType0Select Heap@302 null (|validRest#sm| n@1)) n@1 leftDown (bool_2_U true))))) (and (state Heap@303 Mask@226) (state Heap@303 Mask@226))) (and (=> (= (ControlFlow 0 1030) 1027) anon1138_Then_correct) (=> (= (ControlFlow 0 1030) 1029) anon1138_Else_correct)))))))
(let ((anon1137_Else_correct  (=> (HasDirectPerm Mask@226 null (validRest n@1)) (=> (and (= Heap@298 Heap@253) (= (ControlFlow 0 1032) 1030)) anon287_correct))))
(let ((anon1137_Then_correct  (=> (not (HasDirectPerm Mask@226 null (validRest n@1))) (=> (and (and (= Heap@296 (MapType0Store Heap@253 null (|validRest#sm| n@1) ZeroPMask)) (= Heap@297 (MapType0Store Heap@296 null (validRest n@1) freshVersion@10))) (and (= Heap@298 Heap@297) (= (ControlFlow 0 1031) 1030))) anon287_correct))))
(let ((anon285_correct  (=> (= Mask@225 (MapType1Store Mask@224 n@1 leftDown (real_2_U (- (U_2_real (MapType1Select Mask@224 n@1 leftDown)) FullPerm)))) (and (=> (= (ControlFlow 0 1033) (- 0 1034)) (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null))) (=> (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null)) (=> (= Mask@226 (MapType1Store Mask@225 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@225 null (validRest n@1))) FullPerm)))) (=> (and (and (state Heap@253 Mask@226) (state Heap@253 Mask@226)) (and (|validRest#trigger| Heap@253 (validRest n@1)) (= (MapType0Select Heap@253 null (validRest n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 root)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 right)) (FrameFragment (MapType0Select Heap@253 n@1 leftDown))))))))) (and (=> (= (ControlFlow 0 1033) 1031) anon1137_Then_correct) (=> (= (ControlFlow 0 1033) 1032) anon1137_Else_correct)))))))))
(let ((anon1136_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1037) 1033)) anon285_correct)))
(let ((anon1136_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1035) (- 0 1036)) (<= FullPerm (U_2_real (MapType1Select Mask@224 n@1 leftDown)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@224 n@1 leftDown))) (=> (= (ControlFlow 0 1035) 1033) anon285_correct))))))
(let ((anon283_correct  (=> (= Mask@224 (MapType1Store Mask@223 n@1 right (real_2_U (- (U_2_real (MapType1Select Mask@223 n@1 right)) perm@144)))) (and (=> (= (ControlFlow 0 1038) 1035) anon1136_Then_correct) (=> (= (ControlFlow 0 1038) 1037) anon1136_Else_correct)))))
(let ((anon1135_Else_correct  (=> (and (= perm@144 NoPerm) (= (ControlFlow 0 1041) 1038)) anon283_correct)))
(let ((anon1135_Then_correct  (=> (not (= perm@144 NoPerm)) (and (=> (= (ControlFlow 0 1039) (- 0 1040)) (<= perm@144 (U_2_real (MapType1Select Mask@223 n@1 right)))) (=> (<= perm@144 (U_2_real (MapType1Select Mask@223 n@1 right))) (=> (= (ControlFlow 0 1039) 1038) anon283_correct))))))
(let ((anon281_correct  (=> (and (= Mask@223 (MapType1Store Mask@222 n@1 left (real_2_U (- (U_2_real (MapType1Select Mask@222 n@1 left)) perm@143)))) (= perm@144 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 1042) (- 0 1043)) (>= perm@144 NoPerm)) (=> (>= perm@144 NoPerm) (and (=> (= (ControlFlow 0 1042) 1039) anon1135_Then_correct) (=> (= (ControlFlow 0 1042) 1041) anon1135_Else_correct)))))))
(let ((anon1134_Else_correct  (=> (and (= perm@143 NoPerm) (= (ControlFlow 0 1046) 1042)) anon281_correct)))
(let ((anon1134_Then_correct  (=> (not (= perm@143 NoPerm)) (and (=> (= (ControlFlow 0 1044) (- 0 1045)) (<= perm@143 (U_2_real (MapType1Select Mask@222 n@1 left)))) (=> (<= perm@143 (U_2_real (MapType1Select Mask@222 n@1 left))) (=> (= (ControlFlow 0 1044) 1042) anon281_correct))))))
(let ((anon279_correct  (=> (and (= Mask@222 (MapType1Store Mask@221 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@221 n@1 root)) perm@142)))) (= perm@143 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 1047) (- 0 1048)) (>= perm@143 NoPerm)) (=> (>= perm@143 NoPerm) (and (=> (= (ControlFlow 0 1047) 1044) anon1134_Then_correct) (=> (= (ControlFlow 0 1047) 1046) anon1134_Else_correct)))))))
(let ((anon1133_Else_correct  (=> (and (= perm@142 NoPerm) (= (ControlFlow 0 1051) 1047)) anon279_correct)))
(let ((anon1133_Then_correct  (=> (not (= perm@142 NoPerm)) (and (=> (= (ControlFlow 0 1049) (- 0 1050)) (<= perm@142 (U_2_real (MapType1Select Mask@221 n@1 root)))) (=> (<= perm@142 (U_2_real (MapType1Select Mask@221 n@1 root))) (=> (= (ControlFlow 0 1049) 1047) anon279_correct))))))
(let ((anon277_correct  (=> (and (= Mask@221 (MapType1Store Mask@178 n@1 key (real_2_U (- (U_2_real (MapType1Select Mask@178 n@1 key)) FullPerm)))) (= perm@142 (/ (to_real 3) (to_real 10)))) (and (=> (= (ControlFlow 0 1052) (- 0 1053)) (>= perm@142 NoPerm)) (=> (>= perm@142 NoPerm) (and (=> (= (ControlFlow 0 1052) 1049) anon1133_Then_correct) (=> (= (ControlFlow 0 1052) 1051) anon1133_Else_correct)))))))
(let ((anon1132_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1056) 1052)) anon277_correct)))
(let ((anon1132_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1054) (- 0 1055)) (<= FullPerm (U_2_real (MapType1Select Mask@178 n@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 n@1 key))) (=> (= (ControlFlow 0 1054) 1052) anon277_correct))))))
(let ((anon1131_Then_correct  (=> (and (= (MapType0Select Heap@253 n@1 right) null) (state Heap@253 Mask@178)) (and (=> (= (ControlFlow 0 1057) 1054) anon1132_Then_correct) (=> (= (ControlFlow 0 1057) 1056) anon1132_Else_correct)))))
(let ((anon406_correct  (=> (and (state Heap@295 Mask@220) (state Heap@295 Mask@220)) (=> (and (and (= Heap@310 Heap@295) (= n@5 n@4)) (and (= Mask@231 Mask@220) (= (ControlFlow 0 829) 828))) anon407_correct))))
(let ((anon1196_Else_correct  (=> (= (MapType0Select Heap@293 n@4 parent) null) (=> (and (= Heap@295 Heap@293) (= (ControlFlow 0 831) 829)) anon406_correct))))
(let ((anon1196_Then_correct  (=> (and (and (not (= (MapType0Select Heap@293 n@4 parent) null)) (= Heap@294 (MapType0Store Heap@293 null (|udParentValid#sm| n@4) (MapType1Store (MapType0Select Heap@293 null (|udParentValid#sm| n@4)) (MapType0Select Heap@293 n@4 parent) root (bool_2_U true))))) (and (= Heap@295 Heap@294) (= (ControlFlow 0 830) 829))) anon406_correct)))
(let ((anon1195_Else_correct  (=> (and (= (MapType0Select Heap@291 n@4 parent) null) (= Heap@293 Heap@291)) (and (=> (= (ControlFlow 0 833) 830) anon1196_Then_correct) (=> (= (ControlFlow 0 833) 831) anon1196_Else_correct)))))
(let ((anon1195_Then_correct  (=> (not (= (MapType0Select Heap@291 n@4 parent) null)) (=> (and (= Heap@292 (MapType0Store Heap@291 null (|udParentValid#sm| n@4) (MapType1Store (MapType0Select Heap@291 null (|udParentValid#sm| n@4)) (MapType0Select Heap@291 n@4 parent) right (bool_2_U true)))) (= Heap@293 Heap@292)) (and (=> (= (ControlFlow 0 832) 830) anon1196_Then_correct) (=> (= (ControlFlow 0 832) 831) anon1196_Else_correct))))))
(let ((anon1194_Else_correct  (=> (and (= (MapType0Select Heap@289 n@4 parent) null) (= Heap@291 Heap@289)) (and (=> (= (ControlFlow 0 835) 832) anon1195_Then_correct) (=> (= (ControlFlow 0 835) 833) anon1195_Else_correct)))))
(let ((anon1194_Then_correct  (=> (not (= (MapType0Select Heap@289 n@4 parent) null)) (=> (and (= Heap@290 (MapType0Store Heap@289 null (|udParentValid#sm| n@4) (MapType1Store (MapType0Select Heap@289 null (|udParentValid#sm| n@4)) (MapType0Select Heap@289 n@4 parent) left (bool_2_U true)))) (= Heap@291 Heap@290)) (and (=> (= (ControlFlow 0 834) 832) anon1195_Then_correct) (=> (= (ControlFlow 0 834) 833) anon1195_Else_correct))))))
(let ((anon1193_Else_correct  (=> (and (= (MapType0Select Heap@287 n@4 parent) null) (= Heap@289 Heap@287)) (and (=> (= (ControlFlow 0 837) 834) anon1194_Then_correct) (=> (= (ControlFlow 0 837) 835) anon1194_Else_correct)))))
(let ((anon1193_Then_correct  (=> (not (= (MapType0Select Heap@287 n@4 parent) null)) (=> (and (= Heap@288 (MapType0Store Heap@287 null (|udParentValid#sm| n@4) (MapType1Store (MapType0Select Heap@287 null (|udParentValid#sm| n@4)) (MapType0Select Heap@287 n@4 parent) leftDown (bool_2_U true)))) (= Heap@289 Heap@288)) (and (=> (= (ControlFlow 0 836) 834) anon1194_Then_correct) (=> (= (ControlFlow 0 836) 835) anon1194_Else_correct))))))
(let ((anon1192_Else_correct  (=> (and (= (MapType0Select Heap@285 n@4 parent) null) (= Heap@287 Heap@285)) (and (=> (= (ControlFlow 0 839) 836) anon1193_Then_correct) (=> (= (ControlFlow 0 839) 837) anon1193_Else_correct)))))
(let ((anon1192_Then_correct  (=> (and (and (not (= (MapType0Select Heap@285 n@4 parent) null)) (forall ((o_41 T@U) (f_45 T@U) ) (! (let ((B@@32 (FieldTypeInv1 (type f_45))))
(let ((A@@33 (FieldTypeInv0 (type f_45))))
 (=> (and (and (= (type o_41) RefType) (= (type f_45) (FieldType A@@33 B@@32))) (or (U_2_bool (MapType1Select (MapType0Select Heap@285 null (|udParentValid#sm| n@4)) o_41 f_45)) (U_2_bool (MapType1Select (MapType0Select Heap@285 null (|udValid#sm| (MapType0Select Heap@285 n@4 parent))) o_41 f_45)))) (U_2_bool (MapType1Select newPMask@67 o_41 f_45)))))
 :qid |stdinbpl.3454:53|
 :skolemid |114|
 :pattern ( (MapType1Select newPMask@67 o_41 f_45))
))) (and (= Heap@286 (MapType0Store Heap@285 null (|udParentValid#sm| n@4) newPMask@67)) (= Heap@287 Heap@286))) (and (=> (= (ControlFlow 0 838) 836) anon1193_Then_correct) (=> (= (ControlFlow 0 838) 837) anon1193_Else_correct)))))
(let ((anon396_correct  (=> (and (= Heap@284 (MapType0Store Heap@283 null (|udParentValid#sm| n@4) (MapType1Store (MapType0Select Heap@283 null (|udParentValid#sm| n@4)) n@4 parent (bool_2_U true)))) (= Heap@285 (MapType0Store Heap@284 null (|udParentValid#sm| n@4) (MapType1Store (MapType0Select Heap@284 null (|udParentValid#sm| n@4)) n@4 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 840) 838) anon1192_Then_correct) (=> (= (ControlFlow 0 840) 839) anon1192_Else_correct)))))
(let ((anon1191_Else_correct  (=> (HasDirectPerm Mask@220 null (udParentValid n@4)) (=> (and (= Heap@283 Heap@280) (= (ControlFlow 0 842) 840)) anon396_correct))))
(let ((anon1191_Then_correct  (=> (not (HasDirectPerm Mask@220 null (udParentValid n@4))) (=> (and (and (= Heap@281 (MapType0Store Heap@280 null (|udParentValid#sm| n@4) ZeroPMask)) (= Heap@282 (MapType0Store Heap@281 null (udParentValid n@4) freshVersion@9))) (and (= Heap@283 Heap@282) (= (ControlFlow 0 841) 840))) anon396_correct))))
(let ((anon394_correct  (=> (= Mask@220 (MapType1Store Mask@219 null (udParentValid n@4) (real_2_U (+ (U_2_real (MapType1Select Mask@219 null (udParentValid n@4))) FullPerm)))) (=> (and (and (state Heap@280 Mask@220) (state Heap@280 Mask@220)) (and (|udParentValid#trigger| Heap@280 (udParentValid n@4)) (= (MapType0Select Heap@280 null (udParentValid n@4)) (CombineFrames (FrameFragment (MapType0Select Heap@280 n@4 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@280 n@4 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) (MapType0Select Heap@280 null (udValid (MapType0Select Heap@280 n@4 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) (FrameFragment (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) (FrameFragment (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) (FrameFragment (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) (FrameFragment (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@280 n@4 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@280 n@4 parent) null) EmptyFrame EmptyFrame))))))))))))))) (and (=> (= (ControlFlow 0 843) 841) anon1191_Then_correct) (=> (= (ControlFlow 0 843) 842) anon1191_Else_correct))))))
(let ((anon1190_Else_correct  (=> (and (not (= (MapType0Select Heap@280 n@4 parent) null)) (= (ControlFlow 0 846) 843)) anon394_correct)))
(let ((anon1190_Then_correct  (=> (= (MapType0Select Heap@280 n@4 parent) null) (and (=> (= (ControlFlow 0 844) (- 0 845)) (= (MapType0Select Heap@280 n@4 root) n@4)) (=> (= (MapType0Select Heap@280 n@4 root) n@4) (=> (= (ControlFlow 0 844) 843) anon394_correct))))))
(let ((anon1189_Else_correct  (=> (= (MapType0Select Heap@280 n@4 parent) null) (and (=> (= (ControlFlow 0 849) 844) anon1190_Then_correct) (=> (= (ControlFlow 0 849) 846) anon1190_Else_correct)))))
(let ((anon1189_Then_correct  (=> (not (= (MapType0Select Heap@280 n@4 parent) null)) (and (=> (= (ControlFlow 0 847) (- 0 848)) (= (MapType0Select Heap@280 n@4 root) (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) root))) (=> (= (MapType0Select Heap@280 n@4 root) (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) root)) (and (=> (= (ControlFlow 0 847) 844) anon1190_Then_correct) (=> (= (ControlFlow 0 847) 846) anon1190_Else_correct)))))))
(let ((anon389_correct  (=> (and (= Mask@218 (MapType1Store Mask@217 (MapType0Select Heap@280 n@4 parent) root (real_2_U (- (U_2_real (MapType1Select Mask@217 (MapType0Select Heap@280 n@4 parent) root)) perm@141)))) (= Mask@219 Mask@218)) (and (=> (= (ControlFlow 0 851) 847) anon1189_Then_correct) (=> (= (ControlFlow 0 851) 849) anon1189_Else_correct)))))
(let ((anon1188_Else_correct  (=> (and (= perm@141 NoPerm) (= (ControlFlow 0 854) 851)) anon389_correct)))
(let ((anon1188_Then_correct  (=> (not (= perm@141 NoPerm)) (and (=> (= (ControlFlow 0 852) (- 0 853)) (<= perm@141 (U_2_real (MapType1Select Mask@217 (MapType0Select Heap@280 n@4 parent) root)))) (=> (<= perm@141 (U_2_real (MapType1Select Mask@217 (MapType0Select Heap@280 n@4 parent) root))) (=> (= (ControlFlow 0 852) 851) anon389_correct))))))
(let ((anon1187_Then_correct  (=> (and (not (= (MapType0Select Heap@280 n@4 parent) null)) (= perm@141 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 855) (- 0 856)) (>= perm@141 NoPerm)) (=> (>= perm@141 NoPerm) (and (=> (= (ControlFlow 0 855) 852) anon1188_Then_correct) (=> (= (ControlFlow 0 855) 854) anon1188_Else_correct)))))))
(let ((anon1187_Else_correct  (=> (and (= (MapType0Select Heap@280 n@4 parent) null) (= Mask@219 Mask@217)) (and (=> (= (ControlFlow 0 850) 847) anon1189_Then_correct) (=> (= (ControlFlow 0 850) 849) anon1189_Else_correct)))))
(let ((anon1186_Else_correct  (=> (= (MapType0Select Heap@280 n@4 parent) null) (and (=> (= (ControlFlow 0 859) 855) anon1187_Then_correct) (=> (= (ControlFlow 0 859) 850) anon1187_Else_correct)))))
(let ((anon1186_Then_correct  (=> (not (= (MapType0Select Heap@280 n@4 parent) null)) (and (=> (= (ControlFlow 0 857) (- 0 858)) (=  (not (U_2_bool (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) leftDown))) (= (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) right) n@4))) (=> (=  (not (U_2_bool (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) leftDown))) (= (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) right) n@4)) (and (=> (= (ControlFlow 0 857) 855) anon1187_Then_correct) (=> (= (ControlFlow 0 857) 850) anon1187_Else_correct)))))))
(let ((anon383_correct  (=> (and (= Mask@216 (MapType1Store Mask@215 (MapType0Select Heap@280 n@4 parent) right (real_2_U (- (U_2_real (MapType1Select Mask@215 (MapType0Select Heap@280 n@4 parent) right)) perm@140)))) (= Mask@217 Mask@216)) (and (=> (= (ControlFlow 0 861) 857) anon1186_Then_correct) (=> (= (ControlFlow 0 861) 859) anon1186_Else_correct)))))
(let ((anon1185_Else_correct  (=> (and (= perm@140 NoPerm) (= (ControlFlow 0 864) 861)) anon383_correct)))
(let ((anon1185_Then_correct  (=> (not (= perm@140 NoPerm)) (and (=> (= (ControlFlow 0 862) (- 0 863)) (<= perm@140 (U_2_real (MapType1Select Mask@215 (MapType0Select Heap@280 n@4 parent) right)))) (=> (<= perm@140 (U_2_real (MapType1Select Mask@215 (MapType0Select Heap@280 n@4 parent) right))) (=> (= (ControlFlow 0 862) 861) anon383_correct))))))
(let ((anon1184_Then_correct  (=> (and (not (= (MapType0Select Heap@280 n@4 parent) null)) (= perm@140 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 865) (- 0 866)) (>= perm@140 NoPerm)) (=> (>= perm@140 NoPerm) (and (=> (= (ControlFlow 0 865) 862) anon1185_Then_correct) (=> (= (ControlFlow 0 865) 864) anon1185_Else_correct)))))))
(let ((anon1184_Else_correct  (=> (and (= (MapType0Select Heap@280 n@4 parent) null) (= Mask@217 Mask@215)) (and (=> (= (ControlFlow 0 860) 857) anon1186_Then_correct) (=> (= (ControlFlow 0 860) 859) anon1186_Else_correct)))))
(let ((anon1183_Else_correct  (=> (= (MapType0Select Heap@280 n@4 parent) null) (and (=> (= (ControlFlow 0 869) 865) anon1184_Then_correct) (=> (= (ControlFlow 0 869) 860) anon1184_Else_correct)))))
(let ((anon1183_Then_correct  (=> (not (= (MapType0Select Heap@280 n@4 parent) null)) (and (=> (= (ControlFlow 0 867) (- 0 868)) (= (U_2_bool (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) leftDown)) (= (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) left) n@4))) (=> (= (U_2_bool (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) leftDown)) (= (MapType0Select Heap@280 (MapType0Select Heap@280 n@4 parent) left) n@4)) (and (=> (= (ControlFlow 0 867) 865) anon1184_Then_correct) (=> (= (ControlFlow 0 867) 860) anon1184_Else_correct)))))))
(let ((anon377_correct  (=> (and (= Mask@214 (MapType1Store Mask@213 (MapType0Select Heap@280 n@4 parent) left (real_2_U (- (U_2_real (MapType1Select Mask@213 (MapType0Select Heap@280 n@4 parent) left)) perm@139)))) (= Mask@215 Mask@214)) (and (=> (= (ControlFlow 0 871) 867) anon1183_Then_correct) (=> (= (ControlFlow 0 871) 869) anon1183_Else_correct)))))
(let ((anon1182_Else_correct  (=> (and (= perm@139 NoPerm) (= (ControlFlow 0 874) 871)) anon377_correct)))
(let ((anon1182_Then_correct  (=> (not (= perm@139 NoPerm)) (and (=> (= (ControlFlow 0 872) (- 0 873)) (<= perm@139 (U_2_real (MapType1Select Mask@213 (MapType0Select Heap@280 n@4 parent) left)))) (=> (<= perm@139 (U_2_real (MapType1Select Mask@213 (MapType0Select Heap@280 n@4 parent) left))) (=> (= (ControlFlow 0 872) 871) anon377_correct))))))
(let ((anon1181_Then_correct  (=> (and (not (= (MapType0Select Heap@280 n@4 parent) null)) (= perm@139 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 875) (- 0 876)) (>= perm@139 NoPerm)) (=> (>= perm@139 NoPerm) (and (=> (= (ControlFlow 0 875) 872) anon1182_Then_correct) (=> (= (ControlFlow 0 875) 874) anon1182_Else_correct)))))))
(let ((anon1181_Else_correct  (=> (and (= (MapType0Select Heap@280 n@4 parent) null) (= Mask@215 Mask@213)) (and (=> (= (ControlFlow 0 870) 867) anon1183_Then_correct) (=> (= (ControlFlow 0 870) 869) anon1183_Else_correct)))))
(let ((anon373_correct  (=> (and (= Mask@212 (MapType1Store Mask@211 (MapType0Select Heap@280 n@4 parent) leftDown (real_2_U (- (U_2_real (MapType1Select Mask@211 (MapType0Select Heap@280 n@4 parent) leftDown)) perm@138)))) (= Mask@213 Mask@212)) (and (=> (= (ControlFlow 0 878) 875) anon1181_Then_correct) (=> (= (ControlFlow 0 878) 870) anon1181_Else_correct)))))
(let ((anon1180_Else_correct  (=> (and (= perm@138 NoPerm) (= (ControlFlow 0 881) 878)) anon373_correct)))
(let ((anon1180_Then_correct  (=> (not (= perm@138 NoPerm)) (and (=> (= (ControlFlow 0 879) (- 0 880)) (<= perm@138 (U_2_real (MapType1Select Mask@211 (MapType0Select Heap@280 n@4 parent) leftDown)))) (=> (<= perm@138 (U_2_real (MapType1Select Mask@211 (MapType0Select Heap@280 n@4 parent) leftDown))) (=> (= (ControlFlow 0 879) 878) anon373_correct))))))
(let ((anon1179_Then_correct  (=> (and (not (= (MapType0Select Heap@280 n@4 parent) null)) (= perm@138 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 882) (- 0 883)) (>= perm@138 NoPerm)) (=> (>= perm@138 NoPerm) (and (=> (= (ControlFlow 0 882) 879) anon1180_Then_correct) (=> (= (ControlFlow 0 882) 881) anon1180_Else_correct)))))))
(let ((anon1179_Else_correct  (=> (and (= (MapType0Select Heap@280 n@4 parent) null) (= Mask@213 Mask@211)) (and (=> (= (ControlFlow 0 877) 875) anon1181_Then_correct) (=> (= (ControlFlow 0 877) 870) anon1181_Else_correct)))))
(let ((anon369_correct  (=> (= Mask@210 (MapType1Store Mask@209 null (udValid (MapType0Select Heap@280 n@4 parent)) (real_2_U (- (U_2_real (MapType1Select Mask@209 null (udValid (MapType0Select Heap@280 n@4 parent)))) FullPerm)))) (=> (and (InsidePredicate (udParentValid n@4) (MapType0Select Heap@280 null (udParentValid n@4)) (udValid (MapType0Select Heap@280 n@4 parent)) (MapType0Select Heap@280 null (udValid (MapType0Select Heap@280 n@4 parent)))) (= Mask@211 Mask@210)) (and (=> (= (ControlFlow 0 885) 882) anon1179_Then_correct) (=> (= (ControlFlow 0 885) 877) anon1179_Else_correct))))))
(let ((anon1178_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 888) 885)) anon369_correct)))
(let ((anon1178_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 886) (- 0 887)) (<= FullPerm (U_2_real (MapType1Select Mask@209 null (udValid (MapType0Select Heap@280 n@4 parent)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@209 null (udValid (MapType0Select Heap@280 n@4 parent))))) (=> (= (ControlFlow 0 886) 885) anon369_correct))))))
(let ((anon1177_Then_correct  (=> (not (= (MapType0Select Heap@280 n@4 parent) null)) (and (=> (= (ControlFlow 0 889) 886) anon1178_Then_correct) (=> (= (ControlFlow 0 889) 888) anon1178_Else_correct)))))
(let ((anon1177_Else_correct  (=> (and (= (MapType0Select Heap@280 n@4 parent) null) (= Mask@211 Mask@209)) (and (=> (= (ControlFlow 0 884) 882) anon1179_Then_correct) (=> (= (ControlFlow 0 884) 877) anon1179_Else_correct)))))
(let ((anon366_correct  (=> (= Mask@209 (MapType1Store Mask@208 n@4 root (real_2_U (- (U_2_real (MapType1Select Mask@208 n@4 root)) perm@137)))) (and (=> (= (ControlFlow 0 890) 889) anon1177_Then_correct) (=> (= (ControlFlow 0 890) 884) anon1177_Else_correct)))))
(let ((anon1176_Else_correct  (=> (and (= perm@137 NoPerm) (= (ControlFlow 0 893) 890)) anon366_correct)))
(let ((anon1176_Then_correct  (=> (not (= perm@137 NoPerm)) (and (=> (= (ControlFlow 0 891) (- 0 892)) (<= perm@137 (U_2_real (MapType1Select Mask@208 n@4 root)))) (=> (<= perm@137 (U_2_real (MapType1Select Mask@208 n@4 root))) (=> (= (ControlFlow 0 891) 890) anon366_correct))))))
(let ((anon364_correct  (=> (and (= Mask@208 (MapType1Store Mask@207 n@4 parent (real_2_U (- (U_2_real (MapType1Select Mask@207 n@4 parent)) perm@136)))) (= perm@137 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 894) (- 0 895)) (>= perm@137 NoPerm)) (=> (>= perm@137 NoPerm) (and (=> (= (ControlFlow 0 894) 891) anon1176_Then_correct) (=> (= (ControlFlow 0 894) 893) anon1176_Else_correct)))))))
(let ((anon1175_Else_correct  (=> (and (= perm@136 NoPerm) (= (ControlFlow 0 898) 894)) anon364_correct)))
(let ((anon1175_Then_correct  (=> (not (= perm@136 NoPerm)) (and (=> (= (ControlFlow 0 896) (- 0 897)) (<= perm@136 (U_2_real (MapType1Select Mask@207 n@4 parent)))) (=> (<= perm@136 (U_2_real (MapType1Select Mask@207 n@4 parent))) (=> (= (ControlFlow 0 896) 894) anon364_correct))))))
(let ((anon362_correct  (=> (forall ((o_40 T@U) (f_44 T@U) ) (! (let ((B@@33 (FieldTypeInv1 (type f_44))))
(let ((A@@34 (FieldTypeInv0 (type f_44))))
 (=> (and (and (= (type o_40) RefType) (= (type f_44) (FieldType A@@34 B@@33))) (or (U_2_bool (MapType1Select (MapType0Select Heap@279 null (|udValid#sm| n@1)) o_40 f_44)) (U_2_bool (MapType1Select (MapType0Select Heap@279 null (|udParentValid#sm| n@1)) o_40 f_44)))) (U_2_bool (MapType1Select newPMask@66 o_40 f_44)))))
 :qid |stdinbpl.3345:51|
 :skolemid |113|
 :pattern ( (MapType1Select newPMask@66 o_40 f_44))
)) (=> (and (and (= Heap@280 (MapType0Store Heap@279 null (|udValid#sm| n@1) newPMask@66)) (state Heap@280 Mask@207)) (and (state Heap@280 Mask@207) (= perm@136 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 899) (- 0 900)) (>= perm@136 NoPerm)) (=> (>= perm@136 NoPerm) (and (=> (= (ControlFlow 0 899) 896) anon1175_Then_correct) (=> (= (ControlFlow 0 899) 898) anon1175_Else_correct))))))))
(let ((anon1174_Else_correct  (=> (not (=> (U_2_bool (MapType0Select Heap@277 n@1 leftDown)) false)) (=> (and (= Heap@279 Heap@277) (= (ControlFlow 0 902) 899)) anon362_correct))))
(let ((anon1174_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@277 n@1 leftDown)) false) (=> (and (and (forall ((o_39 T@U) (f_43 T@U) ) (! (let ((B@@34 (FieldTypeInv1 (type f_43))))
(let ((A@@35 (FieldTypeInv0 (type f_43))))
 (=> (and (and (= (type o_39) RefType) (= (type f_43) (FieldType A@@35 B@@34))) (or (U_2_bool (MapType1Select (MapType0Select Heap@277 null (|udValid#sm| n@1)) o_39 f_43)) (U_2_bool (MapType1Select (MapType0Select Heap@277 null (|rightOpen#sm| n@1)) o_39 f_43)))) (U_2_bool (MapType1Select newPMask@65 o_39 f_43)))))
 :qid |stdinbpl.3338:53|
 :skolemid |112|
 :pattern ( (MapType1Select newPMask@65 o_39 f_43))
)) (= Heap@278 (MapType0Store Heap@277 null (|udValid#sm| n@1) newPMask@65))) (and (= Heap@279 Heap@278) (= (ControlFlow 0 901) 899))) anon362_correct))))
(let ((anon1173_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@275 n@1 leftDown)) false)) (= Heap@277 Heap@275)) (and (=> (= (ControlFlow 0 904) 901) anon1174_Then_correct) (=> (= (ControlFlow 0 904) 902) anon1174_Else_correct)))))
(let ((anon1173_Then_correct  (=> (and (and (=> (U_2_bool (MapType0Select Heap@275 n@1 leftDown)) false) (forall ((o_38 T@U) (f_42 T@U) ) (! (let ((B@@35 (FieldTypeInv1 (type f_42))))
(let ((A@@36 (FieldTypeInv0 (type f_42))))
 (=> (and (and (= (type o_38) RefType) (= (type f_42) (FieldType A@@36 B@@35))) (or (U_2_bool (MapType1Select (MapType0Select Heap@275 null (|udValid#sm| n@1)) o_38 f_42)) (U_2_bool (MapType1Select (MapType0Select Heap@275 null (|leftValid#sm| n@1)) o_38 f_42)))) (U_2_bool (MapType1Select newPMask@64 o_38 f_42)))))
 :qid |stdinbpl.3330:53|
 :skolemid |111|
 :pattern ( (MapType1Select newPMask@64 o_38 f_42))
))) (and (= Heap@276 (MapType0Store Heap@275 null (|udValid#sm| n@1) newPMask@64)) (= Heap@277 Heap@276))) (and (=> (= (ControlFlow 0 903) 901) anon1174_Then_correct) (=> (= (ControlFlow 0 903) 902) anon1174_Else_correct)))))
(let ((anon1172_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@273 n@1 leftDown))) (= Heap@275 Heap@273)) (and (=> (= (ControlFlow 0 906) 903) anon1173_Then_correct) (=> (= (ControlFlow 0 906) 904) anon1173_Else_correct)))))
(let ((anon1172_Then_correct  (=> (and (and (U_2_bool (MapType0Select Heap@273 n@1 leftDown)) (forall ((o_37 T@U) (f_41 T@U) ) (! (let ((B@@36 (FieldTypeInv1 (type f_41))))
(let ((A@@37 (FieldTypeInv0 (type f_41))))
 (=> (and (and (= (type o_37) RefType) (= (type f_41) (FieldType A@@37 B@@36))) (or (U_2_bool (MapType1Select (MapType0Select Heap@273 null (|udValid#sm| n@1)) o_37 f_41)) (U_2_bool (MapType1Select (MapType0Select Heap@273 null (|leftOpen#sm| n@1)) o_37 f_41)))) (U_2_bool (MapType1Select newPMask@63 o_37 f_41)))))
 :qid |stdinbpl.3322:53|
 :skolemid |110|
 :pattern ( (MapType1Select newPMask@63 o_37 f_41))
))) (and (= Heap@274 (MapType0Store Heap@273 null (|udValid#sm| n@1) newPMask@63)) (= Heap@275 Heap@274))) (and (=> (= (ControlFlow 0 905) 903) anon1173_Then_correct) (=> (= (ControlFlow 0 905) 904) anon1173_Else_correct)))))
(let ((anon1171_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@271 n@1 leftDown))) (= Heap@273 Heap@271)) (and (=> (= (ControlFlow 0 908) 905) anon1172_Then_correct) (=> (= (ControlFlow 0 908) 906) anon1172_Else_correct)))))
(let ((anon1171_Then_correct  (=> (and (and (U_2_bool (MapType0Select Heap@271 n@1 leftDown)) (forall ((o_36 T@U) (f_40 T@U) ) (! (let ((B@@37 (FieldTypeInv1 (type f_40))))
(let ((A@@38 (FieldTypeInv0 (type f_40))))
 (=> (and (and (= (type o_36) RefType) (= (type f_40) (FieldType A@@38 B@@37))) (or (U_2_bool (MapType1Select (MapType0Select Heap@271 null (|udValid#sm| n@1)) o_36 f_40)) (U_2_bool (MapType1Select (MapType0Select Heap@271 null (|rightValid#sm| n@1)) o_36 f_40)))) (U_2_bool (MapType1Select newPMask@62 o_36 f_40)))))
 :qid |stdinbpl.3314:53|
 :skolemid |109|
 :pattern ( (MapType1Select newPMask@62 o_36 f_40))
))) (and (= Heap@272 (MapType0Store Heap@271 null (|udValid#sm| n@1) newPMask@62)) (= Heap@273 Heap@272))) (and (=> (= (ControlFlow 0 907) 905) anon1172_Then_correct) (=> (= (ControlFlow 0 907) 906) anon1172_Else_correct)))))
(let ((anon354_correct  (=> (= Heap@267 (MapType0Store Heap@266 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@266 null (|udValid#sm| n@1)) n@1 key (bool_2_U true)))) (=> (and (and (= Heap@268 (MapType0Store Heap@267 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@267 null (|udValid#sm| n@1)) n@1 leftDown (bool_2_U true)))) (= Heap@269 (MapType0Store Heap@268 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@268 null (|udValid#sm| n@1)) n@1 left (bool_2_U true))))) (and (= Heap@270 (MapType0Store Heap@269 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@269 null (|udValid#sm| n@1)) n@1 right (bool_2_U true)))) (= Heap@271 (MapType0Store Heap@270 null (|udValid#sm| n@1) (MapType1Store (MapType0Select Heap@270 null (|udValid#sm| n@1)) n@1 root (bool_2_U true)))))) (and (=> (= (ControlFlow 0 909) 907) anon1171_Then_correct) (=> (= (ControlFlow 0 909) 908) anon1171_Else_correct))))))
(let ((anon1170_Else_correct  (=> (HasDirectPerm Mask@207 null (udValid n@1)) (=> (and (= Heap@266 Heap@263) (= (ControlFlow 0 911) 909)) anon354_correct))))
(let ((anon1170_Then_correct  (=> (not (HasDirectPerm Mask@207 null (udValid n@1))) (=> (and (and (= Heap@264 (MapType0Store Heap@263 null (|udValid#sm| n@1) ZeroPMask)) (= Heap@265 (MapType0Store Heap@264 null (udValid n@1) freshVersion@8))) (and (= Heap@266 Heap@265) (= (ControlFlow 0 910) 909))) anon354_correct))))
(let ((anon352_correct  (=> (= Mask@206 (MapType1Store Mask@205 null (udParentValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@205 null (udParentValid n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@263 null (udValid n@1)) (udParentValid n@1) (MapType0Select Heap@263 null (udParentValid n@1))) (= Mask@207 (MapType1Store Mask@206 null (udValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@206 null (udValid n@1))) FullPerm))))) (=> (and (and (state Heap@263 Mask@207) (state Heap@263 Mask@207)) (and (|udValid#trigger| Heap@263 (udValid n@1)) (= (MapType0Select Heap@263 null (udValid n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@263 n@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@263 n@1 leftDown)) (CombineFrames (FrameFragment (MapType0Select Heap@263 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@263 n@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@263 n@1 root)) (CombineFrames (FrameFragment (ite (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) (MapType0Select Heap@263 null (rightValid n@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) (MapType0Select Heap@263 null (leftOpen n@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite  (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) false) (MapType0Select Heap@263 null (leftValid n@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite  (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) false) (MapType0Select Heap@263 null (rightOpen n@1)) EmptyFrame)) (MapType0Select Heap@263 null (udParentValid n@1)))))))))))))) (and (=> (= (ControlFlow 0 912) 910) anon1170_Then_correct) (=> (= (ControlFlow 0 912) 911) anon1170_Else_correct)))))))
(let ((anon1169_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 915) 912)) anon352_correct)))
(let ((anon1169_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 913) (- 0 914)) (<= FullPerm (U_2_real (MapType1Select Mask@205 null (udParentValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@205 null (udParentValid n@1)))) (=> (= (ControlFlow 0 913) 912) anon352_correct))))))
(let ((anon349_correct  (=> (= Mask@204 (MapType1Store Mask@203 null (rightOpen n@1) (real_2_U (- (U_2_real (MapType1Select Mask@203 null (rightOpen n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@263 null (udValid n@1)) (rightOpen n@1) (MapType0Select Heap@263 null (rightOpen n@1))) (= Mask@205 Mask@204)) (and (=> (= (ControlFlow 0 917) 913) anon1169_Then_correct) (=> (= (ControlFlow 0 917) 915) anon1169_Else_correct))))))
(let ((anon1168_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 920) 917)) anon349_correct)))
(let ((anon1168_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 918) (- 0 919)) (<= FullPerm (U_2_real (MapType1Select Mask@203 null (rightOpen n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@203 null (rightOpen n@1)))) (=> (= (ControlFlow 0 918) 917) anon349_correct))))))
(let ((anon1167_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) false) (and (=> (= (ControlFlow 0 921) 918) anon1168_Then_correct) (=> (= (ControlFlow 0 921) 920) anon1168_Else_correct)))))
(let ((anon1167_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) false)) (= Mask@205 Mask@203)) (and (=> (= (ControlFlow 0 916) 913) anon1169_Then_correct) (=> (= (ControlFlow 0 916) 915) anon1169_Else_correct)))))
(let ((anon345_correct  (=> (= Mask@202 (MapType1Store Mask@201 null (leftValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@201 null (leftValid n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@263 null (udValid n@1)) (leftValid n@1) (MapType0Select Heap@263 null (leftValid n@1))) (= Mask@203 Mask@202)) (and (=> (= (ControlFlow 0 923) 921) anon1167_Then_correct) (=> (= (ControlFlow 0 923) 916) anon1167_Else_correct))))))
(let ((anon1166_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 926) 923)) anon345_correct)))
(let ((anon1166_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 924) (- 0 925)) (<= FullPerm (U_2_real (MapType1Select Mask@201 null (leftValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@201 null (leftValid n@1)))) (=> (= (ControlFlow 0 924) 923) anon345_correct))))))
(let ((anon1165_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) false) (and (=> (= (ControlFlow 0 927) 924) anon1166_Then_correct) (=> (= (ControlFlow 0 927) 926) anon1166_Else_correct)))))
(let ((anon1165_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) false)) (= Mask@203 Mask@201)) (and (=> (= (ControlFlow 0 922) 921) anon1167_Then_correct) (=> (= (ControlFlow 0 922) 916) anon1167_Else_correct)))))
(let ((anon341_correct  (=> (= Mask@200 (MapType1Store Mask@199 null (leftOpen n@1) (real_2_U (- (U_2_real (MapType1Select Mask@199 null (leftOpen n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@263 null (udValid n@1)) (leftOpen n@1) (MapType0Select Heap@263 null (leftOpen n@1))) (= Mask@201 Mask@200)) (and (=> (= (ControlFlow 0 929) 927) anon1165_Then_correct) (=> (= (ControlFlow 0 929) 922) anon1165_Else_correct))))))
(let ((anon1164_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 932) 929)) anon341_correct)))
(let ((anon1164_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 930) (- 0 931)) (<= FullPerm (U_2_real (MapType1Select Mask@199 null (leftOpen n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@199 null (leftOpen n@1)))) (=> (= (ControlFlow 0 930) 929) anon341_correct))))))
(let ((anon1163_Then_correct  (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) (and (=> (= (ControlFlow 0 933) 930) anon1164_Then_correct) (=> (= (ControlFlow 0 933) 932) anon1164_Else_correct)))))
(let ((anon1163_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@263 n@1 leftDown))) (= Mask@201 Mask@199)) (and (=> (= (ControlFlow 0 928) 927) anon1165_Then_correct) (=> (= (ControlFlow 0 928) 922) anon1165_Else_correct)))))
(let ((anon337_correct  (=> (= Mask@198 (MapType1Store Mask@197 null (rightValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@197 null (rightValid n@1))) FullPerm)))) (=> (and (InsidePredicate (udValid n@1) (MapType0Select Heap@263 null (udValid n@1)) (rightValid n@1) (MapType0Select Heap@263 null (rightValid n@1))) (= Mask@199 Mask@198)) (and (=> (= (ControlFlow 0 935) 933) anon1163_Then_correct) (=> (= (ControlFlow 0 935) 928) anon1163_Else_correct))))))
(let ((anon1162_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 938) 935)) anon337_correct)))
(let ((anon1162_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 936) (- 0 937)) (<= FullPerm (U_2_real (MapType1Select Mask@197 null (rightValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@197 null (rightValid n@1)))) (=> (= (ControlFlow 0 936) 935) anon337_correct))))))
(let ((anon1161_Then_correct  (=> (U_2_bool (MapType0Select Heap@263 n@1 leftDown)) (and (=> (= (ControlFlow 0 939) 936) anon1162_Then_correct) (=> (= (ControlFlow 0 939) 938) anon1162_Else_correct)))))
(let ((anon1161_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@263 n@1 leftDown))) (= Mask@199 Mask@197)) (and (=> (= (ControlFlow 0 934) 933) anon1163_Then_correct) (=> (= (ControlFlow 0 934) 928) anon1163_Else_correct)))))
(let ((anon334_correct  (=> (= Mask@197 (MapType1Store Mask@196 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@196 n@1 root)) perm@135)))) (and (=> (= (ControlFlow 0 940) 939) anon1161_Then_correct) (=> (= (ControlFlow 0 940) 934) anon1161_Else_correct)))))
(let ((anon1160_Else_correct  (=> (and (= perm@135 NoPerm) (= (ControlFlow 0 943) 940)) anon334_correct)))
(let ((anon1160_Then_correct  (=> (not (= perm@135 NoPerm)) (and (=> (= (ControlFlow 0 941) (- 0 942)) (<= perm@135 (U_2_real (MapType1Select Mask@196 n@1 root)))) (=> (<= perm@135 (U_2_real (MapType1Select Mask@196 n@1 root))) (=> (= (ControlFlow 0 941) 940) anon334_correct))))))
(let ((anon332_correct  (=> (and (= Mask@196 (MapType1Store Mask@195 n@1 right (real_2_U (- (U_2_real (MapType1Select Mask@195 n@1 right)) perm@134)))) (= perm@135 (/ (to_real 1) (to_real 5)))) (and (=> (= (ControlFlow 0 944) (- 0 945)) (>= perm@135 NoPerm)) (=> (>= perm@135 NoPerm) (and (=> (= (ControlFlow 0 944) 941) anon1160_Then_correct) (=> (= (ControlFlow 0 944) 943) anon1160_Else_correct)))))))
(let ((anon1159_Else_correct  (=> (and (= perm@134 NoPerm) (= (ControlFlow 0 948) 944)) anon332_correct)))
(let ((anon1159_Then_correct  (=> (not (= perm@134 NoPerm)) (and (=> (= (ControlFlow 0 946) (- 0 947)) (<= perm@134 (U_2_real (MapType1Select Mask@195 n@1 right)))) (=> (<= perm@134 (U_2_real (MapType1Select Mask@195 n@1 right))) (=> (= (ControlFlow 0 946) 944) anon332_correct))))))
(let ((anon330_correct  (=> (and (= Mask@195 (MapType1Store Mask@194 n@1 left (real_2_U (- (U_2_real (MapType1Select Mask@194 n@1 left)) perm@133)))) (= perm@134 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 949) (- 0 950)) (>= perm@134 NoPerm)) (=> (>= perm@134 NoPerm) (and (=> (= (ControlFlow 0 949) 946) anon1159_Then_correct) (=> (= (ControlFlow 0 949) 948) anon1159_Else_correct)))))))
(let ((anon1158_Else_correct  (=> (and (= perm@133 NoPerm) (= (ControlFlow 0 953) 949)) anon330_correct)))
(let ((anon1158_Then_correct  (=> (not (= perm@133 NoPerm)) (and (=> (= (ControlFlow 0 951) (- 0 952)) (<= perm@133 (U_2_real (MapType1Select Mask@194 n@1 left)))) (=> (<= perm@133 (U_2_real (MapType1Select Mask@194 n@1 left))) (=> (= (ControlFlow 0 951) 949) anon330_correct))))))
(let ((anon328_correct  (=> (and (= Mask@194 (MapType1Store Mask@193 n@1 leftDown (real_2_U (- (U_2_real (MapType1Select Mask@193 n@1 leftDown)) perm@132)))) (= perm@133 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 954) (- 0 955)) (>= perm@133 NoPerm)) (=> (>= perm@133 NoPerm) (and (=> (= (ControlFlow 0 954) 951) anon1158_Then_correct) (=> (= (ControlFlow 0 954) 953) anon1158_Else_correct)))))))
(let ((anon1157_Else_correct  (=> (and (= perm@132 NoPerm) (= (ControlFlow 0 958) 954)) anon328_correct)))
(let ((anon1157_Then_correct  (=> (not (= perm@132 NoPerm)) (and (=> (= (ControlFlow 0 956) (- 0 957)) (<= perm@132 (U_2_real (MapType1Select Mask@193 n@1 leftDown)))) (=> (<= perm@132 (U_2_real (MapType1Select Mask@193 n@1 leftDown))) (=> (= (ControlFlow 0 956) 954) anon328_correct))))))
(let ((anon326_correct  (=> (and (= Mask@193 (MapType1Store Mask@192 n@1 key (real_2_U (- (U_2_real (MapType1Select Mask@192 n@1 key)) FullPerm)))) (= perm@132 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 959) (- 0 960)) (>= perm@132 NoPerm)) (=> (>= perm@132 NoPerm) (and (=> (= (ControlFlow 0 959) 956) anon1157_Then_correct) (=> (= (ControlFlow 0 959) 958) anon1157_Else_correct)))))))
(let ((anon1156_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 963) 959)) anon326_correct)))
(let ((anon1156_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 961) (- 0 962)) (<= FullPerm (U_2_real (MapType1Select Mask@192 n@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@192 n@1 key))) (=> (= (ControlFlow 0 961) 959) anon326_correct))))))
(let ((anon324_correct  (=> (and (state Heap@263 Mask@192) (state Heap@263 Mask@192)) (and (=> (= (ControlFlow 0 964) 961) anon1156_Then_correct) (=> (= (ControlFlow 0 964) 963) anon1156_Else_correct)))))
(let ((anon1155_Else_correct  (=> (= (MapType0Select Heap@261 n@1 right) null) (=> (and (= Heap@263 Heap@261) (= (ControlFlow 0 966) 964)) anon324_correct))))
(let ((anon1155_Then_correct  (=> (and (and (not (= (MapType0Select Heap@261 n@1 right) null)) (= Heap@262 (MapType0Store Heap@261 null (|rightOpen#sm| n@1) (MapType1Store (MapType0Select Heap@261 null (|rightOpen#sm| n@1)) (MapType0Select Heap@261 n@1 right) parent (bool_2_U true))))) (and (= Heap@263 Heap@262) (= (ControlFlow 0 965) 964))) anon324_correct)))
(let ((anon322_correct  (=> (and (= Heap@260 (MapType0Store Heap@259 null (|rightOpen#sm| n@1) (MapType1Store (MapType0Select Heap@259 null (|rightOpen#sm| n@1)) n@1 right (bool_2_U true)))) (= Heap@261 (MapType0Store Heap@260 null (|rightOpen#sm| n@1) (MapType1Store (MapType0Select Heap@260 null (|rightOpen#sm| n@1)) n@1 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 967) 965) anon1155_Then_correct) (=> (= (ControlFlow 0 967) 966) anon1155_Else_correct)))))
(let ((anon1154_Else_correct  (=> (HasDirectPerm Mask@192 null (rightOpen n@1)) (=> (and (= Heap@259 Heap@256) (= (ControlFlow 0 969) 967)) anon322_correct))))
(let ((anon1154_Then_correct  (=> (not (HasDirectPerm Mask@192 null (rightOpen n@1))) (=> (and (and (= Heap@257 (MapType0Store Heap@256 null (|rightOpen#sm| n@1) ZeroPMask)) (= Heap@258 (MapType0Store Heap@257 null (rightOpen n@1) freshVersion@7))) (and (= Heap@259 Heap@258) (= (ControlFlow 0 968) 967))) anon322_correct))))
(let ((anon320_correct  (=> (= Mask@192 (MapType1Store Mask@191 null (rightOpen n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@191 null (rightOpen n@1))) FullPerm)))) (=> (and (and (state Heap@256 Mask@192) (state Heap@256 Mask@192)) (and (|rightOpen#trigger| Heap@256 (rightOpen n@1)) (= (MapType0Select Heap@256 null (rightOpen n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@256 n@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@256 n@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@256 n@1 right) null)) (FrameFragment (MapType0Select Heap@256 (MapType0Select Heap@256 n@1 right) parent)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@256 n@1 right) null)) EmptyFrame EmptyFrame)))))))) (and (=> (= (ControlFlow 0 970) 968) anon1154_Then_correct) (=> (= (ControlFlow 0 970) 969) anon1154_Else_correct))))))
(let ((anon1153_Else_correct  (=> (and (= (MapType0Select Heap@256 n@1 right) null) (= (ControlFlow 0 973) 970)) anon320_correct)))
(let ((anon1153_Then_correct  (=> (not (= (MapType0Select Heap@256 n@1 right) null)) (and (=> (= (ControlFlow 0 971) (- 0 972)) (= (MapType0Select Heap@256 (MapType0Select Heap@256 n@1 right) parent) n@1)) (=> (= (MapType0Select Heap@256 (MapType0Select Heap@256 n@1 right) parent) n@1) (=> (= (ControlFlow 0 971) 970) anon320_correct))))))
(let ((anon317_correct  (=> (and (= Mask@190 (MapType1Store Mask@189 (MapType0Select Heap@256 n@1 right) parent (real_2_U (- (U_2_real (MapType1Select Mask@189 (MapType0Select Heap@256 n@1 right) parent)) perm@131)))) (= Mask@191 Mask@190)) (and (=> (= (ControlFlow 0 975) 971) anon1153_Then_correct) (=> (= (ControlFlow 0 975) 973) anon1153_Else_correct)))))
(let ((anon1152_Else_correct  (=> (and (= perm@131 NoPerm) (= (ControlFlow 0 978) 975)) anon317_correct)))
(let ((anon1152_Then_correct  (=> (not (= perm@131 NoPerm)) (and (=> (= (ControlFlow 0 976) (- 0 977)) (<= perm@131 (U_2_real (MapType1Select Mask@189 (MapType0Select Heap@256 n@1 right) parent)))) (=> (<= perm@131 (U_2_real (MapType1Select Mask@189 (MapType0Select Heap@256 n@1 right) parent))) (=> (= (ControlFlow 0 976) 975) anon317_correct))))))
(let ((anon1151_Then_correct  (=> (and (not (= (MapType0Select Heap@256 n@1 right) null)) (= perm@131 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 979) (- 0 980)) (>= perm@131 NoPerm)) (=> (>= perm@131 NoPerm) (and (=> (= (ControlFlow 0 979) 976) anon1152_Then_correct) (=> (= (ControlFlow 0 979) 978) anon1152_Else_correct)))))))
(let ((anon1151_Else_correct  (=> (and (= (MapType0Select Heap@256 n@1 right) null) (= Mask@191 Mask@189)) (and (=> (= (ControlFlow 0 974) 971) anon1153_Then_correct) (=> (= (ControlFlow 0 974) 973) anon1153_Else_correct)))))
(let ((anon314_correct  (=> (= Mask@189 (MapType1Store Mask@188 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@188 n@1 root)) perm@130)))) (and (=> (= (ControlFlow 0 981) 979) anon1151_Then_correct) (=> (= (ControlFlow 0 981) 974) anon1151_Else_correct)))))
(let ((anon1150_Else_correct  (=> (and (= perm@130 NoPerm) (= (ControlFlow 0 984) 981)) anon314_correct)))
(let ((anon1150_Then_correct  (=> (not (= perm@130 NoPerm)) (and (=> (= (ControlFlow 0 982) (- 0 983)) (<= perm@130 (U_2_real (MapType1Select Mask@188 n@1 root)))) (=> (<= perm@130 (U_2_real (MapType1Select Mask@188 n@1 root))) (=> (= (ControlFlow 0 982) 981) anon314_correct))))))
(let ((anon312_correct  (=> (and (= Mask@188 (MapType1Store Mask@187 n@1 right (real_2_U (- (U_2_real (MapType1Select Mask@187 n@1 right)) perm@129)))) (= perm@130 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 985) (- 0 986)) (>= perm@130 NoPerm)) (=> (>= perm@130 NoPerm) (and (=> (= (ControlFlow 0 985) 982) anon1150_Then_correct) (=> (= (ControlFlow 0 985) 984) anon1150_Else_correct)))))))
(let ((anon1149_Else_correct  (=> (and (= perm@129 NoPerm) (= (ControlFlow 0 989) 985)) anon312_correct)))
(let ((anon1149_Then_correct  (=> (not (= perm@129 NoPerm)) (and (=> (= (ControlFlow 0 987) (- 0 988)) (<= perm@129 (U_2_real (MapType1Select Mask@187 n@1 right)))) (=> (<= perm@129 (U_2_real (MapType1Select Mask@187 n@1 right))) (=> (= (ControlFlow 0 987) 985) anon312_correct))))))
(let ((anon310_correct  (=> (and (state Heap@255 Mask@187) (state Heap@255 Mask@187)) (and (=> (= (ControlFlow 0 990) (- 0 993)) (HasDirectPerm Mask@187 n@1 right)) (=> (HasDirectPerm Mask@187 n@1 right) (=> (and (= n@4 (MapType0Select Heap@255 n@1 right)) (state Heap@255 Mask@187)) (and (=> (= (ControlFlow 0 990) (- 0 992)) (= FullPerm (U_2_real (MapType1Select Mask@187 n@1 leftDown)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@187 n@1 leftDown))) (=> (= Heap@256 (MapType0Store Heap@255 n@1 leftDown (bool_2_U false))) (=> (and (state Heap@256 Mask@187) (= perm@129 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 990) (- 0 991)) (>= perm@129 NoPerm)) (=> (>= perm@129 NoPerm) (and (=> (= (ControlFlow 0 990) 987) anon1149_Then_correct) (=> (= (ControlFlow 0 990) 989) anon1149_Else_correct))))))))))))))
(let ((anon1148_Else_correct  (=> (and (= (MapType0Select Heap@255 n@1 right) null) (= (ControlFlow 0 995) 990)) anon310_correct)))
(let ((anon1148_Then_correct  (=> (not (= (MapType0Select Heap@255 n@1 right) null)) (=> (and (= (MapType0Select Heap@255 (MapType0Select Heap@255 n@1 right) root) (MapType0Select Heap@255 n@1 root)) (= (ControlFlow 0 994) 990)) anon310_correct))))
(let ((anon1147_Else_correct  (=> (and (= (MapType0Select Heap@255 n@1 right) null) (= Mask@187 Mask@185)) (and (=> (= (ControlFlow 0 998) 994) anon1148_Then_correct) (=> (= (ControlFlow 0 998) 995) anon1148_Else_correct)))))
(let ((anon1147_Then_correct  (=> (and (not (= (MapType0Select Heap@255 n@1 right) null)) (= perm@128 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 996) (- 0 997)) (>= perm@128 NoPerm)) (=> (>= perm@128 NoPerm) (=> (and (and (=> (> perm@128 NoPerm) (not (= (MapType0Select Heap@255 n@1 right) null))) (= Mask@186 (MapType1Store Mask@185 (MapType0Select Heap@255 n@1 right) root (real_2_U (+ (U_2_real (MapType1Select Mask@185 (MapType0Select Heap@255 n@1 right) root)) perm@128))))) (and (state Heap@255 Mask@186) (= Mask@187 Mask@186))) (and (=> (= (ControlFlow 0 996) 994) anon1148_Then_correct) (=> (= (ControlFlow 0 996) 995) anon1148_Else_correct))))))))
(let ((anon1146_Else_correct  (=> (= (MapType0Select Heap@255 n@1 right) null) (and (=> (= (ControlFlow 0 1000) 996) anon1147_Then_correct) (=> (= (ControlFlow 0 1000) 998) anon1147_Else_correct)))))
(let ((anon1146_Then_correct  (=> (and (not (= (MapType0Select Heap@255 n@1 right) null)) (= (MapType0Select Heap@255 (MapType0Select Heap@255 n@1 right) parent) n@1)) (and (=> (= (ControlFlow 0 999) 996) anon1147_Then_correct) (=> (= (ControlFlow 0 999) 998) anon1147_Else_correct)))))
(let ((anon1145_Else_correct  (=> (and (= (MapType0Select Heap@255 n@1 right) null) (= Mask@185 Mask@183)) (and (=> (= (ControlFlow 0 1002) 999) anon1146_Then_correct) (=> (= (ControlFlow 0 1002) 1000) anon1146_Else_correct)))))
(let ((anon1145_Then_correct  (=> (not (= (MapType0Select Heap@255 n@1 right) null)) (=> (and (and (not (= (MapType0Select Heap@255 n@1 right) null)) (= Mask@184 (MapType1Store Mask@183 (MapType0Select Heap@255 n@1 right) parent (real_2_U (+ (U_2_real (MapType1Select Mask@183 (MapType0Select Heap@255 n@1 right) parent)) FullPerm))))) (and (state Heap@255 Mask@184) (= Mask@185 Mask@184))) (and (=> (= (ControlFlow 0 1001) 999) anon1146_Then_correct) (=> (= (ControlFlow 0 1001) 1000) anon1146_Else_correct))))))
(let ((anon1144_Else_correct  (=> (and (= (MapType0Select Heap@255 n@1 right) null) (= Mask@183 Mask@181)) (and (=> (= (ControlFlow 0 1004) 1001) anon1145_Then_correct) (=> (= (ControlFlow 0 1004) 1002) anon1145_Else_correct)))))
(let ((anon1144_Then_correct  (=> (not (= (MapType0Select Heap@255 n@1 right) null)) (=> (and (and (= Mask@182 (MapType1Store Mask@181 null (valid (MapType0Select Heap@255 n@1 right)) (real_2_U (+ (U_2_real (MapType1Select Mask@181 null (valid (MapType0Select Heap@255 n@1 right)))) FullPerm)))) (InsidePredicate (rightValid n@1) (MapType0Select Heap@255 null (rightValid n@1)) (valid (MapType0Select Heap@255 n@1 right)) (MapType0Select Heap@255 null (valid (MapType0Select Heap@255 n@1 right))))) (and (state Heap@255 Mask@182) (= Mask@183 Mask@182))) (and (=> (= (ControlFlow 0 1003) 1001) anon1145_Then_correct) (=> (= (ControlFlow 0 1003) 1002) anon1145_Else_correct))))))
(let ((anon300_correct  (=> (= perm@126 (/ (to_real 1) (to_real 4))) (and (=> (= (ControlFlow 0 1005) (- 0 1007)) (>= perm@126 NoPerm)) (=> (>= perm@126 NoPerm) (=> (and (and (=> (> perm@126 NoPerm) (not (= n@1 null))) (= Mask@180 (MapType1Store Mask@179 n@1 right (real_2_U (+ (U_2_real (MapType1Select Mask@179 n@1 right)) perm@126))))) (and (state Heap@255 Mask@180) (= perm@127 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 1005) (- 0 1006)) (>= perm@127 NoPerm)) (=> (>= perm@127 NoPerm) (=> (=> (> perm@127 NoPerm) (not (= n@1 null))) (=> (and (= Mask@181 (MapType1Store Mask@180 n@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@180 n@1 root)) perm@127)))) (state Heap@255 Mask@181)) (and (=> (= (ControlFlow 0 1005) 1003) anon1144_Then_correct) (=> (= (ControlFlow 0 1005) 1004) anon1144_Else_correct))))))))))))
(let ((anon1143_Else_correct  (=> (HasDirectPerm Mask@179 null (rightValid n@1)) (=> (and (= Heap@255 Heap@253) (= (ControlFlow 0 1009) 1005)) anon300_correct))))
(let ((anon1143_Then_correct  (=> (and (and (not (HasDirectPerm Mask@179 null (rightValid n@1))) (= Heap@254 (MapType0Store Heap@253 null (rightValid n@1) newVersion@8))) (and (= Heap@255 Heap@254) (= (ControlFlow 0 1008) 1005))) anon300_correct)))
(let ((anon298_correct  (=> (= Mask@179 (MapType1Store Mask@178 null (rightValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@178 null (rightValid n@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1010) 1008) anon1143_Then_correct) (=> (= (ControlFlow 0 1010) 1009) anon1143_Else_correct)))))
(let ((anon1142_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1013) 1010)) anon298_correct)))
(let ((anon1142_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1011) (- 0 1012)) (<= FullPerm (U_2_real (MapType1Select Mask@178 null (rightValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 null (rightValid n@1)))) (=> (= (ControlFlow 0 1011) 1010) anon298_correct))))))
(let ((anon1131_Else_correct  (=> (and (and (not (= (MapType0Select Heap@253 n@1 right) null)) (state Heap@253 Mask@178)) (and (|rightValid#trigger| Heap@253 (rightValid n@1)) (= (MapType0Select Heap@253 null (rightValid n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@253 n@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 right) null)) (MapType0Select Heap@253 null (valid (MapType0Select Heap@253 n@1 right))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 right) null)) (FrameFragment (MapType0Select Heap@253 (MapType0Select Heap@253 n@1 right) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 right) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 right) null)) (FrameFragment (MapType0Select Heap@253 (MapType0Select Heap@253 n@1 right) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@253 n@1 right) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 1014) 1011) anon1142_Then_correct) (=> (= (ControlFlow 0 1014) 1013) anon1142_Else_correct)))))
(let ((anon1064_Else_correct  (=> (<= k (U_2_int (MapType0Select Heap@253 n@1 key))) (and (=> (= (ControlFlow 0 1058) (- 0 1059)) (HasDirectPerm Mask@178 n@1 right)) (=> (HasDirectPerm Mask@178 n@1 right) (and (=> (= (ControlFlow 0 1058) 1057) anon1131_Then_correct) (=> (= (ControlFlow 0 1058) 1014) anon1131_Else_correct)))))))
(let ((anon1053_Else_correct  (=> (not (= (U_2_int (MapType0Select Heap@253 n@1 key)) k)) (and (=> (= (ControlFlow 0 1292) (- 0 1293)) (HasDirectPerm Mask@178 n@1 key)) (=> (HasDirectPerm Mask@178 n@1 key) (and (=> (= (ControlFlow 0 1292) 1290) anon1064_Then_correct) (=> (= (ControlFlow 0 1292) 1058) anon1064_Else_correct)))))))
(let ((anon117_correct  (=> (and (and (not (= n@1 null)) (= Mask@174 (MapType1Store Mask@173 n@1 key (real_2_U (+ (U_2_real (MapType1Select Mask@173 n@1 key)) FullPerm))))) (and (state Heap@253 Mask@174) (= perm@123 (/ (to_real 3) (to_real 10))))) (and (=> (= (ControlFlow 0 1337) (- 0 1341)) (>= perm@123 NoPerm)) (=> (>= perm@123 NoPerm) (=> (and (and (=> (> perm@123 NoPerm) (not (= n@1 null))) (= Mask@175 (MapType1Store Mask@174 n@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@174 n@1 root)) perm@123))))) (and (state Heap@253 Mask@175) (= perm@124 (/ (to_real 3) (to_real 4))))) (and (=> (= (ControlFlow 0 1337) (- 0 1340)) (>= perm@124 NoPerm)) (=> (>= perm@124 NoPerm) (=> (and (and (=> (> perm@124 NoPerm) (not (= n@1 null))) (= Mask@176 (MapType1Store Mask@175 n@1 left (real_2_U (+ (U_2_real (MapType1Select Mask@175 n@1 left)) perm@124))))) (and (state Heap@253 Mask@176) (= perm@125 (/ (to_real 3) (to_real 4))))) (and (=> (= (ControlFlow 0 1337) (- 0 1339)) (>= perm@125 NoPerm)) (=> (>= perm@125 NoPerm) (=> (=> (> perm@125 NoPerm) (not (= n@1 null))) (=> (and (and (and (= Mask@177 (MapType1Store Mask@176 n@1 right (real_2_U (+ (U_2_real (MapType1Select Mask@176 n@1 right)) perm@125)))) (state Heap@253 Mask@177)) (and (not (= n@1 null)) (= Mask@178 (MapType1Store Mask@177 n@1 leftDown (real_2_U (+ (U_2_real (MapType1Select Mask@177 n@1 leftDown)) FullPerm)))))) (and (and (state Heap@253 Mask@178) (or (not (= (MapType0Select Heap@253 n@1 right) (MapType0Select Heap@253 n@1 left))) (= (MapType0Select Heap@253 n@1 right) null))) (and (state Heap@253 Mask@178) (state Heap@253 Mask@178)))) (and (=> (= (ControlFlow 0 1337) (- 0 1338)) (HasDirectPerm Mask@178 n@1 key)) (=> (HasDirectPerm Mask@178 n@1 key) (and (=> (= (ControlFlow 0 1337) 1336) anon1053_Then_correct) (=> (= (ControlFlow 0 1337) 1292) anon1053_Else_correct)))))))))))))))))
(let ((anon1052_Else_correct  (=> (HasDirectPerm Mask@173 null (validRest n@1)) (=> (and (= Heap@253 Heap@251) (= (ControlFlow 0 1343) 1337)) anon117_correct))))
(let ((anon1052_Then_correct  (=> (and (and (not (HasDirectPerm Mask@173 null (validRest n@1))) (= Heap@252 (MapType0Store Heap@251 null (validRest n@1) newVersion@7))) (and (= Heap@253 Heap@252) (= (ControlFlow 0 1342) 1337))) anon117_correct)))
(let ((anon115_correct  (=> (= Mask@173 (MapType1Store Mask@172 null (validRest n@1) (real_2_U (- (U_2_real (MapType1Select Mask@172 null (validRest n@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1344) 1342) anon1052_Then_correct) (=> (= (ControlFlow 0 1344) 1343) anon1052_Else_correct)))))
(let ((anon1051_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1347) 1344)) anon115_correct)))
(let ((anon1051_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1345) (- 0 1346)) (<= FullPerm (U_2_real (MapType1Select Mask@172 null (validRest n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 null (validRest n@1)))) (=> (= (ControlFlow 0 1345) 1344) anon115_correct))))))
(let ((anon113_correct  (=> (= Mask@170 (MapType1Store Mask@169 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@169 null (validRest n@1))) FullPerm)))) (=> (and (and (InsidePredicate (valid n@1) (MapType0Select Heap@251 null (valid n@1)) (validRest n@1) (MapType0Select Heap@251 null (validRest n@1))) (state Heap@251 Mask@170)) (and (= Mask@171 (MapType1Store Mask@170 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@170 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@251 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@251 null (leftValid n@1))))) (=> (and (and (and (state Heap@251 Mask@171) (= Mask@172 (MapType1Store Mask@171 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@171 null (rightValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select Heap@251 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@251 null (rightValid n@1))) (state Heap@251 Mask@172))) (and (and (state Heap@251 Mask@172) (state Heap@251 Mask@172)) (and (|validRest#trigger| Heap@251 (validRest n@1)) (= (MapType0Select Heap@251 null (validRest n@1)) (CombineFrames (FrameFragment (MapType0Select Heap@251 n@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@251 n@1 root)) (CombineFrames (FrameFragment (MapType0Select Heap@251 n@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@251 n@1 right)) (FrameFragment (MapType0Select Heap@251 n@1 leftDown)))))))))) (and (=> (= (ControlFlow 0 1348) 1345) anon1051_Then_correct) (=> (= (ControlFlow 0 1348) 1347) anon1051_Else_correct)))))))
(let ((anon1050_Else_correct  (=> (HasDirectPerm Mask@169 null (valid n@1)) (=> (and (= Heap@251 Heap@249) (= (ControlFlow 0 1350) 1348)) anon113_correct))))
(let ((anon1050_Then_correct  (=> (and (and (not (HasDirectPerm Mask@169 null (valid n@1))) (= Heap@250 (MapType0Store Heap@249 null (valid n@1) newVersion@6))) (and (= Heap@251 Heap@250) (= (ControlFlow 0 1349) 1348))) anon113_correct)))
(let ((anon111_correct  (=> (= Mask@169 (MapType1Store Mask@36 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@36 null (valid n@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1351) 1349) anon1050_Then_correct) (=> (= (ControlFlow 0 1351) 1350) anon1050_Else_correct)))))
(let ((anon1049_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1354) 1351)) anon111_correct)))
(let ((anon1049_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1352) (- 0 1353)) (<= FullPerm (U_2_real (MapType1Select Mask@36 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@36 null (valid n@1)))) (=> (= (ControlFlow 0 1352) 1351) anon111_correct))))))
(let ((anon109_correct  (=> (and (= UnfoldingMask@190 (MapType1Store Mask@36 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@36 null (valid n@1))) FullPerm)))) (= UnfoldingMask@191 (MapType1Store UnfoldingMask@190 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@190 null (validRest n@1))) FullPerm))))) (=> (and (and (InsidePredicate (valid n@1) (MapType0Select Heap@25 null (valid n@1)) (validRest n@1) (MapType0Select Heap@25 null (validRest n@1))) (state Heap@25 UnfoldingMask@191)) (and (= UnfoldingMask@192 (MapType1Store UnfoldingMask@191 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@191 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@25 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@25 null (leftValid n@1))))) (=> (and (and (and (and (state Heap@25 UnfoldingMask@192) (= UnfoldingMask@193 (MapType1Store UnfoldingMask@192 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@192 null (rightValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select Heap@25 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@25 null (rightValid n@1))) (state Heap@25 UnfoldingMask@193))) (and (and (state Heap@25 UnfoldingMask@193) (forall ((o_18 T@U) (f_22 T@U) ) (! (let ((B@@38 (FieldTypeInv1 (type f_22))))
(let ((A@@39 (FieldTypeInv0 (type f_22))))
 (=> (and (and (= (type o_18) RefType) (= (type f_22) (FieldType A@@39 B@@38))) (or (U_2_bool (MapType1Select (MapType0Select Heap@25 null (|valid#sm| n@1)) o_18 f_22)) (U_2_bool (MapType1Select (MapType0Select Heap@25 null (|validRest#sm| n@1)) o_18 f_22)))) (U_2_bool (MapType1Select newPMask@59 o_18 f_22)))))
 :qid |stdinbpl.2144:39|
 :skolemid |91|
 :pattern ( (MapType1Select newPMask@59 o_18 f_22))
))) (and (= Heap@247 (MapType0Store Heap@25 null (|valid#sm| n@1) newPMask@59)) (forall ((o_19 T@U) (f_23 T@U) ) (! (let ((B@@39 (FieldTypeInv1 (type f_23))))
(let ((A@@40 (FieldTypeInv0 (type f_23))))
 (=> (and (and (= (type o_19) RefType) (= (type f_23) (FieldType A@@40 B@@39))) (or (U_2_bool (MapType1Select (MapType0Select Heap@247 null (|valid#sm| n@1)) o_19 f_23)) (U_2_bool (MapType1Select (MapType0Select Heap@247 null (|leftValid#sm| n@1)) o_19 f_23)))) (U_2_bool (MapType1Select newPMask@60 o_19 f_23)))))
 :qid |stdinbpl.2150:39|
 :skolemid |92|
 :pattern ( (MapType1Select newPMask@60 o_19 f_23))
))))) (and (and (and (= Heap@248 (MapType0Store Heap@247 null (|valid#sm| n@1) newPMask@60)) (forall ((o_20 T@U) (f_24 T@U) ) (! (let ((B@@40 (FieldTypeInv1 (type f_24))))
(let ((A@@41 (FieldTypeInv0 (type f_24))))
 (=> (and (and (= (type o_20) RefType) (= (type f_24) (FieldType A@@41 B@@40))) (or (U_2_bool (MapType1Select (MapType0Select Heap@248 null (|valid#sm| n@1)) o_20 f_24)) (U_2_bool (MapType1Select (MapType0Select Heap@248 null (|rightValid#sm| n@1)) o_20 f_24)))) (U_2_bool (MapType1Select newPMask@61 o_20 f_24)))))
 :qid |stdinbpl.2156:39|
 :skolemid |93|
 :pattern ( (MapType1Select newPMask@61 o_20 f_24))
))) (and (= Heap@249 (MapType0Store Heap@248 null (|valid#sm| n@1) newPMask@61)) (state Heap@249 Mask@36))) (and (and (not end@0) (state Heap@249 Mask@36)) (and (|valid#trigger| Heap@249 (valid n@1)) (= (MapType0Select Heap@249 null (valid n@1)) (CombineFrames (MapType0Select Heap@249 null (validRest n@1)) (CombineFrames (MapType0Select Heap@249 null (leftValid n@1)) (MapType0Select Heap@249 null (rightValid n@1))))))))) (and (=> (= (ControlFlow 0 1355) 1352) anon1049_Then_correct) (=> (= (ControlFlow 0 1355) 1354) anon1049_Else_correct)))))))
(let ((anon1048_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1358) 1355)) anon109_correct)))
(let ((anon1048_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1356) (- 0 1357)) (<= FullPerm (U_2_real (MapType1Select Mask@36 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@36 null (valid n@1)))) (=> (= (ControlFlow 0 1356) 1355) anon109_correct))))))
(let ((anon1047_Then_correct  (=> (and (state ExhaleHeap@0 ZeroMask) (not (= this@@53 null))) (=> (and (and (= Mask@32 (MapType1Store ZeroMask this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@53 root1)) FullPerm)))) (state ExhaleHeap@0 Mask@32)) (and (not (= (MapType0Select ExhaleHeap@0 this@@53 root1) null)) (= perm@11 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 1359) (- 0 1361)) (>= perm@11 NoPerm)) (=> (>= perm@11 NoPerm) (=> (=> (> perm@11 NoPerm) (not (= (MapType0Select ExhaleHeap@0 this@@53 root1) null))) (=> (and (= Mask@33 (MapType1Store Mask@32 (MapType0Select ExhaleHeap@0 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@32 (MapType0Select ExhaleHeap@0 this@@53 root1) parent)) perm@11)))) (state ExhaleHeap@0 Mask@33)) (=> (and (and (not (= n@1 null)) (= Mask@34 (MapType1Store Mask@33 null (valid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@33 null (valid n@1))) FullPerm))))) (and (state ExhaleHeap@0 Mask@34) (= perm@12 (/ (to_real 4) (to_real 10))))) (and (=> (= (ControlFlow 0 1359) (- 0 1360)) (>= perm@12 NoPerm)) (=> (>= perm@12 NoPerm) (=> (and (=> (> perm@12 NoPerm) (not (= n@1 null))) (= Mask@35 (MapType1Store Mask@34 n@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@34 n@1 root)) perm@12))))) (=> (and (and (state ExhaleHeap@0 Mask@35) (= Mask@36 (MapType1Store Mask@35 null (udParentValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@35 null (udParentValid n@1))) FullPerm))))) (and (state ExhaleHeap@0 Mask@36) (|valid#trigger| ExhaleHeap@0 (valid n@1)))) (=> (and (and (and (= (MapType0Select ExhaleHeap@0 null (valid n@1)) (CombineFrames (MapType0Select ExhaleHeap@0 null (validRest n@1)) (CombineFrames (MapType0Select ExhaleHeap@0 null (leftValid n@1)) (MapType0Select ExhaleHeap@0 null (rightValid n@1))))) (= UnfoldingMask@8 (MapType1Store Mask@36 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@36 null (valid n@1))) FullPerm))))) (and (= UnfoldingMask@9 (MapType1Store UnfoldingMask@8 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@8 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (validRest n@1) (MapType0Select ExhaleHeap@0 null (validRest n@1))))) (and (and (state ExhaleHeap@0 UnfoldingMask@9) (= UnfoldingMask@10 (MapType1Store UnfoldingMask@9 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@9 null (leftValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (leftValid n@1) (MapType0Select ExhaleHeap@0 null (leftValid n@1))) (state ExhaleHeap@0 UnfoldingMask@10)))) (=> (and (and (and (and (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 null (rightValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (rightValid n@1) (MapType0Select ExhaleHeap@0 null (rightValid n@1)))) (and (state ExhaleHeap@0 UnfoldingMask@11) (state ExhaleHeap@0 UnfoldingMask@11))) (and (and (= (MapType0Select ExhaleHeap@0 n@1 root) (MapType0Select ExhaleHeap@0 this@@53 root1)) (forall ((o_15 T@U) (f_19 T@U) ) (! (let ((B@@41 (FieldTypeInv1 (type f_19))))
(let ((A@@42 (FieldTypeInv0 (type f_19))))
 (=> (and (and (= (type o_15) RefType) (= (type f_19) (FieldType A@@42 B@@41))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@0 null (|valid#sm| n@1)) o_15 f_19)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@0 null (|validRest#sm| n@1)) o_15 f_19)))) (U_2_bool (MapType1Select newPMask@7 o_15 f_19)))))
 :qid |stdinbpl.2088:37|
 :skolemid |88|
 :pattern ( (MapType1Select newPMask@7 o_15 f_19))
))) (and (= Heap@23 (MapType0Store ExhaleHeap@0 null (|valid#sm| n@1) newPMask@7)) (forall ((o_16 T@U) (f_20 T@U) ) (! (let ((B@@42 (FieldTypeInv1 (type f_20))))
(let ((A@@43 (FieldTypeInv0 (type f_20))))
 (=> (and (and (= (type o_16) RefType) (= (type f_20) (FieldType A@@43 B@@42))) (or (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|valid#sm| n@1)) o_16 f_20)) (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|leftValid#sm| n@1)) o_16 f_20)))) (U_2_bool (MapType1Select newPMask@8 o_16 f_20)))))
 :qid |stdinbpl.2094:37|
 :skolemid |89|
 :pattern ( (MapType1Select newPMask@8 o_16 f_20))
))))) (and (and (and (= Heap@24 (MapType0Store Heap@23 null (|valid#sm| n@1) newPMask@8)) (forall ((o_17 T@U) (f_21 T@U) ) (! (let ((B@@43 (FieldTypeInv1 (type f_21))))
(let ((A@@44 (FieldTypeInv0 (type f_21))))
 (=> (and (and (= (type o_17) RefType) (= (type f_21) (FieldType A@@44 B@@43))) (or (U_2_bool (MapType1Select (MapType0Select Heap@24 null (|valid#sm| n@1)) o_17 f_21)) (U_2_bool (MapType1Select (MapType0Select Heap@24 null (|rightValid#sm| n@1)) o_17 f_21)))) (U_2_bool (MapType1Select newPMask@9 o_17 f_21)))))
 :qid |stdinbpl.2100:37|
 :skolemid |90|
 :pattern ( (MapType1Select newPMask@9 o_17 f_21))
))) (and (= Heap@25 (MapType0Store Heap@24 null (|valid#sm| n@1) newPMask@9)) (state Heap@25 Mask@36))) (and (and (not (= (MapType0Select Heap@25 this@@53 root1) null)) (state Heap@25 Mask@36)) (and (|valid#trigger| Heap@25 (valid n@1)) (= (MapType0Select Heap@25 null (valid n@1)) (CombineFrames (MapType0Select Heap@25 null (validRest n@1)) (CombineFrames (MapType0Select Heap@25 null (leftValid n@1)) (MapType0Select Heap@25 null (rightValid n@1))))))))) (and (=> (= (ControlFlow 0 1359) 1356) anon1048_Then_correct) (=> (= (ControlFlow 0 1359) 1358) anon1048_Else_correct)))))))))))))))))
(let ((anon557_correct true))
(let ((anon556_correct  (=> (and (and (state Heap@245 UnfoldingMask@189) (= (MapType0Select Heap@245 n@2 parent) null)) (and (= Heap@246 Heap@245) (= (ControlFlow 0 664) 662))) anon557_correct)))
(let ((anon1270_Else_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= (ControlFlow 0 666) 664)) anon556_correct)))
(let ((anon1270_Then_correct  (=> (= (MapType0Select Heap@245 n@2 parent) null) (=> (and (= (MapType0Select Heap@245 n@2 root) n@2) (= (ControlFlow 0 665) 664)) anon556_correct))))
(let ((anon1269_Else_correct  (=> (= (MapType0Select Heap@245 n@2 parent) null) (and (=> (= (ControlFlow 0 668) 665) anon1270_Then_correct) (=> (= (ControlFlow 0 668) 666) anon1270_Else_correct)))))
(let ((anon1269_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= (MapType0Select Heap@245 n@2 root) (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) root))) (and (=> (= (ControlFlow 0 667) 665) anon1270_Then_correct) (=> (= (ControlFlow 0 667) 666) anon1270_Else_correct)))))
(let ((anon1268_Else_correct  (=> (and (= (MapType0Select Heap@245 n@2 parent) null) (= UnfoldingMask@189 UnfoldingMask@187)) (and (=> (= (ControlFlow 0 670) 667) anon1269_Then_correct) (=> (= (ControlFlow 0 670) 668) anon1269_Else_correct)))))
(let ((anon1268_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= perm@122 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@122 NoPerm) (not (= (MapType0Select Heap@245 n@2 parent) null))) (= UnfoldingMask@188 (MapType1Store UnfoldingMask@187 (MapType0Select Heap@245 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@187 (MapType0Select Heap@245 n@2 parent) root)) perm@122))))) (and (state Heap@245 UnfoldingMask@188) (= UnfoldingMask@189 UnfoldingMask@188))) (and (=> (= (ControlFlow 0 669) 667) anon1269_Then_correct) (=> (= (ControlFlow 0 669) 668) anon1269_Else_correct))))))
(let ((anon1267_Else_correct  (=> (= (MapType0Select Heap@245 n@2 parent) null) (and (=> (= (ControlFlow 0 672) 669) anon1268_Then_correct) (=> (= (ControlFlow 0 672) 670) anon1268_Else_correct)))))
(let ((anon1267_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) leftDown))) (= (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 671) 669) anon1268_Then_correct) (=> (= (ControlFlow 0 671) 670) anon1268_Else_correct)))))
(let ((anon1266_Else_correct  (=> (and (= (MapType0Select Heap@245 n@2 parent) null) (= UnfoldingMask@187 UnfoldingMask@185)) (and (=> (= (ControlFlow 0 674) 671) anon1267_Then_correct) (=> (= (ControlFlow 0 674) 672) anon1267_Else_correct)))))
(let ((anon1266_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= perm@121 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@121 NoPerm) (not (= (MapType0Select Heap@245 n@2 parent) null))) (= UnfoldingMask@186 (MapType1Store UnfoldingMask@185 (MapType0Select Heap@245 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@185 (MapType0Select Heap@245 n@2 parent) right)) perm@121))))) (and (state Heap@245 UnfoldingMask@186) (= UnfoldingMask@187 UnfoldingMask@186))) (and (=> (= (ControlFlow 0 673) 671) anon1267_Then_correct) (=> (= (ControlFlow 0 673) 672) anon1267_Else_correct))))))
(let ((anon1265_Else_correct  (=> (= (MapType0Select Heap@245 n@2 parent) null) (and (=> (= (ControlFlow 0 676) 673) anon1266_Then_correct) (=> (= (ControlFlow 0 676) 674) anon1266_Else_correct)))))
(let ((anon1265_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) leftDown)) (= (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 675) 673) anon1266_Then_correct) (=> (= (ControlFlow 0 675) 674) anon1266_Else_correct)))))
(let ((anon1264_Else_correct  (=> (and (= (MapType0Select Heap@245 n@2 parent) null) (= UnfoldingMask@185 UnfoldingMask@183)) (and (=> (= (ControlFlow 0 678) 675) anon1265_Then_correct) (=> (= (ControlFlow 0 678) 676) anon1265_Else_correct)))))
(let ((anon1264_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= perm@120 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@120 NoPerm) (not (= (MapType0Select Heap@245 n@2 parent) null))) (= UnfoldingMask@184 (MapType1Store UnfoldingMask@183 (MapType0Select Heap@245 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@183 (MapType0Select Heap@245 n@2 parent) left)) perm@120))))) (and (state Heap@245 UnfoldingMask@184) (= UnfoldingMask@185 UnfoldingMask@184))) (and (=> (= (ControlFlow 0 677) 675) anon1265_Then_correct) (=> (= (ControlFlow 0 677) 676) anon1265_Else_correct))))))
(let ((anon1263_Else_correct  (=> (and (= (MapType0Select Heap@245 n@2 parent) null) (= UnfoldingMask@183 UnfoldingMask@181)) (and (=> (= (ControlFlow 0 680) 677) anon1264_Then_correct) (=> (= (ControlFlow 0 680) 678) anon1264_Else_correct)))))
(let ((anon1263_Then_correct  (=> (and (not (= (MapType0Select Heap@245 n@2 parent) null)) (= perm@119 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@119 NoPerm) (not (= (MapType0Select Heap@245 n@2 parent) null))) (= UnfoldingMask@182 (MapType1Store UnfoldingMask@181 (MapType0Select Heap@245 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@181 (MapType0Select Heap@245 n@2 parent) leftDown)) perm@119))))) (and (state Heap@245 UnfoldingMask@182) (= UnfoldingMask@183 UnfoldingMask@182))) (and (=> (= (ControlFlow 0 679) 677) anon1264_Then_correct) (=> (= (ControlFlow 0 679) 678) anon1264_Else_correct))))))
(let ((anon1262_Else_correct  (=> (and (= (MapType0Select Heap@245 n@2 parent) null) (= UnfoldingMask@181 UnfoldingMask@179)) (and (=> (= (ControlFlow 0 682) 679) anon1263_Then_correct) (=> (= (ControlFlow 0 682) 680) anon1263_Else_correct)))))
(let ((anon1262_Then_correct  (=> (not (= (MapType0Select Heap@245 n@2 parent) null)) (=> (and (and (= UnfoldingMask@180 (MapType1Store UnfoldingMask@179 null (udValid (MapType0Select Heap@245 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@179 null (udValid (MapType0Select Heap@245 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@245 null (udParentValid n@2)) (udValid (MapType0Select Heap@245 n@2 parent)) (MapType0Select Heap@245 null (udValid (MapType0Select Heap@245 n@2 parent))))) (and (state Heap@245 UnfoldingMask@180) (= UnfoldingMask@181 UnfoldingMask@180))) (and (=> (= (ControlFlow 0 681) 679) anon1263_Then_correct) (=> (= (ControlFlow 0 681) 680) anon1263_Else_correct))))))
(let ((anon538_correct  (=> (and (and (state Heap@245 Mask@51) (|udParentValid#trigger| Heap@245 (udParentValid n@2))) (and (= (MapType0Select Heap@245 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@245 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@245 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) (MapType0Select Heap@245 null (udValid (MapType0Select Heap@245 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) (FrameFragment (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) (FrameFragment (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) (FrameFragment (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) (FrameFragment (MapType0Select Heap@245 (MapType0Select Heap@245 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@245 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@245 n@2 parent) null) EmptyFrame EmptyFrame))))))))))))) (= UnfoldingMask@177 (MapType1Store Mask@51 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (udParentValid n@2))) FullPerm)))))) (=> (and (and (and (= perm@117 (/ (to_real 1) (to_real 2))) (=> (> perm@117 NoPerm) (not (= n@2 null)))) (and (= UnfoldingMask@178 (MapType1Store UnfoldingMask@177 n@2 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@177 n@2 parent)) perm@117)))) (state Heap@245 UnfoldingMask@178))) (and (and (= perm@118 (/ (to_real 1) (to_real 10))) (=> (> perm@118 NoPerm) (not (= n@2 null)))) (and (= UnfoldingMask@179 (MapType1Store UnfoldingMask@178 n@2 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@178 n@2 root)) perm@118)))) (state Heap@245 UnfoldingMask@179)))) (and (=> (= (ControlFlow 0 683) 681) anon1262_Then_correct) (=> (= (ControlFlow 0 683) 682) anon1262_Else_correct))))))
(let ((anon1261_Else_correct  (=> (= (MapType0Select Heap@243 n@2 parent) null) (=> (and (= Heap@245 Heap@243) (= (ControlFlow 0 685) 683)) anon538_correct))))
(let ((anon1261_Then_correct  (=> (and (and (not (= (MapType0Select Heap@243 n@2 parent) null)) (= Heap@244 (MapType0Store Heap@243 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@243 null (|udParentValid#sm| n@2)) (MapType0Select Heap@243 n@2 parent) root (bool_2_U true))))) (and (= Heap@245 Heap@244) (= (ControlFlow 0 684) 683))) anon538_correct)))
(let ((anon1260_Else_correct  (=> (and (= (MapType0Select Heap@241 n@2 parent) null) (= Heap@243 Heap@241)) (and (=> (= (ControlFlow 0 687) 684) anon1261_Then_correct) (=> (= (ControlFlow 0 687) 685) anon1261_Else_correct)))))
(let ((anon1260_Then_correct  (=> (not (= (MapType0Select Heap@241 n@2 parent) null)) (=> (and (= Heap@242 (MapType0Store Heap@241 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@241 null (|udParentValid#sm| n@2)) (MapType0Select Heap@241 n@2 parent) right (bool_2_U true)))) (= Heap@243 Heap@242)) (and (=> (= (ControlFlow 0 686) 684) anon1261_Then_correct) (=> (= (ControlFlow 0 686) 685) anon1261_Else_correct))))))
(let ((anon1259_Else_correct  (=> (and (= (MapType0Select Heap@239 n@2 parent) null) (= Heap@241 Heap@239)) (and (=> (= (ControlFlow 0 689) 686) anon1260_Then_correct) (=> (= (ControlFlow 0 689) 687) anon1260_Else_correct)))))
(let ((anon1259_Then_correct  (=> (not (= (MapType0Select Heap@239 n@2 parent) null)) (=> (and (= Heap@240 (MapType0Store Heap@239 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@239 null (|udParentValid#sm| n@2)) (MapType0Select Heap@239 n@2 parent) left (bool_2_U true)))) (= Heap@241 Heap@240)) (and (=> (= (ControlFlow 0 688) 686) anon1260_Then_correct) (=> (= (ControlFlow 0 688) 687) anon1260_Else_correct))))))
(let ((anon1258_Else_correct  (=> (and (= (MapType0Select Heap@237 n@2 parent) null) (= Heap@239 Heap@237)) (and (=> (= (ControlFlow 0 691) 688) anon1259_Then_correct) (=> (= (ControlFlow 0 691) 689) anon1259_Else_correct)))))
(let ((anon1258_Then_correct  (=> (not (= (MapType0Select Heap@237 n@2 parent) null)) (=> (and (= Heap@238 (MapType0Store Heap@237 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@237 null (|udParentValid#sm| n@2)) (MapType0Select Heap@237 n@2 parent) leftDown (bool_2_U true)))) (= Heap@239 Heap@238)) (and (=> (= (ControlFlow 0 690) 688) anon1259_Then_correct) (=> (= (ControlFlow 0 690) 689) anon1259_Else_correct))))))
(let ((anon1257_Else_correct  (=> (and (= (MapType0Select Heap@235 n@2 parent) null) (= Heap@237 Heap@235)) (and (=> (= (ControlFlow 0 693) 690) anon1258_Then_correct) (=> (= (ControlFlow 0 693) 691) anon1258_Else_correct)))))
(let ((anon1257_Then_correct  (=> (and (and (not (= (MapType0Select Heap@235 n@2 parent) null)) (forall ((o_65 T@U) (f_69 T@U) ) (! (let ((B@@44 (FieldTypeInv1 (type f_69))))
(let ((A@@45 (FieldTypeInv0 (type f_69))))
 (=> (and (and (= (type o_65) RefType) (= (type f_69) (FieldType A@@45 B@@44))) (or (U_2_bool (MapType1Select (MapType0Select Heap@235 null (|udParentValid#sm| n@2)) o_65 f_69)) (U_2_bool (MapType1Select (MapType0Select Heap@235 null (|udValid#sm| (MapType0Select Heap@235 n@2 parent))) o_65 f_69)))) (U_2_bool (MapType1Select newPMask@58 o_65 f_69)))))
 :qid |stdinbpl.4383:43|
 :skolemid |138|
 :pattern ( (MapType1Select newPMask@58 o_65 f_69))
))) (and (= Heap@236 (MapType0Store Heap@235 null (|udParentValid#sm| n@2) newPMask@58)) (= Heap@237 Heap@236))) (and (=> (= (ControlFlow 0 692) 690) anon1258_Then_correct) (=> (= (ControlFlow 0 692) 691) anon1258_Else_correct)))))
(let ((anon528_correct  (=> (state Heap@233 UnfoldingMask@176) (and (=> (= (ControlFlow 0 694) (- 0 695)) (HasDirectPerm UnfoldingMask@176 n@2 parent)) (=> (HasDirectPerm UnfoldingMask@176 n@2 parent) (=> (and (= Heap@234 (MapType0Store Heap@233 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@233 null (|udParentValid#sm| n@2)) n@2 parent (bool_2_U true)))) (= Heap@235 (MapType0Store Heap@234 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@234 null (|udParentValid#sm| n@2)) n@2 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 694) 692) anon1257_Then_correct) (=> (= (ControlFlow 0 694) 693) anon1257_Else_correct))))))))
(let ((anon1256_Else_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= (ControlFlow 0 697) 694)) anon528_correct)))
(let ((anon1256_Then_correct  (=> (= (MapType0Select Heap@233 n@2 parent) null) (=> (and (= (MapType0Select Heap@233 n@2 root) n@2) (= (ControlFlow 0 696) 694)) anon528_correct))))
(let ((anon1255_Else_correct  (=> (= (MapType0Select Heap@233 n@2 parent) null) (and (=> (= (ControlFlow 0 699) 696) anon1256_Then_correct) (=> (= (ControlFlow 0 699) 697) anon1256_Else_correct)))))
(let ((anon1255_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= (MapType0Select Heap@233 n@2 root) (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) root))) (and (=> (= (ControlFlow 0 698) 696) anon1256_Then_correct) (=> (= (ControlFlow 0 698) 697) anon1256_Else_correct)))))
(let ((anon1254_Else_correct  (=> (and (= (MapType0Select Heap@233 n@2 parent) null) (= UnfoldingMask@176 UnfoldingMask@174)) (and (=> (= (ControlFlow 0 702) 698) anon1255_Then_correct) (=> (= (ControlFlow 0 702) 699) anon1255_Else_correct)))))
(let ((anon1254_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= perm@116 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 700) (- 0 701)) (>= perm@116 NoPerm)) (=> (>= perm@116 NoPerm) (=> (and (and (=> (> perm@116 NoPerm) (not (= (MapType0Select Heap@233 n@2 parent) null))) (= UnfoldingMask@175 (MapType1Store UnfoldingMask@174 (MapType0Select Heap@233 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@174 (MapType0Select Heap@233 n@2 parent) root)) perm@116))))) (and (state Heap@233 UnfoldingMask@175) (= UnfoldingMask@176 UnfoldingMask@175))) (and (=> (= (ControlFlow 0 700) 698) anon1255_Then_correct) (=> (= (ControlFlow 0 700) 699) anon1255_Else_correct))))))))
(let ((anon1253_Else_correct  (=> (= (MapType0Select Heap@233 n@2 parent) null) (and (=> (= (ControlFlow 0 704) 700) anon1254_Then_correct) (=> (= (ControlFlow 0 704) 702) anon1254_Else_correct)))))
(let ((anon1253_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) leftDown))) (= (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 703) 700) anon1254_Then_correct) (=> (= (ControlFlow 0 703) 702) anon1254_Else_correct)))))
(let ((anon1252_Else_correct  (=> (and (= (MapType0Select Heap@233 n@2 parent) null) (= UnfoldingMask@174 UnfoldingMask@172)) (and (=> (= (ControlFlow 0 707) 703) anon1253_Then_correct) (=> (= (ControlFlow 0 707) 704) anon1253_Else_correct)))))
(let ((anon1252_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= perm@115 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 705) (- 0 706)) (>= perm@115 NoPerm)) (=> (>= perm@115 NoPerm) (=> (and (and (=> (> perm@115 NoPerm) (not (= (MapType0Select Heap@233 n@2 parent) null))) (= UnfoldingMask@173 (MapType1Store UnfoldingMask@172 (MapType0Select Heap@233 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@172 (MapType0Select Heap@233 n@2 parent) right)) perm@115))))) (and (state Heap@233 UnfoldingMask@173) (= UnfoldingMask@174 UnfoldingMask@173))) (and (=> (= (ControlFlow 0 705) 703) anon1253_Then_correct) (=> (= (ControlFlow 0 705) 704) anon1253_Else_correct))))))))
(let ((anon1251_Else_correct  (=> (= (MapType0Select Heap@233 n@2 parent) null) (and (=> (= (ControlFlow 0 709) 705) anon1252_Then_correct) (=> (= (ControlFlow 0 709) 707) anon1252_Else_correct)))))
(let ((anon1251_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) leftDown)) (= (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 708) 705) anon1252_Then_correct) (=> (= (ControlFlow 0 708) 707) anon1252_Else_correct)))))
(let ((anon1250_Else_correct  (=> (and (= (MapType0Select Heap@233 n@2 parent) null) (= UnfoldingMask@172 UnfoldingMask@170)) (and (=> (= (ControlFlow 0 712) 708) anon1251_Then_correct) (=> (= (ControlFlow 0 712) 709) anon1251_Else_correct)))))
(let ((anon1250_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= perm@114 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 710) (- 0 711)) (>= perm@114 NoPerm)) (=> (>= perm@114 NoPerm) (=> (and (and (=> (> perm@114 NoPerm) (not (= (MapType0Select Heap@233 n@2 parent) null))) (= UnfoldingMask@171 (MapType1Store UnfoldingMask@170 (MapType0Select Heap@233 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@170 (MapType0Select Heap@233 n@2 parent) left)) perm@114))))) (and (state Heap@233 UnfoldingMask@171) (= UnfoldingMask@172 UnfoldingMask@171))) (and (=> (= (ControlFlow 0 710) 708) anon1251_Then_correct) (=> (= (ControlFlow 0 710) 709) anon1251_Else_correct))))))))
(let ((anon1249_Else_correct  (=> (and (= (MapType0Select Heap@233 n@2 parent) null) (= UnfoldingMask@170 UnfoldingMask@168)) (and (=> (= (ControlFlow 0 715) 710) anon1250_Then_correct) (=> (= (ControlFlow 0 715) 712) anon1250_Else_correct)))))
(let ((anon1249_Then_correct  (=> (and (not (= (MapType0Select Heap@233 n@2 parent) null)) (= perm@113 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 713) (- 0 714)) (>= perm@113 NoPerm)) (=> (>= perm@113 NoPerm) (=> (and (and (=> (> perm@113 NoPerm) (not (= (MapType0Select Heap@233 n@2 parent) null))) (= UnfoldingMask@169 (MapType1Store UnfoldingMask@168 (MapType0Select Heap@233 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@168 (MapType0Select Heap@233 n@2 parent) leftDown)) perm@113))))) (and (state Heap@233 UnfoldingMask@169) (= UnfoldingMask@170 UnfoldingMask@169))) (and (=> (= (ControlFlow 0 713) 710) anon1250_Then_correct) (=> (= (ControlFlow 0 713) 712) anon1250_Else_correct))))))))
(let ((anon1248_Else_correct  (=> (and (= (MapType0Select Heap@233 n@2 parent) null) (= UnfoldingMask@168 UnfoldingMask@166)) (and (=> (= (ControlFlow 0 717) 713) anon1249_Then_correct) (=> (= (ControlFlow 0 717) 715) anon1249_Else_correct)))))
(let ((anon1248_Then_correct  (=> (not (= (MapType0Select Heap@233 n@2 parent) null)) (=> (and (and (= UnfoldingMask@167 (MapType1Store UnfoldingMask@166 null (udValid (MapType0Select Heap@233 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@166 null (udValid (MapType0Select Heap@233 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@233 null (udParentValid n@2)) (udValid (MapType0Select Heap@233 n@2 parent)) (MapType0Select Heap@233 null (udValid (MapType0Select Heap@233 n@2 parent))))) (and (state Heap@233 UnfoldingMask@167) (= UnfoldingMask@168 UnfoldingMask@167))) (and (=> (= (ControlFlow 0 716) 713) anon1249_Then_correct) (=> (= (ControlFlow 0 716) 715) anon1249_Else_correct))))))
(let ((anon510_correct  (=> (and (= UnfoldingMask@164 (MapType1Store Mask@51 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (udParentValid n@2))) FullPerm)))) (= perm@111 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 718) (- 0 720)) (>= perm@111 NoPerm)) (=> (>= perm@111 NoPerm) (=> (and (and (=> (> perm@111 NoPerm) (not (= n@2 null))) (= UnfoldingMask@165 (MapType1Store UnfoldingMask@164 n@2 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@164 n@2 parent)) perm@111))))) (and (state Heap@233 UnfoldingMask@165) (= perm@112 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 718) (- 0 719)) (>= perm@112 NoPerm)) (=> (>= perm@112 NoPerm) (=> (=> (> perm@112 NoPerm) (not (= n@2 null))) (=> (and (= UnfoldingMask@166 (MapType1Store UnfoldingMask@165 n@2 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@165 n@2 root)) perm@112)))) (state Heap@233 UnfoldingMask@166)) (and (=> (= (ControlFlow 0 718) 716) anon1248_Then_correct) (=> (= (ControlFlow 0 718) 717) anon1248_Else_correct))))))))))))
(let ((anon1247_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 723) 718)) anon510_correct)))
(let ((anon1247_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 721) (- 0 722)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (udParentValid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (udParentValid n@2)))) (=> (= (ControlFlow 0 721) 718) anon510_correct))))))
(let ((anon1246_Then_correct  (=> end@1 (=> (and (|udParentValid#trigger| Heap@233 (udParentValid n@2)) (= (MapType0Select Heap@233 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@233 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@233 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) (MapType0Select Heap@233 null (udValid (MapType0Select Heap@233 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) (FrameFragment (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) (FrameFragment (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) (FrameFragment (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) (FrameFragment (MapType0Select Heap@233 (MapType0Select Heap@233 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@233 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@233 n@2 parent) null) EmptyFrame EmptyFrame)))))))))))))) (and (=> (= (ControlFlow 0 724) 721) anon1247_Then_correct) (=> (= (ControlFlow 0 724) 723) anon1247_Else_correct))))))
(let ((anon1246_Else_correct  (=> (not end@1) (=> (and (= Heap@246 Heap@233) (= (ControlFlow 0 663) 662)) anon557_correct))))
(let ((anon507_correct  (=> (= UnfoldingMask@156 (MapType1Store Mask@51 null (valid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (valid n@2))) FullPerm)))) (=> (and (= UnfoldingMask@157 (MapType1Store UnfoldingMask@156 null (validRest n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@156 null (validRest n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (validRest n@2) (MapType0Select ExhaleHeap@1 null (validRest n@2)))) (=> (and (and (and (state ExhaleHeap@1 UnfoldingMask@157) (= UnfoldingMask@158 (MapType1Store UnfoldingMask@157 null (leftValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@157 null (leftValid n@2))) FullPerm))))) (and (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (leftValid n@2) (MapType0Select ExhaleHeap@1 null (leftValid n@2))) (state ExhaleHeap@1 UnfoldingMask@158))) (and (and (= UnfoldingMask@159 (MapType1Store UnfoldingMask@158 null (rightValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@158 null (rightValid n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (rightValid n@2) (MapType0Select ExhaleHeap@1 null (rightValid n@2)))) (and (state ExhaleHeap@1 UnfoldingMask@159) (state ExhaleHeap@1 UnfoldingMask@159)))) (and (=> (= (ControlFlow 0 725) (- 0 728)) (HasDirectPerm UnfoldingMask@159 n@2 root)) (=> (HasDirectPerm UnfoldingMask@159 n@2 root) (and (=> (= (ControlFlow 0 725) (- 0 727)) (HasDirectPerm UnfoldingMask@159 this@@53 root1)) (=> (HasDirectPerm UnfoldingMask@159 this@@53 root1) (=> (and (forall ((o_62 T@U) (f_66 T@U) ) (! (let ((B@@45 (FieldTypeInv1 (type f_66))))
(let ((A@@46 (FieldTypeInv0 (type f_66))))
 (=> (and (and (= (type o_62) RefType) (= (type f_66) (FieldType A@@46 B@@45))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|valid#sm| n@2)) o_62 f_66)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|validRest#sm| n@2)) o_62 f_66)))) (U_2_bool (MapType1Select newPMask@55 o_62 f_66)))))
 :qid |stdinbpl.4240:39|
 :skolemid |135|
 :pattern ( (MapType1Select newPMask@55 o_62 f_66))
)) (= Heap@231 (MapType0Store ExhaleHeap@1 null (|valid#sm| n@2) newPMask@55))) (=> (and (and (forall ((o_63 T@U) (f_67 T@U) ) (! (let ((B@@46 (FieldTypeInv1 (type f_67))))
(let ((A@@47 (FieldTypeInv0 (type f_67))))
 (=> (and (and (= (type o_63) RefType) (= (type f_67) (FieldType A@@47 B@@46))) (or (U_2_bool (MapType1Select (MapType0Select Heap@231 null (|valid#sm| n@2)) o_63 f_67)) (U_2_bool (MapType1Select (MapType0Select Heap@231 null (|leftValid#sm| n@2)) o_63 f_67)))) (U_2_bool (MapType1Select newPMask@56 o_63 f_67)))))
 :qid |stdinbpl.4246:39|
 :skolemid |136|
 :pattern ( (MapType1Select newPMask@56 o_63 f_67))
)) (= Heap@232 (MapType0Store Heap@231 null (|valid#sm| n@2) newPMask@56))) (and (forall ((o_64 T@U) (f_68 T@U) ) (! (let ((B@@47 (FieldTypeInv1 (type f_68))))
(let ((A@@48 (FieldTypeInv0 (type f_68))))
 (=> (and (and (= (type o_64) RefType) (= (type f_68) (FieldType A@@48 B@@47))) (or (U_2_bool (MapType1Select (MapType0Select Heap@232 null (|valid#sm| n@2)) o_64 f_68)) (U_2_bool (MapType1Select (MapType0Select Heap@232 null (|rightValid#sm| n@2)) o_64 f_68)))) (U_2_bool (MapType1Select newPMask@57 o_64 f_68)))))
 :qid |stdinbpl.4252:39|
 :skolemid |137|
 :pattern ( (MapType1Select newPMask@57 o_64 f_68))
)) (= Heap@233 (MapType0Store Heap@232 null (|valid#sm| n@2) newPMask@57)))) (=> (and (and (and (and (state Heap@233 Mask@51) (|valid#trigger| Heap@233 (valid n@2))) (and (= (MapType0Select Heap@233 null (valid n@2)) (CombineFrames (MapType0Select Heap@233 null (validRest n@2)) (CombineFrames (MapType0Select Heap@233 null (leftValid n@2)) (MapType0Select Heap@233 null (rightValid n@2))))) (= UnfoldingMask@160 (MapType1Store Mask@51 null (valid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (valid n@2))) FullPerm)))))) (and (and (= UnfoldingMask@161 (MapType1Store UnfoldingMask@160 null (validRest n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@160 null (validRest n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select Heap@233 null (valid n@2)) (validRest n@2) (MapType0Select Heap@233 null (validRest n@2)))) (and (state Heap@233 UnfoldingMask@161) (= UnfoldingMask@162 (MapType1Store UnfoldingMask@161 null (leftValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@161 null (leftValid n@2))) FullPerm))))))) (and (and (and (InsidePredicate (valid n@2) (MapType0Select Heap@233 null (valid n@2)) (leftValid n@2) (MapType0Select Heap@233 null (leftValid n@2))) (state Heap@233 UnfoldingMask@162)) (and (= UnfoldingMask@163 (MapType1Store UnfoldingMask@162 null (rightValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@162 null (rightValid n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select Heap@233 null (valid n@2)) (rightValid n@2) (MapType0Select Heap@233 null (rightValid n@2))))) (and (and (state Heap@233 UnfoldingMask@163) (state Heap@233 UnfoldingMask@163)) (and (= (MapType0Select Heap@233 n@2 root) (MapType0Select Heap@233 this@@53 root1)) (state Heap@233 Mask@51))))) (and (=> (= (ControlFlow 0 725) (- 0 726)) (HasDirectPerm Mask@51 this@@53 root1)) (=> (HasDirectPerm Mask@51 this@@53 root1) (=> (and (not (= (MapType0Select Heap@233 this@@53 root1) null)) (state Heap@233 Mask@51)) (and (=> (= (ControlFlow 0 725) 724) anon1246_Then_correct) (=> (= (ControlFlow 0 725) 663) anon1246_Else_correct)))))))))))))))))
(let ((anon1245_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 731) 725)) anon507_correct)))
(let ((anon1245_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 729) (- 0 730)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (valid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (valid n@2)))) (=> (= (ControlFlow 0 729) 725) anon507_correct))))))
(let ((anon1244_Then_correct  (=> (and (and (not (= this@@53 null)) (= Mask@47 (MapType1Store Mask@46 this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select Mask@46 this@@53 root1)) FullPerm))))) (and (state ExhaleHeap@1 Mask@47) (state ExhaleHeap@1 Mask@47))) (and (=> (= (ControlFlow 0 732) (- 0 736)) (HasDirectPerm Mask@47 this@@53 root1)) (=> (HasDirectPerm Mask@47 this@@53 root1) (=> (not (= (MapType0Select ExhaleHeap@1 this@@53 root1) null)) (and (=> (= (ControlFlow 0 732) (- 0 735)) (HasDirectPerm Mask@47 this@@53 root1)) (=> (HasDirectPerm Mask@47 this@@53 root1) (=> (= perm@29 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 732) (- 0 734)) (>= perm@29 NoPerm)) (=> (>= perm@29 NoPerm) (=> (=> (> perm@29 NoPerm) (not (= (MapType0Select ExhaleHeap@1 this@@53 root1) null))) (=> (and (and (= Mask@48 (MapType1Store Mask@47 (MapType0Select ExhaleHeap@1 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@47 (MapType0Select ExhaleHeap@1 this@@53 root1) parent)) perm@29)))) (state ExhaleHeap@1 Mask@48)) (and (state ExhaleHeap@1 Mask@48) (not (= n@2 null)))) (=> (and (and (and (state ExhaleHeap@1 Mask@48) (= Mask@49 (MapType1Store Mask@48 null (valid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@48 null (valid n@2))) FullPerm))))) (and (state ExhaleHeap@1 Mask@49) (state ExhaleHeap@1 Mask@49))) (and (and (= Mask@50 (MapType1Store Mask@49 null (udParentValid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@49 null (udParentValid n@2))) FullPerm)))) (state ExhaleHeap@1 Mask@50)) (and (state ExhaleHeap@1 Mask@50) (= perm@30 (/ (to_real 4) (to_real 10)))))) (and (=> (= (ControlFlow 0 732) (- 0 733)) (>= perm@30 NoPerm)) (=> (>= perm@30 NoPerm) (=> (and (=> (> perm@30 NoPerm) (not (= n@2 null))) (= Mask@51 (MapType1Store Mask@50 n@2 root (real_2_U (+ (U_2_real (MapType1Select Mask@50 n@2 root)) perm@30))))) (=> (and (and (state ExhaleHeap@1 Mask@51) (state ExhaleHeap@1 Mask@51)) (and (|valid#trigger| ExhaleHeap@1 (valid n@2)) (= (MapType0Select ExhaleHeap@1 null (valid n@2)) (CombineFrames (MapType0Select ExhaleHeap@1 null (validRest n@2)) (CombineFrames (MapType0Select ExhaleHeap@1 null (leftValid n@2)) (MapType0Select ExhaleHeap@1 null (rightValid n@2))))))) (and (=> (= (ControlFlow 0 732) 729) anon1245_Then_correct) (=> (= (ControlFlow 0 732) 731) anon1245_Else_correct))))))))))))))))))))
(let ((anon877_correct true))
(let ((anon1429_Else_correct  (=> (= (MapType0Select Heap@228 n@3 parent) null) (=> (and (= Heap@230 Heap@228) (= (ControlFlow 0 166) 164)) anon877_correct))))
(let ((anon1429_Then_correct  (=> (and (and (not (= (MapType0Select Heap@228 n@3 parent) null)) (= Heap@229 (MapType0Store Heap@228 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@228 null (|udParentValid#sm| n@3)) (MapType0Select Heap@228 n@3 parent) root (bool_2_U true))))) (and (= Heap@230 Heap@229) (= (ControlFlow 0 165) 164))) anon877_correct)))
(let ((anon1428_Else_correct  (=> (and (= (MapType0Select Heap@226 n@3 parent) null) (= Heap@228 Heap@226)) (and (=> (= (ControlFlow 0 168) 165) anon1429_Then_correct) (=> (= (ControlFlow 0 168) 166) anon1429_Else_correct)))))
(let ((anon1428_Then_correct  (=> (not (= (MapType0Select Heap@226 n@3 parent) null)) (=> (and (= Heap@227 (MapType0Store Heap@226 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@226 null (|udParentValid#sm| n@3)) (MapType0Select Heap@226 n@3 parent) right (bool_2_U true)))) (= Heap@228 Heap@227)) (and (=> (= (ControlFlow 0 167) 165) anon1429_Then_correct) (=> (= (ControlFlow 0 167) 166) anon1429_Else_correct))))))
(let ((anon1427_Else_correct  (=> (and (= (MapType0Select Heap@224 n@3 parent) null) (= Heap@226 Heap@224)) (and (=> (= (ControlFlow 0 170) 167) anon1428_Then_correct) (=> (= (ControlFlow 0 170) 168) anon1428_Else_correct)))))
(let ((anon1427_Then_correct  (=> (not (= (MapType0Select Heap@224 n@3 parent) null)) (=> (and (= Heap@225 (MapType0Store Heap@224 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@224 null (|udParentValid#sm| n@3)) (MapType0Select Heap@224 n@3 parent) left (bool_2_U true)))) (= Heap@226 Heap@225)) (and (=> (= (ControlFlow 0 169) 167) anon1428_Then_correct) (=> (= (ControlFlow 0 169) 168) anon1428_Else_correct))))))
(let ((anon1426_Else_correct  (=> (and (= (MapType0Select Heap@222 n@3 parent) null) (= Heap@224 Heap@222)) (and (=> (= (ControlFlow 0 172) 169) anon1427_Then_correct) (=> (= (ControlFlow 0 172) 170) anon1427_Else_correct)))))
(let ((anon1426_Then_correct  (=> (not (= (MapType0Select Heap@222 n@3 parent) null)) (=> (and (= Heap@223 (MapType0Store Heap@222 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@222 null (|udParentValid#sm| n@3)) (MapType0Select Heap@222 n@3 parent) leftDown (bool_2_U true)))) (= Heap@224 Heap@223)) (and (=> (= (ControlFlow 0 171) 169) anon1427_Then_correct) (=> (= (ControlFlow 0 171) 170) anon1427_Else_correct))))))
(let ((anon1425_Else_correct  (=> (and (= (MapType0Select Heap@220 n@3 parent) null) (= Heap@222 Heap@220)) (and (=> (= (ControlFlow 0 174) 171) anon1426_Then_correct) (=> (= (ControlFlow 0 174) 172) anon1426_Else_correct)))))
(let ((anon1425_Then_correct  (=> (and (and (not (= (MapType0Select Heap@220 n@3 parent) null)) (forall ((o_87 T@U) (f_91 T@U) ) (! (let ((B@@48 (FieldTypeInv1 (type f_91))))
(let ((A@@49 (FieldTypeInv0 (type f_91))))
 (=> (and (and (= (type o_87) RefType) (= (type f_91) (FieldType A@@49 B@@48))) (or (U_2_bool (MapType1Select (MapType0Select Heap@220 null (|udParentValid#sm| n@3)) o_87 f_91)) (U_2_bool (MapType1Select (MapType0Select Heap@220 null (|udValid#sm| (MapType0Select Heap@220 n@3 parent))) o_87 f_91)))) (U_2_bool (MapType1Select newPMask@54 o_87 f_91)))))
 :qid |stdinbpl.5862:39|
 :skolemid |160|
 :pattern ( (MapType1Select newPMask@54 o_87 f_91))
))) (and (= Heap@221 (MapType0Store Heap@220 null (|udParentValid#sm| n@3) newPMask@54)) (= Heap@222 Heap@221))) (and (=> (= (ControlFlow 0 173) 171) anon1426_Then_correct) (=> (= (ControlFlow 0 173) 172) anon1426_Else_correct)))))
(let ((anon867_correct  (=> (forall ((o_84 T@U) (f_88 T@U) ) (! (let ((B@@49 (FieldTypeInv1 (type f_88))))
(let ((A@@50 (FieldTypeInv0 (type f_88))))
 (=> (and (and (= (type o_84) RefType) (= (type f_88) (FieldType A@@50 B@@49))) (or (U_2_bool (MapType1Select (MapType0Select Heap@215 null (|valid#sm| n@3)) o_84 f_88)) (U_2_bool (MapType1Select (MapType0Select Heap@215 null (|validRest#sm| n@3)) o_84 f_88)))) (U_2_bool (MapType1Select newPMask@51 o_84 f_88)))))
 :qid |stdinbpl.5840:37|
 :skolemid |157|
 :pattern ( (MapType1Select newPMask@51 o_84 f_88))
)) (=> (and (and (and (= Heap@216 (MapType0Store Heap@215 null (|valid#sm| n@3) newPMask@51)) (forall ((o_85 T@U) (f_89 T@U) ) (! (let ((B@@50 (FieldTypeInv1 (type f_89))))
(let ((A@@51 (FieldTypeInv0 (type f_89))))
 (=> (and (and (= (type o_85) RefType) (= (type f_89) (FieldType A@@51 B@@50))) (or (U_2_bool (MapType1Select (MapType0Select Heap@216 null (|valid#sm| n@3)) o_85 f_89)) (U_2_bool (MapType1Select (MapType0Select Heap@216 null (|leftValid#sm| n@3)) o_85 f_89)))) (U_2_bool (MapType1Select newPMask@52 o_85 f_89)))))
 :qid |stdinbpl.5846:37|
 :skolemid |158|
 :pattern ( (MapType1Select newPMask@52 o_85 f_89))
))) (and (= Heap@217 (MapType0Store Heap@216 null (|valid#sm| n@3) newPMask@52)) (forall ((o_86 T@U) (f_90 T@U) ) (! (let ((B@@51 (FieldTypeInv1 (type f_90))))
(let ((A@@52 (FieldTypeInv0 (type f_90))))
 (=> (and (and (= (type o_86) RefType) (= (type f_90) (FieldType A@@52 B@@51))) (or (U_2_bool (MapType1Select (MapType0Select Heap@217 null (|valid#sm| n@3)) o_86 f_90)) (U_2_bool (MapType1Select (MapType0Select Heap@217 null (|rightValid#sm| n@3)) o_86 f_90)))) (U_2_bool (MapType1Select newPMask@53 o_86 f_90)))))
 :qid |stdinbpl.5852:37|
 :skolemid |159|
 :pattern ( (MapType1Select newPMask@53 o_86 f_90))
)))) (and (and (= Heap@218 (MapType0Store Heap@217 null (|valid#sm| n@3) newPMask@53)) (state Heap@218 Mask@168)) (and (= Heap@219 (MapType0Store Heap@218 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@218 null (|udParentValid#sm| n@3)) n@3 parent (bool_2_U true)))) (= Heap@220 (MapType0Store Heap@219 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@219 null (|udParentValid#sm| n@3)) n@3 root (bool_2_U true))))))) (and (=> (= (ControlFlow 0 175) 173) anon1425_Then_correct) (=> (= (ControlFlow 0 175) 174) anon1425_Else_correct))))))
(let ((anon866_correct  (=> (state Heap@215 UnfoldingMask@155) (and (=> (= (ControlFlow 0 177) (- 0 178)) (= (MapType0Select Heap@215 n@3 parent) null)) (=> (= (MapType0Select Heap@215 n@3 parent) null) (=> (= (ControlFlow 0 177) 175) anon867_correct))))))
(let ((anon1424_Else_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= (ControlFlow 0 180) 177)) anon866_correct)))
(let ((anon1424_Then_correct  (=> (= (MapType0Select Heap@215 n@3 parent) null) (=> (and (= (MapType0Select Heap@215 n@3 root) n@3) (= (ControlFlow 0 179) 177)) anon866_correct))))
(let ((anon1423_Else_correct  (=> (= (MapType0Select Heap@215 n@3 parent) null) (and (=> (= (ControlFlow 0 182) 179) anon1424_Then_correct) (=> (= (ControlFlow 0 182) 180) anon1424_Else_correct)))))
(let ((anon1423_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= (MapType0Select Heap@215 n@3 root) (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) root))) (and (=> (= (ControlFlow 0 181) 179) anon1424_Then_correct) (=> (= (ControlFlow 0 181) 180) anon1424_Else_correct)))))
(let ((anon1422_Else_correct  (=> (and (= (MapType0Select Heap@215 n@3 parent) null) (= UnfoldingMask@155 UnfoldingMask@153)) (and (=> (= (ControlFlow 0 185) 181) anon1423_Then_correct) (=> (= (ControlFlow 0 185) 182) anon1423_Else_correct)))))
(let ((anon1422_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= perm@110 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 183) (- 0 184)) (>= perm@110 NoPerm)) (=> (>= perm@110 NoPerm) (=> (and (and (=> (> perm@110 NoPerm) (not (= (MapType0Select Heap@215 n@3 parent) null))) (= UnfoldingMask@154 (MapType1Store UnfoldingMask@153 (MapType0Select Heap@215 n@3 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@153 (MapType0Select Heap@215 n@3 parent) root)) perm@110))))) (and (state Heap@215 UnfoldingMask@154) (= UnfoldingMask@155 UnfoldingMask@154))) (and (=> (= (ControlFlow 0 183) 181) anon1423_Then_correct) (=> (= (ControlFlow 0 183) 182) anon1423_Else_correct))))))))
(let ((anon1421_Else_correct  (=> (= (MapType0Select Heap@215 n@3 parent) null) (and (=> (= (ControlFlow 0 187) 183) anon1422_Then_correct) (=> (= (ControlFlow 0 187) 185) anon1422_Else_correct)))))
(let ((anon1421_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) leftDown))) (= (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) right) n@3))) (and (=> (= (ControlFlow 0 186) 183) anon1422_Then_correct) (=> (= (ControlFlow 0 186) 185) anon1422_Else_correct)))))
(let ((anon1420_Else_correct  (=> (and (= (MapType0Select Heap@215 n@3 parent) null) (= UnfoldingMask@153 UnfoldingMask@151)) (and (=> (= (ControlFlow 0 190) 186) anon1421_Then_correct) (=> (= (ControlFlow 0 190) 187) anon1421_Else_correct)))))
(let ((anon1420_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= perm@109 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 188) (- 0 189)) (>= perm@109 NoPerm)) (=> (>= perm@109 NoPerm) (=> (and (and (=> (> perm@109 NoPerm) (not (= (MapType0Select Heap@215 n@3 parent) null))) (= UnfoldingMask@152 (MapType1Store UnfoldingMask@151 (MapType0Select Heap@215 n@3 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@151 (MapType0Select Heap@215 n@3 parent) right)) perm@109))))) (and (state Heap@215 UnfoldingMask@152) (= UnfoldingMask@153 UnfoldingMask@152))) (and (=> (= (ControlFlow 0 188) 186) anon1421_Then_correct) (=> (= (ControlFlow 0 188) 187) anon1421_Else_correct))))))))
(let ((anon1419_Else_correct  (=> (= (MapType0Select Heap@215 n@3 parent) null) (and (=> (= (ControlFlow 0 192) 188) anon1420_Then_correct) (=> (= (ControlFlow 0 192) 190) anon1420_Else_correct)))))
(let ((anon1419_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= (U_2_bool (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) leftDown)) (= (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) left) n@3))) (and (=> (= (ControlFlow 0 191) 188) anon1420_Then_correct) (=> (= (ControlFlow 0 191) 190) anon1420_Else_correct)))))
(let ((anon1418_Else_correct  (=> (and (= (MapType0Select Heap@215 n@3 parent) null) (= UnfoldingMask@151 UnfoldingMask@149)) (and (=> (= (ControlFlow 0 195) 191) anon1419_Then_correct) (=> (= (ControlFlow 0 195) 192) anon1419_Else_correct)))))
(let ((anon1418_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= perm@108 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 193) (- 0 194)) (>= perm@108 NoPerm)) (=> (>= perm@108 NoPerm) (=> (and (and (=> (> perm@108 NoPerm) (not (= (MapType0Select Heap@215 n@3 parent) null))) (= UnfoldingMask@150 (MapType1Store UnfoldingMask@149 (MapType0Select Heap@215 n@3 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@149 (MapType0Select Heap@215 n@3 parent) left)) perm@108))))) (and (state Heap@215 UnfoldingMask@150) (= UnfoldingMask@151 UnfoldingMask@150))) (and (=> (= (ControlFlow 0 193) 191) anon1419_Then_correct) (=> (= (ControlFlow 0 193) 192) anon1419_Else_correct))))))))
(let ((anon1417_Else_correct  (=> (and (= (MapType0Select Heap@215 n@3 parent) null) (= UnfoldingMask@149 UnfoldingMask@147)) (and (=> (= (ControlFlow 0 198) 193) anon1418_Then_correct) (=> (= (ControlFlow 0 198) 195) anon1418_Else_correct)))))
(let ((anon1417_Then_correct  (=> (and (not (= (MapType0Select Heap@215 n@3 parent) null)) (= perm@107 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 196) (- 0 197)) (>= perm@107 NoPerm)) (=> (>= perm@107 NoPerm) (=> (and (and (=> (> perm@107 NoPerm) (not (= (MapType0Select Heap@215 n@3 parent) null))) (= UnfoldingMask@148 (MapType1Store UnfoldingMask@147 (MapType0Select Heap@215 n@3 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@147 (MapType0Select Heap@215 n@3 parent) leftDown)) perm@107))))) (and (state Heap@215 UnfoldingMask@148) (= UnfoldingMask@149 UnfoldingMask@148))) (and (=> (= (ControlFlow 0 196) 193) anon1418_Then_correct) (=> (= (ControlFlow 0 196) 195) anon1418_Else_correct))))))))
(let ((anon1416_Else_correct  (=> (and (= (MapType0Select Heap@215 n@3 parent) null) (= UnfoldingMask@147 UnfoldingMask@145)) (and (=> (= (ControlFlow 0 200) 196) anon1417_Then_correct) (=> (= (ControlFlow 0 200) 198) anon1417_Else_correct)))))
(let ((anon1416_Then_correct  (=> (not (= (MapType0Select Heap@215 n@3 parent) null)) (=> (and (and (= UnfoldingMask@146 (MapType1Store UnfoldingMask@145 null (udValid (MapType0Select Heap@215 n@3 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@145 null (udValid (MapType0Select Heap@215 n@3 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@3) (MapType0Select Heap@215 null (udParentValid n@3)) (udValid (MapType0Select Heap@215 n@3 parent)) (MapType0Select Heap@215 null (udValid (MapType0Select Heap@215 n@3 parent))))) (and (state Heap@215 UnfoldingMask@146) (= UnfoldingMask@147 UnfoldingMask@146))) (and (=> (= (ControlFlow 0 199) 196) anon1417_Then_correct) (=> (= (ControlFlow 0 199) 198) anon1417_Else_correct))))))
(let ((anon848_correct  (=> (and (= UnfoldingMask@143 (MapType1Store Mask@163 null (udParentValid n@3) (real_2_U (- (U_2_real (MapType1Select Mask@163 null (udParentValid n@3))) FullPerm)))) (= perm@105 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 201) (- 0 203)) (>= perm@105 NoPerm)) (=> (>= perm@105 NoPerm) (=> (and (and (=> (> perm@105 NoPerm) (not (= n@3 null))) (= UnfoldingMask@144 (MapType1Store UnfoldingMask@143 n@3 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@143 n@3 parent)) perm@105))))) (and (state Heap@215 UnfoldingMask@144) (= perm@106 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 201) (- 0 202)) (>= perm@106 NoPerm)) (=> (>= perm@106 NoPerm) (=> (=> (> perm@106 NoPerm) (not (= n@3 null))) (=> (and (= UnfoldingMask@145 (MapType1Store UnfoldingMask@144 n@3 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@144 n@3 root)) perm@106)))) (state Heap@215 UnfoldingMask@145)) (and (=> (= (ControlFlow 0 201) 199) anon1416_Then_correct) (=> (= (ControlFlow 0 201) 200) anon1416_Else_correct))))))))))))
(let ((anon1415_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 206) 201)) anon848_correct)))
(let ((anon1415_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 204) (- 0 205)) (<= FullPerm (U_2_real (MapType1Select Mask@163 null (udParentValid n@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@163 null (udParentValid n@3)))) (=> (= (ControlFlow 0 204) 201) anon848_correct))))))
(let ((anon1414_Then_correct  (=> end@2 (=> (and (|udParentValid#trigger| Heap@215 (udParentValid n@3)) (= (MapType0Select Heap@215 null (udParentValid n@3)) (CombineFrames (FrameFragment (MapType0Select Heap@215 n@3 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@215 n@3 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) (MapType0Select Heap@215 null (udValid (MapType0Select Heap@215 n@3 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) (FrameFragment (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) (FrameFragment (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) (FrameFragment (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) (FrameFragment (MapType0Select Heap@215 (MapType0Select Heap@215 n@3 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@215 n@3 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@215 n@3 parent) null) EmptyFrame EmptyFrame)))))))))))))) (and (=> (= (ControlFlow 0 207) 204) anon1415_Then_correct) (=> (= (ControlFlow 0 207) 206) anon1415_Else_correct))))))
(let ((anon1414_Else_correct  (=> (and (not end@2) (= (ControlFlow 0 176) 175)) anon867_correct)))
(let ((anon845_correct  (=> (= UnfoldingMask@139 (MapType1Store Mask@163 null (valid n@3) (real_2_U (- (U_2_real (MapType1Select Mask@163 null (valid n@3))) FullPerm)))) (=> (and (= UnfoldingMask@140 (MapType1Store UnfoldingMask@139 null (validRest n@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@139 null (validRest n@3))) FullPerm)))) (InsidePredicate (valid n@3) (MapType0Select Heap@215 null (valid n@3)) (validRest n@3) (MapType0Select Heap@215 null (validRest n@3)))) (=> (and (and (and (state Heap@215 UnfoldingMask@140) (= UnfoldingMask@141 (MapType1Store UnfoldingMask@140 null (leftValid n@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@140 null (leftValid n@3))) FullPerm))))) (and (InsidePredicate (valid n@3) (MapType0Select Heap@215 null (valid n@3)) (leftValid n@3) (MapType0Select Heap@215 null (leftValid n@3))) (state Heap@215 UnfoldingMask@141))) (and (and (= UnfoldingMask@142 (MapType1Store UnfoldingMask@141 null (rightValid n@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@141 null (rightValid n@3))) FullPerm)))) (InsidePredicate (valid n@3) (MapType0Select Heap@215 null (valid n@3)) (rightValid n@3) (MapType0Select Heap@215 null (rightValid n@3)))) (and (state Heap@215 UnfoldingMask@142) (state Heap@215 UnfoldingMask@142)))) (and (=> (= (ControlFlow 0 208) (- 0 210)) (= (MapType0Select Heap@215 n@3 root) (MapType0Select Heap@215 this@@53 root1))) (=> (= (MapType0Select Heap@215 n@3 root) (MapType0Select Heap@215 this@@53 root1)) (and (=> (= (ControlFlow 0 208) (- 0 209)) (not (= (MapType0Select Heap@215 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@215 this@@53 root1) null)) (and (=> (= (ControlFlow 0 208) 207) anon1414_Then_correct) (=> (= (ControlFlow 0 208) 176) anon1414_Else_correct)))))))))))
(let ((anon1413_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 213) 208)) anon845_correct)))
(let ((anon1413_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 211) (- 0 212)) (<= FullPerm (U_2_real (MapType1Select Mask@163 null (valid n@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@163 null (valid n@3)))) (=> (= (ControlFlow 0 211) 208) anon845_correct))))))
(let ((anon843_correct  (=> (= Mask@168 (MapType1Store Mask@167 n@3 root (real_2_U (- (U_2_real (MapType1Select Mask@167 n@3 root)) perm@104)))) (=> (and (|valid#trigger| Heap@215 (valid n@3)) (= (MapType0Select Heap@215 null (valid n@3)) (CombineFrames (MapType0Select Heap@215 null (validRest n@3)) (CombineFrames (MapType0Select Heap@215 null (leftValid n@3)) (MapType0Select Heap@215 null (rightValid n@3)))))) (and (=> (= (ControlFlow 0 214) 211) anon1413_Then_correct) (=> (= (ControlFlow 0 214) 213) anon1413_Else_correct))))))
(let ((anon1412_Else_correct  (=> (and (= perm@104 NoPerm) (= (ControlFlow 0 217) 214)) anon843_correct)))
(let ((anon1412_Then_correct  (=> (not (= perm@104 NoPerm)) (and (=> (= (ControlFlow 0 215) (- 0 216)) (<= perm@104 (U_2_real (MapType1Select Mask@167 n@3 root)))) (=> (<= perm@104 (U_2_real (MapType1Select Mask@167 n@3 root))) (=> (= (ControlFlow 0 215) 214) anon843_correct))))))
(let ((anon841_correct  (=> (and (= Mask@167 (MapType1Store Mask@166 null (udParentValid n@3) (real_2_U (- (U_2_real (MapType1Select Mask@166 null (udParentValid n@3))) FullPerm)))) (= perm@104 (/ (to_real 4) (to_real 10)))) (and (=> (= (ControlFlow 0 218) (- 0 219)) (>= perm@104 NoPerm)) (=> (>= perm@104 NoPerm) (and (=> (= (ControlFlow 0 218) 215) anon1412_Then_correct) (=> (= (ControlFlow 0 218) 217) anon1412_Else_correct)))))))
(let ((anon1411_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 222) 218)) anon841_correct)))
(let ((anon1411_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 220) (- 0 221)) (<= FullPerm (U_2_real (MapType1Select Mask@166 null (udParentValid n@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@166 null (udParentValid n@3)))) (=> (= (ControlFlow 0 220) 218) anon841_correct))))))
(let ((anon839_correct  (=> (= Mask@166 (MapType1Store Mask@165 null (valid n@3) (real_2_U (- (U_2_real (MapType1Select Mask@165 null (valid n@3))) FullPerm)))) (and (=> (= (ControlFlow 0 223) 220) anon1411_Then_correct) (=> (= (ControlFlow 0 223) 222) anon1411_Else_correct)))))
(let ((anon1410_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 226) 223)) anon839_correct)))
(let ((anon1410_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 224) (- 0 225)) (<= FullPerm (U_2_real (MapType1Select Mask@165 null (valid n@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@165 null (valid n@3)))) (=> (= (ControlFlow 0 224) 223) anon839_correct))))))
(let ((anon837_correct  (=> (= Mask@165 (MapType1Store Mask@164 (MapType0Select Heap@215 this@@53 root1) parent (real_2_U (- (U_2_real (MapType1Select Mask@164 (MapType0Select Heap@215 this@@53 root1) parent)) perm@103)))) (and (=> (= (ControlFlow 0 227) (- 0 228)) (not (= n@3 null))) (=> (not (= n@3 null)) (and (=> (= (ControlFlow 0 227) 224) anon1410_Then_correct) (=> (= (ControlFlow 0 227) 226) anon1410_Else_correct)))))))
(let ((anon1409_Else_correct  (=> (and (= perm@103 NoPerm) (= (ControlFlow 0 231) 227)) anon837_correct)))
(let ((anon1409_Then_correct  (=> (not (= perm@103 NoPerm)) (and (=> (= (ControlFlow 0 229) (- 0 230)) (<= perm@103 (U_2_real (MapType1Select Mask@164 (MapType0Select Heap@215 this@@53 root1) parent)))) (=> (<= perm@103 (U_2_real (MapType1Select Mask@164 (MapType0Select Heap@215 this@@53 root1) parent))) (=> (= (ControlFlow 0 229) 227) anon837_correct))))))
(let ((anon835_correct  (=> (= Mask@164 (MapType1Store Mask@163 this@@53 root1 (real_2_U (- (U_2_real (MapType1Select Mask@163 this@@53 root1)) FullPerm)))) (and (=> (= (ControlFlow 0 232) (- 0 234)) (not (= (MapType0Select Heap@215 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@215 this@@53 root1) null)) (=> (= perm@103 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 232) (- 0 233)) (>= perm@103 NoPerm)) (=> (>= perm@103 NoPerm) (and (=> (= (ControlFlow 0 232) 229) anon1409_Then_correct) (=> (= (ControlFlow 0 232) 231) anon1409_Else_correct))))))))))
(let ((anon1408_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 237) 232)) anon835_correct)))
(let ((anon1408_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 235) (- 0 236)) (<= FullPerm (U_2_real (MapType1Select Mask@163 this@@53 root1)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@163 this@@53 root1))) (=> (= (ControlFlow 0 235) 232) anon835_correct))))))
(let ((anon832_correct  (=> (and (state Heap@214 Mask@163) (= Heap@215 Heap@214)) (and (=> (= (ControlFlow 0 239) 235) anon1408_Then_correct) (=> (= (ControlFlow 0 239) 237) anon1408_Else_correct)))))
(let ((anon1407_Else_correct  (=> (= (MapType0Select Heap@212 n@3 parent) null) (=> (and (= Heap@214 Heap@212) (= (ControlFlow 0 241) 239)) anon832_correct))))
(let ((anon1407_Then_correct  (=> (and (and (not (= (MapType0Select Heap@212 n@3 parent) null)) (= Heap@213 (MapType0Store Heap@212 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@212 null (|udParentValid#sm| n@3)) (MapType0Select Heap@212 n@3 parent) root (bool_2_U true))))) (and (= Heap@214 Heap@213) (= (ControlFlow 0 240) 239))) anon832_correct)))
(let ((anon1406_Else_correct  (=> (and (= (MapType0Select Heap@210 n@3 parent) null) (= Heap@212 Heap@210)) (and (=> (= (ControlFlow 0 243) 240) anon1407_Then_correct) (=> (= (ControlFlow 0 243) 241) anon1407_Else_correct)))))
(let ((anon1406_Then_correct  (=> (not (= (MapType0Select Heap@210 n@3 parent) null)) (=> (and (= Heap@211 (MapType0Store Heap@210 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@210 null (|udParentValid#sm| n@3)) (MapType0Select Heap@210 n@3 parent) right (bool_2_U true)))) (= Heap@212 Heap@211)) (and (=> (= (ControlFlow 0 242) 240) anon1407_Then_correct) (=> (= (ControlFlow 0 242) 241) anon1407_Else_correct))))))
(let ((anon1405_Else_correct  (=> (and (= (MapType0Select Heap@208 n@3 parent) null) (= Heap@210 Heap@208)) (and (=> (= (ControlFlow 0 245) 242) anon1406_Then_correct) (=> (= (ControlFlow 0 245) 243) anon1406_Else_correct)))))
(let ((anon1405_Then_correct  (=> (not (= (MapType0Select Heap@208 n@3 parent) null)) (=> (and (= Heap@209 (MapType0Store Heap@208 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@208 null (|udParentValid#sm| n@3)) (MapType0Select Heap@208 n@3 parent) left (bool_2_U true)))) (= Heap@210 Heap@209)) (and (=> (= (ControlFlow 0 244) 242) anon1406_Then_correct) (=> (= (ControlFlow 0 244) 243) anon1406_Else_correct))))))
(let ((anon1404_Else_correct  (=> (and (= (MapType0Select Heap@206 n@3 parent) null) (= Heap@208 Heap@206)) (and (=> (= (ControlFlow 0 247) 244) anon1405_Then_correct) (=> (= (ControlFlow 0 247) 245) anon1405_Else_correct)))))
(let ((anon1404_Then_correct  (=> (not (= (MapType0Select Heap@206 n@3 parent) null)) (=> (and (= Heap@207 (MapType0Store Heap@206 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@206 null (|udParentValid#sm| n@3)) (MapType0Select Heap@206 n@3 parent) leftDown (bool_2_U true)))) (= Heap@208 Heap@207)) (and (=> (= (ControlFlow 0 246) 244) anon1405_Then_correct) (=> (= (ControlFlow 0 246) 245) anon1405_Else_correct))))))
(let ((anon1403_Else_correct  (=> (and (= (MapType0Select Heap@204 n@3 parent) null) (= Heap@206 Heap@204)) (and (=> (= (ControlFlow 0 249) 246) anon1404_Then_correct) (=> (= (ControlFlow 0 249) 247) anon1404_Else_correct)))))
(let ((anon1403_Then_correct  (=> (and (and (not (= (MapType0Select Heap@204 n@3 parent) null)) (forall ((o_83 T@U) (f_87 T@U) ) (! (let ((B@@52 (FieldTypeInv1 (type f_87))))
(let ((A@@53 (FieldTypeInv0 (type f_87))))
 (=> (and (and (= (type o_83) RefType) (= (type f_87) (FieldType A@@53 B@@52))) (or (U_2_bool (MapType1Select (MapType0Select Heap@204 null (|udParentValid#sm| n@3)) o_83 f_87)) (U_2_bool (MapType1Select (MapType0Select Heap@204 null (|udValid#sm| (MapType0Select Heap@204 n@3 parent))) o_83 f_87)))) (U_2_bool (MapType1Select newPMask@50 o_83 f_87)))))
 :qid |stdinbpl.5657:43|
 :skolemid |156|
 :pattern ( (MapType1Select newPMask@50 o_83 f_87))
))) (and (= Heap@205 (MapType0Store Heap@204 null (|udParentValid#sm| n@3) newPMask@50)) (= Heap@206 Heap@205))) (and (=> (= (ControlFlow 0 248) 246) anon1404_Then_correct) (=> (= (ControlFlow 0 248) 247) anon1404_Else_correct)))))
(let ((anon822_correct  (=> (state Heap@202 UnfoldingMask@138) (=> (and (= Heap@203 (MapType0Store Heap@202 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@202 null (|udParentValid#sm| n@3)) n@3 parent (bool_2_U true)))) (= Heap@204 (MapType0Store Heap@203 null (|udParentValid#sm| n@3) (MapType1Store (MapType0Select Heap@203 null (|udParentValid#sm| n@3)) n@3 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 250) 248) anon1403_Then_correct) (=> (= (ControlFlow 0 250) 249) anon1403_Else_correct))))))
(let ((anon1402_Else_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= (ControlFlow 0 252) 250)) anon822_correct)))
(let ((anon1402_Then_correct  (=> (= (MapType0Select Heap@202 n@3 parent) null) (=> (and (= (MapType0Select Heap@202 n@3 root) n@3) (= (ControlFlow 0 251) 250)) anon822_correct))))
(let ((anon1401_Else_correct  (=> (= (MapType0Select Heap@202 n@3 parent) null) (and (=> (= (ControlFlow 0 254) 251) anon1402_Then_correct) (=> (= (ControlFlow 0 254) 252) anon1402_Else_correct)))))
(let ((anon1401_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= (MapType0Select Heap@202 n@3 root) (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) root))) (and (=> (= (ControlFlow 0 253) 251) anon1402_Then_correct) (=> (= (ControlFlow 0 253) 252) anon1402_Else_correct)))))
(let ((anon1400_Else_correct  (=> (and (= (MapType0Select Heap@202 n@3 parent) null) (= UnfoldingMask@138 UnfoldingMask@136)) (and (=> (= (ControlFlow 0 257) 253) anon1401_Then_correct) (=> (= (ControlFlow 0 257) 254) anon1401_Else_correct)))))
(let ((anon1400_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= perm@102 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 255) (- 0 256)) (>= perm@102 NoPerm)) (=> (>= perm@102 NoPerm) (=> (and (and (=> (> perm@102 NoPerm) (not (= (MapType0Select Heap@202 n@3 parent) null))) (= UnfoldingMask@137 (MapType1Store UnfoldingMask@136 (MapType0Select Heap@202 n@3 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@136 (MapType0Select Heap@202 n@3 parent) root)) perm@102))))) (and (state Heap@202 UnfoldingMask@137) (= UnfoldingMask@138 UnfoldingMask@137))) (and (=> (= (ControlFlow 0 255) 253) anon1401_Then_correct) (=> (= (ControlFlow 0 255) 254) anon1401_Else_correct))))))))
(let ((anon1399_Else_correct  (=> (= (MapType0Select Heap@202 n@3 parent) null) (and (=> (= (ControlFlow 0 259) 255) anon1400_Then_correct) (=> (= (ControlFlow 0 259) 257) anon1400_Else_correct)))))
(let ((anon1399_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) leftDown))) (= (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) right) n@3))) (and (=> (= (ControlFlow 0 258) 255) anon1400_Then_correct) (=> (= (ControlFlow 0 258) 257) anon1400_Else_correct)))))
(let ((anon1398_Else_correct  (=> (and (= (MapType0Select Heap@202 n@3 parent) null) (= UnfoldingMask@136 UnfoldingMask@134)) (and (=> (= (ControlFlow 0 262) 258) anon1399_Then_correct) (=> (= (ControlFlow 0 262) 259) anon1399_Else_correct)))))
(let ((anon1398_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= perm@101 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 260) (- 0 261)) (>= perm@101 NoPerm)) (=> (>= perm@101 NoPerm) (=> (and (and (=> (> perm@101 NoPerm) (not (= (MapType0Select Heap@202 n@3 parent) null))) (= UnfoldingMask@135 (MapType1Store UnfoldingMask@134 (MapType0Select Heap@202 n@3 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@134 (MapType0Select Heap@202 n@3 parent) right)) perm@101))))) (and (state Heap@202 UnfoldingMask@135) (= UnfoldingMask@136 UnfoldingMask@135))) (and (=> (= (ControlFlow 0 260) 258) anon1399_Then_correct) (=> (= (ControlFlow 0 260) 259) anon1399_Else_correct))))))))
(let ((anon1397_Else_correct  (=> (= (MapType0Select Heap@202 n@3 parent) null) (and (=> (= (ControlFlow 0 264) 260) anon1398_Then_correct) (=> (= (ControlFlow 0 264) 262) anon1398_Else_correct)))))
(let ((anon1397_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= (U_2_bool (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) leftDown)) (= (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) left) n@3))) (and (=> (= (ControlFlow 0 263) 260) anon1398_Then_correct) (=> (= (ControlFlow 0 263) 262) anon1398_Else_correct)))))
(let ((anon1396_Else_correct  (=> (and (= (MapType0Select Heap@202 n@3 parent) null) (= UnfoldingMask@134 UnfoldingMask@132)) (and (=> (= (ControlFlow 0 267) 263) anon1397_Then_correct) (=> (= (ControlFlow 0 267) 264) anon1397_Else_correct)))))
(let ((anon1396_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= perm@100 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 265) (- 0 266)) (>= perm@100 NoPerm)) (=> (>= perm@100 NoPerm) (=> (and (and (=> (> perm@100 NoPerm) (not (= (MapType0Select Heap@202 n@3 parent) null))) (= UnfoldingMask@133 (MapType1Store UnfoldingMask@132 (MapType0Select Heap@202 n@3 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@132 (MapType0Select Heap@202 n@3 parent) left)) perm@100))))) (and (state Heap@202 UnfoldingMask@133) (= UnfoldingMask@134 UnfoldingMask@133))) (and (=> (= (ControlFlow 0 265) 263) anon1397_Then_correct) (=> (= (ControlFlow 0 265) 264) anon1397_Else_correct))))))))
(let ((anon1395_Else_correct  (=> (and (= (MapType0Select Heap@202 n@3 parent) null) (= UnfoldingMask@132 UnfoldingMask@130)) (and (=> (= (ControlFlow 0 270) 265) anon1396_Then_correct) (=> (= (ControlFlow 0 270) 267) anon1396_Else_correct)))))
(let ((anon1395_Then_correct  (=> (and (not (= (MapType0Select Heap@202 n@3 parent) null)) (= perm@99 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 268) (- 0 269)) (>= perm@99 NoPerm)) (=> (>= perm@99 NoPerm) (=> (and (and (=> (> perm@99 NoPerm) (not (= (MapType0Select Heap@202 n@3 parent) null))) (= UnfoldingMask@131 (MapType1Store UnfoldingMask@130 (MapType0Select Heap@202 n@3 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@130 (MapType0Select Heap@202 n@3 parent) leftDown)) perm@99))))) (and (state Heap@202 UnfoldingMask@131) (= UnfoldingMask@132 UnfoldingMask@131))) (and (=> (= (ControlFlow 0 268) 265) anon1396_Then_correct) (=> (= (ControlFlow 0 268) 267) anon1396_Else_correct))))))))
(let ((anon1394_Else_correct  (=> (and (= (MapType0Select Heap@202 n@3 parent) null) (= UnfoldingMask@130 UnfoldingMask@128)) (and (=> (= (ControlFlow 0 272) 268) anon1395_Then_correct) (=> (= (ControlFlow 0 272) 270) anon1395_Else_correct)))))
(let ((anon1394_Then_correct  (=> (not (= (MapType0Select Heap@202 n@3 parent) null)) (=> (and (and (= UnfoldingMask@129 (MapType1Store UnfoldingMask@128 null (udValid (MapType0Select Heap@202 n@3 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@128 null (udValid (MapType0Select Heap@202 n@3 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@3) (MapType0Select Heap@202 null (udParentValid n@3)) (udValid (MapType0Select Heap@202 n@3 parent)) (MapType0Select Heap@202 null (udValid (MapType0Select Heap@202 n@3 parent))))) (and (state Heap@202 UnfoldingMask@129) (= UnfoldingMask@130 UnfoldingMask@129))) (and (=> (= (ControlFlow 0 271) 268) anon1395_Then_correct) (=> (= (ControlFlow 0 271) 270) anon1395_Else_correct))))))
(let ((anon804_correct  (=> (and (= UnfoldingMask@126 (MapType1Store Mask@163 null (udParentValid n@3) (real_2_U (- (U_2_real (MapType1Select Mask@163 null (udParentValid n@3))) FullPerm)))) (= perm@97 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 273) (- 0 275)) (>= perm@97 NoPerm)) (=> (>= perm@97 NoPerm) (=> (and (and (=> (> perm@97 NoPerm) (not (= n@3 null))) (= UnfoldingMask@127 (MapType1Store UnfoldingMask@126 n@3 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@126 n@3 parent)) perm@97))))) (and (state Heap@202 UnfoldingMask@127) (= perm@98 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 273) (- 0 274)) (>= perm@98 NoPerm)) (=> (>= perm@98 NoPerm) (=> (=> (> perm@98 NoPerm) (not (= n@3 null))) (=> (and (= UnfoldingMask@128 (MapType1Store UnfoldingMask@127 n@3 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@127 n@3 root)) perm@98)))) (state Heap@202 UnfoldingMask@128)) (and (=> (= (ControlFlow 0 273) 271) anon1394_Then_correct) (=> (= (ControlFlow 0 273) 272) anon1394_Else_correct))))))))))))
(let ((anon1393_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 278) 273)) anon804_correct)))
(let ((anon1393_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 276) (- 0 277)) (<= FullPerm (U_2_real (MapType1Select Mask@163 null (udParentValid n@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@163 null (udParentValid n@3)))) (=> (= (ControlFlow 0 276) 273) anon804_correct))))))
(let ((anon1392_Then_correct  (=> end@2 (=> (and (|udParentValid#trigger| Heap@202 (udParentValid n@3)) (= (MapType0Select Heap@202 null (udParentValid n@3)) (CombineFrames (FrameFragment (MapType0Select Heap@202 n@3 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@202 n@3 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) (MapType0Select Heap@202 null (udValid (MapType0Select Heap@202 n@3 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) (FrameFragment (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) (FrameFragment (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) (FrameFragment (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) (FrameFragment (MapType0Select Heap@202 (MapType0Select Heap@202 n@3 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@202 n@3 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@202 n@3 parent) null) EmptyFrame EmptyFrame)))))))))))))) (and (=> (= (ControlFlow 0 279) 276) anon1393_Then_correct) (=> (= (ControlFlow 0 279) 278) anon1393_Else_correct))))))
(let ((anon1392_Else_correct  (=> (and (not end@2) (= Heap@215 Heap@202)) (and (=> (= (ControlFlow 0 238) 235) anon1408_Then_correct) (=> (= (ControlFlow 0 238) 237) anon1408_Else_correct)))))
(let ((anon801_correct  (=> (and (= UnfoldingMask@122 (MapType1Store Mask@163 null (valid n@3) (real_2_U (- (U_2_real (MapType1Select Mask@163 null (valid n@3))) FullPerm)))) (= UnfoldingMask@123 (MapType1Store UnfoldingMask@122 null (validRest n@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@122 null (validRest n@3))) FullPerm))))) (=> (and (and (and (and (InsidePredicate (valid n@3) (MapType0Select Heap@199 null (valid n@3)) (validRest n@3) (MapType0Select Heap@199 null (validRest n@3))) (state Heap@199 UnfoldingMask@123)) (and (= UnfoldingMask@124 (MapType1Store UnfoldingMask@123 null (leftValid n@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@123 null (leftValid n@3))) FullPerm)))) (InsidePredicate (valid n@3) (MapType0Select Heap@199 null (valid n@3)) (leftValid n@3) (MapType0Select Heap@199 null (leftValid n@3))))) (and (and (state Heap@199 UnfoldingMask@124) (= UnfoldingMask@125 (MapType1Store UnfoldingMask@124 null (rightValid n@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@124 null (rightValid n@3))) FullPerm))))) (and (InsidePredicate (valid n@3) (MapType0Select Heap@199 null (valid n@3)) (rightValid n@3) (MapType0Select Heap@199 null (rightValid n@3))) (state Heap@199 UnfoldingMask@125)))) (and (and (and (state Heap@199 UnfoldingMask@125) (forall ((o_80 T@U) (f_84 T@U) ) (! (let ((B@@53 (FieldTypeInv1 (type f_84))))
(let ((A@@54 (FieldTypeInv0 (type f_84))))
 (=> (and (and (= (type o_80) RefType) (= (type f_84) (FieldType A@@54 B@@53))) (or (U_2_bool (MapType1Select (MapType0Select Heap@199 null (|valid#sm| n@3)) o_80 f_84)) (U_2_bool (MapType1Select (MapType0Select Heap@199 null (|validRest#sm| n@3)) o_80 f_84)))) (U_2_bool (MapType1Select newPMask@47 o_80 f_84)))))
 :qid |stdinbpl.5553:39|
 :skolemid |153|
 :pattern ( (MapType1Select newPMask@47 o_80 f_84))
))) (and (= Heap@200 (MapType0Store Heap@199 null (|valid#sm| n@3) newPMask@47)) (forall ((o_81 T@U) (f_85 T@U) ) (! (let ((B@@54 (FieldTypeInv1 (type f_85))))
(let ((A@@55 (FieldTypeInv0 (type f_85))))
 (=> (and (and (= (type o_81) RefType) (= (type f_85) (FieldType A@@55 B@@54))) (or (U_2_bool (MapType1Select (MapType0Select Heap@200 null (|valid#sm| n@3)) o_81 f_85)) (U_2_bool (MapType1Select (MapType0Select Heap@200 null (|leftValid#sm| n@3)) o_81 f_85)))) (U_2_bool (MapType1Select newPMask@48 o_81 f_85)))))
 :qid |stdinbpl.5559:39|
 :skolemid |154|
 :pattern ( (MapType1Select newPMask@48 o_81 f_85))
)))) (and (and (= Heap@201 (MapType0Store Heap@200 null (|valid#sm| n@3) newPMask@48)) (forall ((o_82 T@U) (f_86 T@U) ) (! (let ((B@@55 (FieldTypeInv1 (type f_86))))
(let ((A@@56 (FieldTypeInv0 (type f_86))))
 (=> (and (and (= (type o_82) RefType) (= (type f_86) (FieldType A@@56 B@@55))) (or (U_2_bool (MapType1Select (MapType0Select Heap@201 null (|valid#sm| n@3)) o_82 f_86)) (U_2_bool (MapType1Select (MapType0Select Heap@201 null (|rightValid#sm| n@3)) o_82 f_86)))) (U_2_bool (MapType1Select newPMask@49 o_82 f_86)))))
 :qid |stdinbpl.5565:39|
 :skolemid |155|
 :pattern ( (MapType1Select newPMask@49 o_82 f_86))
))) (and (= Heap@202 (MapType0Store Heap@201 null (|valid#sm| n@3) newPMask@49)) (state Heap@202 Mask@163))))) (and (=> (= (ControlFlow 0 280) 279) anon1392_Then_correct) (=> (= (ControlFlow 0 280) 238) anon1392_Else_correct))))))
(let ((anon1391_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 283) 280)) anon801_correct)))
(let ((anon1391_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 281) (- 0 282)) (<= FullPerm (U_2_real (MapType1Select Mask@163 null (valid n@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@163 null (valid n@3)))) (=> (= (ControlFlow 0 281) 280) anon801_correct))))))
(let ((anon799_correct  (=> (state Heap@199 Mask@163) (=> (and (|valid#trigger| Heap@199 (valid n@3)) (= (MapType0Select Heap@199 null (valid n@3)) (CombineFrames (MapType0Select Heap@199 null (validRest n@3)) (CombineFrames (MapType0Select Heap@199 null (leftValid n@3)) (MapType0Select Heap@199 null (rightValid n@3)))))) (and (=> (= (ControlFlow 0 284) 281) anon1391_Then_correct) (=> (= (ControlFlow 0 284) 283) anon1391_Else_correct))))))
(let ((anon690_correct  (=> (state Heap@198 Mask@162) (=> (and (state Heap@198 Mask@162) (= n@3 n@2)) (=> (and (and (= end@2 true) (= Heap@199 Heap@198)) (and (= Mask@163 Mask@162) (= (ControlFlow 0 474) 284))) anon799_correct)))))
(let ((anon1337_Else_correct  (=> (= (MapType0Select Heap@196 n@2 parent) null) (=> (and (= Heap@198 Heap@196) (= (ControlFlow 0 476) 474)) anon690_correct))))
(let ((anon1337_Then_correct  (=> (and (and (not (= (MapType0Select Heap@196 n@2 parent) null)) (= Heap@197 (MapType0Store Heap@196 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@196 null (|udParentValid#sm| n@2)) (MapType0Select Heap@196 n@2 parent) root (bool_2_U true))))) (and (= Heap@198 Heap@197) (= (ControlFlow 0 475) 474))) anon690_correct)))
(let ((anon1336_Else_correct  (=> (and (= (MapType0Select Heap@194 n@2 parent) null) (= Heap@196 Heap@194)) (and (=> (= (ControlFlow 0 478) 475) anon1337_Then_correct) (=> (= (ControlFlow 0 478) 476) anon1337_Else_correct)))))
(let ((anon1336_Then_correct  (=> (not (= (MapType0Select Heap@194 n@2 parent) null)) (=> (and (= Heap@195 (MapType0Store Heap@194 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@194 null (|udParentValid#sm| n@2)) (MapType0Select Heap@194 n@2 parent) right (bool_2_U true)))) (= Heap@196 Heap@195)) (and (=> (= (ControlFlow 0 477) 475) anon1337_Then_correct) (=> (= (ControlFlow 0 477) 476) anon1337_Else_correct))))))
(let ((anon1335_Else_correct  (=> (and (= (MapType0Select Heap@192 n@2 parent) null) (= Heap@194 Heap@192)) (and (=> (= (ControlFlow 0 480) 477) anon1336_Then_correct) (=> (= (ControlFlow 0 480) 478) anon1336_Else_correct)))))
(let ((anon1335_Then_correct  (=> (not (= (MapType0Select Heap@192 n@2 parent) null)) (=> (and (= Heap@193 (MapType0Store Heap@192 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@192 null (|udParentValid#sm| n@2)) (MapType0Select Heap@192 n@2 parent) left (bool_2_U true)))) (= Heap@194 Heap@193)) (and (=> (= (ControlFlow 0 479) 477) anon1336_Then_correct) (=> (= (ControlFlow 0 479) 478) anon1336_Else_correct))))))
(let ((anon1334_Else_correct  (=> (and (= (MapType0Select Heap@190 n@2 parent) null) (= Heap@192 Heap@190)) (and (=> (= (ControlFlow 0 482) 479) anon1335_Then_correct) (=> (= (ControlFlow 0 482) 480) anon1335_Else_correct)))))
(let ((anon1334_Then_correct  (=> (not (= (MapType0Select Heap@190 n@2 parent) null)) (=> (and (= Heap@191 (MapType0Store Heap@190 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@190 null (|udParentValid#sm| n@2)) (MapType0Select Heap@190 n@2 parent) leftDown (bool_2_U true)))) (= Heap@192 Heap@191)) (and (=> (= (ControlFlow 0 481) 479) anon1335_Then_correct) (=> (= (ControlFlow 0 481) 480) anon1335_Else_correct))))))
(let ((anon1333_Else_correct  (=> (and (= (MapType0Select Heap@188 n@2 parent) null) (= Heap@190 Heap@188)) (and (=> (= (ControlFlow 0 484) 481) anon1334_Then_correct) (=> (= (ControlFlow 0 484) 482) anon1334_Else_correct)))))
(let ((anon1333_Then_correct  (=> (and (and (not (= (MapType0Select Heap@188 n@2 parent) null)) (forall ((o_74 T@U) (f_78 T@U) ) (! (let ((B@@56 (FieldTypeInv1 (type f_78))))
(let ((A@@57 (FieldTypeInv0 (type f_78))))
 (=> (and (and (= (type o_74) RefType) (= (type f_78) (FieldType A@@57 B@@56))) (or (U_2_bool (MapType1Select (MapType0Select Heap@188 null (|udParentValid#sm| n@2)) o_74 f_78)) (U_2_bool (MapType1Select (MapType0Select Heap@188 null (|udValid#sm| (MapType0Select Heap@188 n@2 parent))) o_74 f_78)))) (U_2_bool (MapType1Select newPMask@46 o_74 f_78)))))
 :qid |stdinbpl.5013:45|
 :skolemid |147|
 :pattern ( (MapType1Select newPMask@46 o_74 f_78))
))) (and (= Heap@189 (MapType0Store Heap@188 null (|udParentValid#sm| n@2) newPMask@46)) (= Heap@190 Heap@189))) (and (=> (= (ControlFlow 0 483) 481) anon1334_Then_correct) (=> (= (ControlFlow 0 483) 482) anon1334_Else_correct)))))
(let ((anon680_correct  (=> (and (= Heap@187 (MapType0Store Heap@186 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@186 null (|udParentValid#sm| n@2)) n@2 parent (bool_2_U true)))) (= Heap@188 (MapType0Store Heap@187 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@187 null (|udParentValid#sm| n@2)) n@2 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 485) 483) anon1333_Then_correct) (=> (= (ControlFlow 0 485) 484) anon1333_Else_correct)))))
(let ((anon1332_Else_correct  (=> (HasDirectPerm Mask@162 null (udParentValid n@2)) (=> (and (= Heap@186 Heap@140) (= (ControlFlow 0 487) 485)) anon680_correct))))
(let ((anon1332_Then_correct  (=> (not (HasDirectPerm Mask@162 null (udParentValid n@2))) (=> (and (and (= Heap@184 (MapType0Store Heap@140 null (|udParentValid#sm| n@2) ZeroPMask)) (= Heap@185 (MapType0Store Heap@184 null (udParentValid n@2) freshVersion@6))) (and (= Heap@186 Heap@185) (= (ControlFlow 0 486) 485))) anon680_correct))))
(let ((anon678_correct  (=> (= Mask@162 (MapType1Store Mask@161 null (udParentValid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@161 null (udParentValid n@2))) FullPerm)))) (=> (and (and (state Heap@140 Mask@162) (state Heap@140 Mask@162)) (and (|udParentValid#trigger| Heap@140 (udParentValid n@2)) (= (MapType0Select Heap@140 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@140 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@140 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) (MapType0Select Heap@140 null (udValid (MapType0Select Heap@140 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) (FrameFragment (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) (FrameFragment (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) (FrameFragment (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) (FrameFragment (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@140 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@140 n@2 parent) null) EmptyFrame EmptyFrame))))))))))))))) (and (=> (= (ControlFlow 0 488) 486) anon1332_Then_correct) (=> (= (ControlFlow 0 488) 487) anon1332_Else_correct))))))
(let ((anon1331_Else_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= (ControlFlow 0 491) 488)) anon678_correct)))
(let ((anon1331_Then_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 489) (- 0 490)) (= (MapType0Select Heap@140 n@2 root) n@2)) (=> (= (MapType0Select Heap@140 n@2 root) n@2) (=> (= (ControlFlow 0 489) 488) anon678_correct))))))
(let ((anon1330_Else_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 494) 489) anon1331_Then_correct) (=> (= (ControlFlow 0 494) 491) anon1331_Else_correct)))))
(let ((anon1330_Then_correct  (=> (not (= (MapType0Select Heap@140 n@2 parent) null)) (and (=> (= (ControlFlow 0 492) (- 0 493)) (= (MapType0Select Heap@140 n@2 root) (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) root))) (=> (= (MapType0Select Heap@140 n@2 root) (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) root)) (and (=> (= (ControlFlow 0 492) 489) anon1331_Then_correct) (=> (= (ControlFlow 0 492) 491) anon1331_Else_correct)))))))
(let ((anon673_correct  (=> (and (= Mask@160 (MapType1Store Mask@159 (MapType0Select Heap@140 n@2 parent) root (real_2_U (- (U_2_real (MapType1Select Mask@159 (MapType0Select Heap@140 n@2 parent) root)) perm@96)))) (= Mask@161 Mask@160)) (and (=> (= (ControlFlow 0 496) 492) anon1330_Then_correct) (=> (= (ControlFlow 0 496) 494) anon1330_Else_correct)))))
(let ((anon1329_Else_correct  (=> (and (= perm@96 NoPerm) (= (ControlFlow 0 499) 496)) anon673_correct)))
(let ((anon1329_Then_correct  (=> (not (= perm@96 NoPerm)) (and (=> (= (ControlFlow 0 497) (- 0 498)) (<= perm@96 (U_2_real (MapType1Select Mask@159 (MapType0Select Heap@140 n@2 parent) root)))) (=> (<= perm@96 (U_2_real (MapType1Select Mask@159 (MapType0Select Heap@140 n@2 parent) root))) (=> (= (ControlFlow 0 497) 496) anon673_correct))))))
(let ((anon1328_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@96 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 500) (- 0 501)) (>= perm@96 NoPerm)) (=> (>= perm@96 NoPerm) (and (=> (= (ControlFlow 0 500) 497) anon1329_Then_correct) (=> (= (ControlFlow 0 500) 499) anon1329_Else_correct)))))))
(let ((anon1328_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@161 Mask@159)) (and (=> (= (ControlFlow 0 495) 492) anon1330_Then_correct) (=> (= (ControlFlow 0 495) 494) anon1330_Else_correct)))))
(let ((anon1327_Else_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 504) 500) anon1328_Then_correct) (=> (= (ControlFlow 0 504) 495) anon1328_Else_correct)))))
(let ((anon1327_Then_correct  (=> (not (= (MapType0Select Heap@140 n@2 parent) null)) (and (=> (= (ControlFlow 0 502) (- 0 503)) (=  (not (U_2_bool (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown))) (= (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) right) n@2))) (=> (=  (not (U_2_bool (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown))) (= (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) right) n@2)) (and (=> (= (ControlFlow 0 502) 500) anon1328_Then_correct) (=> (= (ControlFlow 0 502) 495) anon1328_Else_correct)))))))
(let ((anon667_correct  (=> (and (= Mask@158 (MapType1Store Mask@157 (MapType0Select Heap@140 n@2 parent) right (real_2_U (- (U_2_real (MapType1Select Mask@157 (MapType0Select Heap@140 n@2 parent) right)) perm@95)))) (= Mask@159 Mask@158)) (and (=> (= (ControlFlow 0 506) 502) anon1327_Then_correct) (=> (= (ControlFlow 0 506) 504) anon1327_Else_correct)))))
(let ((anon1326_Else_correct  (=> (and (= perm@95 NoPerm) (= (ControlFlow 0 509) 506)) anon667_correct)))
(let ((anon1326_Then_correct  (=> (not (= perm@95 NoPerm)) (and (=> (= (ControlFlow 0 507) (- 0 508)) (<= perm@95 (U_2_real (MapType1Select Mask@157 (MapType0Select Heap@140 n@2 parent) right)))) (=> (<= perm@95 (U_2_real (MapType1Select Mask@157 (MapType0Select Heap@140 n@2 parent) right))) (=> (= (ControlFlow 0 507) 506) anon667_correct))))))
(let ((anon1325_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@95 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 510) (- 0 511)) (>= perm@95 NoPerm)) (=> (>= perm@95 NoPerm) (and (=> (= (ControlFlow 0 510) 507) anon1326_Then_correct) (=> (= (ControlFlow 0 510) 509) anon1326_Else_correct)))))))
(let ((anon1325_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@159 Mask@157)) (and (=> (= (ControlFlow 0 505) 502) anon1327_Then_correct) (=> (= (ControlFlow 0 505) 504) anon1327_Else_correct)))))
(let ((anon1324_Else_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 514) 510) anon1325_Then_correct) (=> (= (ControlFlow 0 514) 505) anon1325_Else_correct)))))
(let ((anon1324_Then_correct  (=> (not (= (MapType0Select Heap@140 n@2 parent) null)) (and (=> (= (ControlFlow 0 512) (- 0 513)) (= (U_2_bool (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown)) (= (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) left) n@2))) (=> (= (U_2_bool (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown)) (= (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) left) n@2)) (and (=> (= (ControlFlow 0 512) 510) anon1325_Then_correct) (=> (= (ControlFlow 0 512) 505) anon1325_Else_correct)))))))
(let ((anon661_correct  (=> (and (= Mask@156 (MapType1Store Mask@155 (MapType0Select Heap@140 n@2 parent) left (real_2_U (- (U_2_real (MapType1Select Mask@155 (MapType0Select Heap@140 n@2 parent) left)) perm@94)))) (= Mask@157 Mask@156)) (and (=> (= (ControlFlow 0 516) 512) anon1324_Then_correct) (=> (= (ControlFlow 0 516) 514) anon1324_Else_correct)))))
(let ((anon1323_Else_correct  (=> (and (= perm@94 NoPerm) (= (ControlFlow 0 519) 516)) anon661_correct)))
(let ((anon1323_Then_correct  (=> (not (= perm@94 NoPerm)) (and (=> (= (ControlFlow 0 517) (- 0 518)) (<= perm@94 (U_2_real (MapType1Select Mask@155 (MapType0Select Heap@140 n@2 parent) left)))) (=> (<= perm@94 (U_2_real (MapType1Select Mask@155 (MapType0Select Heap@140 n@2 parent) left))) (=> (= (ControlFlow 0 517) 516) anon661_correct))))))
(let ((anon1322_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@94 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 520) (- 0 521)) (>= perm@94 NoPerm)) (=> (>= perm@94 NoPerm) (and (=> (= (ControlFlow 0 520) 517) anon1323_Then_correct) (=> (= (ControlFlow 0 520) 519) anon1323_Else_correct)))))))
(let ((anon1322_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@157 Mask@155)) (and (=> (= (ControlFlow 0 515) 512) anon1324_Then_correct) (=> (= (ControlFlow 0 515) 514) anon1324_Else_correct)))))
(let ((anon657_correct  (=> (and (= Mask@154 (MapType1Store Mask@153 (MapType0Select Heap@140 n@2 parent) leftDown (real_2_U (- (U_2_real (MapType1Select Mask@153 (MapType0Select Heap@140 n@2 parent) leftDown)) perm@93)))) (= Mask@155 Mask@154)) (and (=> (= (ControlFlow 0 523) 520) anon1322_Then_correct) (=> (= (ControlFlow 0 523) 515) anon1322_Else_correct)))))
(let ((anon1321_Else_correct  (=> (and (= perm@93 NoPerm) (= (ControlFlow 0 526) 523)) anon657_correct)))
(let ((anon1321_Then_correct  (=> (not (= perm@93 NoPerm)) (and (=> (= (ControlFlow 0 524) (- 0 525)) (<= perm@93 (U_2_real (MapType1Select Mask@153 (MapType0Select Heap@140 n@2 parent) leftDown)))) (=> (<= perm@93 (U_2_real (MapType1Select Mask@153 (MapType0Select Heap@140 n@2 parent) leftDown))) (=> (= (ControlFlow 0 524) 523) anon657_correct))))))
(let ((anon1320_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@93 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 527) (- 0 528)) (>= perm@93 NoPerm)) (=> (>= perm@93 NoPerm) (and (=> (= (ControlFlow 0 527) 524) anon1321_Then_correct) (=> (= (ControlFlow 0 527) 526) anon1321_Else_correct)))))))
(let ((anon1320_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@155 Mask@153)) (and (=> (= (ControlFlow 0 522) 520) anon1322_Then_correct) (=> (= (ControlFlow 0 522) 515) anon1322_Else_correct)))))
(let ((anon653_correct  (=> (= Mask@152 (MapType1Store Mask@151 null (udValid (MapType0Select Heap@140 n@2 parent)) (real_2_U (- (U_2_real (MapType1Select Mask@151 null (udValid (MapType0Select Heap@140 n@2 parent)))) FullPerm)))) (=> (and (InsidePredicate (udParentValid n@2) (MapType0Select Heap@140 null (udParentValid n@2)) (udValid (MapType0Select Heap@140 n@2 parent)) (MapType0Select Heap@140 null (udValid (MapType0Select Heap@140 n@2 parent)))) (= Mask@153 Mask@152)) (and (=> (= (ControlFlow 0 530) 527) anon1320_Then_correct) (=> (= (ControlFlow 0 530) 522) anon1320_Else_correct))))))
(let ((anon1319_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 533) 530)) anon653_correct)))
(let ((anon1319_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 531) (- 0 532)) (<= FullPerm (U_2_real (MapType1Select Mask@151 null (udValid (MapType0Select Heap@140 n@2 parent)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@151 null (udValid (MapType0Select Heap@140 n@2 parent))))) (=> (= (ControlFlow 0 531) 530) anon653_correct))))))
(let ((anon1318_Then_correct  (=> (not (= (MapType0Select Heap@140 n@2 parent) null)) (and (=> (= (ControlFlow 0 534) 531) anon1319_Then_correct) (=> (= (ControlFlow 0 534) 533) anon1319_Else_correct)))))
(let ((anon1318_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@153 Mask@151)) (and (=> (= (ControlFlow 0 529) 527) anon1320_Then_correct) (=> (= (ControlFlow 0 529) 522) anon1320_Else_correct)))))
(let ((anon650_correct  (=> (= Mask@151 (MapType1Store Mask@150 n@2 root (real_2_U (- (U_2_real (MapType1Select Mask@150 n@2 root)) perm@92)))) (and (=> (= (ControlFlow 0 535) 534) anon1318_Then_correct) (=> (= (ControlFlow 0 535) 529) anon1318_Else_correct)))))
(let ((anon1317_Else_correct  (=> (and (= perm@92 NoPerm) (= (ControlFlow 0 538) 535)) anon650_correct)))
(let ((anon1317_Then_correct  (=> (not (= perm@92 NoPerm)) (and (=> (= (ControlFlow 0 536) (- 0 537)) (<= perm@92 (U_2_real (MapType1Select Mask@150 n@2 root)))) (=> (<= perm@92 (U_2_real (MapType1Select Mask@150 n@2 root))) (=> (= (ControlFlow 0 536) 535) anon650_correct))))))
(let ((anon648_correct  (=> (and (= Mask@150 (MapType1Store Mask@95 n@2 parent (real_2_U (- (U_2_real (MapType1Select Mask@95 n@2 parent)) perm@72)))) (= perm@92 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 539) (- 0 540)) (>= perm@92 NoPerm)) (=> (>= perm@92 NoPerm) (and (=> (= (ControlFlow 0 539) 536) anon1317_Then_correct) (=> (= (ControlFlow 0 539) 538) anon1317_Else_correct)))))))
(let ((anon1316_Else_correct  (=> (and (= perm@72 NoPerm) (= (ControlFlow 0 543) 539)) anon648_correct)))
(let ((anon1316_Then_correct  (=> (not (= perm@72 NoPerm)) (and (=> (= (ControlFlow 0 541) (- 0 542)) (<= perm@72 (U_2_real (MapType1Select Mask@95 n@2 parent)))) (=> (<= perm@72 (U_2_real (MapType1Select Mask@95 n@2 parent))) (=> (= (ControlFlow 0 541) 539) anon648_correct))))))
(let ((anon1315_Then_correct  (=> (= r_1@1 null) (=> (and (state Heap@140 Mask@95) (= perm@72 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 544) (- 0 545)) (>= perm@72 NoPerm)) (=> (>= perm@72 NoPerm) (and (=> (= (ControlFlow 0 544) 541) anon1316_Then_correct) (=> (= (ControlFlow 0 544) 543) anon1316_Else_correct))))))))
(let ((anon798_correct  (=> (and (forall ((o_77 T@U) (f_81 T@U) ) (! (let ((B@@57 (FieldTypeInv1 (type f_81))))
(let ((A@@58 (FieldTypeInv0 (type f_81))))
 (=> (and (and (= (type o_77) RefType) (= (type f_81) (FieldType A@@58 B@@57))) (or (U_2_bool (MapType1Select (MapType0Select Heap@180 null (|valid#sm| r_1@1)) o_77 f_81)) (U_2_bool (MapType1Select (MapType0Select Heap@180 null (|validRest#sm| r_1@1)) o_77 f_81)))) (U_2_bool (MapType1Select newPMask@43 o_77 f_81)))))
 :qid |stdinbpl.5491:43|
 :skolemid |150|
 :pattern ( (MapType1Select newPMask@43 o_77 f_81))
)) (= Heap@181 (MapType0Store Heap@180 null (|valid#sm| r_1@1) newPMask@43))) (=> (and (and (forall ((o_78 T@U) (f_82 T@U) ) (! (let ((B@@58 (FieldTypeInv1 (type f_82))))
(let ((A@@59 (FieldTypeInv0 (type f_82))))
 (=> (and (and (= (type o_78) RefType) (= (type f_82) (FieldType A@@59 B@@58))) (or (U_2_bool (MapType1Select (MapType0Select Heap@181 null (|valid#sm| r_1@1)) o_78 f_82)) (U_2_bool (MapType1Select (MapType0Select Heap@181 null (|leftValid#sm| r_1@1)) o_78 f_82)))) (U_2_bool (MapType1Select newPMask@44 o_78 f_82)))))
 :qid |stdinbpl.5497:43|
 :skolemid |151|
 :pattern ( (MapType1Select newPMask@44 o_78 f_82))
)) (= Heap@182 (MapType0Store Heap@181 null (|valid#sm| r_1@1) newPMask@44))) (and (forall ((o_79 T@U) (f_83 T@U) ) (! (let ((B@@59 (FieldTypeInv1 (type f_83))))
(let ((A@@60 (FieldTypeInv0 (type f_83))))
 (=> (and (and (= (type o_79) RefType) (= (type f_83) (FieldType A@@60 B@@59))) (or (U_2_bool (MapType1Select (MapType0Select Heap@182 null (|valid#sm| r_1@1)) o_79 f_83)) (U_2_bool (MapType1Select (MapType0Select Heap@182 null (|rightValid#sm| r_1@1)) o_79 f_83)))) (U_2_bool (MapType1Select newPMask@45 o_79 f_83)))))
 :qid |stdinbpl.5503:43|
 :skolemid |152|
 :pattern ( (MapType1Select newPMask@45 o_79 f_83))
)) (= Heap@183 (MapType0Store Heap@182 null (|valid#sm| r_1@1) newPMask@45)))) (=> (and (and (and (state Heap@183 Mask@149) (state Heap@183 Mask@149)) (and (state Heap@183 Mask@149) (= n@3 r_1@1))) (and (and (= end@2 end@1) (= Heap@199 Heap@183)) (and (= Mask@163 Mask@149) (= (ControlFlow 0 285) 284)))) anon799_correct)))))
(let ((anon1390_Else_correct  (=> (HasDirectPerm Mask@149 null (valid r_1@1)) (=> (and (= Heap@180 Heap@177) (= (ControlFlow 0 287) 285)) anon798_correct))))
(let ((anon1390_Then_correct  (=> (not (HasDirectPerm Mask@149 null (valid r_1@1))) (=> (and (and (= Heap@178 (MapType0Store Heap@177 null (|valid#sm| r_1@1) ZeroPMask)) (= Heap@179 (MapType0Store Heap@178 null (valid r_1@1) freshVersion@5))) (and (= Heap@180 Heap@179) (= (ControlFlow 0 286) 285))) anon798_correct))))
(let ((anon796_correct  (=> (= Mask@148 (MapType1Store Mask@147 null (rightValid r_1@1) (real_2_U (- (U_2_real (MapType1Select Mask@147 null (rightValid r_1@1))) FullPerm)))) (=> (and (InsidePredicate (valid r_1@1) (MapType0Select Heap@177 null (valid r_1@1)) (rightValid r_1@1) (MapType0Select Heap@177 null (rightValid r_1@1))) (= Mask@149 (MapType1Store Mask@148 null (valid r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@148 null (valid r_1@1))) FullPerm))))) (=> (and (and (state Heap@177 Mask@149) (state Heap@177 Mask@149)) (and (|valid#trigger| Heap@177 (valid r_1@1)) (= (MapType0Select Heap@177 null (valid r_1@1)) (CombineFrames (MapType0Select Heap@177 null (validRest r_1@1)) (CombineFrames (MapType0Select Heap@177 null (leftValid r_1@1)) (MapType0Select Heap@177 null (rightValid r_1@1))))))) (and (=> (= (ControlFlow 0 288) 286) anon1390_Then_correct) (=> (= (ControlFlow 0 288) 287) anon1390_Else_correct)))))))
(let ((anon1389_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 291) 288)) anon796_correct)))
(let ((anon1389_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 289) (- 0 290)) (<= FullPerm (U_2_real (MapType1Select Mask@147 null (rightValid r_1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@147 null (rightValid r_1@1)))) (=> (= (ControlFlow 0 289) 288) anon796_correct))))))
(let ((anon794_correct  (=> (and (= Mask@147 (MapType1Store Mask@146 null (leftValid r_1@1) (real_2_U (- (U_2_real (MapType1Select Mask@146 null (leftValid r_1@1))) FullPerm)))) (InsidePredicate (valid r_1@1) (MapType0Select Heap@177 null (valid r_1@1)) (leftValid r_1@1) (MapType0Select Heap@177 null (leftValid r_1@1)))) (and (=> (= (ControlFlow 0 292) 289) anon1389_Then_correct) (=> (= (ControlFlow 0 292) 291) anon1389_Else_correct)))))
(let ((anon1388_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 295) 292)) anon794_correct)))
(let ((anon1388_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 293) (- 0 294)) (<= FullPerm (U_2_real (MapType1Select Mask@146 null (leftValid r_1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@146 null (leftValid r_1@1)))) (=> (= (ControlFlow 0 293) 292) anon794_correct))))))
(let ((anon792_correct  (=> (and (= Mask@146 (MapType1Store Mask@145 null (validRest r_1@1) (real_2_U (- (U_2_real (MapType1Select Mask@145 null (validRest r_1@1))) FullPerm)))) (InsidePredicate (valid r_1@1) (MapType0Select Heap@177 null (valid r_1@1)) (validRest r_1@1) (MapType0Select Heap@177 null (validRest r_1@1)))) (and (=> (= (ControlFlow 0 296) 293) anon1388_Then_correct) (=> (= (ControlFlow 0 296) 295) anon1388_Else_correct)))))
(let ((anon1387_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 299) 296)) anon792_correct)))
(let ((anon1387_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 297) (- 0 298)) (<= FullPerm (U_2_real (MapType1Select Mask@145 null (validRest r_1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@145 null (validRest r_1@1)))) (=> (= (ControlFlow 0 297) 296) anon792_correct))))))
(let ((anon790_correct  (=> (= Heap@173 (MapType0Store Heap@172 null (|validRest#sm| r_1@1) (MapType1Store (MapType0Select Heap@172 null (|validRest#sm| r_1@1)) r_1@1 key (bool_2_U true)))) (=> (and (= Heap@174 (MapType0Store Heap@173 null (|validRest#sm| r_1@1) (MapType1Store (MapType0Select Heap@173 null (|validRest#sm| r_1@1)) r_1@1 root (bool_2_U true)))) (= Heap@175 (MapType0Store Heap@174 null (|validRest#sm| r_1@1) (MapType1Store (MapType0Select Heap@174 null (|validRest#sm| r_1@1)) r_1@1 left (bool_2_U true))))) (=> (and (and (= Heap@176 (MapType0Store Heap@175 null (|validRest#sm| r_1@1) (MapType1Store (MapType0Select Heap@175 null (|validRest#sm| r_1@1)) r_1@1 right (bool_2_U true)))) (= Heap@177 (MapType0Store Heap@176 null (|validRest#sm| r_1@1) (MapType1Store (MapType0Select Heap@176 null (|validRest#sm| r_1@1)) r_1@1 leftDown (bool_2_U true))))) (and (state Heap@177 Mask@145) (state Heap@177 Mask@145))) (and (=> (= (ControlFlow 0 300) 297) anon1387_Then_correct) (=> (= (ControlFlow 0 300) 299) anon1387_Else_correct)))))))
(let ((anon1386_Else_correct  (=> (HasDirectPerm Mask@145 null (validRest r_1@1)) (=> (and (= Heap@172 Heap@169) (= (ControlFlow 0 302) 300)) anon790_correct))))
(let ((anon1386_Then_correct  (=> (not (HasDirectPerm Mask@145 null (validRest r_1@1))) (=> (and (and (= Heap@170 (MapType0Store Heap@169 null (|validRest#sm| r_1@1) ZeroPMask)) (= Heap@171 (MapType0Store Heap@170 null (validRest r_1@1) freshVersion@4))) (and (= Heap@172 Heap@171) (= (ControlFlow 0 301) 300))) anon790_correct))))
(let ((anon788_correct  (=> (= Mask@144 (MapType1Store Mask@143 r_1@1 leftDown (real_2_U (- (U_2_real (MapType1Select Mask@143 r_1@1 leftDown)) FullPerm)))) (and (=> (= (ControlFlow 0 303) (- 0 304)) (or (not (= (MapType0Select Heap@169 r_1@1 right) (MapType0Select Heap@169 r_1@1 left))) (= (MapType0Select Heap@169 r_1@1 right) null))) (=> (or (not (= (MapType0Select Heap@169 r_1@1 right) (MapType0Select Heap@169 r_1@1 left))) (= (MapType0Select Heap@169 r_1@1 right) null)) (=> (= Mask@145 (MapType1Store Mask@144 null (validRest r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@144 null (validRest r_1@1))) FullPerm)))) (=> (and (and (state Heap@169 Mask@145) (state Heap@169 Mask@145)) (and (|validRest#trigger| Heap@169 (validRest r_1@1)) (= (MapType0Select Heap@169 null (validRest r_1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@169 r_1@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@169 r_1@1 root)) (CombineFrames (FrameFragment (MapType0Select Heap@169 r_1@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@169 r_1@1 right)) (FrameFragment (MapType0Select Heap@169 r_1@1 leftDown))))))))) (and (=> (= (ControlFlow 0 303) 301) anon1386_Then_correct) (=> (= (ControlFlow 0 303) 302) anon1386_Else_correct)))))))))
(let ((anon1385_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 307) 303)) anon788_correct)))
(let ((anon1385_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 305) (- 0 306)) (<= FullPerm (U_2_real (MapType1Select Mask@143 r_1@1 leftDown)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@143 r_1@1 leftDown))) (=> (= (ControlFlow 0 305) 303) anon788_correct))))))
(let ((anon786_correct  (=> (= Mask@143 (MapType1Store Mask@142 r_1@1 right (real_2_U (- (U_2_real (MapType1Select Mask@142 r_1@1 right)) perm@91)))) (and (=> (= (ControlFlow 0 308) 305) anon1385_Then_correct) (=> (= (ControlFlow 0 308) 307) anon1385_Else_correct)))))
(let ((anon1384_Else_correct  (=> (and (= perm@91 NoPerm) (= (ControlFlow 0 311) 308)) anon786_correct)))
(let ((anon1384_Then_correct  (=> (not (= perm@91 NoPerm)) (and (=> (= (ControlFlow 0 309) (- 0 310)) (<= perm@91 (U_2_real (MapType1Select Mask@142 r_1@1 right)))) (=> (<= perm@91 (U_2_real (MapType1Select Mask@142 r_1@1 right))) (=> (= (ControlFlow 0 309) 308) anon786_correct))))))
(let ((anon784_correct  (=> (and (= Mask@142 (MapType1Store Mask@141 r_1@1 left (real_2_U (- (U_2_real (MapType1Select Mask@141 r_1@1 left)) perm@90)))) (= perm@91 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 312) (- 0 313)) (>= perm@91 NoPerm)) (=> (>= perm@91 NoPerm) (and (=> (= (ControlFlow 0 312) 309) anon1384_Then_correct) (=> (= (ControlFlow 0 312) 311) anon1384_Else_correct)))))))
(let ((anon1383_Else_correct  (=> (and (= perm@90 NoPerm) (= (ControlFlow 0 316) 312)) anon784_correct)))
(let ((anon1383_Then_correct  (=> (not (= perm@90 NoPerm)) (and (=> (= (ControlFlow 0 314) (- 0 315)) (<= perm@90 (U_2_real (MapType1Select Mask@141 r_1@1 left)))) (=> (<= perm@90 (U_2_real (MapType1Select Mask@141 r_1@1 left))) (=> (= (ControlFlow 0 314) 312) anon784_correct))))))
(let ((anon782_correct  (=> (and (= Mask@141 (MapType1Store Mask@140 r_1@1 root (real_2_U (- (U_2_real (MapType1Select Mask@140 r_1@1 root)) perm@89)))) (= perm@90 (/ (to_real 3) (to_real 4)))) (and (=> (= (ControlFlow 0 317) (- 0 318)) (>= perm@90 NoPerm)) (=> (>= perm@90 NoPerm) (and (=> (= (ControlFlow 0 317) 314) anon1383_Then_correct) (=> (= (ControlFlow 0 317) 316) anon1383_Else_correct)))))))
(let ((anon1382_Else_correct  (=> (and (= perm@89 NoPerm) (= (ControlFlow 0 321) 317)) anon782_correct)))
(let ((anon1382_Then_correct  (=> (not (= perm@89 NoPerm)) (and (=> (= (ControlFlow 0 319) (- 0 320)) (<= perm@89 (U_2_real (MapType1Select Mask@140 r_1@1 root)))) (=> (<= perm@89 (U_2_real (MapType1Select Mask@140 r_1@1 root))) (=> (= (ControlFlow 0 319) 317) anon782_correct))))))
(let ((anon780_correct  (=> (and (= Mask@140 (MapType1Store Mask@139 r_1@1 key (real_2_U (- (U_2_real (MapType1Select Mask@139 r_1@1 key)) FullPerm)))) (= perm@89 (/ (to_real 3) (to_real 10)))) (and (=> (= (ControlFlow 0 322) (- 0 323)) (>= perm@89 NoPerm)) (=> (>= perm@89 NoPerm) (and (=> (= (ControlFlow 0 322) 319) anon1382_Then_correct) (=> (= (ControlFlow 0 322) 321) anon1382_Else_correct)))))))
(let ((anon1381_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 326) 322)) anon780_correct)))
(let ((anon1381_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 324) (- 0 325)) (<= FullPerm (U_2_real (MapType1Select Mask@139 r_1@1 key)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@139 r_1@1 key))) (=> (= (ControlFlow 0 324) 322) anon780_correct))))))
(let ((anon778_correct  (=> (state Heap@169 Mask@139) (and (=> (= (ControlFlow 0 327) 324) anon1381_Then_correct) (=> (= (ControlFlow 0 327) 326) anon1381_Else_correct)))))
(let ((anon740_correct  (=> (state Heap@168 Mask@138) (=> (and (and (state Heap@168 Mask@138) (= Heap@169 Heap@168)) (and (= Mask@139 Mask@138) (= (ControlFlow 0 390) 327))) anon778_correct))))
(let ((anon1362_Else_correct  (=> (= (MapType0Select Heap@166 r_1@1 left) null) (=> (and (= Heap@168 Heap@166) (= (ControlFlow 0 392) 390)) anon740_correct))))
(let ((anon1362_Then_correct  (=> (and (and (not (= (MapType0Select Heap@166 r_1@1 left) null)) (= Heap@167 (MapType0Store Heap@166 null (|leftValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@166 null (|leftValid#sm| r_1@1)) (MapType0Select Heap@166 r_1@1 left) root (bool_2_U true))))) (and (= Heap@168 Heap@167) (= (ControlFlow 0 391) 390))) anon740_correct)))
(let ((anon1361_Else_correct  (=> (and (= (MapType0Select Heap@164 r_1@1 left) null) (= Heap@166 Heap@164)) (and (=> (= (ControlFlow 0 394) 391) anon1362_Then_correct) (=> (= (ControlFlow 0 394) 392) anon1362_Else_correct)))))
(let ((anon1361_Then_correct  (=> (not (= (MapType0Select Heap@164 r_1@1 left) null)) (=> (and (= Heap@165 (MapType0Store Heap@164 null (|leftValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@164 null (|leftValid#sm| r_1@1)) (MapType0Select Heap@164 r_1@1 left) parent (bool_2_U true)))) (= Heap@166 Heap@165)) (and (=> (= (ControlFlow 0 393) 391) anon1362_Then_correct) (=> (= (ControlFlow 0 393) 392) anon1362_Else_correct))))))
(let ((anon1360_Else_correct  (=> (and (= (MapType0Select Heap@162 r_1@1 left) null) (= Heap@164 Heap@162)) (and (=> (= (ControlFlow 0 396) 393) anon1361_Then_correct) (=> (= (ControlFlow 0 396) 394) anon1361_Else_correct)))))
(let ((anon1360_Then_correct  (=> (and (and (not (= (MapType0Select Heap@162 r_1@1 left) null)) (forall ((o_75 T@U) (f_79 T@U) ) (! (let ((B@@60 (FieldTypeInv1 (type f_79))))
(let ((A@@61 (FieldTypeInv0 (type f_79))))
 (=> (and (and (= (type o_75) RefType) (= (type f_79) (FieldType A@@61 B@@60))) (or (U_2_bool (MapType1Select (MapType0Select Heap@162 null (|leftValid#sm| r_1@1)) o_75 f_79)) (U_2_bool (MapType1Select (MapType0Select Heap@162 null (|valid#sm| (MapType0Select Heap@162 r_1@1 left))) o_75 f_79)))) (U_2_bool (MapType1Select newPMask@42 o_75 f_79)))))
 :qid |stdinbpl.5242:49|
 :skolemid |148|
 :pattern ( (MapType1Select newPMask@42 o_75 f_79))
))) (and (= Heap@163 (MapType0Store Heap@162 null (|leftValid#sm| r_1@1) newPMask@42)) (= Heap@164 Heap@163))) (and (=> (= (ControlFlow 0 395) 393) anon1361_Then_correct) (=> (= (ControlFlow 0 395) 394) anon1361_Else_correct)))))
(let ((anon734_correct  (=> (and (= Heap@161 (MapType0Store Heap@160 null (|leftValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@160 null (|leftValid#sm| r_1@1)) r_1@1 left (bool_2_U true)))) (= Heap@162 (MapType0Store Heap@161 null (|leftValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@161 null (|leftValid#sm| r_1@1)) r_1@1 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 397) 395) anon1360_Then_correct) (=> (= (ControlFlow 0 397) 396) anon1360_Else_correct)))))
(let ((anon1359_Else_correct  (=> (HasDirectPerm Mask@138 null (leftValid r_1@1)) (=> (and (= Heap@160 Heap@157) (= (ControlFlow 0 399) 397)) anon734_correct))))
(let ((anon1359_Then_correct  (=> (not (HasDirectPerm Mask@138 null (leftValid r_1@1))) (=> (and (and (= Heap@158 (MapType0Store Heap@157 null (|leftValid#sm| r_1@1) ZeroPMask)) (= Heap@159 (MapType0Store Heap@158 null (leftValid r_1@1) freshVersion@3))) (and (= Heap@160 Heap@159) (= (ControlFlow 0 398) 397))) anon734_correct))))
(let ((anon732_correct  (=> (= Mask@138 (MapType1Store Mask@137 null (leftValid r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@137 null (leftValid r_1@1))) FullPerm)))) (=> (and (and (state Heap@157 Mask@138) (state Heap@157 Mask@138)) (and (|leftValid#trigger| Heap@157 (leftValid r_1@1)) (= (MapType0Select Heap@157 null (leftValid r_1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@157 r_1@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@157 r_1@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@157 r_1@1 left) null)) (MapType0Select Heap@157 null (valid (MapType0Select Heap@157 r_1@1 left))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@157 r_1@1 left) null)) (FrameFragment (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@157 r_1@1 left) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@157 r_1@1 left) null)) (FrameFragment (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@157 r_1@1 left) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 400) 398) anon1359_Then_correct) (=> (= (ControlFlow 0 400) 399) anon1359_Else_correct))))))
(let ((anon1358_Else_correct  (=> (and (= (MapType0Select Heap@157 r_1@1 left) null) (= (ControlFlow 0 403) 400)) anon732_correct)))
(let ((anon1358_Then_correct  (=> (not (= (MapType0Select Heap@157 r_1@1 left) null)) (and (=> (= (ControlFlow 0 401) (- 0 402)) (= (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) root) (MapType0Select Heap@157 r_1@1 root))) (=> (= (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) root) (MapType0Select Heap@157 r_1@1 root)) (=> (= (ControlFlow 0 401) 400) anon732_correct))))))
(let ((anon729_correct  (=> (and (= Mask@136 (MapType1Store Mask@135 (MapType0Select Heap@157 r_1@1 left) root (real_2_U (- (U_2_real (MapType1Select Mask@135 (MapType0Select Heap@157 r_1@1 left) root)) perm@88)))) (= Mask@137 Mask@136)) (and (=> (= (ControlFlow 0 405) 401) anon1358_Then_correct) (=> (= (ControlFlow 0 405) 403) anon1358_Else_correct)))))
(let ((anon1357_Else_correct  (=> (and (= perm@88 NoPerm) (= (ControlFlow 0 408) 405)) anon729_correct)))
(let ((anon1357_Then_correct  (=> (not (= perm@88 NoPerm)) (and (=> (= (ControlFlow 0 406) (- 0 407)) (<= perm@88 (U_2_real (MapType1Select Mask@135 (MapType0Select Heap@157 r_1@1 left) root)))) (=> (<= perm@88 (U_2_real (MapType1Select Mask@135 (MapType0Select Heap@157 r_1@1 left) root))) (=> (= (ControlFlow 0 406) 405) anon729_correct))))))
(let ((anon1356_Then_correct  (=> (and (not (= (MapType0Select Heap@157 r_1@1 left) null)) (= perm@88 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 409) (- 0 410)) (>= perm@88 NoPerm)) (=> (>= perm@88 NoPerm) (and (=> (= (ControlFlow 0 409) 406) anon1357_Then_correct) (=> (= (ControlFlow 0 409) 408) anon1357_Else_correct)))))))
(let ((anon1356_Else_correct  (=> (and (= (MapType0Select Heap@157 r_1@1 left) null) (= Mask@137 Mask@135)) (and (=> (= (ControlFlow 0 404) 401) anon1358_Then_correct) (=> (= (ControlFlow 0 404) 403) anon1358_Else_correct)))))
(let ((anon1355_Else_correct  (=> (= (MapType0Select Heap@157 r_1@1 left) null) (and (=> (= (ControlFlow 0 413) 409) anon1356_Then_correct) (=> (= (ControlFlow 0 413) 404) anon1356_Else_correct)))))
(let ((anon1355_Then_correct  (=> (not (= (MapType0Select Heap@157 r_1@1 left) null)) (and (=> (= (ControlFlow 0 411) (- 0 412)) (= (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) parent) r_1@1)) (=> (= (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) parent) r_1@1) (and (=> (= (ControlFlow 0 411) 409) anon1356_Then_correct) (=> (= (ControlFlow 0 411) 404) anon1356_Else_correct)))))))
(let ((anon723_correct  (=> (and (= Mask@134 (MapType1Store Mask@133 (MapType0Select Heap@157 r_1@1 left) parent (real_2_U (- (U_2_real (MapType1Select Mask@133 (MapType0Select Heap@157 r_1@1 left) parent)) FullPerm)))) (= Mask@135 Mask@134)) (and (=> (= (ControlFlow 0 415) 411) anon1355_Then_correct) (=> (= (ControlFlow 0 415) 413) anon1355_Else_correct)))))
(let ((anon1354_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 418) 415)) anon723_correct)))
(let ((anon1354_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 416) (- 0 417)) (<= FullPerm (U_2_real (MapType1Select Mask@133 (MapType0Select Heap@157 r_1@1 left) parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@133 (MapType0Select Heap@157 r_1@1 left) parent))) (=> (= (ControlFlow 0 416) 415) anon723_correct))))))
(let ((anon1353_Then_correct  (=> (not (= (MapType0Select Heap@157 r_1@1 left) null)) (and (=> (= (ControlFlow 0 419) 416) anon1354_Then_correct) (=> (= (ControlFlow 0 419) 418) anon1354_Else_correct)))))
(let ((anon1353_Else_correct  (=> (and (= (MapType0Select Heap@157 r_1@1 left) null) (= Mask@135 Mask@133)) (and (=> (= (ControlFlow 0 414) 411) anon1355_Then_correct) (=> (= (ControlFlow 0 414) 413) anon1355_Else_correct)))))
(let ((anon719_correct  (=> (= Mask@132 (MapType1Store Mask@131 null (valid (MapType0Select Heap@157 r_1@1 left)) (real_2_U (- (U_2_real (MapType1Select Mask@131 null (valid (MapType0Select Heap@157 r_1@1 left)))) FullPerm)))) (=> (and (InsidePredicate (leftValid r_1@1) (MapType0Select Heap@157 null (leftValid r_1@1)) (valid (MapType0Select Heap@157 r_1@1 left)) (MapType0Select Heap@157 null (valid (MapType0Select Heap@157 r_1@1 left)))) (= Mask@133 Mask@132)) (and (=> (= (ControlFlow 0 421) 419) anon1353_Then_correct) (=> (= (ControlFlow 0 421) 414) anon1353_Else_correct))))))
(let ((anon1352_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 424) 421)) anon719_correct)))
(let ((anon1352_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 422) (- 0 423)) (<= FullPerm (U_2_real (MapType1Select Mask@131 null (valid (MapType0Select Heap@157 r_1@1 left)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@131 null (valid (MapType0Select Heap@157 r_1@1 left))))) (=> (= (ControlFlow 0 422) 421) anon719_correct))))))
(let ((anon1351_Then_correct  (=> (not (= (MapType0Select Heap@157 r_1@1 left) null)) (and (=> (= (ControlFlow 0 425) 422) anon1352_Then_correct) (=> (= (ControlFlow 0 425) 424) anon1352_Else_correct)))))
(let ((anon1351_Else_correct  (=> (and (= (MapType0Select Heap@157 r_1@1 left) null) (= Mask@133 Mask@131)) (and (=> (= (ControlFlow 0 420) 419) anon1353_Then_correct) (=> (= (ControlFlow 0 420) 414) anon1353_Else_correct)))))
(let ((anon716_correct  (=> (= Mask@131 (MapType1Store Mask@130 r_1@1 root (real_2_U (- (U_2_real (MapType1Select Mask@130 r_1@1 root)) perm@87)))) (and (=> (= (ControlFlow 0 426) 425) anon1351_Then_correct) (=> (= (ControlFlow 0 426) 420) anon1351_Else_correct)))))
(let ((anon1350_Else_correct  (=> (and (= perm@87 NoPerm) (= (ControlFlow 0 429) 426)) anon716_correct)))
(let ((anon1350_Then_correct  (=> (not (= perm@87 NoPerm)) (and (=> (= (ControlFlow 0 427) (- 0 428)) (<= perm@87 (U_2_real (MapType1Select Mask@130 r_1@1 root)))) (=> (<= perm@87 (U_2_real (MapType1Select Mask@130 r_1@1 root))) (=> (= (ControlFlow 0 427) 426) anon716_correct))))))
(let ((anon714_correct  (=> (and (= Mask@130 (MapType1Store Mask@129 r_1@1 left (real_2_U (- (U_2_real (MapType1Select Mask@129 r_1@1 left)) perm@86)))) (= perm@87 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 430) (- 0 431)) (>= perm@87 NoPerm)) (=> (>= perm@87 NoPerm) (and (=> (= (ControlFlow 0 430) 427) anon1350_Then_correct) (=> (= (ControlFlow 0 430) 429) anon1350_Else_correct)))))))
(let ((anon1349_Else_correct  (=> (and (= perm@86 NoPerm) (= (ControlFlow 0 434) 430)) anon714_correct)))
(let ((anon1349_Then_correct  (=> (not (= perm@86 NoPerm)) (and (=> (= (ControlFlow 0 432) (- 0 433)) (<= perm@86 (U_2_real (MapType1Select Mask@129 r_1@1 left)))) (=> (<= perm@86 (U_2_real (MapType1Select Mask@129 r_1@1 left))) (=> (= (ControlFlow 0 432) 430) anon714_correct))))))
(let ((anon712_correct  (=> (state Heap@157 Mask@129) (=> (and (state Heap@157 Mask@129) (= perm@86 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 435) (- 0 436)) (>= perm@86 NoPerm)) (=> (>= perm@86 NoPerm) (and (=> (= (ControlFlow 0 435) 432) anon1349_Then_correct) (=> (= (ControlFlow 0 435) 434) anon1349_Else_correct))))))))
(let ((anon1348_Else_correct  (=> (and (= (MapType0Select Heap@157 r_1@1 left) null) (= (ControlFlow 0 438) 435)) anon712_correct)))
(let ((anon1348_Then_correct  (=> (not (= (MapType0Select Heap@157 r_1@1 left) null)) (=> (and (= (MapType0Select Heap@157 (MapType0Select Heap@157 r_1@1 left) parent) r_1@1) (= (ControlFlow 0 437) 435)) anon712_correct))))
(let ((anon1347_Else_correct  (=> (and (= (MapType0Select Heap@157 r_1@1 left) null) (= Mask@129 Mask@127)) (and (=> (= (ControlFlow 0 441) 437) anon1348_Then_correct) (=> (= (ControlFlow 0 441) 438) anon1348_Else_correct)))))
(let ((anon1347_Then_correct  (=> (and (not (= (MapType0Select Heap@157 r_1@1 left) null)) (= perm@85 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 439) (- 0 440)) (>= perm@85 NoPerm)) (=> (>= perm@85 NoPerm) (=> (and (and (=> (> perm@85 NoPerm) (not (= (MapType0Select Heap@157 r_1@1 left) null))) (= Mask@128 (MapType1Store Mask@127 (MapType0Select Heap@157 r_1@1 left) parent (real_2_U (+ (U_2_real (MapType1Select Mask@127 (MapType0Select Heap@157 r_1@1 left) parent)) perm@85))))) (and (state Heap@157 Mask@128) (= Mask@129 Mask@128))) (and (=> (= (ControlFlow 0 439) 437) anon1348_Then_correct) (=> (= (ControlFlow 0 439) 438) anon1348_Else_correct))))))))
(let ((anon708_correct  (=> (= perm@83 (/ (to_real 1) (to_real 4))) (and (=> (= (ControlFlow 0 442) (- 0 444)) (>= perm@83 NoPerm)) (=> (>= perm@83 NoPerm) (=> (and (and (=> (> perm@83 NoPerm) (not (= r_1@1 null))) (= Mask@126 (MapType1Store Mask@125 r_1@1 left (real_2_U (+ (U_2_real (MapType1Select Mask@125 r_1@1 left)) perm@83))))) (and (state Heap@157 Mask@126) (= perm@84 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 442) (- 0 443)) (>= perm@84 NoPerm)) (=> (>= perm@84 NoPerm) (=> (=> (> perm@84 NoPerm) (not (= r_1@1 null))) (=> (and (= Mask@127 (MapType1Store Mask@126 r_1@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@126 r_1@1 root)) perm@84)))) (state Heap@157 Mask@127)) (and (=> (= (ControlFlow 0 442) 439) anon1347_Then_correct) (=> (= (ControlFlow 0 442) 441) anon1347_Else_correct))))))))))))
(let ((anon1346_Else_correct  (=> (HasDirectPerm Mask@125 null (leftOpen r_1@1)) (=> (and (= Heap@157 Heap@142) (= (ControlFlow 0 446) 442)) anon708_correct))))
(let ((anon1346_Then_correct  (=> (and (and (not (HasDirectPerm Mask@125 null (leftOpen r_1@1))) (= Heap@156 (MapType0Store Heap@142 null (leftOpen r_1@1) newVersion@5))) (and (= Heap@157 Heap@156) (= (ControlFlow 0 445) 442))) anon708_correct)))
(let ((anon706_correct  (=> (= Mask@125 (MapType1Store Mask@110 null (leftOpen r_1@1) (real_2_U (- (U_2_real (MapType1Select Mask@110 null (leftOpen r_1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 447) 445) anon1346_Then_correct) (=> (= (ControlFlow 0 447) 446) anon1346_Else_correct)))))
(let ((anon1345_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 450) 447)) anon706_correct)))
(let ((anon1345_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 448) (- 0 449)) (<= FullPerm (U_2_real (MapType1Select Mask@110 null (leftOpen r_1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@110 null (leftOpen r_1@1)))) (=> (= (ControlFlow 0 448) 447) anon706_correct))))))
(let ((anon1344_Then_correct  (=> (= (MapType0Select Heap@142 r_1@1 left) n@2) (=> (and (|leftOpen#trigger| Heap@142 (leftOpen r_1@1)) (= (MapType0Select Heap@142 null (leftOpen r_1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@142 r_1@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@142 r_1@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@142 r_1@1 left) null)) (FrameFragment (MapType0Select Heap@142 (MapType0Select Heap@142 r_1@1 left) parent)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@142 r_1@1 left) null)) EmptyFrame EmptyFrame))))))) (and (=> (= (ControlFlow 0 451) 448) anon1345_Then_correct) (=> (= (ControlFlow 0 451) 450) anon1345_Else_correct))))))
(let ((anon777_correct  (=> (state Heap@155 Mask@124) (=> (and (and (state Heap@155 Mask@124) (= Heap@169 Heap@155)) (and (= Mask@139 Mask@124) (= (ControlFlow 0 328) 327))) anon778_correct))))
(let ((anon1380_Else_correct  (=> (= (MapType0Select Heap@153 r_1@1 right) null) (=> (and (= Heap@155 Heap@153) (= (ControlFlow 0 330) 328)) anon777_correct))))
(let ((anon1380_Then_correct  (=> (and (and (not (= (MapType0Select Heap@153 r_1@1 right) null)) (= Heap@154 (MapType0Store Heap@153 null (|rightValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@153 null (|rightValid#sm| r_1@1)) (MapType0Select Heap@153 r_1@1 right) root (bool_2_U true))))) (and (= Heap@155 Heap@154) (= (ControlFlow 0 329) 328))) anon777_correct)))
(let ((anon1379_Else_correct  (=> (and (= (MapType0Select Heap@151 r_1@1 right) null) (= Heap@153 Heap@151)) (and (=> (= (ControlFlow 0 332) 329) anon1380_Then_correct) (=> (= (ControlFlow 0 332) 330) anon1380_Else_correct)))))
(let ((anon1379_Then_correct  (=> (not (= (MapType0Select Heap@151 r_1@1 right) null)) (=> (and (= Heap@152 (MapType0Store Heap@151 null (|rightValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@151 null (|rightValid#sm| r_1@1)) (MapType0Select Heap@151 r_1@1 right) parent (bool_2_U true)))) (= Heap@153 Heap@152)) (and (=> (= (ControlFlow 0 331) 329) anon1380_Then_correct) (=> (= (ControlFlow 0 331) 330) anon1380_Else_correct))))))
(let ((anon1378_Else_correct  (=> (and (= (MapType0Select Heap@149 r_1@1 right) null) (= Heap@151 Heap@149)) (and (=> (= (ControlFlow 0 334) 331) anon1379_Then_correct) (=> (= (ControlFlow 0 334) 332) anon1379_Else_correct)))))
(let ((anon1378_Then_correct  (=> (and (and (not (= (MapType0Select Heap@149 r_1@1 right) null)) (forall ((o_76 T@U) (f_80 T@U) ) (! (let ((B@@61 (FieldTypeInv1 (type f_80))))
(let ((A@@62 (FieldTypeInv0 (type f_80))))
 (=> (and (and (= (type o_76) RefType) (= (type f_80) (FieldType A@@62 B@@61))) (or (U_2_bool (MapType1Select (MapType0Select Heap@149 null (|rightValid#sm| r_1@1)) o_76 f_80)) (U_2_bool (MapType1Select (MapType0Select Heap@149 null (|valid#sm| (MapType0Select Heap@149 r_1@1 right))) o_76 f_80)))) (U_2_bool (MapType1Select newPMask@41 o_76 f_80)))))
 :qid |stdinbpl.5372:49|
 :skolemid |149|
 :pattern ( (MapType1Select newPMask@41 o_76 f_80))
))) (and (= Heap@150 (MapType0Store Heap@149 null (|rightValid#sm| r_1@1) newPMask@41)) (= Heap@151 Heap@150))) (and (=> (= (ControlFlow 0 333) 331) anon1379_Then_correct) (=> (= (ControlFlow 0 333) 332) anon1379_Else_correct)))))
(let ((anon771_correct  (=> (and (= Heap@148 (MapType0Store Heap@147 null (|rightValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@147 null (|rightValid#sm| r_1@1)) r_1@1 right (bool_2_U true)))) (= Heap@149 (MapType0Store Heap@148 null (|rightValid#sm| r_1@1) (MapType1Store (MapType0Select Heap@148 null (|rightValid#sm| r_1@1)) r_1@1 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 335) 333) anon1378_Then_correct) (=> (= (ControlFlow 0 335) 334) anon1378_Else_correct)))))
(let ((anon1377_Else_correct  (=> (HasDirectPerm Mask@124 null (rightValid r_1@1)) (=> (and (= Heap@147 Heap@144) (= (ControlFlow 0 337) 335)) anon771_correct))))
(let ((anon1377_Then_correct  (=> (not (HasDirectPerm Mask@124 null (rightValid r_1@1))) (=> (and (and (= Heap@145 (MapType0Store Heap@144 null (|rightValid#sm| r_1@1) ZeroPMask)) (= Heap@146 (MapType0Store Heap@145 null (rightValid r_1@1) freshVersion@2))) (and (= Heap@147 Heap@146) (= (ControlFlow 0 336) 335))) anon771_correct))))
(let ((anon769_correct  (=> (= Mask@124 (MapType1Store Mask@123 null (rightValid r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@123 null (rightValid r_1@1))) FullPerm)))) (=> (and (and (state Heap@144 Mask@124) (state Heap@144 Mask@124)) (and (|rightValid#trigger| Heap@144 (rightValid r_1@1)) (= (MapType0Select Heap@144 null (rightValid r_1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@144 r_1@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@144 r_1@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@144 r_1@1 right) null)) (MapType0Select Heap@144 null (valid (MapType0Select Heap@144 r_1@1 right))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@144 r_1@1 right) null)) (FrameFragment (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@144 r_1@1 right) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@144 r_1@1 right) null)) (FrameFragment (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@144 r_1@1 right) null)) EmptyFrame EmptyFrame))))))))))) (and (=> (= (ControlFlow 0 338) 336) anon1377_Then_correct) (=> (= (ControlFlow 0 338) 337) anon1377_Else_correct))))))
(let ((anon1376_Else_correct  (=> (and (= (MapType0Select Heap@144 r_1@1 right) null) (= (ControlFlow 0 341) 338)) anon769_correct)))
(let ((anon1376_Then_correct  (=> (not (= (MapType0Select Heap@144 r_1@1 right) null)) (and (=> (= (ControlFlow 0 339) (- 0 340)) (= (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) root) (MapType0Select Heap@144 r_1@1 root))) (=> (= (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) root) (MapType0Select Heap@144 r_1@1 root)) (=> (= (ControlFlow 0 339) 338) anon769_correct))))))
(let ((anon766_correct  (=> (and (= Mask@122 (MapType1Store Mask@121 (MapType0Select Heap@144 r_1@1 right) root (real_2_U (- (U_2_real (MapType1Select Mask@121 (MapType0Select Heap@144 r_1@1 right) root)) perm@82)))) (= Mask@123 Mask@122)) (and (=> (= (ControlFlow 0 343) 339) anon1376_Then_correct) (=> (= (ControlFlow 0 343) 341) anon1376_Else_correct)))))
(let ((anon1375_Else_correct  (=> (and (= perm@82 NoPerm) (= (ControlFlow 0 346) 343)) anon766_correct)))
(let ((anon1375_Then_correct  (=> (not (= perm@82 NoPerm)) (and (=> (= (ControlFlow 0 344) (- 0 345)) (<= perm@82 (U_2_real (MapType1Select Mask@121 (MapType0Select Heap@144 r_1@1 right) root)))) (=> (<= perm@82 (U_2_real (MapType1Select Mask@121 (MapType0Select Heap@144 r_1@1 right) root))) (=> (= (ControlFlow 0 344) 343) anon766_correct))))))
(let ((anon1374_Then_correct  (=> (and (not (= (MapType0Select Heap@144 r_1@1 right) null)) (= perm@82 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 347) (- 0 348)) (>= perm@82 NoPerm)) (=> (>= perm@82 NoPerm) (and (=> (= (ControlFlow 0 347) 344) anon1375_Then_correct) (=> (= (ControlFlow 0 347) 346) anon1375_Else_correct)))))))
(let ((anon1374_Else_correct  (=> (and (= (MapType0Select Heap@144 r_1@1 right) null) (= Mask@123 Mask@121)) (and (=> (= (ControlFlow 0 342) 339) anon1376_Then_correct) (=> (= (ControlFlow 0 342) 341) anon1376_Else_correct)))))
(let ((anon1373_Else_correct  (=> (= (MapType0Select Heap@144 r_1@1 right) null) (and (=> (= (ControlFlow 0 351) 347) anon1374_Then_correct) (=> (= (ControlFlow 0 351) 342) anon1374_Else_correct)))))
(let ((anon1373_Then_correct  (=> (not (= (MapType0Select Heap@144 r_1@1 right) null)) (and (=> (= (ControlFlow 0 349) (- 0 350)) (= (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) parent) r_1@1)) (=> (= (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) parent) r_1@1) (and (=> (= (ControlFlow 0 349) 347) anon1374_Then_correct) (=> (= (ControlFlow 0 349) 342) anon1374_Else_correct)))))))
(let ((anon760_correct  (=> (and (= Mask@120 (MapType1Store Mask@119 (MapType0Select Heap@144 r_1@1 right) parent (real_2_U (- (U_2_real (MapType1Select Mask@119 (MapType0Select Heap@144 r_1@1 right) parent)) FullPerm)))) (= Mask@121 Mask@120)) (and (=> (= (ControlFlow 0 353) 349) anon1373_Then_correct) (=> (= (ControlFlow 0 353) 351) anon1373_Else_correct)))))
(let ((anon1372_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 356) 353)) anon760_correct)))
(let ((anon1372_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 354) (- 0 355)) (<= FullPerm (U_2_real (MapType1Select Mask@119 (MapType0Select Heap@144 r_1@1 right) parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@119 (MapType0Select Heap@144 r_1@1 right) parent))) (=> (= (ControlFlow 0 354) 353) anon760_correct))))))
(let ((anon1371_Then_correct  (=> (not (= (MapType0Select Heap@144 r_1@1 right) null)) (and (=> (= (ControlFlow 0 357) 354) anon1372_Then_correct) (=> (= (ControlFlow 0 357) 356) anon1372_Else_correct)))))
(let ((anon1371_Else_correct  (=> (and (= (MapType0Select Heap@144 r_1@1 right) null) (= Mask@121 Mask@119)) (and (=> (= (ControlFlow 0 352) 349) anon1373_Then_correct) (=> (= (ControlFlow 0 352) 351) anon1373_Else_correct)))))
(let ((anon756_correct  (=> (= Mask@118 (MapType1Store Mask@117 null (valid (MapType0Select Heap@144 r_1@1 right)) (real_2_U (- (U_2_real (MapType1Select Mask@117 null (valid (MapType0Select Heap@144 r_1@1 right)))) FullPerm)))) (=> (and (InsidePredicate (rightValid r_1@1) (MapType0Select Heap@144 null (rightValid r_1@1)) (valid (MapType0Select Heap@144 r_1@1 right)) (MapType0Select Heap@144 null (valid (MapType0Select Heap@144 r_1@1 right)))) (= Mask@119 Mask@118)) (and (=> (= (ControlFlow 0 359) 357) anon1371_Then_correct) (=> (= (ControlFlow 0 359) 352) anon1371_Else_correct))))))
(let ((anon1370_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 362) 359)) anon756_correct)))
(let ((anon1370_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 360) (- 0 361)) (<= FullPerm (U_2_real (MapType1Select Mask@117 null (valid (MapType0Select Heap@144 r_1@1 right)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@117 null (valid (MapType0Select Heap@144 r_1@1 right))))) (=> (= (ControlFlow 0 360) 359) anon756_correct))))))
(let ((anon1369_Then_correct  (=> (not (= (MapType0Select Heap@144 r_1@1 right) null)) (and (=> (= (ControlFlow 0 363) 360) anon1370_Then_correct) (=> (= (ControlFlow 0 363) 362) anon1370_Else_correct)))))
(let ((anon1369_Else_correct  (=> (and (= (MapType0Select Heap@144 r_1@1 right) null) (= Mask@119 Mask@117)) (and (=> (= (ControlFlow 0 358) 357) anon1371_Then_correct) (=> (= (ControlFlow 0 358) 352) anon1371_Else_correct)))))
(let ((anon753_correct  (=> (= Mask@117 (MapType1Store Mask@116 r_1@1 root (real_2_U (- (U_2_real (MapType1Select Mask@116 r_1@1 root)) perm@81)))) (and (=> (= (ControlFlow 0 364) 363) anon1369_Then_correct) (=> (= (ControlFlow 0 364) 358) anon1369_Else_correct)))))
(let ((anon1368_Else_correct  (=> (and (= perm@81 NoPerm) (= (ControlFlow 0 367) 364)) anon753_correct)))
(let ((anon1368_Then_correct  (=> (not (= perm@81 NoPerm)) (and (=> (= (ControlFlow 0 365) (- 0 366)) (<= perm@81 (U_2_real (MapType1Select Mask@116 r_1@1 root)))) (=> (<= perm@81 (U_2_real (MapType1Select Mask@116 r_1@1 root))) (=> (= (ControlFlow 0 365) 364) anon753_correct))))))
(let ((anon751_correct  (=> (and (= Mask@116 (MapType1Store Mask@115 r_1@1 right (real_2_U (- (U_2_real (MapType1Select Mask@115 r_1@1 right)) perm@80)))) (= perm@81 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 368) (- 0 369)) (>= perm@81 NoPerm)) (=> (>= perm@81 NoPerm) (and (=> (= (ControlFlow 0 368) 365) anon1368_Then_correct) (=> (= (ControlFlow 0 368) 367) anon1368_Else_correct)))))))
(let ((anon1367_Else_correct  (=> (and (= perm@80 NoPerm) (= (ControlFlow 0 372) 368)) anon751_correct)))
(let ((anon1367_Then_correct  (=> (not (= perm@80 NoPerm)) (and (=> (= (ControlFlow 0 370) (- 0 371)) (<= perm@80 (U_2_real (MapType1Select Mask@115 r_1@1 right)))) (=> (<= perm@80 (U_2_real (MapType1Select Mask@115 r_1@1 right))) (=> (= (ControlFlow 0 370) 368) anon751_correct))))))
(let ((anon749_correct  (=> (state Heap@144 Mask@115) (=> (and (state Heap@144 Mask@115) (= perm@80 (/ (to_real 1) (to_real 4)))) (and (=> (= (ControlFlow 0 373) (- 0 374)) (>= perm@80 NoPerm)) (=> (>= perm@80 NoPerm) (and (=> (= (ControlFlow 0 373) 370) anon1367_Then_correct) (=> (= (ControlFlow 0 373) 372) anon1367_Else_correct))))))))
(let ((anon1366_Else_correct  (=> (and (= (MapType0Select Heap@144 r_1@1 right) null) (= (ControlFlow 0 376) 373)) anon749_correct)))
(let ((anon1366_Then_correct  (=> (not (= (MapType0Select Heap@144 r_1@1 right) null)) (=> (and (= (MapType0Select Heap@144 (MapType0Select Heap@144 r_1@1 right) parent) r_1@1) (= (ControlFlow 0 375) 373)) anon749_correct))))
(let ((anon1365_Else_correct  (=> (and (= (MapType0Select Heap@144 r_1@1 right) null) (= Mask@115 Mask@113)) (and (=> (= (ControlFlow 0 379) 375) anon1366_Then_correct) (=> (= (ControlFlow 0 379) 376) anon1366_Else_correct)))))
(let ((anon1365_Then_correct  (=> (and (not (= (MapType0Select Heap@144 r_1@1 right) null)) (= perm@79 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 377) (- 0 378)) (>= perm@79 NoPerm)) (=> (>= perm@79 NoPerm) (=> (and (and (=> (> perm@79 NoPerm) (not (= (MapType0Select Heap@144 r_1@1 right) null))) (= Mask@114 (MapType1Store Mask@113 (MapType0Select Heap@144 r_1@1 right) parent (real_2_U (+ (U_2_real (MapType1Select Mask@113 (MapType0Select Heap@144 r_1@1 right) parent)) perm@79))))) (and (state Heap@144 Mask@114) (= Mask@115 Mask@114))) (and (=> (= (ControlFlow 0 377) 375) anon1366_Then_correct) (=> (= (ControlFlow 0 377) 376) anon1366_Else_correct))))))))
(let ((anon745_correct  (=> (= perm@77 (/ (to_real 1) (to_real 4))) (and (=> (= (ControlFlow 0 380) (- 0 382)) (>= perm@77 NoPerm)) (=> (>= perm@77 NoPerm) (=> (and (and (=> (> perm@77 NoPerm) (not (= r_1@1 null))) (= Mask@112 (MapType1Store Mask@111 r_1@1 right (real_2_U (+ (U_2_real (MapType1Select Mask@111 r_1@1 right)) perm@77))))) (and (state Heap@144 Mask@112) (= perm@78 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 380) (- 0 381)) (>= perm@78 NoPerm)) (=> (>= perm@78 NoPerm) (=> (=> (> perm@78 NoPerm) (not (= r_1@1 null))) (=> (and (= Mask@113 (MapType1Store Mask@112 r_1@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@112 r_1@1 root)) perm@78)))) (state Heap@144 Mask@113)) (and (=> (= (ControlFlow 0 380) 377) anon1365_Then_correct) (=> (= (ControlFlow 0 380) 379) anon1365_Else_correct))))))))))))
(let ((anon1364_Else_correct  (=> (HasDirectPerm Mask@111 null (rightOpen r_1@1)) (=> (and (= Heap@144 Heap@142) (= (ControlFlow 0 384) 380)) anon745_correct))))
(let ((anon1364_Then_correct  (=> (and (and (not (HasDirectPerm Mask@111 null (rightOpen r_1@1))) (= Heap@143 (MapType0Store Heap@142 null (rightOpen r_1@1) newVersion@4))) (and (= Heap@144 Heap@143) (= (ControlFlow 0 383) 380))) anon745_correct)))
(let ((anon743_correct  (=> (= Mask@111 (MapType1Store Mask@110 null (rightOpen r_1@1) (real_2_U (- (U_2_real (MapType1Select Mask@110 null (rightOpen r_1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 385) 383) anon1364_Then_correct) (=> (= (ControlFlow 0 385) 384) anon1364_Else_correct)))))
(let ((anon1363_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 388) 385)) anon743_correct)))
(let ((anon1363_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 386) (- 0 387)) (<= FullPerm (U_2_real (MapType1Select Mask@110 null (rightOpen r_1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@110 null (rightOpen r_1@1)))) (=> (= (ControlFlow 0 386) 385) anon743_correct))))))
(let ((anon1344_Else_correct  (=> (not (= (MapType0Select Heap@142 r_1@1 left) n@2)) (=> (and (|rightOpen#trigger| Heap@142 (rightOpen r_1@1)) (= (MapType0Select Heap@142 null (rightOpen r_1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@142 r_1@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@142 r_1@1 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@142 r_1@1 right) null)) (FrameFragment (MapType0Select Heap@142 (MapType0Select Heap@142 r_1@1 right) parent)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@142 r_1@1 right) null)) EmptyFrame EmptyFrame))))))) (and (=> (= (ControlFlow 0 389) 386) anon1363_Then_correct) (=> (= (ControlFlow 0 389) 388) anon1363_Else_correct))))))
(let ((anon703_correct  (=> (= Mask@110 (MapType1Store Mask@109 null (udParentValid r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@109 null (udParentValid r_1@1))) FullPerm)))) (=> (and (and (InsidePredicate (udValid r_1@1) (MapType0Select Heap@142 null (udValid r_1@1)) (udParentValid r_1@1) (MapType0Select Heap@142 null (udParentValid r_1@1))) (state Heap@142 Mask@110)) (and (state Heap@142 Mask@110) (state Heap@142 Mask@110))) (and (=> (= (ControlFlow 0 452) (- 0 453)) (HasDirectPerm Mask@110 r_1@1 left)) (=> (HasDirectPerm Mask@110 r_1@1 left) (and (=> (= (ControlFlow 0 452) 451) anon1344_Then_correct) (=> (= (ControlFlow 0 452) 389) anon1344_Else_correct))))))))
(let ((anon1343_Else_correct  (=> (not (=> (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown)) false)) (=> (and (= Mask@109 Mask@107) (= (ControlFlow 0 455) 452)) anon703_correct))))
(let ((anon1343_Then_correct  (=> (and (=> (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown)) false) (= Mask@108 (MapType1Store Mask@107 null (rightOpen r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@107 null (rightOpen r_1@1))) FullPerm))))) (=> (and (and (InsidePredicate (udValid r_1@1) (MapType0Select Heap@142 null (udValid r_1@1)) (rightOpen r_1@1) (MapType0Select Heap@142 null (rightOpen r_1@1))) (state Heap@142 Mask@108)) (and (= Mask@109 Mask@108) (= (ControlFlow 0 454) 452))) anon703_correct))))
(let ((anon1342_Else_correct  (=> (and (not (=> (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown)) false)) (= Mask@107 Mask@105)) (and (=> (= (ControlFlow 0 457) 454) anon1343_Then_correct) (=> (= (ControlFlow 0 457) 455) anon1343_Else_correct)))))
(let ((anon1342_Then_correct  (=> (=> (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown)) false) (=> (and (and (= Mask@106 (MapType1Store Mask@105 null (leftValid r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@105 null (leftValid r_1@1))) FullPerm)))) (InsidePredicate (udValid r_1@1) (MapType0Select Heap@142 null (udValid r_1@1)) (leftValid r_1@1) (MapType0Select Heap@142 null (leftValid r_1@1)))) (and (state Heap@142 Mask@106) (= Mask@107 Mask@106))) (and (=> (= (ControlFlow 0 456) 454) anon1343_Then_correct) (=> (= (ControlFlow 0 456) 455) anon1343_Else_correct))))))
(let ((anon1341_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown))) (= Mask@105 Mask@103)) (and (=> (= (ControlFlow 0 459) 456) anon1342_Then_correct) (=> (= (ControlFlow 0 459) 457) anon1342_Else_correct)))))
(let ((anon1341_Then_correct  (=> (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown)) (=> (and (and (= Mask@104 (MapType1Store Mask@103 null (leftOpen r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@103 null (leftOpen r_1@1))) FullPerm)))) (InsidePredicate (udValid r_1@1) (MapType0Select Heap@142 null (udValid r_1@1)) (leftOpen r_1@1) (MapType0Select Heap@142 null (leftOpen r_1@1)))) (and (state Heap@142 Mask@104) (= Mask@105 Mask@104))) (and (=> (= (ControlFlow 0 458) 456) anon1342_Then_correct) (=> (= (ControlFlow 0 458) 457) anon1342_Else_correct))))))
(let ((anon1340_Else_correct  (=> (and (not (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown))) (= Mask@103 Mask@101)) (and (=> (= (ControlFlow 0 461) 458) anon1341_Then_correct) (=> (= (ControlFlow 0 461) 459) anon1341_Else_correct)))))
(let ((anon1340_Then_correct  (=> (U_2_bool (MapType0Select Heap@142 r_1@1 leftDown)) (=> (and (and (= Mask@102 (MapType1Store Mask@101 null (rightValid r_1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@101 null (rightValid r_1@1))) FullPerm)))) (InsidePredicate (udValid r_1@1) (MapType0Select Heap@142 null (udValid r_1@1)) (rightValid r_1@1) (MapType0Select Heap@142 null (rightValid r_1@1)))) (and (state Heap@142 Mask@102) (= Mask@103 Mask@102))) (and (=> (= (ControlFlow 0 460) 458) anon1341_Then_correct) (=> (= (ControlFlow 0 460) 459) anon1341_Else_correct))))))
(let ((anon695_correct  (=> (and (and (not (= r_1@1 null)) (= Mask@97 (MapType1Store Mask@96 r_1@1 key (real_2_U (+ (U_2_real (MapType1Select Mask@96 r_1@1 key)) FullPerm))))) (and (state Heap@142 Mask@97) (= perm@73 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 462) (- 0 466)) (>= perm@73 NoPerm)) (=> (>= perm@73 NoPerm) (=> (and (and (=> (> perm@73 NoPerm) (not (= r_1@1 null))) (= Mask@98 (MapType1Store Mask@97 r_1@1 leftDown (real_2_U (+ (U_2_real (MapType1Select Mask@97 r_1@1 leftDown)) perm@73))))) (and (state Heap@142 Mask@98) (= perm@74 (/ (to_real 1) (to_real 4))))) (and (=> (= (ControlFlow 0 462) (- 0 465)) (>= perm@74 NoPerm)) (=> (>= perm@74 NoPerm) (=> (and (and (=> (> perm@74 NoPerm) (not (= r_1@1 null))) (= Mask@99 (MapType1Store Mask@98 r_1@1 left (real_2_U (+ (U_2_real (MapType1Select Mask@98 r_1@1 left)) perm@74))))) (and (state Heap@142 Mask@99) (= perm@75 (/ (to_real 1) (to_real 4))))) (and (=> (= (ControlFlow 0 462) (- 0 464)) (>= perm@75 NoPerm)) (=> (>= perm@75 NoPerm) (=> (and (and (=> (> perm@75 NoPerm) (not (= r_1@1 null))) (= Mask@100 (MapType1Store Mask@99 r_1@1 right (real_2_U (+ (U_2_real (MapType1Select Mask@99 r_1@1 right)) perm@75))))) (and (state Heap@142 Mask@100) (= perm@76 (/ (to_real 1) (to_real 5))))) (and (=> (= (ControlFlow 0 462) (- 0 463)) (>= perm@76 NoPerm)) (=> (>= perm@76 NoPerm) (=> (=> (> perm@76 NoPerm) (not (= r_1@1 null))) (=> (and (= Mask@101 (MapType1Store Mask@100 r_1@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@100 r_1@1 root)) perm@76)))) (state Heap@142 Mask@101)) (and (=> (= (ControlFlow 0 462) 460) anon1340_Then_correct) (=> (= (ControlFlow 0 462) 461) anon1340_Else_correct))))))))))))))))))
(let ((anon1339_Else_correct  (=> (HasDirectPerm Mask@96 null (udValid r_1@1)) (=> (and (= Heap@142 Heap@140) (= (ControlFlow 0 468) 462)) anon695_correct))))
(let ((anon1339_Then_correct  (=> (and (and (not (HasDirectPerm Mask@96 null (udValid r_1@1))) (= Heap@141 (MapType0Store Heap@140 null (udValid r_1@1) newVersion@3))) (and (= Heap@142 Heap@141) (= (ControlFlow 0 467) 462))) anon695_correct)))
(let ((anon693_correct  (=> (= Mask@96 (MapType1Store Mask@95 null (udValid r_1@1) (real_2_U (- (U_2_real (MapType1Select Mask@95 null (udValid r_1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 469) 467) anon1339_Then_correct) (=> (= (ControlFlow 0 469) 468) anon1339_Else_correct)))))
(let ((anon1338_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 472) 469)) anon693_correct)))
(let ((anon1338_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 470) (- 0 471)) (<= FullPerm (U_2_real (MapType1Select Mask@95 null (udValid r_1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@95 null (udValid r_1@1)))) (=> (= (ControlFlow 0 470) 469) anon693_correct))))))
(let ((anon1315_Else_correct  (=> (not (= r_1@1 null)) (=> (and (|udValid#trigger| Heap@140 (udValid r_1@1)) (= (MapType0Select Heap@140 null (udValid r_1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@140 r_1@1 key)) (CombineFrames (FrameFragment (MapType0Select Heap@140 r_1@1 leftDown)) (CombineFrames (FrameFragment (MapType0Select Heap@140 r_1@1 left)) (CombineFrames (FrameFragment (MapType0Select Heap@140 r_1@1 right)) (CombineFrames (FrameFragment (MapType0Select Heap@140 r_1@1 root)) (CombineFrames (FrameFragment (ite (U_2_bool (MapType0Select Heap@140 r_1@1 leftDown)) (MapType0Select Heap@140 null (rightValid r_1@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite (U_2_bool (MapType0Select Heap@140 r_1@1 leftDown)) (MapType0Select Heap@140 null (leftOpen r_1@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite  (=> (U_2_bool (MapType0Select Heap@140 r_1@1 leftDown)) false) (MapType0Select Heap@140 null (leftValid r_1@1)) EmptyFrame)) (CombineFrames (FrameFragment (ite  (=> (U_2_bool (MapType0Select Heap@140 r_1@1 leftDown)) false) (MapType0Select Heap@140 null (rightOpen r_1@1)) EmptyFrame)) (MapType0Select Heap@140 null (udParentValid r_1@1))))))))))))) (and (=> (= (ControlFlow 0 473) 470) anon1338_Then_correct) (=> (= (ControlFlow 0 473) 472) anon1338_Else_correct))))))
(let ((anon645_correct  (=> (and (state Heap@140 Mask@95) (state Heap@140 Mask@95)) (and (=> (= (ControlFlow 0 546) (- 0 547)) (HasDirectPerm Mask@95 n@2 parent)) (=> (HasDirectPerm Mask@95 n@2 parent) (=> (and (= r_1@1 (MapType0Select Heap@140 n@2 parent)) (state Heap@140 Mask@95)) (and (=> (= (ControlFlow 0 546) 544) anon1315_Then_correct) (=> (= (ControlFlow 0 546) 473) anon1315_Else_correct))))))))
(let ((anon1314_Else_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= (ControlFlow 0 549) 546)) anon645_correct)))
(let ((anon1314_Then_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (=> (and (= (MapType0Select Heap@140 n@2 root) n@2) (= (ControlFlow 0 548) 546)) anon645_correct))))
(let ((anon1313_Else_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 551) 548) anon1314_Then_correct) (=> (= (ControlFlow 0 551) 549) anon1314_Else_correct)))))
(let ((anon1313_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= (MapType0Select Heap@140 n@2 root) (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) root))) (and (=> (= (ControlFlow 0 550) 548) anon1314_Then_correct) (=> (= (ControlFlow 0 550) 549) anon1314_Else_correct)))))
(let ((anon1312_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@95 Mask@93)) (and (=> (= (ControlFlow 0 554) 550) anon1313_Then_correct) (=> (= (ControlFlow 0 554) 551) anon1313_Else_correct)))))
(let ((anon1312_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@71 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 552) (- 0 553)) (>= perm@71 NoPerm)) (=> (>= perm@71 NoPerm) (=> (and (and (=> (> perm@71 NoPerm) (not (= (MapType0Select Heap@140 n@2 parent) null))) (= Mask@94 (MapType1Store Mask@93 (MapType0Select Heap@140 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select Mask@93 (MapType0Select Heap@140 n@2 parent) root)) perm@71))))) (and (state Heap@140 Mask@94) (= Mask@95 Mask@94))) (and (=> (= (ControlFlow 0 552) 550) anon1313_Then_correct) (=> (= (ControlFlow 0 552) 551) anon1313_Else_correct))))))))
(let ((anon1311_Else_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 556) 552) anon1312_Then_correct) (=> (= (ControlFlow 0 556) 554) anon1312_Else_correct)))))
(let ((anon1311_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown))) (= (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 555) 552) anon1312_Then_correct) (=> (= (ControlFlow 0 555) 554) anon1312_Else_correct)))))
(let ((anon1310_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@93 Mask@91)) (and (=> (= (ControlFlow 0 559) 555) anon1311_Then_correct) (=> (= (ControlFlow 0 559) 556) anon1311_Else_correct)))))
(let ((anon1310_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@70 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 557) (- 0 558)) (>= perm@70 NoPerm)) (=> (>= perm@70 NoPerm) (=> (and (and (=> (> perm@70 NoPerm) (not (= (MapType0Select Heap@140 n@2 parent) null))) (= Mask@92 (MapType1Store Mask@91 (MapType0Select Heap@140 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select Mask@91 (MapType0Select Heap@140 n@2 parent) right)) perm@70))))) (and (state Heap@140 Mask@92) (= Mask@93 Mask@92))) (and (=> (= (ControlFlow 0 557) 555) anon1311_Then_correct) (=> (= (ControlFlow 0 557) 556) anon1311_Else_correct))))))))
(let ((anon1309_Else_correct  (=> (= (MapType0Select Heap@140 n@2 parent) null) (and (=> (= (ControlFlow 0 561) 557) anon1310_Then_correct) (=> (= (ControlFlow 0 561) 559) anon1310_Else_correct)))))
(let ((anon1309_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) leftDown)) (= (MapType0Select Heap@140 (MapType0Select Heap@140 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 560) 557) anon1310_Then_correct) (=> (= (ControlFlow 0 560) 559) anon1310_Else_correct)))))
(let ((anon1308_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@91 Mask@89)) (and (=> (= (ControlFlow 0 564) 560) anon1309_Then_correct) (=> (= (ControlFlow 0 564) 561) anon1309_Else_correct)))))
(let ((anon1308_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@69 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 562) (- 0 563)) (>= perm@69 NoPerm)) (=> (>= perm@69 NoPerm) (=> (and (and (=> (> perm@69 NoPerm) (not (= (MapType0Select Heap@140 n@2 parent) null))) (= Mask@90 (MapType1Store Mask@89 (MapType0Select Heap@140 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select Mask@89 (MapType0Select Heap@140 n@2 parent) left)) perm@69))))) (and (state Heap@140 Mask@90) (= Mask@91 Mask@90))) (and (=> (= (ControlFlow 0 562) 560) anon1309_Then_correct) (=> (= (ControlFlow 0 562) 561) anon1309_Else_correct))))))))
(let ((anon1307_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@89 Mask@87)) (and (=> (= (ControlFlow 0 567) 562) anon1308_Then_correct) (=> (= (ControlFlow 0 567) 564) anon1308_Else_correct)))))
(let ((anon1307_Then_correct  (=> (and (not (= (MapType0Select Heap@140 n@2 parent) null)) (= perm@68 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 565) (- 0 566)) (>= perm@68 NoPerm)) (=> (>= perm@68 NoPerm) (=> (and (and (=> (> perm@68 NoPerm) (not (= (MapType0Select Heap@140 n@2 parent) null))) (= Mask@88 (MapType1Store Mask@87 (MapType0Select Heap@140 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select Mask@87 (MapType0Select Heap@140 n@2 parent) leftDown)) perm@68))))) (and (state Heap@140 Mask@88) (= Mask@89 Mask@88))) (and (=> (= (ControlFlow 0 565) 562) anon1308_Then_correct) (=> (= (ControlFlow 0 565) 564) anon1308_Else_correct))))))))
(let ((anon1306_Else_correct  (=> (and (= (MapType0Select Heap@140 n@2 parent) null) (= Mask@87 Mask@85)) (and (=> (= (ControlFlow 0 569) 565) anon1307_Then_correct) (=> (= (ControlFlow 0 569) 567) anon1307_Else_correct)))))
(let ((anon1306_Then_correct  (=> (not (= (MapType0Select Heap@140 n@2 parent) null)) (=> (and (and (= Mask@86 (MapType1Store Mask@85 null (udValid (MapType0Select Heap@140 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select Mask@85 null (udValid (MapType0Select Heap@140 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@140 null (udParentValid n@2)) (udValid (MapType0Select Heap@140 n@2 parent)) (MapType0Select Heap@140 null (udValid (MapType0Select Heap@140 n@2 parent))))) (and (state Heap@140 Mask@86) (= Mask@87 Mask@86))) (and (=> (= (ControlFlow 0 568) 565) anon1307_Then_correct) (=> (= (ControlFlow 0 568) 567) anon1307_Else_correct))))))
(let ((anon627_correct  (=> (= perm@66 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 570) (- 0 572)) (>= perm@66 NoPerm)) (=> (>= perm@66 NoPerm) (=> (and (and (=> (> perm@66 NoPerm) (not (= n@2 null))) (= Mask@84 (MapType1Store Mask@83 n@2 parent (real_2_U (+ (U_2_real (MapType1Select Mask@83 n@2 parent)) perm@66))))) (and (state Heap@140 Mask@84) (= perm@67 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 570) (- 0 571)) (>= perm@67 NoPerm)) (=> (>= perm@67 NoPerm) (=> (=> (> perm@67 NoPerm) (not (= n@2 null))) (=> (and (= Mask@85 (MapType1Store Mask@84 n@2 root (real_2_U (+ (U_2_real (MapType1Select Mask@84 n@2 root)) perm@67)))) (state Heap@140 Mask@85)) (and (=> (= (ControlFlow 0 570) 568) anon1306_Then_correct) (=> (= (ControlFlow 0 570) 569) anon1306_Else_correct))))))))))))
(let ((anon1305_Else_correct  (=> (HasDirectPerm Mask@83 null (udParentValid n@2)) (=> (and (= Heap@140 Heap@138) (= (ControlFlow 0 574) 570)) anon627_correct))))
(let ((anon1305_Then_correct  (=> (and (and (not (HasDirectPerm Mask@83 null (udParentValid n@2))) (= Heap@139 (MapType0Store Heap@138 null (udParentValid n@2) newVersion@2))) (and (= Heap@140 Heap@139) (= (ControlFlow 0 573) 570))) anon627_correct)))
(let ((anon625_correct  (=> (= Mask@83 (MapType1Store Mask@56 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (udParentValid n@2))) FullPerm)))) (and (=> (= (ControlFlow 0 575) 573) anon1305_Then_correct) (=> (= (ControlFlow 0 575) 574) anon1305_Else_correct)))))
(let ((anon1304_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 578) 575)) anon625_correct)))
(let ((anon1304_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 576) (- 0 577)) (<= FullPerm (U_2_real (MapType1Select Mask@56 null (udParentValid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@56 null (udParentValid n@2)))) (=> (= (ControlFlow 0 576) 575) anon625_correct))))))
(let ((anon623_correct  (=> (and (and (not end@1) (state Heap@138 Mask@56)) (and (|udParentValid#trigger| Heap@138 (udParentValid n@2)) (= (MapType0Select Heap@138 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@138 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@138 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) (MapType0Select Heap@138 null (udValid (MapType0Select Heap@138 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) (FrameFragment (MapType0Select Heap@138 (MapType0Select Heap@138 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) (FrameFragment (MapType0Select Heap@138 (MapType0Select Heap@138 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) (FrameFragment (MapType0Select Heap@138 (MapType0Select Heap@138 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) (FrameFragment (MapType0Select Heap@138 (MapType0Select Heap@138 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@138 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@138 n@2 parent) null) EmptyFrame EmptyFrame))))))))))))))) (and (=> (= (ControlFlow 0 579) 576) anon1304_Then_correct) (=> (= (ControlFlow 0 579) 578) anon1304_Else_correct)))))
(let ((anon622_correct  (=> (state Heap@137 Mask@56) (=> (and (= Heap@138 Heap@137) (= (ControlFlow 0 581) 579)) anon623_correct))))
(let ((anon1303_Else_correct  (=> (= (MapType0Select Heap@135 n@2 parent) null) (=> (and (= Heap@137 Heap@135) (= (ControlFlow 0 583) 581)) anon622_correct))))
(let ((anon1303_Then_correct  (=> (and (and (not (= (MapType0Select Heap@135 n@2 parent) null)) (= Heap@136 (MapType0Store Heap@135 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@135 null (|udParentValid#sm| n@2)) (MapType0Select Heap@135 n@2 parent) root (bool_2_U true))))) (and (= Heap@137 Heap@136) (= (ControlFlow 0 582) 581))) anon622_correct)))
(let ((anon1302_Else_correct  (=> (and (= (MapType0Select Heap@133 n@2 parent) null) (= Heap@135 Heap@133)) (and (=> (= (ControlFlow 0 585) 582) anon1303_Then_correct) (=> (= (ControlFlow 0 585) 583) anon1303_Else_correct)))))
(let ((anon1302_Then_correct  (=> (not (= (MapType0Select Heap@133 n@2 parent) null)) (=> (and (= Heap@134 (MapType0Store Heap@133 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@133 null (|udParentValid#sm| n@2)) (MapType0Select Heap@133 n@2 parent) right (bool_2_U true)))) (= Heap@135 Heap@134)) (and (=> (= (ControlFlow 0 584) 582) anon1303_Then_correct) (=> (= (ControlFlow 0 584) 583) anon1303_Else_correct))))))
(let ((anon1301_Else_correct  (=> (and (= (MapType0Select Heap@131 n@2 parent) null) (= Heap@133 Heap@131)) (and (=> (= (ControlFlow 0 587) 584) anon1302_Then_correct) (=> (= (ControlFlow 0 587) 585) anon1302_Else_correct)))))
(let ((anon1301_Then_correct  (=> (not (= (MapType0Select Heap@131 n@2 parent) null)) (=> (and (= Heap@132 (MapType0Store Heap@131 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@131 null (|udParentValid#sm| n@2)) (MapType0Select Heap@131 n@2 parent) left (bool_2_U true)))) (= Heap@133 Heap@132)) (and (=> (= (ControlFlow 0 586) 584) anon1302_Then_correct) (=> (= (ControlFlow 0 586) 585) anon1302_Else_correct))))))
(let ((anon1300_Else_correct  (=> (and (= (MapType0Select Heap@129 n@2 parent) null) (= Heap@131 Heap@129)) (and (=> (= (ControlFlow 0 589) 586) anon1301_Then_correct) (=> (= (ControlFlow 0 589) 587) anon1301_Else_correct)))))
(let ((anon1300_Then_correct  (=> (not (= (MapType0Select Heap@129 n@2 parent) null)) (=> (and (= Heap@130 (MapType0Store Heap@129 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@129 null (|udParentValid#sm| n@2)) (MapType0Select Heap@129 n@2 parent) leftDown (bool_2_U true)))) (= Heap@131 Heap@130)) (and (=> (= (ControlFlow 0 588) 586) anon1301_Then_correct) (=> (= (ControlFlow 0 588) 587) anon1301_Else_correct))))))
(let ((anon1299_Else_correct  (=> (and (= (MapType0Select Heap@127 n@2 parent) null) (= Heap@129 Heap@127)) (and (=> (= (ControlFlow 0 591) 588) anon1300_Then_correct) (=> (= (ControlFlow 0 591) 589) anon1300_Else_correct)))))
(let ((anon1299_Then_correct  (=> (and (and (not (= (MapType0Select Heap@127 n@2 parent) null)) (forall ((o_73 T@U) (f_77 T@U) ) (! (let ((B@@62 (FieldTypeInv1 (type f_77))))
(let ((A@@63 (FieldTypeInv0 (type f_77))))
 (=> (and (and (= (type o_73) RefType) (= (type f_77) (FieldType A@@63 B@@62))) (or (U_2_bool (MapType1Select (MapType0Select Heap@127 null (|udParentValid#sm| n@2)) o_73 f_77)) (U_2_bool (MapType1Select (MapType0Select Heap@127 null (|udValid#sm| (MapType0Select Heap@127 n@2 parent))) o_73 f_77)))) (U_2_bool (MapType1Select newPMask@40 o_73 f_77)))))
 :qid |stdinbpl.4787:43|
 :skolemid |146|
 :pattern ( (MapType1Select newPMask@40 o_73 f_77))
))) (and (= Heap@128 (MapType0Store Heap@127 null (|udParentValid#sm| n@2) newPMask@40)) (= Heap@129 Heap@128))) (and (=> (= (ControlFlow 0 590) 588) anon1300_Then_correct) (=> (= (ControlFlow 0 590) 589) anon1300_Else_correct)))))
(let ((anon612_correct  (=> (state Heap@125 UnfoldingMask@121) (=> (and (= Heap@126 (MapType0Store Heap@125 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@125 null (|udParentValid#sm| n@2)) n@2 parent (bool_2_U true)))) (= Heap@127 (MapType0Store Heap@126 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@126 null (|udParentValid#sm| n@2)) n@2 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 592) 590) anon1299_Then_correct) (=> (= (ControlFlow 0 592) 591) anon1299_Else_correct))))))
(let ((anon1298_Else_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= (ControlFlow 0 594) 592)) anon612_correct)))
(let ((anon1298_Then_correct  (=> (= (MapType0Select Heap@125 n@2 parent) null) (=> (and (= (MapType0Select Heap@125 n@2 root) n@2) (= (ControlFlow 0 593) 592)) anon612_correct))))
(let ((anon1297_Else_correct  (=> (= (MapType0Select Heap@125 n@2 parent) null) (and (=> (= (ControlFlow 0 596) 593) anon1298_Then_correct) (=> (= (ControlFlow 0 596) 594) anon1298_Else_correct)))))
(let ((anon1297_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= (MapType0Select Heap@125 n@2 root) (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) root))) (and (=> (= (ControlFlow 0 595) 593) anon1298_Then_correct) (=> (= (ControlFlow 0 595) 594) anon1298_Else_correct)))))
(let ((anon1296_Else_correct  (=> (and (= (MapType0Select Heap@125 n@2 parent) null) (= UnfoldingMask@121 UnfoldingMask@119)) (and (=> (= (ControlFlow 0 599) 595) anon1297_Then_correct) (=> (= (ControlFlow 0 599) 596) anon1297_Else_correct)))))
(let ((anon1296_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= perm@65 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 597) (- 0 598)) (>= perm@65 NoPerm)) (=> (>= perm@65 NoPerm) (=> (and (and (=> (> perm@65 NoPerm) (not (= (MapType0Select Heap@125 n@2 parent) null))) (= UnfoldingMask@120 (MapType1Store UnfoldingMask@119 (MapType0Select Heap@125 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@119 (MapType0Select Heap@125 n@2 parent) root)) perm@65))))) (and (state Heap@125 UnfoldingMask@120) (= UnfoldingMask@121 UnfoldingMask@120))) (and (=> (= (ControlFlow 0 597) 595) anon1297_Then_correct) (=> (= (ControlFlow 0 597) 596) anon1297_Else_correct))))))))
(let ((anon1295_Else_correct  (=> (= (MapType0Select Heap@125 n@2 parent) null) (and (=> (= (ControlFlow 0 601) 597) anon1296_Then_correct) (=> (= (ControlFlow 0 601) 599) anon1296_Else_correct)))))
(let ((anon1295_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) leftDown))) (= (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 600) 597) anon1296_Then_correct) (=> (= (ControlFlow 0 600) 599) anon1296_Else_correct)))))
(let ((anon1294_Else_correct  (=> (and (= (MapType0Select Heap@125 n@2 parent) null) (= UnfoldingMask@119 UnfoldingMask@117)) (and (=> (= (ControlFlow 0 604) 600) anon1295_Then_correct) (=> (= (ControlFlow 0 604) 601) anon1295_Else_correct)))))
(let ((anon1294_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= perm@64 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 602) (- 0 603)) (>= perm@64 NoPerm)) (=> (>= perm@64 NoPerm) (=> (and (and (=> (> perm@64 NoPerm) (not (= (MapType0Select Heap@125 n@2 parent) null))) (= UnfoldingMask@118 (MapType1Store UnfoldingMask@117 (MapType0Select Heap@125 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@117 (MapType0Select Heap@125 n@2 parent) right)) perm@64))))) (and (state Heap@125 UnfoldingMask@118) (= UnfoldingMask@119 UnfoldingMask@118))) (and (=> (= (ControlFlow 0 602) 600) anon1295_Then_correct) (=> (= (ControlFlow 0 602) 601) anon1295_Else_correct))))))))
(let ((anon1293_Else_correct  (=> (= (MapType0Select Heap@125 n@2 parent) null) (and (=> (= (ControlFlow 0 606) 602) anon1294_Then_correct) (=> (= (ControlFlow 0 606) 604) anon1294_Else_correct)))))
(let ((anon1293_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) leftDown)) (= (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 605) 602) anon1294_Then_correct) (=> (= (ControlFlow 0 605) 604) anon1294_Else_correct)))))
(let ((anon1292_Else_correct  (=> (and (= (MapType0Select Heap@125 n@2 parent) null) (= UnfoldingMask@117 UnfoldingMask@115)) (and (=> (= (ControlFlow 0 609) 605) anon1293_Then_correct) (=> (= (ControlFlow 0 609) 606) anon1293_Else_correct)))))
(let ((anon1292_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= perm@63 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 607) (- 0 608)) (>= perm@63 NoPerm)) (=> (>= perm@63 NoPerm) (=> (and (and (=> (> perm@63 NoPerm) (not (= (MapType0Select Heap@125 n@2 parent) null))) (= UnfoldingMask@116 (MapType1Store UnfoldingMask@115 (MapType0Select Heap@125 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@115 (MapType0Select Heap@125 n@2 parent) left)) perm@63))))) (and (state Heap@125 UnfoldingMask@116) (= UnfoldingMask@117 UnfoldingMask@116))) (and (=> (= (ControlFlow 0 607) 605) anon1293_Then_correct) (=> (= (ControlFlow 0 607) 606) anon1293_Else_correct))))))))
(let ((anon1291_Else_correct  (=> (and (= (MapType0Select Heap@125 n@2 parent) null) (= UnfoldingMask@115 UnfoldingMask@113)) (and (=> (= (ControlFlow 0 612) 607) anon1292_Then_correct) (=> (= (ControlFlow 0 612) 609) anon1292_Else_correct)))))
(let ((anon1291_Then_correct  (=> (and (not (= (MapType0Select Heap@125 n@2 parent) null)) (= perm@62 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 610) (- 0 611)) (>= perm@62 NoPerm)) (=> (>= perm@62 NoPerm) (=> (and (and (=> (> perm@62 NoPerm) (not (= (MapType0Select Heap@125 n@2 parent) null))) (= UnfoldingMask@114 (MapType1Store UnfoldingMask@113 (MapType0Select Heap@125 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@113 (MapType0Select Heap@125 n@2 parent) leftDown)) perm@62))))) (and (state Heap@125 UnfoldingMask@114) (= UnfoldingMask@115 UnfoldingMask@114))) (and (=> (= (ControlFlow 0 610) 607) anon1292_Then_correct) (=> (= (ControlFlow 0 610) 609) anon1292_Else_correct))))))))
(let ((anon1290_Else_correct  (=> (and (= (MapType0Select Heap@125 n@2 parent) null) (= UnfoldingMask@113 UnfoldingMask@111)) (and (=> (= (ControlFlow 0 614) 610) anon1291_Then_correct) (=> (= (ControlFlow 0 614) 612) anon1291_Else_correct)))))
(let ((anon1290_Then_correct  (=> (not (= (MapType0Select Heap@125 n@2 parent) null)) (=> (and (and (= UnfoldingMask@112 (MapType1Store UnfoldingMask@111 null (udValid (MapType0Select Heap@125 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@111 null (udValid (MapType0Select Heap@125 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@125 null (udParentValid n@2)) (udValid (MapType0Select Heap@125 n@2 parent)) (MapType0Select Heap@125 null (udValid (MapType0Select Heap@125 n@2 parent))))) (and (state Heap@125 UnfoldingMask@112) (= UnfoldingMask@113 UnfoldingMask@112))) (and (=> (= (ControlFlow 0 613) 610) anon1291_Then_correct) (=> (= (ControlFlow 0 613) 612) anon1291_Else_correct))))))
(let ((anon594_correct  (=> (and (= UnfoldingMask@109 (MapType1Store Mask@56 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (udParentValid n@2))) FullPerm)))) (= perm@60 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 615) (- 0 617)) (>= perm@60 NoPerm)) (=> (>= perm@60 NoPerm) (=> (and (and (=> (> perm@60 NoPerm) (not (= n@2 null))) (= UnfoldingMask@110 (MapType1Store UnfoldingMask@109 n@2 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@109 n@2 parent)) perm@60))))) (and (state Heap@125 UnfoldingMask@110) (= perm@61 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 615) (- 0 616)) (>= perm@61 NoPerm)) (=> (>= perm@61 NoPerm) (=> (=> (> perm@61 NoPerm) (not (= n@2 null))) (=> (and (= UnfoldingMask@111 (MapType1Store UnfoldingMask@110 n@2 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@110 n@2 root)) perm@61)))) (state Heap@125 UnfoldingMask@111)) (and (=> (= (ControlFlow 0 615) 613) anon1290_Then_correct) (=> (= (ControlFlow 0 615) 614) anon1290_Else_correct))))))))))))
(let ((anon1289_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 620) 615)) anon594_correct)))
(let ((anon1289_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 618) (- 0 619)) (<= FullPerm (U_2_real (MapType1Select Mask@56 null (udParentValid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@56 null (udParentValid n@2)))) (=> (= (ControlFlow 0 618) 615) anon594_correct))))))
(let ((anon1288_Then_correct  (=> end@1 (=> (and (|udParentValid#trigger| Heap@125 (udParentValid n@2)) (= (MapType0Select Heap@125 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@125 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@125 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) (MapType0Select Heap@125 null (udValid (MapType0Select Heap@125 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) (FrameFragment (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) (FrameFragment (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) (FrameFragment (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) (FrameFragment (MapType0Select Heap@125 (MapType0Select Heap@125 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@125 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@125 n@2 parent) null) EmptyFrame EmptyFrame)))))))))))))) (and (=> (= (ControlFlow 0 621) 618) anon1289_Then_correct) (=> (= (ControlFlow 0 621) 620) anon1289_Else_correct))))))
(let ((anon1288_Else_correct  (=> (not end@1) (=> (and (= Heap@138 Heap@125) (= (ControlFlow 0 580) 579)) anon623_correct))))
(let ((anon591_correct  (=> (and (= UnfoldingMask@105 (MapType1Store Mask@56 null (valid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (valid n@2))) FullPerm)))) (= UnfoldingMask@106 (MapType1Store UnfoldingMask@105 null (validRest n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@105 null (validRest n@2))) FullPerm))))) (=> (and (and (and (and (InsidePredicate (valid n@2) (MapType0Select Heap@122 null (valid n@2)) (validRest n@2) (MapType0Select Heap@122 null (validRest n@2))) (state Heap@122 UnfoldingMask@106)) (and (= UnfoldingMask@107 (MapType1Store UnfoldingMask@106 null (leftValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@106 null (leftValid n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select Heap@122 null (valid n@2)) (leftValid n@2) (MapType0Select Heap@122 null (leftValid n@2))))) (and (and (state Heap@122 UnfoldingMask@107) (= UnfoldingMask@108 (MapType1Store UnfoldingMask@107 null (rightValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@107 null (rightValid n@2))) FullPerm))))) (and (InsidePredicate (valid n@2) (MapType0Select Heap@122 null (valid n@2)) (rightValid n@2) (MapType0Select Heap@122 null (rightValid n@2))) (state Heap@122 UnfoldingMask@108)))) (and (and (and (state Heap@122 UnfoldingMask@108) (forall ((o_70 T@U) (f_74 T@U) ) (! (let ((B@@63 (FieldTypeInv1 (type f_74))))
(let ((A@@64 (FieldTypeInv0 (type f_74))))
 (=> (and (and (= (type o_70) RefType) (= (type f_74) (FieldType A@@64 B@@63))) (or (U_2_bool (MapType1Select (MapType0Select Heap@122 null (|valid#sm| n@2)) o_70 f_74)) (U_2_bool (MapType1Select (MapType0Select Heap@122 null (|validRest#sm| n@2)) o_70 f_74)))) (U_2_bool (MapType1Select newPMask@37 o_70 f_74)))))
 :qid |stdinbpl.4683:39|
 :skolemid |143|
 :pattern ( (MapType1Select newPMask@37 o_70 f_74))
))) (and (= Heap@123 (MapType0Store Heap@122 null (|valid#sm| n@2) newPMask@37)) (forall ((o_71 T@U) (f_75 T@U) ) (! (let ((B@@64 (FieldTypeInv1 (type f_75))))
(let ((A@@65 (FieldTypeInv0 (type f_75))))
 (=> (and (and (= (type o_71) RefType) (= (type f_75) (FieldType A@@65 B@@64))) (or (U_2_bool (MapType1Select (MapType0Select Heap@123 null (|valid#sm| n@2)) o_71 f_75)) (U_2_bool (MapType1Select (MapType0Select Heap@123 null (|leftValid#sm| n@2)) o_71 f_75)))) (U_2_bool (MapType1Select newPMask@38 o_71 f_75)))))
 :qid |stdinbpl.4689:39|
 :skolemid |144|
 :pattern ( (MapType1Select newPMask@38 o_71 f_75))
)))) (and (and (= Heap@124 (MapType0Store Heap@123 null (|valid#sm| n@2) newPMask@38)) (forall ((o_72 T@U) (f_76 T@U) ) (! (let ((B@@65 (FieldTypeInv1 (type f_76))))
(let ((A@@66 (FieldTypeInv0 (type f_76))))
 (=> (and (and (= (type o_72) RefType) (= (type f_76) (FieldType A@@66 B@@65))) (or (U_2_bool (MapType1Select (MapType0Select Heap@124 null (|valid#sm| n@2)) o_72 f_76)) (U_2_bool (MapType1Select (MapType0Select Heap@124 null (|rightValid#sm| n@2)) o_72 f_76)))) (U_2_bool (MapType1Select newPMask@39 o_72 f_76)))))
 :qid |stdinbpl.4695:39|
 :skolemid |145|
 :pattern ( (MapType1Select newPMask@39 o_72 f_76))
))) (and (= Heap@125 (MapType0Store Heap@124 null (|valid#sm| n@2) newPMask@39)) (state Heap@125 Mask@56))))) (and (=> (= (ControlFlow 0 622) 621) anon1288_Then_correct) (=> (= (ControlFlow 0 622) 580) anon1288_Else_correct))))))
(let ((anon1287_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 625) 622)) anon591_correct)))
(let ((anon1287_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 623) (- 0 624)) (<= FullPerm (U_2_real (MapType1Select Mask@56 null (valid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@56 null (valid n@2)))) (=> (= (ControlFlow 0 623) 622) anon591_correct))))))
(let ((anon589_correct  (=> (state Heap@122 Mask@56) (=> (and (|valid#trigger| Heap@122 (valid n@2)) (= (MapType0Select Heap@122 null (valid n@2)) (CombineFrames (MapType0Select Heap@122 null (validRest n@2)) (CombineFrames (MapType0Select Heap@122 null (leftValid n@2)) (MapType0Select Heap@122 null (rightValid n@2)))))) (and (=> (= (ControlFlow 0 626) 623) anon1287_Then_correct) (=> (= (ControlFlow 0 626) 625) anon1287_Else_correct))))))
(let ((anon588_correct  (=> (state Heap@121 Mask@56) (=> (and (= Heap@122 Heap@121) (= (ControlFlow 0 628) 626)) anon589_correct))))
(let ((anon1286_Else_correct  (=> (= (MapType0Select Heap@119 n@2 parent) null) (=> (and (= Heap@121 Heap@119) (= (ControlFlow 0 630) 628)) anon588_correct))))
(let ((anon1286_Then_correct  (=> (and (and (not (= (MapType0Select Heap@119 n@2 parent) null)) (= Heap@120 (MapType0Store Heap@119 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@119 null (|udParentValid#sm| n@2)) (MapType0Select Heap@119 n@2 parent) root (bool_2_U true))))) (and (= Heap@121 Heap@120) (= (ControlFlow 0 629) 628))) anon588_correct)))
(let ((anon1285_Else_correct  (=> (and (= (MapType0Select Heap@117 n@2 parent) null) (= Heap@119 Heap@117)) (and (=> (= (ControlFlow 0 632) 629) anon1286_Then_correct) (=> (= (ControlFlow 0 632) 630) anon1286_Else_correct)))))
(let ((anon1285_Then_correct  (=> (not (= (MapType0Select Heap@117 n@2 parent) null)) (=> (and (= Heap@118 (MapType0Store Heap@117 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@117 null (|udParentValid#sm| n@2)) (MapType0Select Heap@117 n@2 parent) right (bool_2_U true)))) (= Heap@119 Heap@118)) (and (=> (= (ControlFlow 0 631) 629) anon1286_Then_correct) (=> (= (ControlFlow 0 631) 630) anon1286_Else_correct))))))
(let ((anon1284_Else_correct  (=> (and (= (MapType0Select Heap@115 n@2 parent) null) (= Heap@117 Heap@115)) (and (=> (= (ControlFlow 0 634) 631) anon1285_Then_correct) (=> (= (ControlFlow 0 634) 632) anon1285_Else_correct)))))
(let ((anon1284_Then_correct  (=> (not (= (MapType0Select Heap@115 n@2 parent) null)) (=> (and (= Heap@116 (MapType0Store Heap@115 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@115 null (|udParentValid#sm| n@2)) (MapType0Select Heap@115 n@2 parent) left (bool_2_U true)))) (= Heap@117 Heap@116)) (and (=> (= (ControlFlow 0 633) 631) anon1285_Then_correct) (=> (= (ControlFlow 0 633) 632) anon1285_Else_correct))))))
(let ((anon1283_Else_correct  (=> (and (= (MapType0Select Heap@113 n@2 parent) null) (= Heap@115 Heap@113)) (and (=> (= (ControlFlow 0 636) 633) anon1284_Then_correct) (=> (= (ControlFlow 0 636) 634) anon1284_Else_correct)))))
(let ((anon1283_Then_correct  (=> (not (= (MapType0Select Heap@113 n@2 parent) null)) (=> (and (= Heap@114 (MapType0Store Heap@113 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@113 null (|udParentValid#sm| n@2)) (MapType0Select Heap@113 n@2 parent) leftDown (bool_2_U true)))) (= Heap@115 Heap@114)) (and (=> (= (ControlFlow 0 635) 633) anon1284_Then_correct) (=> (= (ControlFlow 0 635) 634) anon1284_Else_correct))))))
(let ((anon1282_Else_correct  (=> (and (= (MapType0Select Heap@111 n@2 parent) null) (= Heap@113 Heap@111)) (and (=> (= (ControlFlow 0 638) 635) anon1283_Then_correct) (=> (= (ControlFlow 0 638) 636) anon1283_Else_correct)))))
(let ((anon1282_Then_correct  (=> (and (and (not (= (MapType0Select Heap@111 n@2 parent) null)) (forall ((o_69 T@U) (f_73 T@U) ) (! (let ((B@@66 (FieldTypeInv1 (type f_73))))
(let ((A@@67 (FieldTypeInv0 (type f_73))))
 (=> (and (and (= (type o_69) RefType) (= (type f_73) (FieldType A@@67 B@@66))) (or (U_2_bool (MapType1Select (MapType0Select Heap@111 null (|udParentValid#sm| n@2)) o_69 f_73)) (U_2_bool (MapType1Select (MapType0Select Heap@111 null (|udValid#sm| (MapType0Select Heap@111 n@2 parent))) o_69 f_73)))) (U_2_bool (MapType1Select newPMask@36 o_69 f_73)))))
 :qid |stdinbpl.4626:41|
 :skolemid |142|
 :pattern ( (MapType1Select newPMask@36 o_69 f_73))
))) (and (= Heap@112 (MapType0Store Heap@111 null (|udParentValid#sm| n@2) newPMask@36)) (= Heap@113 Heap@112))) (and (=> (= (ControlFlow 0 637) 635) anon1283_Then_correct) (=> (= (ControlFlow 0 637) 636) anon1283_Else_correct)))))
(let ((anon578_correct  (=> (and (and (state Heap@65 UnfoldingMask@104) (= (MapType0Select Heap@65 n@2 parent) null)) (and (= Heap@110 (MapType0Store Heap@65 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@65 null (|udParentValid#sm| n@2)) n@2 parent (bool_2_U true)))) (= Heap@111 (MapType0Store Heap@110 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@110 null (|udParentValid#sm| n@2)) n@2 root (bool_2_U true)))))) (and (=> (= (ControlFlow 0 639) 637) anon1282_Then_correct) (=> (= (ControlFlow 0 639) 638) anon1282_Else_correct)))))
(let ((anon1281_Else_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= (ControlFlow 0 641) 639)) anon578_correct)))
(let ((anon1281_Then_correct  (=> (= (MapType0Select Heap@65 n@2 parent) null) (=> (and (= (MapType0Select Heap@65 n@2 root) n@2) (= (ControlFlow 0 640) 639)) anon578_correct))))
(let ((anon1280_Else_correct  (=> (= (MapType0Select Heap@65 n@2 parent) null) (and (=> (= (ControlFlow 0 643) 640) anon1281_Then_correct) (=> (= (ControlFlow 0 643) 641) anon1281_Else_correct)))))
(let ((anon1280_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= (MapType0Select Heap@65 n@2 root) (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) root))) (and (=> (= (ControlFlow 0 642) 640) anon1281_Then_correct) (=> (= (ControlFlow 0 642) 641) anon1281_Else_correct)))))
(let ((anon1279_Else_correct  (=> (and (= (MapType0Select Heap@65 n@2 parent) null) (= UnfoldingMask@104 UnfoldingMask@102)) (and (=> (= (ControlFlow 0 645) 642) anon1280_Then_correct) (=> (= (ControlFlow 0 645) 643) anon1280_Else_correct)))))
(let ((anon1279_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= perm@59 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@59 NoPerm) (not (= (MapType0Select Heap@65 n@2 parent) null))) (= UnfoldingMask@103 (MapType1Store UnfoldingMask@102 (MapType0Select Heap@65 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@102 (MapType0Select Heap@65 n@2 parent) root)) perm@59))))) (and (state Heap@65 UnfoldingMask@103) (= UnfoldingMask@104 UnfoldingMask@103))) (and (=> (= (ControlFlow 0 644) 642) anon1280_Then_correct) (=> (= (ControlFlow 0 644) 643) anon1280_Else_correct))))))
(let ((anon1278_Else_correct  (=> (= (MapType0Select Heap@65 n@2 parent) null) (and (=> (= (ControlFlow 0 647) 644) anon1279_Then_correct) (=> (= (ControlFlow 0 647) 645) anon1279_Else_correct)))))
(let ((anon1278_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) leftDown))) (= (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 646) 644) anon1279_Then_correct) (=> (= (ControlFlow 0 646) 645) anon1279_Else_correct)))))
(let ((anon1277_Else_correct  (=> (and (= (MapType0Select Heap@65 n@2 parent) null) (= UnfoldingMask@102 UnfoldingMask@100)) (and (=> (= (ControlFlow 0 649) 646) anon1278_Then_correct) (=> (= (ControlFlow 0 649) 647) anon1278_Else_correct)))))
(let ((anon1277_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= perm@58 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@58 NoPerm) (not (= (MapType0Select Heap@65 n@2 parent) null))) (= UnfoldingMask@101 (MapType1Store UnfoldingMask@100 (MapType0Select Heap@65 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@100 (MapType0Select Heap@65 n@2 parent) right)) perm@58))))) (and (state Heap@65 UnfoldingMask@101) (= UnfoldingMask@102 UnfoldingMask@101))) (and (=> (= (ControlFlow 0 648) 646) anon1278_Then_correct) (=> (= (ControlFlow 0 648) 647) anon1278_Else_correct))))))
(let ((anon1276_Else_correct  (=> (= (MapType0Select Heap@65 n@2 parent) null) (and (=> (= (ControlFlow 0 651) 648) anon1277_Then_correct) (=> (= (ControlFlow 0 651) 649) anon1277_Else_correct)))))
(let ((anon1276_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) leftDown)) (= (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 650) 648) anon1277_Then_correct) (=> (= (ControlFlow 0 650) 649) anon1277_Else_correct)))))
(let ((anon1275_Else_correct  (=> (and (= (MapType0Select Heap@65 n@2 parent) null) (= UnfoldingMask@100 UnfoldingMask@98)) (and (=> (= (ControlFlow 0 653) 650) anon1276_Then_correct) (=> (= (ControlFlow 0 653) 651) anon1276_Else_correct)))))
(let ((anon1275_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= perm@57 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@57 NoPerm) (not (= (MapType0Select Heap@65 n@2 parent) null))) (= UnfoldingMask@99 (MapType1Store UnfoldingMask@98 (MapType0Select Heap@65 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@98 (MapType0Select Heap@65 n@2 parent) left)) perm@57))))) (and (state Heap@65 UnfoldingMask@99) (= UnfoldingMask@100 UnfoldingMask@99))) (and (=> (= (ControlFlow 0 652) 650) anon1276_Then_correct) (=> (= (ControlFlow 0 652) 651) anon1276_Else_correct))))))
(let ((anon1274_Else_correct  (=> (and (= (MapType0Select Heap@65 n@2 parent) null) (= UnfoldingMask@98 UnfoldingMask@96)) (and (=> (= (ControlFlow 0 655) 652) anon1275_Then_correct) (=> (= (ControlFlow 0 655) 653) anon1275_Else_correct)))))
(let ((anon1274_Then_correct  (=> (and (not (= (MapType0Select Heap@65 n@2 parent) null)) (= perm@56 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@56 NoPerm) (not (= (MapType0Select Heap@65 n@2 parent) null))) (= UnfoldingMask@97 (MapType1Store UnfoldingMask@96 (MapType0Select Heap@65 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@96 (MapType0Select Heap@65 n@2 parent) leftDown)) perm@56))))) (and (state Heap@65 UnfoldingMask@97) (= UnfoldingMask@98 UnfoldingMask@97))) (and (=> (= (ControlFlow 0 654) 652) anon1275_Then_correct) (=> (= (ControlFlow 0 654) 653) anon1275_Else_correct))))))
(let ((anon1273_Else_correct  (=> (and (= (MapType0Select Heap@65 n@2 parent) null) (= UnfoldingMask@96 UnfoldingMask@94)) (and (=> (= (ControlFlow 0 657) 654) anon1274_Then_correct) (=> (= (ControlFlow 0 657) 655) anon1274_Else_correct)))))
(let ((anon1273_Then_correct  (=> (not (= (MapType0Select Heap@65 n@2 parent) null)) (=> (and (and (= UnfoldingMask@95 (MapType1Store UnfoldingMask@94 null (udValid (MapType0Select Heap@65 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@94 null (udValid (MapType0Select Heap@65 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@65 null (udParentValid n@2)) (udValid (MapType0Select Heap@65 n@2 parent)) (MapType0Select Heap@65 null (udValid (MapType0Select Heap@65 n@2 parent))))) (and (state Heap@65 UnfoldingMask@95) (= UnfoldingMask@96 UnfoldingMask@95))) (and (=> (= (ControlFlow 0 656) 654) anon1274_Then_correct) (=> (= (ControlFlow 0 656) 655) anon1274_Else_correct))))))
(let ((anon1272_Then_correct  (=> (and (and end@1 (|udParentValid#trigger| Heap@65 (udParentValid n@2))) (and (= (MapType0Select Heap@65 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@65 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@65 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) (MapType0Select Heap@65 null (udValid (MapType0Select Heap@65 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) (FrameFragment (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) (FrameFragment (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) (FrameFragment (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) (FrameFragment (MapType0Select Heap@65 (MapType0Select Heap@65 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@65 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@65 n@2 parent) null) EmptyFrame EmptyFrame))))))))))))) (= UnfoldingMask@92 (MapType1Store Mask@56 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (udParentValid n@2))) FullPerm)))))) (=> (and (and (and (= perm@54 (/ (to_real 1) (to_real 2))) (=> (> perm@54 NoPerm) (not (= n@2 null)))) (and (= UnfoldingMask@93 (MapType1Store UnfoldingMask@92 n@2 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@92 n@2 parent)) perm@54)))) (state Heap@65 UnfoldingMask@93))) (and (and (= perm@55 (/ (to_real 1) (to_real 10))) (=> (> perm@55 NoPerm) (not (= n@2 null)))) (and (= UnfoldingMask@94 (MapType1Store UnfoldingMask@93 n@2 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@93 n@2 root)) perm@55)))) (state Heap@65 UnfoldingMask@94)))) (and (=> (= (ControlFlow 0 658) 656) anon1273_Then_correct) (=> (= (ControlFlow 0 658) 657) anon1273_Else_correct))))))
(let ((anon1272_Else_correct  (=> (not end@1) (=> (and (= Heap@122 Heap@65) (= (ControlFlow 0 627) 626)) anon589_correct))))
(let ((anon1271_Then_correct  (=> (and (state ExhaleHeap@1 ZeroMask) (not (= this@@53 null))) (=> (and (and (= Mask@52 (MapType1Store ZeroMask this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@53 root1)) FullPerm)))) (state ExhaleHeap@1 Mask@52)) (and (not (= (MapType0Select ExhaleHeap@1 this@@53 root1) null)) (= perm@31 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 659) (- 0 661)) (>= perm@31 NoPerm)) (=> (>= perm@31 NoPerm) (=> (=> (> perm@31 NoPerm) (not (= (MapType0Select ExhaleHeap@1 this@@53 root1) null))) (=> (and (and (and (= Mask@53 (MapType1Store Mask@52 (MapType0Select ExhaleHeap@1 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@52 (MapType0Select ExhaleHeap@1 this@@53 root1) parent)) perm@31)))) (state ExhaleHeap@1 Mask@53)) (and (not (= n@2 null)) (= Mask@54 (MapType1Store Mask@53 null (valid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@53 null (valid n@2))) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@54) (= Mask@55 (MapType1Store Mask@54 null (udParentValid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@54 null (udParentValid n@2))) FullPerm))))) (and (state ExhaleHeap@1 Mask@55) (= perm@32 (/ (to_real 4) (to_real 10)))))) (and (=> (= (ControlFlow 0 659) (- 0 660)) (>= perm@32 NoPerm)) (=> (>= perm@32 NoPerm) (=> (=> (> perm@32 NoPerm) (not (= n@2 null))) (=> (and (and (and (= Mask@56 (MapType1Store Mask@55 n@2 root (real_2_U (+ (U_2_real (MapType1Select Mask@55 n@2 root)) perm@32)))) (state ExhaleHeap@1 Mask@56)) (and (|valid#trigger| ExhaleHeap@1 (valid n@2)) (= (MapType0Select ExhaleHeap@1 null (valid n@2)) (CombineFrames (MapType0Select ExhaleHeap@1 null (validRest n@2)) (CombineFrames (MapType0Select ExhaleHeap@1 null (leftValid n@2)) (MapType0Select ExhaleHeap@1 null (rightValid n@2))))))) (and (and (= UnfoldingMask@54 (MapType1Store Mask@56 null (valid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@56 null (valid n@2))) FullPerm)))) (= UnfoldingMask@55 (MapType1Store UnfoldingMask@54 null (validRest n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@54 null (validRest n@2))) FullPerm))))) (and (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (validRest n@2) (MapType0Select ExhaleHeap@1 null (validRest n@2))) (state ExhaleHeap@1 UnfoldingMask@55)))) (=> (and (and (and (and (= UnfoldingMask@56 (MapType1Store UnfoldingMask@55 null (leftValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@55 null (leftValid n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (leftValid n@2) (MapType0Select ExhaleHeap@1 null (leftValid n@2)))) (and (state ExhaleHeap@1 UnfoldingMask@56) (= UnfoldingMask@57 (MapType1Store UnfoldingMask@56 null (rightValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@56 null (rightValid n@2))) FullPerm)))))) (and (and (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (rightValid n@2) (MapType0Select ExhaleHeap@1 null (rightValid n@2))) (state ExhaleHeap@1 UnfoldingMask@57)) (and (state ExhaleHeap@1 UnfoldingMask@57) (= (MapType0Select ExhaleHeap@1 n@2 root) (MapType0Select ExhaleHeap@1 this@@53 root1))))) (and (and (and (forall ((o_66 T@U) (f_70 T@U) ) (! (let ((B@@67 (FieldTypeInv1 (type f_70))))
(let ((A@@68 (FieldTypeInv0 (type f_70))))
 (=> (and (and (= (type o_66) RefType) (= (type f_70) (FieldType A@@68 B@@67))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|valid#sm| n@2)) o_66 f_70)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|validRest#sm| n@2)) o_66 f_70)))) (U_2_bool (MapType1Select newPMask@24 o_66 f_70)))))
 :qid |stdinbpl.4536:37|
 :skolemid |139|
 :pattern ( (MapType1Select newPMask@24 o_66 f_70))
)) (= Heap@63 (MapType0Store ExhaleHeap@1 null (|valid#sm| n@2) newPMask@24))) (and (forall ((o_67 T@U) (f_71 T@U) ) (! (let ((B@@68 (FieldTypeInv1 (type f_71))))
(let ((A@@69 (FieldTypeInv0 (type f_71))))
 (=> (and (and (= (type o_67) RefType) (= (type f_71) (FieldType A@@69 B@@68))) (or (U_2_bool (MapType1Select (MapType0Select Heap@63 null (|valid#sm| n@2)) o_67 f_71)) (U_2_bool (MapType1Select (MapType0Select Heap@63 null (|leftValid#sm| n@2)) o_67 f_71)))) (U_2_bool (MapType1Select newPMask@25 o_67 f_71)))))
 :qid |stdinbpl.4542:37|
 :skolemid |140|
 :pattern ( (MapType1Select newPMask@25 o_67 f_71))
)) (= Heap@64 (MapType0Store Heap@63 null (|valid#sm| n@2) newPMask@25)))) (and (and (forall ((o_68 T@U) (f_72 T@U) ) (! (let ((B@@69 (FieldTypeInv1 (type f_72))))
(let ((A@@70 (FieldTypeInv0 (type f_72))))
 (=> (and (and (= (type o_68) RefType) (= (type f_72) (FieldType A@@70 B@@69))) (or (U_2_bool (MapType1Select (MapType0Select Heap@64 null (|valid#sm| n@2)) o_68 f_72)) (U_2_bool (MapType1Select (MapType0Select Heap@64 null (|rightValid#sm| n@2)) o_68 f_72)))) (U_2_bool (MapType1Select newPMask@26 o_68 f_72)))))
 :qid |stdinbpl.4548:37|
 :skolemid |141|
 :pattern ( (MapType1Select newPMask@26 o_68 f_72))
)) (= Heap@65 (MapType0Store Heap@64 null (|valid#sm| n@2) newPMask@26))) (and (state Heap@65 Mask@56) (not (= (MapType0Select Heap@65 this@@53 root1) null)))))) (and (=> (= (ControlFlow 0 659) 658) anon1272_Then_correct) (=> (= (ControlFlow 0 659) 627) anon1272_Else_correct)))))))))))))))
(let ((anon993_correct true))
(let ((anon1486_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 7) 4)) anon993_correct)))
(let ((anon1486_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= FullPerm (U_2_real (MapType1Select Mask@310 null (valid1 this@@53))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@310 null (valid1 this@@53)))) (=> (= (ControlFlow 0 5) 4) anon993_correct))))))
(let ((anon991_correct  (=> (state Heap@403 Mask@310) (and (=> (= (ControlFlow 0 8) 5) anon1486_Then_correct) (=> (= (ControlFlow 0 8) 7) anon1486_Else_correct)))))
(let ((anon43_correct  (=> (state Heap@402 Mask@309) (=> (and (and (state Heap@402 Mask@309) (= Heap@403 Heap@402)) (and (= Mask@310 Mask@309) (= (ControlFlow 0 1481) 8))) anon991_correct))))
(let ((anon1015_Else_correct  (=> (= (MapType0Select Heap@400 this@@53 root1) null) (=> (and (= Heap@402 Heap@400) (= (ControlFlow 0 1483) 1481)) anon43_correct))))
(let ((anon1015_Then_correct  (=> (and (and (not (= (MapType0Select Heap@400 this@@53 root1) null)) (= Heap@401 (MapType0Store Heap@400 null (|valid1#sm| this@@53) (MapType1Store (MapType0Select Heap@400 null (|valid1#sm| this@@53)) (MapType0Select Heap@400 this@@53 root1) root (bool_2_U true))))) (and (= Heap@402 Heap@401) (= (ControlFlow 0 1482) 1481))) anon43_correct)))
(let ((anon1014_Else_correct  (=> (and (= (MapType0Select Heap@398 this@@53 root1) null) (= Heap@400 Heap@398)) (and (=> (= (ControlFlow 0 1485) 1482) anon1015_Then_correct) (=> (= (ControlFlow 0 1485) 1483) anon1015_Else_correct)))))
(let ((anon1014_Then_correct  (=> (not (= (MapType0Select Heap@398 this@@53 root1) null)) (=> (and (= Heap@399 (MapType0Store Heap@398 null (|valid1#sm| this@@53) (MapType1Store (MapType0Select Heap@398 null (|valid1#sm| this@@53)) (MapType0Select Heap@398 this@@53 root1) parent (bool_2_U true)))) (= Heap@400 Heap@399)) (and (=> (= (ControlFlow 0 1484) 1482) anon1015_Then_correct) (=> (= (ControlFlow 0 1484) 1483) anon1015_Else_correct))))))
(let ((anon1013_Else_correct  (=> (and (= (MapType0Select Heap@396 this@@53 root1) null) (= Heap@398 Heap@396)) (and (=> (= (ControlFlow 0 1487) 1484) anon1014_Then_correct) (=> (= (ControlFlow 0 1487) 1485) anon1014_Else_correct)))))
(let ((anon1013_Then_correct  (=> (and (and (not (= (MapType0Select Heap@396 this@@53 root1) null)) (forall ((o_4 T@U) (f_8 T@U) ) (! (let ((B@@70 (FieldTypeInv1 (type f_8))))
(let ((A@@71 (FieldTypeInv0 (type f_8))))
 (=> (and (and (= (type o_4) RefType) (= (type f_8) (FieldType A@@71 B@@70))) (or (U_2_bool (MapType1Select (MapType0Select Heap@396 null (|valid1#sm| this@@53)) o_4 f_8)) (U_2_bool (MapType1Select (MapType0Select Heap@396 null (|valid#sm| (MapType0Select Heap@396 this@@53 root1))) o_4 f_8)))) (U_2_bool (MapType1Select newPMask@92 o_4 f_8)))))
 :qid |stdinbpl.1563:33|
 :skolemid |77|
 :pattern ( (MapType1Select newPMask@92 o_4 f_8))
))) (and (= Heap@397 (MapType0Store Heap@396 null (|valid1#sm| this@@53) newPMask@92)) (= Heap@398 Heap@397))) (and (=> (= (ControlFlow 0 1486) 1484) anon1014_Then_correct) (=> (= (ControlFlow 0 1486) 1485) anon1014_Else_correct)))))
(let ((anon37_correct  (=> (= Heap@396 (MapType0Store Heap@395 null (|valid1#sm| this@@53) (MapType1Store (MapType0Select Heap@395 null (|valid1#sm| this@@53)) this@@53 root1 (bool_2_U true)))) (and (=> (= (ControlFlow 0 1488) 1486) anon1013_Then_correct) (=> (= (ControlFlow 0 1488) 1487) anon1013_Else_correct)))))
(let ((anon1012_Else_correct  (=> (HasDirectPerm Mask@309 null (valid1 this@@53)) (=> (and (= Heap@395 Heap@1) (= (ControlFlow 0 1490) 1488)) anon37_correct))))
(let ((anon1012_Then_correct  (=> (not (HasDirectPerm Mask@309 null (valid1 this@@53))) (=> (and (and (= Heap@393 (MapType0Store Heap@1 null (|valid1#sm| this@@53) ZeroPMask)) (= Heap@394 (MapType0Store Heap@393 null (valid1 this@@53) freshVersion@19))) (and (= Heap@395 Heap@394) (= (ControlFlow 0 1489) 1488))) anon37_correct))))
(let ((anon35_correct  (=> (= Mask@309 (MapType1Store Mask@308 null (valid1 this@@53) (real_2_U (+ (U_2_real (MapType1Select Mask@308 null (valid1 this@@53))) FullPerm)))) (=> (and (and (state Heap@1 Mask@309) (state Heap@1 Mask@309)) (and (|valid1#trigger| Heap@1 (valid1 this@@53)) (= (MapType0Select Heap@1 null (valid1 this@@53)) (CombineFrames (FrameFragment (MapType0Select Heap@1 this@@53 root1)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@53 root1) null)) (MapType0Select Heap@1 null (valid (MapType0Select Heap@1 this@@53 root1))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@53 root1) null)) (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@53 root1) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@53 root1) null)) (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@53 root1) null)) EmptyFrame EmptyFrame)))))))))) (and (=> (= (ControlFlow 0 1491) 1489) anon1012_Then_correct) (=> (= (ControlFlow 0 1491) 1490) anon1012_Else_correct))))))
(let ((anon1011_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= (ControlFlow 0 1494) 1491)) anon35_correct)))
(let ((anon1011_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (and (=> (= (ControlFlow 0 1492) (- 0 1493)) (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) root) (MapType0Select Heap@1 this@@53 root1))) (=> (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) root) (MapType0Select Heap@1 this@@53 root1)) (=> (= (ControlFlow 0 1492) 1491) anon35_correct))))))
(let ((anon32_correct  (=> (and (= Mask@307 (MapType1Store Mask@306 (MapType0Select Heap@1 this@@53 root1) root (real_2_U (- (U_2_real (MapType1Select Mask@306 (MapType0Select Heap@1 this@@53 root1) root)) perm@169)))) (= Mask@308 Mask@307)) (and (=> (= (ControlFlow 0 1496) 1492) anon1011_Then_correct) (=> (= (ControlFlow 0 1496) 1494) anon1011_Else_correct)))))
(let ((anon1010_Else_correct  (=> (and (= perm@169 NoPerm) (= (ControlFlow 0 1499) 1496)) anon32_correct)))
(let ((anon1010_Then_correct  (=> (not (= perm@169 NoPerm)) (and (=> (= (ControlFlow 0 1497) (- 0 1498)) (<= perm@169 (U_2_real (MapType1Select Mask@306 (MapType0Select Heap@1 this@@53 root1) root)))) (=> (<= perm@169 (U_2_real (MapType1Select Mask@306 (MapType0Select Heap@1 this@@53 root1) root))) (=> (= (ControlFlow 0 1497) 1496) anon32_correct))))))
(let ((anon1009_Then_correct  (=> (and (not (= (MapType0Select Heap@1 this@@53 root1) null)) (= perm@169 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1500) (- 0 1501)) (>= perm@169 NoPerm)) (=> (>= perm@169 NoPerm) (and (=> (= (ControlFlow 0 1500) 1497) anon1010_Then_correct) (=> (= (ControlFlow 0 1500) 1499) anon1010_Else_correct)))))))
(let ((anon1009_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= Mask@308 Mask@306)) (and (=> (= (ControlFlow 0 1495) 1492) anon1011_Then_correct) (=> (= (ControlFlow 0 1495) 1494) anon1011_Else_correct)))))
(let ((anon1008_Else_correct  (=> (= (MapType0Select Heap@1 this@@53 root1) null) (and (=> (= (ControlFlow 0 1504) 1500) anon1009_Then_correct) (=> (= (ControlFlow 0 1504) 1495) anon1009_Else_correct)))))
(let ((anon1008_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (and (=> (= (ControlFlow 0 1502) (- 0 1503)) (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) parent) null)) (=> (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) parent) null) (and (=> (= (ControlFlow 0 1502) 1500) anon1009_Then_correct) (=> (= (ControlFlow 0 1502) 1495) anon1009_Else_correct)))))))
(let ((anon26_correct  (=> (and (= Mask@305 (MapType1Store Mask@304 (MapType0Select Heap@1 this@@53 root1) parent (real_2_U (- (U_2_real (MapType1Select Mask@304 (MapType0Select Heap@1 this@@53 root1) parent)) FullPerm)))) (= Mask@306 Mask@305)) (and (=> (= (ControlFlow 0 1506) 1502) anon1008_Then_correct) (=> (= (ControlFlow 0 1506) 1504) anon1008_Else_correct)))))
(let ((anon1007_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1509) 1506)) anon26_correct)))
(let ((anon1007_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1507) (- 0 1508)) (<= FullPerm (U_2_real (MapType1Select Mask@304 (MapType0Select Heap@1 this@@53 root1) parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@304 (MapType0Select Heap@1 this@@53 root1) parent))) (=> (= (ControlFlow 0 1507) 1506) anon26_correct))))))
(let ((anon1006_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (and (=> (= (ControlFlow 0 1510) 1507) anon1007_Then_correct) (=> (= (ControlFlow 0 1510) 1509) anon1007_Else_correct)))))
(let ((anon1006_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= Mask@306 Mask@304)) (and (=> (= (ControlFlow 0 1505) 1502) anon1008_Then_correct) (=> (= (ControlFlow 0 1505) 1504) anon1008_Else_correct)))))
(let ((anon22_correct  (=> (= Mask@303 (MapType1Store Mask@302 null (valid (MapType0Select Heap@1 this@@53 root1)) (real_2_U (- (U_2_real (MapType1Select Mask@302 null (valid (MapType0Select Heap@1 this@@53 root1)))) FullPerm)))) (=> (and (InsidePredicate (valid1 this@@53) (MapType0Select Heap@1 null (valid1 this@@53)) (valid (MapType0Select Heap@1 this@@53 root1)) (MapType0Select Heap@1 null (valid (MapType0Select Heap@1 this@@53 root1)))) (= Mask@304 Mask@303)) (and (=> (= (ControlFlow 0 1512) 1510) anon1006_Then_correct) (=> (= (ControlFlow 0 1512) 1505) anon1006_Else_correct))))))
(let ((anon1005_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1515) 1512)) anon22_correct)))
(let ((anon1005_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1513) (- 0 1514)) (<= FullPerm (U_2_real (MapType1Select Mask@302 null (valid (MapType0Select Heap@1 this@@53 root1)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@302 null (valid (MapType0Select Heap@1 this@@53 root1))))) (=> (= (ControlFlow 0 1513) 1512) anon22_correct))))))
(let ((anon1004_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (and (=> (= (ControlFlow 0 1516) 1513) anon1005_Then_correct) (=> (= (ControlFlow 0 1516) 1515) anon1005_Else_correct)))))
(let ((anon1004_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= Mask@304 Mask@302)) (and (=> (= (ControlFlow 0 1511) 1510) anon1006_Then_correct) (=> (= (ControlFlow 0 1511) 1505) anon1006_Else_correct)))))
(let ((anon19_correct  (=> (= Mask@302 (MapType1Store Mask@8 this@@53 root1 (real_2_U (- (U_2_real (MapType1Select Mask@8 this@@53 root1)) FullPerm)))) (and (=> (= (ControlFlow 0 1517) 1516) anon1004_Then_correct) (=> (= (ControlFlow 0 1517) 1511) anon1004_Else_correct)))))
(let ((anon1003_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1520) 1517)) anon19_correct)))
(let ((anon1003_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1518) (- 0 1519)) (<= FullPerm (U_2_real (MapType1Select Mask@8 this@@53 root1)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 this@@53 root1))) (=> (= (ControlFlow 0 1518) 1517) anon19_correct))))))
(let ((anon1002_Then_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (state Heap@1 Mask@8)) (and (=> (= (ControlFlow 0 1521) 1518) anon1003_Then_correct) (=> (= (ControlFlow 0 1521) 1520) anon1003_Else_correct)))))
(let ((anon990_correct  (=> (state Heap@109 Mask@82) (=> (and (and (state Heap@109 Mask@82) (= Heap@403 Heap@109)) (and (= Mask@310 Mask@82) (= (ControlFlow 0 9) 8))) anon991_correct))))
(let ((anon1485_Else_correct  (=> (= (MapType0Select Heap@107 this@@53 root1) null) (=> (and (= Heap@109 Heap@107) (= (ControlFlow 0 11) 9)) anon990_correct))))
(let ((anon1485_Then_correct  (=> (and (and (not (= (MapType0Select Heap@107 this@@53 root1) null)) (= Heap@108 (MapType0Store Heap@107 null (|valid1#sm| this@@53) (MapType1Store (MapType0Select Heap@107 null (|valid1#sm| this@@53)) (MapType0Select Heap@107 this@@53 root1) root (bool_2_U true))))) (and (= Heap@109 Heap@108) (= (ControlFlow 0 10) 9))) anon990_correct)))
(let ((anon1484_Else_correct  (=> (and (= (MapType0Select Heap@105 this@@53 root1) null) (= Heap@107 Heap@105)) (and (=> (= (ControlFlow 0 13) 10) anon1485_Then_correct) (=> (= (ControlFlow 0 13) 11) anon1485_Else_correct)))))
(let ((anon1484_Then_correct  (=> (not (= (MapType0Select Heap@105 this@@53 root1) null)) (=> (and (= Heap@106 (MapType0Store Heap@105 null (|valid1#sm| this@@53) (MapType1Store (MapType0Select Heap@105 null (|valid1#sm| this@@53)) (MapType0Select Heap@105 this@@53 root1) parent (bool_2_U true)))) (= Heap@107 Heap@106)) (and (=> (= (ControlFlow 0 12) 10) anon1485_Then_correct) (=> (= (ControlFlow 0 12) 11) anon1485_Else_correct))))))
(let ((anon1483_Else_correct  (=> (and (= (MapType0Select Heap@103 this@@53 root1) null) (= Heap@105 Heap@103)) (and (=> (= (ControlFlow 0 15) 12) anon1484_Then_correct) (=> (= (ControlFlow 0 15) 13) anon1484_Else_correct)))))
(let ((anon1483_Then_correct  (=> (and (and (not (= (MapType0Select Heap@103 this@@53 root1) null)) (forall ((o_96 T@U) (f_100 T@U) ) (! (let ((B@@71 (FieldTypeInv1 (type f_100))))
(let ((A@@72 (FieldTypeInv0 (type f_100))))
 (=> (and (and (= (type o_96) RefType) (= (type f_100) (FieldType A@@72 B@@71))) (or (U_2_bool (MapType1Select (MapType0Select Heap@103 null (|valid1#sm| this@@53)) o_96 f_100)) (U_2_bool (MapType1Select (MapType0Select Heap@103 null (|valid#sm| (MapType0Select Heap@103 this@@53 root1))) o_96 f_100)))) (U_2_bool (MapType1Select newPMask@35 o_96 f_100)))))
 :qid |stdinbpl.6366:33|
 :skolemid |169|
 :pattern ( (MapType1Select newPMask@35 o_96 f_100))
))) (and (= Heap@104 (MapType0Store Heap@103 null (|valid1#sm| this@@53) newPMask@35)) (= Heap@105 Heap@104))) (and (=> (= (ControlFlow 0 14) 12) anon1484_Then_correct) (=> (= (ControlFlow 0 14) 13) anon1484_Else_correct)))))
(let ((anon984_correct  (=> (= Heap@103 (MapType0Store Heap@102 null (|valid1#sm| this@@53) (MapType1Store (MapType0Select Heap@102 null (|valid1#sm| this@@53)) this@@53 root1 (bool_2_U true)))) (and (=> (= (ControlFlow 0 16) 14) anon1483_Then_correct) (=> (= (ControlFlow 0 16) 15) anon1483_Else_correct)))))
(let ((anon1482_Else_correct  (=> (HasDirectPerm Mask@82 null (valid1 this@@53)) (=> (and (= Heap@102 Heap@99) (= (ControlFlow 0 18) 16)) anon984_correct))))
(let ((anon1482_Then_correct  (=> (not (HasDirectPerm Mask@82 null (valid1 this@@53))) (=> (and (and (= Heap@100 (MapType0Store Heap@99 null (|valid1#sm| this@@53) ZeroPMask)) (= Heap@101 (MapType0Store Heap@100 null (valid1 this@@53) freshVersion@1))) (and (= Heap@102 Heap@101) (= (ControlFlow 0 17) 16))) anon984_correct))))
(let ((anon982_correct  (=> (= Mask@82 (MapType1Store Mask@81 null (valid1 this@@53) (real_2_U (+ (U_2_real (MapType1Select Mask@81 null (valid1 this@@53))) FullPerm)))) (=> (and (and (state Heap@99 Mask@82) (state Heap@99 Mask@82)) (and (|valid1#trigger| Heap@99 (valid1 this@@53)) (= (MapType0Select Heap@99 null (valid1 this@@53)) (CombineFrames (FrameFragment (MapType0Select Heap@99 this@@53 root1)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@99 this@@53 root1) null)) (MapType0Select Heap@99 null (valid (MapType0Select Heap@99 this@@53 root1))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@99 this@@53 root1) null)) (FrameFragment (MapType0Select Heap@99 (MapType0Select Heap@99 this@@53 root1) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@99 this@@53 root1) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@99 this@@53 root1) null)) (FrameFragment (MapType0Select Heap@99 (MapType0Select Heap@99 this@@53 root1) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@99 this@@53 root1) null)) EmptyFrame EmptyFrame)))))))))) (and (=> (= (ControlFlow 0 19) 17) anon1482_Then_correct) (=> (= (ControlFlow 0 19) 18) anon1482_Else_correct))))))
(let ((anon1481_Else_correct  (=> (and (= (MapType0Select Heap@99 this@@53 root1) null) (= (ControlFlow 0 22) 19)) anon982_correct)))
(let ((anon1481_Then_correct  (=> (not (= (MapType0Select Heap@99 this@@53 root1) null)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (= (MapType0Select Heap@99 (MapType0Select Heap@99 this@@53 root1) root) (MapType0Select Heap@99 this@@53 root1))) (=> (= (MapType0Select Heap@99 (MapType0Select Heap@99 this@@53 root1) root) (MapType0Select Heap@99 this@@53 root1)) (=> (= (ControlFlow 0 20) 19) anon982_correct))))))
(let ((anon979_correct  (=> (and (= Mask@80 (MapType1Store Mask@79 (MapType0Select Heap@99 this@@53 root1) root (real_2_U (- (U_2_real (MapType1Select Mask@79 (MapType0Select Heap@99 this@@53 root1) root)) perm@53)))) (= Mask@81 Mask@80)) (and (=> (= (ControlFlow 0 24) 20) anon1481_Then_correct) (=> (= (ControlFlow 0 24) 22) anon1481_Else_correct)))))
(let ((anon1480_Else_correct  (=> (and (= perm@53 NoPerm) (= (ControlFlow 0 27) 24)) anon979_correct)))
(let ((anon1480_Then_correct  (=> (not (= perm@53 NoPerm)) (and (=> (= (ControlFlow 0 25) (- 0 26)) (<= perm@53 (U_2_real (MapType1Select Mask@79 (MapType0Select Heap@99 this@@53 root1) root)))) (=> (<= perm@53 (U_2_real (MapType1Select Mask@79 (MapType0Select Heap@99 this@@53 root1) root))) (=> (= (ControlFlow 0 25) 24) anon979_correct))))))
(let ((anon1479_Then_correct  (=> (and (not (= (MapType0Select Heap@99 this@@53 root1) null)) (= perm@53 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (>= perm@53 NoPerm)) (=> (>= perm@53 NoPerm) (and (=> (= (ControlFlow 0 28) 25) anon1480_Then_correct) (=> (= (ControlFlow 0 28) 27) anon1480_Else_correct)))))))
(let ((anon1479_Else_correct  (=> (and (= (MapType0Select Heap@99 this@@53 root1) null) (= Mask@81 Mask@79)) (and (=> (= (ControlFlow 0 23) 20) anon1481_Then_correct) (=> (= (ControlFlow 0 23) 22) anon1481_Else_correct)))))
(let ((anon1478_Else_correct  (=> (= (MapType0Select Heap@99 this@@53 root1) null) (and (=> (= (ControlFlow 0 32) 28) anon1479_Then_correct) (=> (= (ControlFlow 0 32) 23) anon1479_Else_correct)))))
(let ((anon1478_Then_correct  (=> (not (= (MapType0Select Heap@99 this@@53 root1) null)) (and (=> (= (ControlFlow 0 30) (- 0 31)) (= (MapType0Select Heap@99 (MapType0Select Heap@99 this@@53 root1) parent) null)) (=> (= (MapType0Select Heap@99 (MapType0Select Heap@99 this@@53 root1) parent) null) (and (=> (= (ControlFlow 0 30) 28) anon1479_Then_correct) (=> (= (ControlFlow 0 30) 23) anon1479_Else_correct)))))))
(let ((anon973_correct  (=> (and (= Mask@78 (MapType1Store Mask@77 (MapType0Select Heap@99 this@@53 root1) parent (real_2_U (- (U_2_real (MapType1Select Mask@77 (MapType0Select Heap@99 this@@53 root1) parent)) FullPerm)))) (= Mask@79 Mask@78)) (and (=> (= (ControlFlow 0 34) 30) anon1478_Then_correct) (=> (= (ControlFlow 0 34) 32) anon1478_Else_correct)))))
(let ((anon1477_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 37) 34)) anon973_correct)))
(let ((anon1477_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (<= FullPerm (U_2_real (MapType1Select Mask@77 (MapType0Select Heap@99 this@@53 root1) parent)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@77 (MapType0Select Heap@99 this@@53 root1) parent))) (=> (= (ControlFlow 0 35) 34) anon973_correct))))))
(let ((anon1476_Then_correct  (=> (not (= (MapType0Select Heap@99 this@@53 root1) null)) (and (=> (= (ControlFlow 0 38) 35) anon1477_Then_correct) (=> (= (ControlFlow 0 38) 37) anon1477_Else_correct)))))
(let ((anon1476_Else_correct  (=> (and (= (MapType0Select Heap@99 this@@53 root1) null) (= Mask@79 Mask@77)) (and (=> (= (ControlFlow 0 33) 30) anon1478_Then_correct) (=> (= (ControlFlow 0 33) 32) anon1478_Else_correct)))))
(let ((anon969_correct  (=> (= Mask@76 (MapType1Store Mask@75 null (valid (MapType0Select Heap@99 this@@53 root1)) (real_2_U (- (U_2_real (MapType1Select Mask@75 null (valid (MapType0Select Heap@99 this@@53 root1)))) FullPerm)))) (=> (and (InsidePredicate (valid1 this@@53) (MapType0Select Heap@99 null (valid1 this@@53)) (valid (MapType0Select Heap@99 this@@53 root1)) (MapType0Select Heap@99 null (valid (MapType0Select Heap@99 this@@53 root1)))) (= Mask@77 Mask@76)) (and (=> (= (ControlFlow 0 40) 38) anon1476_Then_correct) (=> (= (ControlFlow 0 40) 33) anon1476_Else_correct))))))
(let ((anon1475_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 43) 40)) anon969_correct)))
(let ((anon1475_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (<= FullPerm (U_2_real (MapType1Select Mask@75 null (valid (MapType0Select Heap@99 this@@53 root1)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@75 null (valid (MapType0Select Heap@99 this@@53 root1))))) (=> (= (ControlFlow 0 41) 40) anon969_correct))))))
(let ((anon1474_Then_correct  (=> (not (= (MapType0Select Heap@99 this@@53 root1) null)) (and (=> (= (ControlFlow 0 44) 41) anon1475_Then_correct) (=> (= (ControlFlow 0 44) 43) anon1475_Else_correct)))))
(let ((anon1474_Else_correct  (=> (and (= (MapType0Select Heap@99 this@@53 root1) null) (= Mask@77 Mask@75)) (and (=> (= (ControlFlow 0 39) 38) anon1476_Then_correct) (=> (= (ControlFlow 0 39) 33) anon1476_Else_correct)))))
(let ((anon966_correct  (=> (= Mask@75 (MapType1Store Mask@74 this@@53 root1 (real_2_U (- (U_2_real (MapType1Select Mask@74 this@@53 root1)) FullPerm)))) (and (=> (= (ControlFlow 0 45) 44) anon1474_Then_correct) (=> (= (ControlFlow 0 45) 39) anon1474_Else_correct)))))
(let ((anon1473_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 48) 45)) anon966_correct)))
(let ((anon1473_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (<= FullPerm (U_2_real (MapType1Select Mask@74 this@@53 root1)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@74 this@@53 root1))) (=> (= (ControlFlow 0 46) 45) anon966_correct))))))
(let ((anon964_correct  (=> (and (state Heap@99 Mask@74) (state Heap@99 Mask@74)) (and (=> (= (ControlFlow 0 49) 46) anon1473_Then_correct) (=> (= (ControlFlow 0 49) 48) anon1473_Else_correct)))))
(let ((anon1472_Else_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= (ControlFlow 0 51) 49)) anon964_correct)))
(let ((anon1472_Then_correct  (=> (= (MapType0Select Heap@99 n@2 parent) null) (=> (and (= (MapType0Select Heap@99 n@2 root) n@2) (= (ControlFlow 0 50) 49)) anon964_correct))))
(let ((anon1471_Else_correct  (=> (= (MapType0Select Heap@99 n@2 parent) null) (and (=> (= (ControlFlow 0 53) 50) anon1472_Then_correct) (=> (= (ControlFlow 0 53) 51) anon1472_Else_correct)))))
(let ((anon1471_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= (MapType0Select Heap@99 n@2 root) (MapType0Select Heap@99 (MapType0Select Heap@99 n@2 parent) root))) (and (=> (= (ControlFlow 0 52) 50) anon1472_Then_correct) (=> (= (ControlFlow 0 52) 51) anon1472_Else_correct)))))
(let ((anon1470_Else_correct  (=> (and (= (MapType0Select Heap@99 n@2 parent) null) (= Mask@74 Mask@72)) (and (=> (= (ControlFlow 0 56) 52) anon1471_Then_correct) (=> (= (ControlFlow 0 56) 53) anon1471_Else_correct)))))
(let ((anon1470_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= perm@52 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 54) (- 0 55)) (>= perm@52 NoPerm)) (=> (>= perm@52 NoPerm) (=> (and (and (=> (> perm@52 NoPerm) (not (= (MapType0Select Heap@99 n@2 parent) null))) (= Mask@73 (MapType1Store Mask@72 (MapType0Select Heap@99 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select Mask@72 (MapType0Select Heap@99 n@2 parent) root)) perm@52))))) (and (state Heap@99 Mask@73) (= Mask@74 Mask@73))) (and (=> (= (ControlFlow 0 54) 52) anon1471_Then_correct) (=> (= (ControlFlow 0 54) 53) anon1471_Else_correct))))))))
(let ((anon1469_Else_correct  (=> (= (MapType0Select Heap@99 n@2 parent) null) (and (=> (= (ControlFlow 0 58) 54) anon1470_Then_correct) (=> (= (ControlFlow 0 58) 56) anon1470_Else_correct)))))
(let ((anon1469_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@99 (MapType0Select Heap@99 n@2 parent) leftDown))) (= (MapType0Select Heap@99 (MapType0Select Heap@99 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 57) 54) anon1470_Then_correct) (=> (= (ControlFlow 0 57) 56) anon1470_Else_correct)))))
(let ((anon1468_Else_correct  (=> (and (= (MapType0Select Heap@99 n@2 parent) null) (= Mask@72 Mask@70)) (and (=> (= (ControlFlow 0 61) 57) anon1469_Then_correct) (=> (= (ControlFlow 0 61) 58) anon1469_Else_correct)))))
(let ((anon1468_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= perm@51 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 59) (- 0 60)) (>= perm@51 NoPerm)) (=> (>= perm@51 NoPerm) (=> (and (and (=> (> perm@51 NoPerm) (not (= (MapType0Select Heap@99 n@2 parent) null))) (= Mask@71 (MapType1Store Mask@70 (MapType0Select Heap@99 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select Mask@70 (MapType0Select Heap@99 n@2 parent) right)) perm@51))))) (and (state Heap@99 Mask@71) (= Mask@72 Mask@71))) (and (=> (= (ControlFlow 0 59) 57) anon1469_Then_correct) (=> (= (ControlFlow 0 59) 58) anon1469_Else_correct))))))))
(let ((anon1467_Else_correct  (=> (= (MapType0Select Heap@99 n@2 parent) null) (and (=> (= (ControlFlow 0 63) 59) anon1468_Then_correct) (=> (= (ControlFlow 0 63) 61) anon1468_Else_correct)))))
(let ((anon1467_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@99 (MapType0Select Heap@99 n@2 parent) leftDown)) (= (MapType0Select Heap@99 (MapType0Select Heap@99 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 62) 59) anon1468_Then_correct) (=> (= (ControlFlow 0 62) 61) anon1468_Else_correct)))))
(let ((anon1466_Else_correct  (=> (and (= (MapType0Select Heap@99 n@2 parent) null) (= Mask@70 Mask@68)) (and (=> (= (ControlFlow 0 66) 62) anon1467_Then_correct) (=> (= (ControlFlow 0 66) 63) anon1467_Else_correct)))))
(let ((anon1466_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= perm@50 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 64) (- 0 65)) (>= perm@50 NoPerm)) (=> (>= perm@50 NoPerm) (=> (and (and (=> (> perm@50 NoPerm) (not (= (MapType0Select Heap@99 n@2 parent) null))) (= Mask@69 (MapType1Store Mask@68 (MapType0Select Heap@99 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select Mask@68 (MapType0Select Heap@99 n@2 parent) left)) perm@50))))) (and (state Heap@99 Mask@69) (= Mask@70 Mask@69))) (and (=> (= (ControlFlow 0 64) 62) anon1467_Then_correct) (=> (= (ControlFlow 0 64) 63) anon1467_Else_correct))))))))
(let ((anon1465_Else_correct  (=> (and (= (MapType0Select Heap@99 n@2 parent) null) (= Mask@68 Mask@66)) (and (=> (= (ControlFlow 0 69) 64) anon1466_Then_correct) (=> (= (ControlFlow 0 69) 66) anon1466_Else_correct)))))
(let ((anon1465_Then_correct  (=> (and (not (= (MapType0Select Heap@99 n@2 parent) null)) (= perm@49 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 67) (- 0 68)) (>= perm@49 NoPerm)) (=> (>= perm@49 NoPerm) (=> (and (and (=> (> perm@49 NoPerm) (not (= (MapType0Select Heap@99 n@2 parent) null))) (= Mask@67 (MapType1Store Mask@66 (MapType0Select Heap@99 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select Mask@66 (MapType0Select Heap@99 n@2 parent) leftDown)) perm@49))))) (and (state Heap@99 Mask@67) (= Mask@68 Mask@67))) (and (=> (= (ControlFlow 0 67) 64) anon1466_Then_correct) (=> (= (ControlFlow 0 67) 66) anon1466_Else_correct))))))))
(let ((anon1464_Else_correct  (=> (and (= (MapType0Select Heap@99 n@2 parent) null) (= Mask@66 Mask@64)) (and (=> (= (ControlFlow 0 71) 67) anon1465_Then_correct) (=> (= (ControlFlow 0 71) 69) anon1465_Else_correct)))))
(let ((anon1464_Then_correct  (=> (not (= (MapType0Select Heap@99 n@2 parent) null)) (=> (and (and (= Mask@65 (MapType1Store Mask@64 null (udValid (MapType0Select Heap@99 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select Mask@64 null (udValid (MapType0Select Heap@99 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@99 null (udParentValid n@2)) (udValid (MapType0Select Heap@99 n@2 parent)) (MapType0Select Heap@99 null (udValid (MapType0Select Heap@99 n@2 parent))))) (and (state Heap@99 Mask@65) (= Mask@66 Mask@65))) (and (=> (= (ControlFlow 0 70) 67) anon1465_Then_correct) (=> (= (ControlFlow 0 70) 69) anon1465_Else_correct))))))
(let ((anon946_correct  (=> (= perm@47 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 72) (- 0 74)) (>= perm@47 NoPerm)) (=> (>= perm@47 NoPerm) (=> (and (and (=> (> perm@47 NoPerm) (not (= n@2 null))) (= Mask@63 (MapType1Store Mask@62 n@2 parent (real_2_U (+ (U_2_real (MapType1Select Mask@62 n@2 parent)) perm@47))))) (and (state Heap@99 Mask@63) (= perm@48 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 72) (- 0 73)) (>= perm@48 NoPerm)) (=> (>= perm@48 NoPerm) (=> (=> (> perm@48 NoPerm) (not (= n@2 null))) (=> (and (= Mask@64 (MapType1Store Mask@63 n@2 root (real_2_U (+ (U_2_real (MapType1Select Mask@63 n@2 root)) perm@48)))) (state Heap@99 Mask@64)) (and (=> (= (ControlFlow 0 72) 70) anon1464_Then_correct) (=> (= (ControlFlow 0 72) 71) anon1464_Else_correct))))))))))))
(let ((anon1463_Else_correct  (=> (HasDirectPerm Mask@62 null (udParentValid n@2)) (=> (and (= Heap@99 Heap@97) (= (ControlFlow 0 76) 72)) anon946_correct))))
(let ((anon1463_Then_correct  (=> (and (and (not (HasDirectPerm Mask@62 null (udParentValid n@2))) (= Heap@98 (MapType0Store Heap@97 null (udParentValid n@2) newVersion@1))) (and (= Heap@99 Heap@98) (= (ControlFlow 0 75) 72))) anon946_correct)))
(let ((anon944_correct  (=> (= Mask@62 (MapType1Store Mask@61 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@61 null (udParentValid n@2))) FullPerm)))) (and (=> (= (ControlFlow 0 77) 75) anon1463_Then_correct) (=> (= (ControlFlow 0 77) 76) anon1463_Else_correct)))))
(let ((anon1462_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 80) 77)) anon944_correct)))
(let ((anon1462_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 78) (- 0 79)) (<= FullPerm (U_2_real (MapType1Select Mask@61 null (udParentValid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@61 null (udParentValid n@2)))) (=> (= (ControlFlow 0 78) 77) anon944_correct))))))
(let ((anon942_correct  (=> (state Heap@97 Mask@61) (=> (and (|udParentValid#trigger| Heap@97 (udParentValid n@2)) (= (MapType0Select Heap@97 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@97 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@97 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) (MapType0Select Heap@97 null (udValid (MapType0Select Heap@97 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) (FrameFragment (MapType0Select Heap@97 (MapType0Select Heap@97 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) (FrameFragment (MapType0Select Heap@97 (MapType0Select Heap@97 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) (FrameFragment (MapType0Select Heap@97 (MapType0Select Heap@97 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) (FrameFragment (MapType0Select Heap@97 (MapType0Select Heap@97 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@97 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@97 n@2 parent) null) EmptyFrame EmptyFrame)))))))))))))) (and (=> (= (ControlFlow 0 81) 78) anon1462_Then_correct) (=> (= (ControlFlow 0 81) 80) anon1462_Else_correct))))))
(let ((anon941_correct  (=> (state Heap@96 Mask@61) (=> (and (= Heap@97 Heap@96) (= (ControlFlow 0 83) 81)) anon942_correct))))
(let ((anon1461_Else_correct  (=> (= (MapType0Select Heap@94 n@2 parent) null) (=> (and (= Heap@96 Heap@94) (= (ControlFlow 0 85) 83)) anon941_correct))))
(let ((anon1461_Then_correct  (=> (and (and (not (= (MapType0Select Heap@94 n@2 parent) null)) (= Heap@95 (MapType0Store Heap@94 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@94 null (|udParentValid#sm| n@2)) (MapType0Select Heap@94 n@2 parent) root (bool_2_U true))))) (and (= Heap@96 Heap@95) (= (ControlFlow 0 84) 83))) anon941_correct)))
(let ((anon1460_Else_correct  (=> (and (= (MapType0Select Heap@92 n@2 parent) null) (= Heap@94 Heap@92)) (and (=> (= (ControlFlow 0 87) 84) anon1461_Then_correct) (=> (= (ControlFlow 0 87) 85) anon1461_Else_correct)))))
(let ((anon1460_Then_correct  (=> (not (= (MapType0Select Heap@92 n@2 parent) null)) (=> (and (= Heap@93 (MapType0Store Heap@92 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@92 null (|udParentValid#sm| n@2)) (MapType0Select Heap@92 n@2 parent) right (bool_2_U true)))) (= Heap@94 Heap@93)) (and (=> (= (ControlFlow 0 86) 84) anon1461_Then_correct) (=> (= (ControlFlow 0 86) 85) anon1461_Else_correct))))))
(let ((anon1459_Else_correct  (=> (and (= (MapType0Select Heap@90 n@2 parent) null) (= Heap@92 Heap@90)) (and (=> (= (ControlFlow 0 89) 86) anon1460_Then_correct) (=> (= (ControlFlow 0 89) 87) anon1460_Else_correct)))))
(let ((anon1459_Then_correct  (=> (not (= (MapType0Select Heap@90 n@2 parent) null)) (=> (and (= Heap@91 (MapType0Store Heap@90 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@90 null (|udParentValid#sm| n@2)) (MapType0Select Heap@90 n@2 parent) left (bool_2_U true)))) (= Heap@92 Heap@91)) (and (=> (= (ControlFlow 0 88) 86) anon1460_Then_correct) (=> (= (ControlFlow 0 88) 87) anon1460_Else_correct))))))
(let ((anon1458_Else_correct  (=> (and (= (MapType0Select Heap@88 n@2 parent) null) (= Heap@90 Heap@88)) (and (=> (= (ControlFlow 0 91) 88) anon1459_Then_correct) (=> (= (ControlFlow 0 91) 89) anon1459_Else_correct)))))
(let ((anon1458_Then_correct  (=> (not (= (MapType0Select Heap@88 n@2 parent) null)) (=> (and (= Heap@89 (MapType0Store Heap@88 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@88 null (|udParentValid#sm| n@2)) (MapType0Select Heap@88 n@2 parent) leftDown (bool_2_U true)))) (= Heap@90 Heap@89)) (and (=> (= (ControlFlow 0 90) 88) anon1459_Then_correct) (=> (= (ControlFlow 0 90) 89) anon1459_Else_correct))))))
(let ((anon1457_Else_correct  (=> (and (= (MapType0Select Heap@86 n@2 parent) null) (= Heap@88 Heap@86)) (and (=> (= (ControlFlow 0 93) 90) anon1458_Then_correct) (=> (= (ControlFlow 0 93) 91) anon1458_Else_correct)))))
(let ((anon1457_Then_correct  (=> (and (and (not (= (MapType0Select Heap@86 n@2 parent) null)) (forall ((o_95 T@U) (f_99 T@U) ) (! (let ((B@@72 (FieldTypeInv1 (type f_99))))
(let ((A@@73 (FieldTypeInv0 (type f_99))))
 (=> (and (and (= (type o_95) RefType) (= (type f_99) (FieldType A@@73 B@@72))) (or (U_2_bool (MapType1Select (MapType0Select Heap@86 null (|udParentValid#sm| n@2)) o_95 f_99)) (U_2_bool (MapType1Select (MapType0Select Heap@86 null (|udValid#sm| (MapType0Select Heap@86 n@2 parent))) o_95 f_99)))) (U_2_bool (MapType1Select newPMask@34 o_95 f_99)))))
 :qid |stdinbpl.6200:41|
 :skolemid |168|
 :pattern ( (MapType1Select newPMask@34 o_95 f_99))
))) (and (= Heap@87 (MapType0Store Heap@86 null (|udParentValid#sm| n@2) newPMask@34)) (= Heap@88 Heap@87))) (and (=> (= (ControlFlow 0 92) 90) anon1458_Then_correct) (=> (= (ControlFlow 0 92) 91) anon1458_Else_correct)))))
(let ((anon931_correct  (=> (state Heap@84 UnfoldingMask@91) (=> (and (= Heap@85 (MapType0Store Heap@84 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@84 null (|udParentValid#sm| n@2)) n@2 parent (bool_2_U true)))) (= Heap@86 (MapType0Store Heap@85 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@85 null (|udParentValid#sm| n@2)) n@2 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 94) 92) anon1457_Then_correct) (=> (= (ControlFlow 0 94) 93) anon1457_Else_correct))))))
(let ((anon1456_Else_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= (ControlFlow 0 96) 94)) anon931_correct)))
(let ((anon1456_Then_correct  (=> (= (MapType0Select Heap@84 n@2 parent) null) (=> (and (= (MapType0Select Heap@84 n@2 root) n@2) (= (ControlFlow 0 95) 94)) anon931_correct))))
(let ((anon1455_Else_correct  (=> (= (MapType0Select Heap@84 n@2 parent) null) (and (=> (= (ControlFlow 0 98) 95) anon1456_Then_correct) (=> (= (ControlFlow 0 98) 96) anon1456_Else_correct)))))
(let ((anon1455_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= (MapType0Select Heap@84 n@2 root) (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) root))) (and (=> (= (ControlFlow 0 97) 95) anon1456_Then_correct) (=> (= (ControlFlow 0 97) 96) anon1456_Else_correct)))))
(let ((anon1454_Else_correct  (=> (and (= (MapType0Select Heap@84 n@2 parent) null) (= UnfoldingMask@91 UnfoldingMask@89)) (and (=> (= (ControlFlow 0 101) 97) anon1455_Then_correct) (=> (= (ControlFlow 0 101) 98) anon1455_Else_correct)))))
(let ((anon1454_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= perm@46 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 99) (- 0 100)) (>= perm@46 NoPerm)) (=> (>= perm@46 NoPerm) (=> (and (and (=> (> perm@46 NoPerm) (not (= (MapType0Select Heap@84 n@2 parent) null))) (= UnfoldingMask@90 (MapType1Store UnfoldingMask@89 (MapType0Select Heap@84 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@89 (MapType0Select Heap@84 n@2 parent) root)) perm@46))))) (and (state Heap@84 UnfoldingMask@90) (= UnfoldingMask@91 UnfoldingMask@90))) (and (=> (= (ControlFlow 0 99) 97) anon1455_Then_correct) (=> (= (ControlFlow 0 99) 98) anon1455_Else_correct))))))))
(let ((anon1453_Else_correct  (=> (= (MapType0Select Heap@84 n@2 parent) null) (and (=> (= (ControlFlow 0 103) 99) anon1454_Then_correct) (=> (= (ControlFlow 0 103) 101) anon1454_Else_correct)))))
(let ((anon1453_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) leftDown))) (= (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 102) 99) anon1454_Then_correct) (=> (= (ControlFlow 0 102) 101) anon1454_Else_correct)))))
(let ((anon1452_Else_correct  (=> (and (= (MapType0Select Heap@84 n@2 parent) null) (= UnfoldingMask@89 UnfoldingMask@87)) (and (=> (= (ControlFlow 0 106) 102) anon1453_Then_correct) (=> (= (ControlFlow 0 106) 103) anon1453_Else_correct)))))
(let ((anon1452_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= perm@45 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 104) (- 0 105)) (>= perm@45 NoPerm)) (=> (>= perm@45 NoPerm) (=> (and (and (=> (> perm@45 NoPerm) (not (= (MapType0Select Heap@84 n@2 parent) null))) (= UnfoldingMask@88 (MapType1Store UnfoldingMask@87 (MapType0Select Heap@84 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@87 (MapType0Select Heap@84 n@2 parent) right)) perm@45))))) (and (state Heap@84 UnfoldingMask@88) (= UnfoldingMask@89 UnfoldingMask@88))) (and (=> (= (ControlFlow 0 104) 102) anon1453_Then_correct) (=> (= (ControlFlow 0 104) 103) anon1453_Else_correct))))))))
(let ((anon1451_Else_correct  (=> (= (MapType0Select Heap@84 n@2 parent) null) (and (=> (= (ControlFlow 0 108) 104) anon1452_Then_correct) (=> (= (ControlFlow 0 108) 106) anon1452_Else_correct)))))
(let ((anon1451_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) leftDown)) (= (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 107) 104) anon1452_Then_correct) (=> (= (ControlFlow 0 107) 106) anon1452_Else_correct)))))
(let ((anon1450_Else_correct  (=> (and (= (MapType0Select Heap@84 n@2 parent) null) (= UnfoldingMask@87 UnfoldingMask@85)) (and (=> (= (ControlFlow 0 111) 107) anon1451_Then_correct) (=> (= (ControlFlow 0 111) 108) anon1451_Else_correct)))))
(let ((anon1450_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= perm@44 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 109) (- 0 110)) (>= perm@44 NoPerm)) (=> (>= perm@44 NoPerm) (=> (and (and (=> (> perm@44 NoPerm) (not (= (MapType0Select Heap@84 n@2 parent) null))) (= UnfoldingMask@86 (MapType1Store UnfoldingMask@85 (MapType0Select Heap@84 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@85 (MapType0Select Heap@84 n@2 parent) left)) perm@44))))) (and (state Heap@84 UnfoldingMask@86) (= UnfoldingMask@87 UnfoldingMask@86))) (and (=> (= (ControlFlow 0 109) 107) anon1451_Then_correct) (=> (= (ControlFlow 0 109) 108) anon1451_Else_correct))))))))
(let ((anon1449_Else_correct  (=> (and (= (MapType0Select Heap@84 n@2 parent) null) (= UnfoldingMask@85 UnfoldingMask@83)) (and (=> (= (ControlFlow 0 114) 109) anon1450_Then_correct) (=> (= (ControlFlow 0 114) 111) anon1450_Else_correct)))))
(let ((anon1449_Then_correct  (=> (and (not (= (MapType0Select Heap@84 n@2 parent) null)) (= perm@43 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 112) (- 0 113)) (>= perm@43 NoPerm)) (=> (>= perm@43 NoPerm) (=> (and (and (=> (> perm@43 NoPerm) (not (= (MapType0Select Heap@84 n@2 parent) null))) (= UnfoldingMask@84 (MapType1Store UnfoldingMask@83 (MapType0Select Heap@84 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@83 (MapType0Select Heap@84 n@2 parent) leftDown)) perm@43))))) (and (state Heap@84 UnfoldingMask@84) (= UnfoldingMask@85 UnfoldingMask@84))) (and (=> (= (ControlFlow 0 112) 109) anon1450_Then_correct) (=> (= (ControlFlow 0 112) 111) anon1450_Else_correct))))))))
(let ((anon1448_Else_correct  (=> (and (= (MapType0Select Heap@84 n@2 parent) null) (= UnfoldingMask@83 UnfoldingMask@81)) (and (=> (= (ControlFlow 0 116) 112) anon1449_Then_correct) (=> (= (ControlFlow 0 116) 114) anon1449_Else_correct)))))
(let ((anon1448_Then_correct  (=> (not (= (MapType0Select Heap@84 n@2 parent) null)) (=> (and (and (= UnfoldingMask@82 (MapType1Store UnfoldingMask@81 null (udValid (MapType0Select Heap@84 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@81 null (udValid (MapType0Select Heap@84 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@84 null (udParentValid n@2)) (udValid (MapType0Select Heap@84 n@2 parent)) (MapType0Select Heap@84 null (udValid (MapType0Select Heap@84 n@2 parent))))) (and (state Heap@84 UnfoldingMask@82) (= UnfoldingMask@83 UnfoldingMask@82))) (and (=> (= (ControlFlow 0 115) 112) anon1449_Then_correct) (=> (= (ControlFlow 0 115) 114) anon1449_Else_correct))))))
(let ((anon913_correct  (=> (and (= UnfoldingMask@79 (MapType1Store Mask@61 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@61 null (udParentValid n@2))) FullPerm)))) (= perm@41 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 117) (- 0 119)) (>= perm@41 NoPerm)) (=> (>= perm@41 NoPerm) (=> (and (and (=> (> perm@41 NoPerm) (not (= n@2 null))) (= UnfoldingMask@80 (MapType1Store UnfoldingMask@79 n@2 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@79 n@2 parent)) perm@41))))) (and (state Heap@84 UnfoldingMask@80) (= perm@42 (/ (to_real 1) (to_real 10))))) (and (=> (= (ControlFlow 0 117) (- 0 118)) (>= perm@42 NoPerm)) (=> (>= perm@42 NoPerm) (=> (=> (> perm@42 NoPerm) (not (= n@2 null))) (=> (and (= UnfoldingMask@81 (MapType1Store UnfoldingMask@80 n@2 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@80 n@2 root)) perm@42)))) (state Heap@84 UnfoldingMask@81)) (and (=> (= (ControlFlow 0 117) 115) anon1448_Then_correct) (=> (= (ControlFlow 0 117) 116) anon1448_Else_correct))))))))))))
(let ((anon1447_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 122) 117)) anon913_correct)))
(let ((anon1447_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 120) (- 0 121)) (<= FullPerm (U_2_real (MapType1Select Mask@61 null (udParentValid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@61 null (udParentValid n@2)))) (=> (= (ControlFlow 0 120) 117) anon913_correct))))))
(let ((anon1446_Then_correct  (=> end@1 (=> (and (|udParentValid#trigger| Heap@84 (udParentValid n@2)) (= (MapType0Select Heap@84 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@84 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@84 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) (MapType0Select Heap@84 null (udValid (MapType0Select Heap@84 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) (FrameFragment (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) (FrameFragment (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) (FrameFragment (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) (FrameFragment (MapType0Select Heap@84 (MapType0Select Heap@84 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@84 n@2 parent) null) EmptyFrame EmptyFrame)))))))))))))) (and (=> (= (ControlFlow 0 123) 120) anon1447_Then_correct) (=> (= (ControlFlow 0 123) 122) anon1447_Else_correct))))))
(let ((anon1446_Else_correct  (=> (not end@1) (=> (and (= Heap@97 Heap@84) (= (ControlFlow 0 82) 81)) anon942_correct))))
(let ((anon910_correct  (=> (and (= UnfoldingMask@75 (MapType1Store Mask@61 null (valid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@61 null (valid n@2))) FullPerm)))) (= UnfoldingMask@76 (MapType1Store UnfoldingMask@75 null (validRest n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@75 null (validRest n@2))) FullPerm))))) (=> (and (and (and (and (InsidePredicate (valid n@2) (MapType0Select Heap@81 null (valid n@2)) (validRest n@2) (MapType0Select Heap@81 null (validRest n@2))) (state Heap@81 UnfoldingMask@76)) (and (= UnfoldingMask@77 (MapType1Store UnfoldingMask@76 null (leftValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@76 null (leftValid n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select Heap@81 null (valid n@2)) (leftValid n@2) (MapType0Select Heap@81 null (leftValid n@2))))) (and (and (state Heap@81 UnfoldingMask@77) (= UnfoldingMask@78 (MapType1Store UnfoldingMask@77 null (rightValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@77 null (rightValid n@2))) FullPerm))))) (and (InsidePredicate (valid n@2) (MapType0Select Heap@81 null (valid n@2)) (rightValid n@2) (MapType0Select Heap@81 null (rightValid n@2))) (state Heap@81 UnfoldingMask@78)))) (and (and (and (state Heap@81 UnfoldingMask@78) (forall ((o_92 T@U) (f_96 T@U) ) (! (let ((B@@73 (FieldTypeInv1 (type f_96))))
(let ((A@@74 (FieldTypeInv0 (type f_96))))
 (=> (and (and (= (type o_92) RefType) (= (type f_96) (FieldType A@@74 B@@73))) (or (U_2_bool (MapType1Select (MapType0Select Heap@81 null (|valid#sm| n@2)) o_92 f_96)) (U_2_bool (MapType1Select (MapType0Select Heap@81 null (|validRest#sm| n@2)) o_92 f_96)))) (U_2_bool (MapType1Select newPMask@31 o_92 f_96)))))
 :qid |stdinbpl.6096:37|
 :skolemid |165|
 :pattern ( (MapType1Select newPMask@31 o_92 f_96))
))) (and (= Heap@82 (MapType0Store Heap@81 null (|valid#sm| n@2) newPMask@31)) (forall ((o_93 T@U) (f_97 T@U) ) (! (let ((B@@74 (FieldTypeInv1 (type f_97))))
(let ((A@@75 (FieldTypeInv0 (type f_97))))
 (=> (and (and (= (type o_93) RefType) (= (type f_97) (FieldType A@@75 B@@74))) (or (U_2_bool (MapType1Select (MapType0Select Heap@82 null (|valid#sm| n@2)) o_93 f_97)) (U_2_bool (MapType1Select (MapType0Select Heap@82 null (|leftValid#sm| n@2)) o_93 f_97)))) (U_2_bool (MapType1Select newPMask@32 o_93 f_97)))))
 :qid |stdinbpl.6102:37|
 :skolemid |166|
 :pattern ( (MapType1Select newPMask@32 o_93 f_97))
)))) (and (and (= Heap@83 (MapType0Store Heap@82 null (|valid#sm| n@2) newPMask@32)) (forall ((o_94 T@U) (f_98 T@U) ) (! (let ((B@@75 (FieldTypeInv1 (type f_98))))
(let ((A@@76 (FieldTypeInv0 (type f_98))))
 (=> (and (and (= (type o_94) RefType) (= (type f_98) (FieldType A@@76 B@@75))) (or (U_2_bool (MapType1Select (MapType0Select Heap@83 null (|valid#sm| n@2)) o_94 f_98)) (U_2_bool (MapType1Select (MapType0Select Heap@83 null (|rightValid#sm| n@2)) o_94 f_98)))) (U_2_bool (MapType1Select newPMask@33 o_94 f_98)))))
 :qid |stdinbpl.6108:37|
 :skolemid |167|
 :pattern ( (MapType1Select newPMask@33 o_94 f_98))
))) (and (= Heap@84 (MapType0Store Heap@83 null (|valid#sm| n@2) newPMask@33)) (state Heap@84 Mask@61))))) (and (=> (= (ControlFlow 0 124) 123) anon1446_Then_correct) (=> (= (ControlFlow 0 124) 82) anon1446_Else_correct))))))
(let ((anon1445_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 127) 124)) anon910_correct)))
(let ((anon1445_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 125) (- 0 126)) (<= FullPerm (U_2_real (MapType1Select Mask@61 null (valid n@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@61 null (valid n@2)))) (=> (= (ControlFlow 0 125) 124) anon910_correct))))))
(let ((anon908_correct  (=> (state Heap@81 Mask@61) (=> (and (|valid#trigger| Heap@81 (valid n@2)) (= (MapType0Select Heap@81 null (valid n@2)) (CombineFrames (MapType0Select Heap@81 null (validRest n@2)) (CombineFrames (MapType0Select Heap@81 null (leftValid n@2)) (MapType0Select Heap@81 null (rightValid n@2)))))) (and (=> (= (ControlFlow 0 128) 125) anon1445_Then_correct) (=> (= (ControlFlow 0 128) 127) anon1445_Else_correct))))))
(let ((anon907_correct  (=> (state Heap@80 Mask@61) (=> (and (= Heap@81 Heap@80) (= (ControlFlow 0 130) 128)) anon908_correct))))
(let ((anon1444_Else_correct  (=> (= (MapType0Select Heap@78 n@2 parent) null) (=> (and (= Heap@80 Heap@78) (= (ControlFlow 0 132) 130)) anon907_correct))))
(let ((anon1444_Then_correct  (=> (and (and (not (= (MapType0Select Heap@78 n@2 parent) null)) (= Heap@79 (MapType0Store Heap@78 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@78 null (|udParentValid#sm| n@2)) (MapType0Select Heap@78 n@2 parent) root (bool_2_U true))))) (and (= Heap@80 Heap@79) (= (ControlFlow 0 131) 130))) anon907_correct)))
(let ((anon1443_Else_correct  (=> (and (= (MapType0Select Heap@76 n@2 parent) null) (= Heap@78 Heap@76)) (and (=> (= (ControlFlow 0 134) 131) anon1444_Then_correct) (=> (= (ControlFlow 0 134) 132) anon1444_Else_correct)))))
(let ((anon1443_Then_correct  (=> (not (= (MapType0Select Heap@76 n@2 parent) null)) (=> (and (= Heap@77 (MapType0Store Heap@76 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@76 null (|udParentValid#sm| n@2)) (MapType0Select Heap@76 n@2 parent) right (bool_2_U true)))) (= Heap@78 Heap@77)) (and (=> (= (ControlFlow 0 133) 131) anon1444_Then_correct) (=> (= (ControlFlow 0 133) 132) anon1444_Else_correct))))))
(let ((anon1442_Else_correct  (=> (and (= (MapType0Select Heap@74 n@2 parent) null) (= Heap@76 Heap@74)) (and (=> (= (ControlFlow 0 136) 133) anon1443_Then_correct) (=> (= (ControlFlow 0 136) 134) anon1443_Else_correct)))))
(let ((anon1442_Then_correct  (=> (not (= (MapType0Select Heap@74 n@2 parent) null)) (=> (and (= Heap@75 (MapType0Store Heap@74 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@74 null (|udParentValid#sm| n@2)) (MapType0Select Heap@74 n@2 parent) left (bool_2_U true)))) (= Heap@76 Heap@75)) (and (=> (= (ControlFlow 0 135) 133) anon1443_Then_correct) (=> (= (ControlFlow 0 135) 134) anon1443_Else_correct))))))
(let ((anon1441_Else_correct  (=> (and (= (MapType0Select Heap@72 n@2 parent) null) (= Heap@74 Heap@72)) (and (=> (= (ControlFlow 0 138) 135) anon1442_Then_correct) (=> (= (ControlFlow 0 138) 136) anon1442_Else_correct)))))
(let ((anon1441_Then_correct  (=> (not (= (MapType0Select Heap@72 n@2 parent) null)) (=> (and (= Heap@73 (MapType0Store Heap@72 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@72 null (|udParentValid#sm| n@2)) (MapType0Select Heap@72 n@2 parent) leftDown (bool_2_U true)))) (= Heap@74 Heap@73)) (and (=> (= (ControlFlow 0 137) 135) anon1442_Then_correct) (=> (= (ControlFlow 0 137) 136) anon1442_Else_correct))))))
(let ((anon1440_Else_correct  (=> (and (= (MapType0Select Heap@70 n@2 parent) null) (= Heap@72 Heap@70)) (and (=> (= (ControlFlow 0 140) 137) anon1441_Then_correct) (=> (= (ControlFlow 0 140) 138) anon1441_Else_correct)))))
(let ((anon1440_Then_correct  (=> (and (and (not (= (MapType0Select Heap@70 n@2 parent) null)) (forall ((o_91 T@U) (f_95 T@U) ) (! (let ((B@@76 (FieldTypeInv1 (type f_95))))
(let ((A@@77 (FieldTypeInv0 (type f_95))))
 (=> (and (and (= (type o_91) RefType) (= (type f_95) (FieldType A@@77 B@@76))) (or (U_2_bool (MapType1Select (MapType0Select Heap@70 null (|udParentValid#sm| n@2)) o_91 f_95)) (U_2_bool (MapType1Select (MapType0Select Heap@70 null (|udValid#sm| (MapType0Select Heap@70 n@2 parent))) o_91 f_95)))) (U_2_bool (MapType1Select newPMask@30 o_91 f_95)))))
 :qid |stdinbpl.6039:39|
 :skolemid |164|
 :pattern ( (MapType1Select newPMask@30 o_91 f_95))
))) (and (= Heap@71 (MapType0Store Heap@70 null (|udParentValid#sm| n@2) newPMask@30)) (= Heap@72 Heap@71))) (and (=> (= (ControlFlow 0 139) 137) anon1441_Then_correct) (=> (= (ControlFlow 0 139) 138) anon1441_Else_correct)))))
(let ((anon897_correct  (=> (and (and (state Heap@68 UnfoldingMask@74) (= (MapType0Select Heap@68 n@2 parent) null)) (and (= Heap@69 (MapType0Store Heap@68 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@68 null (|udParentValid#sm| n@2)) n@2 parent (bool_2_U true)))) (= Heap@70 (MapType0Store Heap@69 null (|udParentValid#sm| n@2) (MapType1Store (MapType0Select Heap@69 null (|udParentValid#sm| n@2)) n@2 root (bool_2_U true)))))) (and (=> (= (ControlFlow 0 141) 139) anon1440_Then_correct) (=> (= (ControlFlow 0 141) 140) anon1440_Else_correct)))))
(let ((anon1439_Else_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= (ControlFlow 0 143) 141)) anon897_correct)))
(let ((anon1439_Then_correct  (=> (= (MapType0Select Heap@68 n@2 parent) null) (=> (and (= (MapType0Select Heap@68 n@2 root) n@2) (= (ControlFlow 0 142) 141)) anon897_correct))))
(let ((anon1438_Else_correct  (=> (= (MapType0Select Heap@68 n@2 parent) null) (and (=> (= (ControlFlow 0 145) 142) anon1439_Then_correct) (=> (= (ControlFlow 0 145) 143) anon1439_Else_correct)))))
(let ((anon1438_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= (MapType0Select Heap@68 n@2 root) (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) root))) (and (=> (= (ControlFlow 0 144) 142) anon1439_Then_correct) (=> (= (ControlFlow 0 144) 143) anon1439_Else_correct)))))
(let ((anon1437_Else_correct  (=> (and (= (MapType0Select Heap@68 n@2 parent) null) (= UnfoldingMask@74 UnfoldingMask@72)) (and (=> (= (ControlFlow 0 147) 144) anon1438_Then_correct) (=> (= (ControlFlow 0 147) 145) anon1438_Else_correct)))))
(let ((anon1437_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= perm@40 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@40 NoPerm) (not (= (MapType0Select Heap@68 n@2 parent) null))) (= UnfoldingMask@73 (MapType1Store UnfoldingMask@72 (MapType0Select Heap@68 n@2 parent) root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@72 (MapType0Select Heap@68 n@2 parent) root)) perm@40))))) (and (state Heap@68 UnfoldingMask@73) (= UnfoldingMask@74 UnfoldingMask@73))) (and (=> (= (ControlFlow 0 146) 144) anon1438_Then_correct) (=> (= (ControlFlow 0 146) 145) anon1438_Else_correct))))))
(let ((anon1436_Else_correct  (=> (= (MapType0Select Heap@68 n@2 parent) null) (and (=> (= (ControlFlow 0 149) 146) anon1437_Then_correct) (=> (= (ControlFlow 0 149) 147) anon1437_Else_correct)))))
(let ((anon1436_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (=  (not (U_2_bool (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) leftDown))) (= (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) right) n@2))) (and (=> (= (ControlFlow 0 148) 146) anon1437_Then_correct) (=> (= (ControlFlow 0 148) 147) anon1437_Else_correct)))))
(let ((anon1435_Else_correct  (=> (and (= (MapType0Select Heap@68 n@2 parent) null) (= UnfoldingMask@72 UnfoldingMask@70)) (and (=> (= (ControlFlow 0 151) 148) anon1436_Then_correct) (=> (= (ControlFlow 0 151) 149) anon1436_Else_correct)))))
(let ((anon1435_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= perm@39 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@39 NoPerm) (not (= (MapType0Select Heap@68 n@2 parent) null))) (= UnfoldingMask@71 (MapType1Store UnfoldingMask@70 (MapType0Select Heap@68 n@2 parent) right (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@70 (MapType0Select Heap@68 n@2 parent) right)) perm@39))))) (and (state Heap@68 UnfoldingMask@71) (= UnfoldingMask@72 UnfoldingMask@71))) (and (=> (= (ControlFlow 0 150) 148) anon1436_Then_correct) (=> (= (ControlFlow 0 150) 149) anon1436_Else_correct))))))
(let ((anon1434_Else_correct  (=> (= (MapType0Select Heap@68 n@2 parent) null) (and (=> (= (ControlFlow 0 153) 150) anon1435_Then_correct) (=> (= (ControlFlow 0 153) 151) anon1435_Else_correct)))))
(let ((anon1434_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= (U_2_bool (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) leftDown)) (= (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) left) n@2))) (and (=> (= (ControlFlow 0 152) 150) anon1435_Then_correct) (=> (= (ControlFlow 0 152) 151) anon1435_Else_correct)))))
(let ((anon1433_Else_correct  (=> (and (= (MapType0Select Heap@68 n@2 parent) null) (= UnfoldingMask@70 UnfoldingMask@68)) (and (=> (= (ControlFlow 0 155) 152) anon1434_Then_correct) (=> (= (ControlFlow 0 155) 153) anon1434_Else_correct)))))
(let ((anon1433_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= perm@38 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@38 NoPerm) (not (= (MapType0Select Heap@68 n@2 parent) null))) (= UnfoldingMask@69 (MapType1Store UnfoldingMask@68 (MapType0Select Heap@68 n@2 parent) left (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@68 (MapType0Select Heap@68 n@2 parent) left)) perm@38))))) (and (state Heap@68 UnfoldingMask@69) (= UnfoldingMask@70 UnfoldingMask@69))) (and (=> (= (ControlFlow 0 154) 152) anon1434_Then_correct) (=> (= (ControlFlow 0 154) 153) anon1434_Else_correct))))))
(let ((anon1432_Else_correct  (=> (and (= (MapType0Select Heap@68 n@2 parent) null) (= UnfoldingMask@68 UnfoldingMask@66)) (and (=> (= (ControlFlow 0 157) 154) anon1433_Then_correct) (=> (= (ControlFlow 0 157) 155) anon1433_Else_correct)))))
(let ((anon1432_Then_correct  (=> (and (not (= (MapType0Select Heap@68 n@2 parent) null)) (= perm@37 (/ (to_real 1) (to_real 2)))) (=> (and (and (=> (> perm@37 NoPerm) (not (= (MapType0Select Heap@68 n@2 parent) null))) (= UnfoldingMask@67 (MapType1Store UnfoldingMask@66 (MapType0Select Heap@68 n@2 parent) leftDown (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@66 (MapType0Select Heap@68 n@2 parent) leftDown)) perm@37))))) (and (state Heap@68 UnfoldingMask@67) (= UnfoldingMask@68 UnfoldingMask@67))) (and (=> (= (ControlFlow 0 156) 154) anon1433_Then_correct) (=> (= (ControlFlow 0 156) 155) anon1433_Else_correct))))))
(let ((anon1431_Else_correct  (=> (and (= (MapType0Select Heap@68 n@2 parent) null) (= UnfoldingMask@66 UnfoldingMask@64)) (and (=> (= (ControlFlow 0 159) 156) anon1432_Then_correct) (=> (= (ControlFlow 0 159) 157) anon1432_Else_correct)))))
(let ((anon1431_Then_correct  (=> (not (= (MapType0Select Heap@68 n@2 parent) null)) (=> (and (and (= UnfoldingMask@65 (MapType1Store UnfoldingMask@64 null (udValid (MapType0Select Heap@68 n@2 parent)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@64 null (udValid (MapType0Select Heap@68 n@2 parent)))) FullPerm)))) (InsidePredicate (udParentValid n@2) (MapType0Select Heap@68 null (udParentValid n@2)) (udValid (MapType0Select Heap@68 n@2 parent)) (MapType0Select Heap@68 null (udValid (MapType0Select Heap@68 n@2 parent))))) (and (state Heap@68 UnfoldingMask@65) (= UnfoldingMask@66 UnfoldingMask@65))) (and (=> (= (ControlFlow 0 158) 156) anon1432_Then_correct) (=> (= (ControlFlow 0 158) 157) anon1432_Else_correct))))))
(let ((anon1430_Then_correct  (=> (and (and end@1 (|udParentValid#trigger| Heap@68 (udParentValid n@2))) (and (= (MapType0Select Heap@68 null (udParentValid n@2)) (CombineFrames (FrameFragment (MapType0Select Heap@68 n@2 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@68 n@2 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) (MapType0Select Heap@68 null (udValid (MapType0Select Heap@68 n@2 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) (FrameFragment (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) (FrameFragment (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) (FrameFragment (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) (FrameFragment (MapType0Select Heap@68 (MapType0Select Heap@68 n@2 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@68 n@2 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@68 n@2 parent) null) EmptyFrame EmptyFrame))))))))))))) (= UnfoldingMask@62 (MapType1Store Mask@61 null (udParentValid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@61 null (udParentValid n@2))) FullPerm)))))) (=> (and (and (and (= perm@35 (/ (to_real 1) (to_real 2))) (=> (> perm@35 NoPerm) (not (= n@2 null)))) (and (= UnfoldingMask@63 (MapType1Store UnfoldingMask@62 n@2 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@62 n@2 parent)) perm@35)))) (state Heap@68 UnfoldingMask@63))) (and (and (= perm@36 (/ (to_real 1) (to_real 10))) (=> (> perm@36 NoPerm) (not (= n@2 null)))) (and (= UnfoldingMask@64 (MapType1Store UnfoldingMask@63 n@2 root (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@63 n@2 root)) perm@36)))) (state Heap@68 UnfoldingMask@64)))) (and (=> (= (ControlFlow 0 160) 158) anon1431_Then_correct) (=> (= (ControlFlow 0 160) 159) anon1431_Else_correct))))))
(let ((anon1430_Else_correct  (=> (not end@1) (=> (and (= Heap@81 Heap@68) (= (ControlFlow 0 129) 128)) anon908_correct))))
(let ((anon1271_Else_correct  (=> end@1 (=> (and (state ExhaleHeap@1 Mask@46) (not (= this@@53 null))) (=> (and (and (= Mask@57 (MapType1Store Mask@46 this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select Mask@46 this@@53 root1)) FullPerm)))) (state ExhaleHeap@1 Mask@57)) (and (not (= (MapType0Select ExhaleHeap@1 this@@53 root1) null)) (= perm@33 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 161) (- 0 163)) (>= perm@33 NoPerm)) (=> (>= perm@33 NoPerm) (=> (=> (> perm@33 NoPerm) (not (= (MapType0Select ExhaleHeap@1 this@@53 root1) null))) (=> (and (and (and (= Mask@58 (MapType1Store Mask@57 (MapType0Select ExhaleHeap@1 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@57 (MapType0Select ExhaleHeap@1 this@@53 root1) parent)) perm@33)))) (state ExhaleHeap@1 Mask@58)) (and (not (= n@2 null)) (= Mask@59 (MapType1Store Mask@58 null (valid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@58 null (valid n@2))) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@59) (= Mask@60 (MapType1Store Mask@59 null (udParentValid n@2) (real_2_U (+ (U_2_real (MapType1Select Mask@59 null (udParentValid n@2))) FullPerm))))) (and (state ExhaleHeap@1 Mask@60) (= perm@34 (/ (to_real 4) (to_real 10)))))) (and (=> (= (ControlFlow 0 161) (- 0 162)) (>= perm@34 NoPerm)) (=> (>= perm@34 NoPerm) (=> (=> (> perm@34 NoPerm) (not (= n@2 null))) (=> (and (and (and (= Mask@61 (MapType1Store Mask@60 n@2 root (real_2_U (+ (U_2_real (MapType1Select Mask@60 n@2 root)) perm@34)))) (state ExhaleHeap@1 Mask@61)) (and (|valid#trigger| ExhaleHeap@1 (valid n@2)) (= (MapType0Select ExhaleHeap@1 null (valid n@2)) (CombineFrames (MapType0Select ExhaleHeap@1 null (validRest n@2)) (CombineFrames (MapType0Select ExhaleHeap@1 null (leftValid n@2)) (MapType0Select ExhaleHeap@1 null (rightValid n@2))))))) (and (and (= UnfoldingMask@58 (MapType1Store Mask@61 null (valid n@2) (real_2_U (- (U_2_real (MapType1Select Mask@61 null (valid n@2))) FullPerm)))) (= UnfoldingMask@59 (MapType1Store UnfoldingMask@58 null (validRest n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@58 null (validRest n@2))) FullPerm))))) (and (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (validRest n@2) (MapType0Select ExhaleHeap@1 null (validRest n@2))) (state ExhaleHeap@1 UnfoldingMask@59)))) (=> (and (and (and (and (= UnfoldingMask@60 (MapType1Store UnfoldingMask@59 null (leftValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@59 null (leftValid n@2))) FullPerm)))) (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (leftValid n@2) (MapType0Select ExhaleHeap@1 null (leftValid n@2)))) (and (state ExhaleHeap@1 UnfoldingMask@60) (= UnfoldingMask@61 (MapType1Store UnfoldingMask@60 null (rightValid n@2) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@60 null (rightValid n@2))) FullPerm)))))) (and (and (InsidePredicate (valid n@2) (MapType0Select ExhaleHeap@1 null (valid n@2)) (rightValid n@2) (MapType0Select ExhaleHeap@1 null (rightValid n@2))) (state ExhaleHeap@1 UnfoldingMask@61)) (and (state ExhaleHeap@1 UnfoldingMask@61) (= (MapType0Select ExhaleHeap@1 n@2 root) (MapType0Select ExhaleHeap@1 this@@53 root1))))) (and (and (and (forall ((o_88 T@U) (f_92 T@U) ) (! (let ((B@@77 (FieldTypeInv1 (type f_92))))
(let ((A@@78 (FieldTypeInv0 (type f_92))))
 (=> (and (and (= (type o_88) RefType) (= (type f_92) (FieldType A@@78 B@@77))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|valid#sm| n@2)) o_88 f_92)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|validRest#sm| n@2)) o_88 f_92)))) (U_2_bool (MapType1Select newPMask@27 o_88 f_92)))))
 :qid |stdinbpl.5949:35|
 :skolemid |161|
 :pattern ( (MapType1Select newPMask@27 o_88 f_92))
)) (= Heap@66 (MapType0Store ExhaleHeap@1 null (|valid#sm| n@2) newPMask@27))) (and (forall ((o_89 T@U) (f_93 T@U) ) (! (let ((B@@78 (FieldTypeInv1 (type f_93))))
(let ((A@@79 (FieldTypeInv0 (type f_93))))
 (=> (and (and (= (type o_89) RefType) (= (type f_93) (FieldType A@@79 B@@78))) (or (U_2_bool (MapType1Select (MapType0Select Heap@66 null (|valid#sm| n@2)) o_89 f_93)) (U_2_bool (MapType1Select (MapType0Select Heap@66 null (|leftValid#sm| n@2)) o_89 f_93)))) (U_2_bool (MapType1Select newPMask@28 o_89 f_93)))))
 :qid |stdinbpl.5955:35|
 :skolemid |162|
 :pattern ( (MapType1Select newPMask@28 o_89 f_93))
)) (= Heap@67 (MapType0Store Heap@66 null (|valid#sm| n@2) newPMask@28)))) (and (and (forall ((o_90 T@U) (f_94 T@U) ) (! (let ((B@@79 (FieldTypeInv1 (type f_94))))
(let ((A@@80 (FieldTypeInv0 (type f_94))))
 (=> (and (and (= (type o_90) RefType) (= (type f_94) (FieldType A@@80 B@@79))) (or (U_2_bool (MapType1Select (MapType0Select Heap@67 null (|valid#sm| n@2)) o_90 f_94)) (U_2_bool (MapType1Select (MapType0Select Heap@67 null (|rightValid#sm| n@2)) o_90 f_94)))) (U_2_bool (MapType1Select newPMask@29 o_90 f_94)))))
 :qid |stdinbpl.5961:35|
 :skolemid |163|
 :pattern ( (MapType1Select newPMask@29 o_90 f_94))
)) (= Heap@68 (MapType0Store Heap@67 null (|valid#sm| n@2) newPMask@29))) (and (state Heap@68 Mask@61) (not (= (MapType0Select Heap@68 this@@53 root1) null)))))) (and (=> (= (ControlFlow 0 161) 160) anon1430_Then_correct) (=> (= (ControlFlow 0 161) 129) anon1430_Else_correct))))))))))))))))
(let ((anon504_correct  (=> (and (and (state Heap@62 Mask@46) (IdenticalOnKnownLocations Heap@62 ExhaleHeap@1 Mask@46)) (and (U_2_bool (MapType0Select ExhaleHeap@1 n@2 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@1 r_1@0 $allocated)))) (and (and (=> (= (ControlFlow 0 737) 732) anon1244_Then_correct) (=> (= (ControlFlow 0 737) 659) anon1271_Then_correct)) (=> (= (ControlFlow 0 737) 161) anon1271_Else_correct)))))
(let ((anon1243_Else_correct  (=> (= (MapType0Select Heap@60 n@1 parent) null) (=> (and (= Heap@62 Heap@60) (= (ControlFlow 0 739) 737)) anon504_correct))))
(let ((anon1243_Then_correct  (=> (and (and (not (= (MapType0Select Heap@60 n@1 parent) null)) (= Heap@61 (MapType0Store Heap@60 null (|udParentValid#sm| n@1) (MapType1Store (MapType0Select Heap@60 null (|udParentValid#sm| n@1)) (MapType0Select Heap@60 n@1 parent) root (bool_2_U true))))) (and (= Heap@62 Heap@61) (= (ControlFlow 0 738) 737))) anon504_correct)))
(let ((anon1242_Else_correct  (=> (and (= (MapType0Select Heap@58 n@1 parent) null) (= Heap@60 Heap@58)) (and (=> (= (ControlFlow 0 741) 738) anon1243_Then_correct) (=> (= (ControlFlow 0 741) 739) anon1243_Else_correct)))))
(let ((anon1242_Then_correct  (=> (not (= (MapType0Select Heap@58 n@1 parent) null)) (=> (and (= Heap@59 (MapType0Store Heap@58 null (|udParentValid#sm| n@1) (MapType1Store (MapType0Select Heap@58 null (|udParentValid#sm| n@1)) (MapType0Select Heap@58 n@1 parent) right (bool_2_U true)))) (= Heap@60 Heap@59)) (and (=> (= (ControlFlow 0 740) 738) anon1243_Then_correct) (=> (= (ControlFlow 0 740) 739) anon1243_Else_correct))))))
(let ((anon1241_Else_correct  (=> (and (= (MapType0Select Heap@56 n@1 parent) null) (= Heap@58 Heap@56)) (and (=> (= (ControlFlow 0 743) 740) anon1242_Then_correct) (=> (= (ControlFlow 0 743) 741) anon1242_Else_correct)))))
(let ((anon1241_Then_correct  (=> (not (= (MapType0Select Heap@56 n@1 parent) null)) (=> (and (= Heap@57 (MapType0Store Heap@56 null (|udParentValid#sm| n@1) (MapType1Store (MapType0Select Heap@56 null (|udParentValid#sm| n@1)) (MapType0Select Heap@56 n@1 parent) left (bool_2_U true)))) (= Heap@58 Heap@57)) (and (=> (= (ControlFlow 0 742) 740) anon1242_Then_correct) (=> (= (ControlFlow 0 742) 741) anon1242_Else_correct))))))
(let ((anon1240_Else_correct  (=> (and (= (MapType0Select Heap@54 n@1 parent) null) (= Heap@56 Heap@54)) (and (=> (= (ControlFlow 0 745) 742) anon1241_Then_correct) (=> (= (ControlFlow 0 745) 743) anon1241_Else_correct)))))
(let ((anon1240_Then_correct  (=> (not (= (MapType0Select Heap@54 n@1 parent) null)) (=> (and (= Heap@55 (MapType0Store Heap@54 null (|udParentValid#sm| n@1) (MapType1Store (MapType0Select Heap@54 null (|udParentValid#sm| n@1)) (MapType0Select Heap@54 n@1 parent) leftDown (bool_2_U true)))) (= Heap@56 Heap@55)) (and (=> (= (ControlFlow 0 744) 742) anon1241_Then_correct) (=> (= (ControlFlow 0 744) 743) anon1241_Else_correct))))))
(let ((anon1239_Else_correct  (=> (and (= (MapType0Select Heap@52 n@1 parent) null) (= Heap@54 Heap@52)) (and (=> (= (ControlFlow 0 747) 744) anon1240_Then_correct) (=> (= (ControlFlow 0 747) 745) anon1240_Else_correct)))))
(let ((anon1239_Then_correct  (=> (and (and (not (= (MapType0Select Heap@52 n@1 parent) null)) (forall ((o_61 T@U) (f_65 T@U) ) (! (let ((B@@80 (FieldTypeInv1 (type f_65))))
(let ((A@@81 (FieldTypeInv0 (type f_65))))
 (=> (and (and (= (type o_61) RefType) (= (type f_65) (FieldType A@@81 B@@80))) (or (U_2_bool (MapType1Select (MapType0Select Heap@52 null (|udParentValid#sm| n@1)) o_61 f_65)) (U_2_bool (MapType1Select (MapType0Select Heap@52 null (|udValid#sm| (MapType0Select Heap@52 n@1 parent))) o_61 f_65)))) (U_2_bool (MapType1Select newPMask@23 o_61 f_65)))))
 :qid |stdinbpl.4131:39|
 :skolemid |134|
 :pattern ( (MapType1Select newPMask@23 o_61 f_65))
))) (and (= Heap@53 (MapType0Store Heap@52 null (|udParentValid#sm| n@1) newPMask@23)) (= Heap@54 Heap@53))) (and (=> (= (ControlFlow 0 746) 744) anon1240_Then_correct) (=> (= (ControlFlow 0 746) 745) anon1240_Else_correct)))))
(let ((anon494_correct  (=> (forall ((o_58 T@U) (f_62 T@U) ) (! (let ((B@@81 (FieldTypeInv1 (type f_62))))
(let ((A@@82 (FieldTypeInv0 (type f_62))))
 (=> (and (and (= (type o_58) RefType) (= (type f_62) (FieldType A@@82 B@@81))) (or (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|valid#sm| n@1)) o_58 f_62)) (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|validRest#sm| n@1)) o_58 f_62)))) (U_2_bool (MapType1Select newPMask@20 o_58 f_62)))))
 :qid |stdinbpl.4109:37|
 :skolemid |131|
 :pattern ( (MapType1Select newPMask@20 o_58 f_62))
)) (=> (and (and (and (= Heap@48 (MapType0Store Heap@47 null (|valid#sm| n@1) newPMask@20)) (forall ((o_59 T@U) (f_63 T@U) ) (! (let ((B@@82 (FieldTypeInv1 (type f_63))))
(let ((A@@83 (FieldTypeInv0 (type f_63))))
 (=> (and (and (= (type o_59) RefType) (= (type f_63) (FieldType A@@83 B@@82))) (or (U_2_bool (MapType1Select (MapType0Select Heap@48 null (|valid#sm| n@1)) o_59 f_63)) (U_2_bool (MapType1Select (MapType0Select Heap@48 null (|leftValid#sm| n@1)) o_59 f_63)))) (U_2_bool (MapType1Select newPMask@21 o_59 f_63)))))
 :qid |stdinbpl.4115:37|
 :skolemid |132|
 :pattern ( (MapType1Select newPMask@21 o_59 f_63))
))) (and (= Heap@49 (MapType0Store Heap@48 null (|valid#sm| n@1) newPMask@21)) (forall ((o_60 T@U) (f_64 T@U) ) (! (let ((B@@83 (FieldTypeInv1 (type f_64))))
(let ((A@@84 (FieldTypeInv0 (type f_64))))
 (=> (and (and (= (type o_60) RefType) (= (type f_64) (FieldType A@@84 B@@83))) (or (U_2_bool (MapType1Select (MapType0Select Heap@49 null (|valid#sm| n@1)) o_60 f_64)) (U_2_bool (MapType1Select (MapType0Select Heap@49 null (|rightValid#sm| n@1)) o_60 f_64)))) (U_2_bool (MapType1Select newPMask@22 o_60 f_64)))))
 :qid |stdinbpl.4121:37|
 :skolemid |133|
 :pattern ( (MapType1Select newPMask@22 o_60 f_64))
)))) (and (and (= Heap@50 (MapType0Store Heap@49 null (|valid#sm| n@1) newPMask@22)) (state Heap@50 Mask@46)) (and (= Heap@51 (MapType0Store Heap@50 null (|udParentValid#sm| n@1) (MapType1Store (MapType0Select Heap@50 null (|udParentValid#sm| n@1)) n@1 parent (bool_2_U true)))) (= Heap@52 (MapType0Store Heap@51 null (|udParentValid#sm| n@1) (MapType1Store (MapType0Select Heap@51 null (|udParentValid#sm| n@1)) n@1 root (bool_2_U true))))))) (and (=> (= (ControlFlow 0 748) 746) anon1239_Then_correct) (=> (= (ControlFlow 0 748) 747) anon1239_Else_correct))))))
(let ((anon1228_Else_correct  (=> (and (not false) (= (ControlFlow 0 749) 748)) anon494_correct)))
(let ((anon1228_Then_correct true))
(let ((anon472_correct  (=> (= UnfoldingMask@37 (MapType1Store Mask@41 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@41 null (valid n@1))) FullPerm)))) (=> (and (= UnfoldingMask@38 (MapType1Store UnfoldingMask@37 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@37 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@47 null (valid n@1)) (validRest n@1) (MapType0Select Heap@47 null (validRest n@1)))) (=> (and (and (and (state Heap@47 UnfoldingMask@38) (= UnfoldingMask@39 (MapType1Store UnfoldingMask@38 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@38 null (leftValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select Heap@47 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@47 null (leftValid n@1))) (state Heap@47 UnfoldingMask@39))) (and (and (= UnfoldingMask@40 (MapType1Store UnfoldingMask@39 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@39 null (rightValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@47 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@47 null (rightValid n@1)))) (and (state Heap@47 UnfoldingMask@40) (state Heap@47 UnfoldingMask@40)))) (and (=> (= (ControlFlow 0 750) (- 0 752)) (= (MapType0Select Heap@47 n@1 root) (MapType0Select Heap@47 this@@53 root1))) (=> (= (MapType0Select Heap@47 n@1 root) (MapType0Select Heap@47 this@@53 root1)) (and (=> (= (ControlFlow 0 750) (- 0 751)) (not (= (MapType0Select Heap@47 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@47 this@@53 root1) null)) (and (=> (= (ControlFlow 0 750) 3) anon1228_Then_correct) (=> (= (ControlFlow 0 750) 749) anon1228_Else_correct)))))))))))
(let ((anon1227_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 755) 750)) anon472_correct)))
(let ((anon1227_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 753) (- 0 754)) (<= FullPerm (U_2_real (MapType1Select Mask@41 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 null (valid n@1)))) (=> (= (ControlFlow 0 753) 750) anon472_correct))))))
(let ((anon470_correct  (=> (= Mask@46 (MapType1Store Mask@45 n@1 root (real_2_U (- (U_2_real (MapType1Select Mask@45 n@1 root)) perm@22)))) (=> (and (|valid#trigger| Heap@47 (valid n@1)) (= (MapType0Select Heap@47 null (valid n@1)) (CombineFrames (MapType0Select Heap@47 null (validRest n@1)) (CombineFrames (MapType0Select Heap@47 null (leftValid n@1)) (MapType0Select Heap@47 null (rightValid n@1)))))) (and (=> (= (ControlFlow 0 756) 753) anon1227_Then_correct) (=> (= (ControlFlow 0 756) 755) anon1227_Else_correct))))))
(let ((anon1226_Else_correct  (=> (and (= perm@22 NoPerm) (= (ControlFlow 0 759) 756)) anon470_correct)))
(let ((anon1226_Then_correct  (=> (not (= perm@22 NoPerm)) (and (=> (= (ControlFlow 0 757) (- 0 758)) (<= perm@22 (U_2_real (MapType1Select Mask@45 n@1 root)))) (=> (<= perm@22 (U_2_real (MapType1Select Mask@45 n@1 root))) (=> (= (ControlFlow 0 757) 756) anon470_correct))))))
(let ((anon468_correct  (=> (and (= Mask@45 (MapType1Store Mask@44 null (udParentValid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@44 null (udParentValid n@1))) FullPerm)))) (= perm@22 (/ (to_real 4) (to_real 10)))) (and (=> (= (ControlFlow 0 760) (- 0 761)) (>= perm@22 NoPerm)) (=> (>= perm@22 NoPerm) (and (=> (= (ControlFlow 0 760) 757) anon1226_Then_correct) (=> (= (ControlFlow 0 760) 759) anon1226_Else_correct)))))))
(let ((anon1225_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 764) 760)) anon468_correct)))
(let ((anon1225_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 762) (- 0 763)) (<= FullPerm (U_2_real (MapType1Select Mask@44 null (udParentValid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@44 null (udParentValid n@1)))) (=> (= (ControlFlow 0 762) 760) anon468_correct))))))
(let ((anon466_correct  (=> (= Mask@44 (MapType1Store Mask@43 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@43 null (valid n@1))) FullPerm)))) (and (=> (= (ControlFlow 0 765) 762) anon1225_Then_correct) (=> (= (ControlFlow 0 765) 764) anon1225_Else_correct)))))
(let ((anon1224_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 768) 765)) anon466_correct)))
(let ((anon1224_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 766) (- 0 767)) (<= FullPerm (U_2_real (MapType1Select Mask@43 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 null (valid n@1)))) (=> (= (ControlFlow 0 766) 765) anon466_correct))))))
(let ((anon464_correct  (=> (= Mask@43 (MapType1Store Mask@42 (MapType0Select Heap@47 this@@53 root1) parent (real_2_U (- (U_2_real (MapType1Select Mask@42 (MapType0Select Heap@47 this@@53 root1) parent)) perm@21)))) (and (=> (= (ControlFlow 0 769) (- 0 770)) (not (= n@1 null))) (=> (not (= n@1 null)) (and (=> (= (ControlFlow 0 769) 766) anon1224_Then_correct) (=> (= (ControlFlow 0 769) 768) anon1224_Else_correct)))))))
(let ((anon1223_Else_correct  (=> (and (= perm@21 NoPerm) (= (ControlFlow 0 773) 769)) anon464_correct)))
(let ((anon1223_Then_correct  (=> (not (= perm@21 NoPerm)) (and (=> (= (ControlFlow 0 771) (- 0 772)) (<= perm@21 (U_2_real (MapType1Select Mask@42 (MapType0Select Heap@47 this@@53 root1) parent)))) (=> (<= perm@21 (U_2_real (MapType1Select Mask@42 (MapType0Select Heap@47 this@@53 root1) parent))) (=> (= (ControlFlow 0 771) 769) anon464_correct))))))
(let ((anon462_correct  (=> (= Mask@42 (MapType1Store Mask@41 this@@53 root1 (real_2_U (- (U_2_real (MapType1Select Mask@41 this@@53 root1)) FullPerm)))) (and (=> (= (ControlFlow 0 774) (- 0 776)) (not (= (MapType0Select Heap@47 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@47 this@@53 root1) null)) (=> (= perm@21 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 774) (- 0 775)) (>= perm@21 NoPerm)) (=> (>= perm@21 NoPerm) (and (=> (= (ControlFlow 0 774) 771) anon1223_Then_correct) (=> (= (ControlFlow 0 774) 773) anon1223_Else_correct))))))))))
(let ((anon1222_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 779) 774)) anon462_correct)))
(let ((anon1222_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 777) (- 0 778)) (<= FullPerm (U_2_real (MapType1Select Mask@41 this@@53 root1)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 this@@53 root1))) (=> (= (ControlFlow 0 777) 774) anon462_correct))))))
(let ((anon1206_Else_correct  (=> (and (not false) (= Heap@47 Heap@34)) (and (=> (= (ControlFlow 0 780) 777) anon1222_Then_correct) (=> (= (ControlFlow 0 780) 779) anon1222_Else_correct)))))
(let ((anon1206_Then_correct true))
(let ((anon428_correct  (=> (and (= UnfoldingMask@20 (MapType1Store Mask@41 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@41 null (valid n@1))) FullPerm)))) (= UnfoldingMask@21 (MapType1Store UnfoldingMask@20 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@20 null (validRest n@1))) FullPerm))))) (=> (and (and (and (and (InsidePredicate (valid n@1) (MapType0Select Heap@31 null (valid n@1)) (validRest n@1) (MapType0Select Heap@31 null (validRest n@1))) (state Heap@31 UnfoldingMask@21)) (and (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@31 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@31 null (leftValid n@1))))) (and (and (state Heap@31 UnfoldingMask@22) (= UnfoldingMask@23 (MapType1Store UnfoldingMask@22 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@22 null (rightValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select Heap@31 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@31 null (rightValid n@1))) (state Heap@31 UnfoldingMask@23)))) (and (and (and (state Heap@31 UnfoldingMask@23) (forall ((o_54 T@U) (f_58 T@U) ) (! (let ((B@@84 (FieldTypeInv1 (type f_58))))
(let ((A@@85 (FieldTypeInv0 (type f_58))))
 (=> (and (and (= (type o_54) RefType) (= (type f_58) (FieldType A@@85 B@@84))) (or (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|valid#sm| n@1)) o_54 f_58)) (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|validRest#sm| n@1)) o_54 f_58)))) (U_2_bool (MapType1Select newPMask@16 o_54 f_58)))))
 :qid |stdinbpl.3822:39|
 :skolemid |127|
 :pattern ( (MapType1Select newPMask@16 o_54 f_58))
))) (and (= Heap@32 (MapType0Store Heap@31 null (|valid#sm| n@1) newPMask@16)) (forall ((o_55 T@U) (f_59 T@U) ) (! (let ((B@@85 (FieldTypeInv1 (type f_59))))
(let ((A@@86 (FieldTypeInv0 (type f_59))))
 (=> (and (and (= (type o_55) RefType) (= (type f_59) (FieldType A@@86 B@@85))) (or (U_2_bool (MapType1Select (MapType0Select Heap@32 null (|valid#sm| n@1)) o_55 f_59)) (U_2_bool (MapType1Select (MapType0Select Heap@32 null (|leftValid#sm| n@1)) o_55 f_59)))) (U_2_bool (MapType1Select newPMask@17 o_55 f_59)))))
 :qid |stdinbpl.3828:39|
 :skolemid |128|
 :pattern ( (MapType1Select newPMask@17 o_55 f_59))
)))) (and (and (= Heap@33 (MapType0Store Heap@32 null (|valid#sm| n@1) newPMask@17)) (forall ((o_56 T@U) (f_60 T@U) ) (! (let ((B@@86 (FieldTypeInv1 (type f_60))))
(let ((A@@87 (FieldTypeInv0 (type f_60))))
 (=> (and (and (= (type o_56) RefType) (= (type f_60) (FieldType A@@87 B@@86))) (or (U_2_bool (MapType1Select (MapType0Select Heap@33 null (|valid#sm| n@1)) o_56 f_60)) (U_2_bool (MapType1Select (MapType0Select Heap@33 null (|rightValid#sm| n@1)) o_56 f_60)))) (U_2_bool (MapType1Select newPMask@18 o_56 f_60)))))
 :qid |stdinbpl.3834:39|
 :skolemid |129|
 :pattern ( (MapType1Select newPMask@18 o_56 f_60))
))) (and (= Heap@34 (MapType0Store Heap@33 null (|valid#sm| n@1) newPMask@18)) (state Heap@34 Mask@41))))) (and (=> (= (ControlFlow 0 781) 2) anon1206_Then_correct) (=> (= (ControlFlow 0 781) 780) anon1206_Else_correct))))))
(let ((anon1205_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 784) 781)) anon428_correct)))
(let ((anon1205_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 782) (- 0 783)) (<= FullPerm (U_2_real (MapType1Select Mask@41 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 null (valid n@1)))) (=> (= (ControlFlow 0 782) 781) anon428_correct))))))
(let ((anon426_correct  (=> (and (= UnfoldingMask@16 (MapType1Store Mask@41 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@41 null (valid n@1))) FullPerm)))) (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 null (validRest n@1))) FullPerm))))) (=> (and (and (InsidePredicate (valid n@1) (MapType0Select Heap@28 null (valid n@1)) (validRest n@1) (MapType0Select Heap@28 null (validRest n@1))) (state Heap@28 UnfoldingMask@17)) (and (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 null (leftValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select Heap@28 null (valid n@1)) (leftValid n@1) (MapType0Select Heap@28 null (leftValid n@1))))) (=> (and (and (and (and (state Heap@28 UnfoldingMask@18) (= UnfoldingMask@19 (MapType1Store UnfoldingMask@18 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@18 null (rightValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select Heap@28 null (valid n@1)) (rightValid n@1) (MapType0Select Heap@28 null (rightValid n@1))) (state Heap@28 UnfoldingMask@19))) (and (and (state Heap@28 UnfoldingMask@19) (forall ((o_51 T@U) (f_55 T@U) ) (! (let ((B@@87 (FieldTypeInv1 (type f_55))))
(let ((A@@88 (FieldTypeInv0 (type f_55))))
 (=> (and (and (= (type o_51) RefType) (= (type f_55) (FieldType A@@88 B@@87))) (or (U_2_bool (MapType1Select (MapType0Select Heap@28 null (|valid#sm| n@1)) o_51 f_55)) (U_2_bool (MapType1Select (MapType0Select Heap@28 null (|validRest#sm| n@1)) o_51 f_55)))) (U_2_bool (MapType1Select newPMask@13 o_51 f_55)))))
 :qid |stdinbpl.3757:37|
 :skolemid |124|
 :pattern ( (MapType1Select newPMask@13 o_51 f_55))
))) (and (= Heap@29 (MapType0Store Heap@28 null (|valid#sm| n@1) newPMask@13)) (forall ((o_52 T@U) (f_56 T@U) ) (! (let ((B@@88 (FieldTypeInv1 (type f_56))))
(let ((A@@89 (FieldTypeInv0 (type f_56))))
 (=> (and (and (= (type o_52) RefType) (= (type f_56) (FieldType A@@89 B@@88))) (or (U_2_bool (MapType1Select (MapType0Select Heap@29 null (|valid#sm| n@1)) o_52 f_56)) (U_2_bool (MapType1Select (MapType0Select Heap@29 null (|leftValid#sm| n@1)) o_52 f_56)))) (U_2_bool (MapType1Select newPMask@14 o_52 f_56)))))
 :qid |stdinbpl.3763:37|
 :skolemid |125|
 :pattern ( (MapType1Select newPMask@14 o_52 f_56))
))))) (and (and (and (= Heap@30 (MapType0Store Heap@29 null (|valid#sm| n@1) newPMask@14)) (forall ((o_53 T@U) (f_57 T@U) ) (! (let ((B@@89 (FieldTypeInv1 (type f_57))))
(let ((A@@90 (FieldTypeInv0 (type f_57))))
 (=> (and (and (= (type o_53) RefType) (= (type f_57) (FieldType A@@90 B@@89))) (or (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|valid#sm| n@1)) o_53 f_57)) (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|rightValid#sm| n@1)) o_53 f_57)))) (U_2_bool (MapType1Select newPMask@15 o_53 f_57)))))
 :qid |stdinbpl.3769:37|
 :skolemid |126|
 :pattern ( (MapType1Select newPMask@15 o_53 f_57))
))) (and (= Heap@31 (MapType0Store Heap@30 null (|valid#sm| n@1) newPMask@15)) (state Heap@31 Mask@41))) (and (and (state Heap@31 Mask@41) (state Heap@31 Mask@41)) (and (|valid#trigger| Heap@31 (valid n@1)) (= (MapType0Select Heap@31 null (valid n@1)) (CombineFrames (MapType0Select Heap@31 null (validRest n@1)) (CombineFrames (MapType0Select Heap@31 null (leftValid n@1)) (MapType0Select Heap@31 null (rightValid n@1))))))))) (and (=> (= (ControlFlow 0 785) 782) anon1205_Then_correct) (=> (= (ControlFlow 0 785) 784) anon1205_Else_correct)))))))
(let ((anon1204_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 788) 785)) anon426_correct)))
(let ((anon1204_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 786) (- 0 787)) (<= FullPerm (U_2_real (MapType1Select Mask@41 null (valid n@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 null (valid n@1)))) (=> (= (ControlFlow 0 786) 785) anon426_correct))))))
(let ((anon1047_Else_correct  (=> end@0 (=> (and (state ExhaleHeap@0 Mask@26) (not (= this@@53 null))) (=> (and (and (= Mask@37 (MapType1Store Mask@26 this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select Mask@26 this@@53 root1)) FullPerm)))) (state ExhaleHeap@0 Mask@37)) (and (not (= (MapType0Select ExhaleHeap@0 this@@53 root1) null)) (= perm@13 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 789) (- 0 791)) (>= perm@13 NoPerm)) (=> (>= perm@13 NoPerm) (=> (=> (> perm@13 NoPerm) (not (= (MapType0Select ExhaleHeap@0 this@@53 root1) null))) (=> (and (= Mask@38 (MapType1Store Mask@37 (MapType0Select ExhaleHeap@0 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@37 (MapType0Select ExhaleHeap@0 this@@53 root1) parent)) perm@13)))) (state ExhaleHeap@0 Mask@38)) (=> (and (and (not (= n@1 null)) (= Mask@39 (MapType1Store Mask@38 null (valid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@38 null (valid n@1))) FullPerm))))) (and (state ExhaleHeap@0 Mask@39) (= perm@14 (/ (to_real 4) (to_real 10))))) (and (=> (= (ControlFlow 0 789) (- 0 790)) (>= perm@14 NoPerm)) (=> (>= perm@14 NoPerm) (=> (and (=> (> perm@14 NoPerm) (not (= n@1 null))) (= Mask@40 (MapType1Store Mask@39 n@1 root (real_2_U (+ (U_2_real (MapType1Select Mask@39 n@1 root)) perm@14))))) (=> (and (and (state ExhaleHeap@0 Mask@40) (= Mask@41 (MapType1Store Mask@40 null (udParentValid n@1) (real_2_U (+ (U_2_real (MapType1Select Mask@40 null (udParentValid n@1))) FullPerm))))) (and (state ExhaleHeap@0 Mask@41) (|valid#trigger| ExhaleHeap@0 (valid n@1)))) (=> (and (and (and (= (MapType0Select ExhaleHeap@0 null (valid n@1)) (CombineFrames (MapType0Select ExhaleHeap@0 null (validRest n@1)) (CombineFrames (MapType0Select ExhaleHeap@0 null (leftValid n@1)) (MapType0Select ExhaleHeap@0 null (rightValid n@1))))) (= UnfoldingMask@12 (MapType1Store Mask@41 null (valid n@1) (real_2_U (- (U_2_real (MapType1Select Mask@41 null (valid n@1))) FullPerm))))) (and (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 null (validRest n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 null (validRest n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (validRest n@1) (MapType0Select ExhaleHeap@0 null (validRest n@1))))) (and (and (state ExhaleHeap@0 UnfoldingMask@13) (= UnfoldingMask@14 (MapType1Store UnfoldingMask@13 null (leftValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@13 null (leftValid n@1))) FullPerm))))) (and (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (leftValid n@1) (MapType0Select ExhaleHeap@0 null (leftValid n@1))) (state ExhaleHeap@0 UnfoldingMask@14)))) (=> (and (and (and (and (= UnfoldingMask@15 (MapType1Store UnfoldingMask@14 null (rightValid n@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@14 null (rightValid n@1))) FullPerm)))) (InsidePredicate (valid n@1) (MapType0Select ExhaleHeap@0 null (valid n@1)) (rightValid n@1) (MapType0Select ExhaleHeap@0 null (rightValid n@1)))) (and (state ExhaleHeap@0 UnfoldingMask@15) (state ExhaleHeap@0 UnfoldingMask@15))) (and (and (= (MapType0Select ExhaleHeap@0 n@1 root) (MapType0Select ExhaleHeap@0 this@@53 root1)) (forall ((o_48 T@U) (f_52 T@U) ) (! (let ((B@@90 (FieldTypeInv1 (type f_52))))
(let ((A@@91 (FieldTypeInv0 (type f_52))))
 (=> (and (and (= (type o_48) RefType) (= (type f_52) (FieldType A@@91 B@@90))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@0 null (|valid#sm| n@1)) o_48 f_52)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@0 null (|validRest#sm| n@1)) o_48 f_52)))) (U_2_bool (MapType1Select newPMask@10 o_48 f_52)))))
 :qid |stdinbpl.3701:35|
 :skolemid |121|
 :pattern ( (MapType1Select newPMask@10 o_48 f_52))
))) (and (= Heap@26 (MapType0Store ExhaleHeap@0 null (|valid#sm| n@1) newPMask@10)) (forall ((o_49 T@U) (f_53 T@U) ) (! (let ((B@@91 (FieldTypeInv1 (type f_53))))
(let ((A@@92 (FieldTypeInv0 (type f_53))))
 (=> (and (and (= (type o_49) RefType) (= (type f_53) (FieldType A@@92 B@@91))) (or (U_2_bool (MapType1Select (MapType0Select Heap@26 null (|valid#sm| n@1)) o_49 f_53)) (U_2_bool (MapType1Select (MapType0Select Heap@26 null (|leftValid#sm| n@1)) o_49 f_53)))) (U_2_bool (MapType1Select newPMask@11 o_49 f_53)))))
 :qid |stdinbpl.3707:35|
 :skolemid |122|
 :pattern ( (MapType1Select newPMask@11 o_49 f_53))
))))) (and (and (and (= Heap@27 (MapType0Store Heap@26 null (|valid#sm| n@1) newPMask@11)) (forall ((o_50 T@U) (f_54 T@U) ) (! (let ((B@@92 (FieldTypeInv1 (type f_54))))
(let ((A@@93 (FieldTypeInv0 (type f_54))))
 (=> (and (and (= (type o_50) RefType) (= (type f_54) (FieldType A@@93 B@@92))) (or (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|valid#sm| n@1)) o_50 f_54)) (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|rightValid#sm| n@1)) o_50 f_54)))) (U_2_bool (MapType1Select newPMask@12 o_50 f_54)))))
 :qid |stdinbpl.3713:35|
 :skolemid |123|
 :pattern ( (MapType1Select newPMask@12 o_50 f_54))
))) (and (= Heap@28 (MapType0Store Heap@27 null (|valid#sm| n@1) newPMask@12)) (state Heap@28 Mask@41))) (and (and (not (= (MapType0Select Heap@28 this@@53 root1) null)) (state Heap@28 Mask@41)) (and (|valid#trigger| Heap@28 (valid n@1)) (= (MapType0Select Heap@28 null (valid n@1)) (CombineFrames (MapType0Select Heap@28 null (validRest n@1)) (CombineFrames (MapType0Select Heap@28 null (leftValid n@1)) (MapType0Select Heap@28 null (rightValid n@1))))))))) (and (=> (= (ControlFlow 0 789) 786) anon1204_Then_correct) (=> (= (ControlFlow 0 789) 788) anon1204_Else_correct))))))))))))))))))
(let ((anon102_correct  (=> (= UnfoldingMask@4 (MapType1Store Mask@21 null (valid n@0) (real_2_U (- (U_2_real (MapType1Select Mask@21 null (valid n@0))) FullPerm)))) (=> (and (= UnfoldingMask@5 (MapType1Store UnfoldingMask@4 null (validRest n@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@4 null (validRest n@0))) FullPerm)))) (InsidePredicate (valid n@0) (MapType0Select Heap@19 null (valid n@0)) (validRest n@0) (MapType0Select Heap@19 null (validRest n@0)))) (=> (and (and (and (state Heap@19 UnfoldingMask@5) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 null (leftValid n@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 null (leftValid n@0))) FullPerm))))) (and (InsidePredicate (valid n@0) (MapType0Select Heap@19 null (valid n@0)) (leftValid n@0) (MapType0Select Heap@19 null (leftValid n@0))) (state Heap@19 UnfoldingMask@6))) (and (and (= UnfoldingMask@7 (MapType1Store UnfoldingMask@6 null (rightValid n@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@6 null (rightValid n@0))) FullPerm)))) (InsidePredicate (valid n@0) (MapType0Select Heap@19 null (valid n@0)) (rightValid n@0) (MapType0Select Heap@19 null (rightValid n@0)))) (and (state Heap@19 UnfoldingMask@7) (state Heap@19 UnfoldingMask@7)))) (and (=> (= (ControlFlow 0 1374) (- 0 1376)) (= (MapType0Select Heap@19 n@0 root) (MapType0Select Heap@19 this@@53 root1))) (=> (= (MapType0Select Heap@19 n@0 root) (MapType0Select Heap@19 this@@53 root1)) (and (=> (= (ControlFlow 0 1374) (- 0 1375)) (not (= (MapType0Select Heap@19 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@19 this@@53 root1) null)) (=> (forall ((o_9 T@U) (f_13 T@U) ) (! (let ((B@@93 (FieldTypeInv1 (type f_13))))
(let ((A@@94 (FieldTypeInv0 (type f_13))))
 (=> (and (and (= (type o_9) RefType) (= (type f_13) (FieldType A@@94 B@@93))) (or (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|valid#sm| n@0)) o_9 f_13)) (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|validRest#sm| n@0)) o_9 f_13)))) (U_2_bool (MapType1Select newPMask@4 o_9 f_13)))))
 :qid |stdinbpl.1856:37|
 :skolemid |82|
 :pattern ( (MapType1Select newPMask@4 o_9 f_13))
)) (=> (and (= Heap@20 (MapType0Store Heap@19 null (|valid#sm| n@0) newPMask@4)) (forall ((o_10 T@U) (f_14 T@U) ) (! (let ((B@@94 (FieldTypeInv1 (type f_14))))
(let ((A@@95 (FieldTypeInv0 (type f_14))))
 (=> (and (and (= (type o_10) RefType) (= (type f_14) (FieldType A@@95 B@@94))) (or (U_2_bool (MapType1Select (MapType0Select Heap@20 null (|valid#sm| n@0)) o_10 f_14)) (U_2_bool (MapType1Select (MapType0Select Heap@20 null (|leftValid#sm| n@0)) o_10 f_14)))) (U_2_bool (MapType1Select newPMask@5 o_10 f_14)))))
 :qid |stdinbpl.1862:37|
 :skolemid |83|
 :pattern ( (MapType1Select newPMask@5 o_10 f_14))
))) (=> (and (and (and (= Heap@21 (MapType0Store Heap@20 null (|valid#sm| n@0) newPMask@5)) (forall ((o_11 T@U) (f_15 T@U) ) (! (let ((B@@95 (FieldTypeInv1 (type f_15))))
(let ((A@@96 (FieldTypeInv0 (type f_15))))
 (=> (and (and (= (type o_11) RefType) (= (type f_15) (FieldType A@@96 B@@95))) (or (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|valid#sm| n@0)) o_11 f_15)) (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|rightValid#sm| n@0)) o_11 f_15)))) (U_2_bool (MapType1Select newPMask@6 o_11 f_15)))))
 :qid |stdinbpl.1868:37|
 :skolemid |84|
 :pattern ( (MapType1Select newPMask@6 o_11 f_15))
))) (and (= Heap@22 (MapType0Store Heap@21 null (|valid#sm| n@0) newPMask@6)) (state Heap@22 Mask@26))) (and (and (IdenticalOnKnownLocations Heap@22 ExhaleHeap@0 Mask@26) (U_2_bool (MapType0Select ExhaleHeap@0 n@1 $allocated))) (and (U_2_bool (MapType0Select ExhaleHeap@0 q_1@0 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@0 p_1@0 $allocated))))) (and (and (=> (= (ControlFlow 0 1374) 1369) anon1045_Then_correct) (=> (= (ControlFlow 0 1374) 1359) anon1047_Then_correct)) (=> (= (ControlFlow 0 1374) 789) anon1047_Else_correct))))))))))))))
(let ((anon1044_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1379) 1374)) anon102_correct)))
(let ((anon1044_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1377) (- 0 1378)) (<= FullPerm (U_2_real (MapType1Select Mask@21 null (valid n@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@21 null (valid n@0)))) (=> (= (ControlFlow 0 1377) 1374) anon102_correct))))))
(let ((anon100_correct  (=> (= Mask@26 (MapType1Store Mask@25 null (udParentValid n@0) (real_2_U (- (U_2_real (MapType1Select Mask@25 null (udParentValid n@0))) FullPerm)))) (=> (and (|valid#trigger| Heap@19 (valid n@0)) (= (MapType0Select Heap@19 null (valid n@0)) (CombineFrames (MapType0Select Heap@19 null (validRest n@0)) (CombineFrames (MapType0Select Heap@19 null (leftValid n@0)) (MapType0Select Heap@19 null (rightValid n@0)))))) (and (=> (= (ControlFlow 0 1380) 1377) anon1044_Then_correct) (=> (= (ControlFlow 0 1380) 1379) anon1044_Else_correct))))))
(let ((anon1043_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1383) 1380)) anon100_correct)))
(let ((anon1043_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1381) (- 0 1382)) (<= FullPerm (U_2_real (MapType1Select Mask@25 null (udParentValid n@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@25 null (udParentValid n@0)))) (=> (= (ControlFlow 0 1381) 1380) anon100_correct))))))
(let ((anon98_correct  (=> (= Mask@25 (MapType1Store Mask@24 n@0 root (real_2_U (- (U_2_real (MapType1Select Mask@24 n@0 root)) perm@8)))) (and (=> (= (ControlFlow 0 1384) 1381) anon1043_Then_correct) (=> (= (ControlFlow 0 1384) 1383) anon1043_Else_correct)))))
(let ((anon1042_Else_correct  (=> (and (= perm@8 NoPerm) (= (ControlFlow 0 1387) 1384)) anon98_correct)))
(let ((anon1042_Then_correct  (=> (not (= perm@8 NoPerm)) (and (=> (= (ControlFlow 0 1385) (- 0 1386)) (<= perm@8 (U_2_real (MapType1Select Mask@24 n@0 root)))) (=> (<= perm@8 (U_2_real (MapType1Select Mask@24 n@0 root))) (=> (= (ControlFlow 0 1385) 1384) anon98_correct))))))
(let ((anon96_correct  (=> (and (= Mask@24 (MapType1Store Mask@23 null (valid n@0) (real_2_U (- (U_2_real (MapType1Select Mask@23 null (valid n@0))) FullPerm)))) (= perm@8 (/ (to_real 4) (to_real 10)))) (and (=> (= (ControlFlow 0 1388) (- 0 1389)) (>= perm@8 NoPerm)) (=> (>= perm@8 NoPerm) (and (=> (= (ControlFlow 0 1388) 1385) anon1042_Then_correct) (=> (= (ControlFlow 0 1388) 1387) anon1042_Else_correct)))))))
(let ((anon1041_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1392) 1388)) anon96_correct)))
(let ((anon1041_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1390) (- 0 1391)) (<= FullPerm (U_2_real (MapType1Select Mask@23 null (valid n@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@23 null (valid n@0)))) (=> (= (ControlFlow 0 1390) 1388) anon96_correct))))))
(let ((anon94_correct  (=> (= Mask@23 (MapType1Store Mask@22 (MapType0Select Heap@19 this@@53 root1) parent (real_2_U (- (U_2_real (MapType1Select Mask@22 (MapType0Select Heap@19 this@@53 root1) parent)) perm@7)))) (and (=> (= (ControlFlow 0 1393) (- 0 1394)) (not (= n@0 null))) (=> (not (= n@0 null)) (and (=> (= (ControlFlow 0 1393) 1390) anon1041_Then_correct) (=> (= (ControlFlow 0 1393) 1392) anon1041_Else_correct)))))))
(let ((anon1040_Else_correct  (=> (and (= perm@7 NoPerm) (= (ControlFlow 0 1397) 1393)) anon94_correct)))
(let ((anon1040_Then_correct  (=> (not (= perm@7 NoPerm)) (and (=> (= (ControlFlow 0 1395) (- 0 1396)) (<= perm@7 (U_2_real (MapType1Select Mask@22 (MapType0Select Heap@19 this@@53 root1) parent)))) (=> (<= perm@7 (U_2_real (MapType1Select Mask@22 (MapType0Select Heap@19 this@@53 root1) parent))) (=> (= (ControlFlow 0 1395) 1393) anon94_correct))))))
(let ((anon92_correct  (=> (= Mask@22 (MapType1Store Mask@21 this@@53 root1 (real_2_U (- (U_2_real (MapType1Select Mask@21 this@@53 root1)) FullPerm)))) (and (=> (= (ControlFlow 0 1398) (- 0 1400)) (not (= (MapType0Select Heap@19 this@@53 root1) null))) (=> (not (= (MapType0Select Heap@19 this@@53 root1) null)) (=> (= perm@7 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 1398) (- 0 1399)) (>= perm@7 NoPerm)) (=> (>= perm@7 NoPerm) (and (=> (= (ControlFlow 0 1398) 1395) anon1040_Then_correct) (=> (= (ControlFlow 0 1398) 1397) anon1040_Else_correct))))))))))
(let ((anon1039_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1403) 1398)) anon92_correct)))
(let ((anon1039_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1401) (- 0 1402)) (<= FullPerm (U_2_real (MapType1Select Mask@21 this@@53 root1)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@21 this@@53 root1))) (=> (= (ControlFlow 0 1401) 1398) anon92_correct))))))
(let ((anon90_correct  (=> (and (= UnfoldingMask@0 (MapType1Store Mask@21 null (valid n@0) (real_2_U (- (U_2_real (MapType1Select Mask@21 null (valid n@0))) FullPerm)))) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 null (validRest n@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 null (validRest n@0))) FullPerm))))) (=> (and (and (and (and (InsidePredicate (valid n@0) (MapType0Select Heap@16 null (valid n@0)) (validRest n@0) (MapType0Select Heap@16 null (validRest n@0))) (state Heap@16 UnfoldingMask@1)) (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 null (leftValid n@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 null (leftValid n@0))) FullPerm)))) (InsidePredicate (valid n@0) (MapType0Select Heap@16 null (valid n@0)) (leftValid n@0) (MapType0Select Heap@16 null (leftValid n@0))))) (and (and (state Heap@16 UnfoldingMask@2) (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (rightValid n@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (rightValid n@0))) FullPerm))))) (and (InsidePredicate (valid n@0) (MapType0Select Heap@16 null (valid n@0)) (rightValid n@0) (MapType0Select Heap@16 null (rightValid n@0))) (state Heap@16 UnfoldingMask@3)))) (and (and (and (state Heap@16 UnfoldingMask@3) (forall ((o_6 T@U) (f_10 T@U) ) (! (let ((B@@96 (FieldTypeInv1 (type f_10))))
(let ((A@@97 (FieldTypeInv0 (type f_10))))
 (=> (and (and (= (type o_6) RefType) (= (type f_10) (FieldType A@@97 B@@96))) (or (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|valid#sm| n@0)) o_6 f_10)) (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|validRest#sm| n@0)) o_6 f_10)))) (U_2_bool (MapType1Select newPMask@1 o_6 f_10)))))
 :qid |stdinbpl.1758:39|
 :skolemid |79|
 :pattern ( (MapType1Select newPMask@1 o_6 f_10))
))) (and (= Heap@17 (MapType0Store Heap@16 null (|valid#sm| n@0) newPMask@1)) (forall ((o_7 T@U) (f_11 T@U) ) (! (let ((B@@97 (FieldTypeInv1 (type f_11))))
(let ((A@@98 (FieldTypeInv0 (type f_11))))
 (=> (and (and (= (type o_7) RefType) (= (type f_11) (FieldType A@@98 B@@97))) (or (U_2_bool (MapType1Select (MapType0Select Heap@17 null (|valid#sm| n@0)) o_7 f_11)) (U_2_bool (MapType1Select (MapType0Select Heap@17 null (|leftValid#sm| n@0)) o_7 f_11)))) (U_2_bool (MapType1Select newPMask@2 o_7 f_11)))))
 :qid |stdinbpl.1764:39|
 :skolemid |80|
 :pattern ( (MapType1Select newPMask@2 o_7 f_11))
)))) (and (and (= Heap@18 (MapType0Store Heap@17 null (|valid#sm| n@0) newPMask@2)) (forall ((o_8 T@U) (f_12 T@U) ) (! (let ((B@@98 (FieldTypeInv1 (type f_12))))
(let ((A@@99 (FieldTypeInv0 (type f_12))))
 (=> (and (and (= (type o_8) RefType) (= (type f_12) (FieldType A@@99 B@@98))) (or (U_2_bool (MapType1Select (MapType0Select Heap@18 null (|valid#sm| n@0)) o_8 f_12)) (U_2_bool (MapType1Select (MapType0Select Heap@18 null (|rightValid#sm| n@0)) o_8 f_12)))) (U_2_bool (MapType1Select newPMask@3 o_8 f_12)))))
 :qid |stdinbpl.1770:39|
 :skolemid |81|
 :pattern ( (MapType1Select newPMask@3 o_8 f_12))
))) (and (= Heap@19 (MapType0Store Heap@18 null (|valid#sm| n@0) newPMask@3)) (state Heap@19 Mask@21))))) (and (=> (= (ControlFlow 0 1404) 1401) anon1039_Then_correct) (=> (= (ControlFlow 0 1404) 1403) anon1039_Else_correct))))))
(let ((anon1038_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1407) 1404)) anon90_correct)))
(let ((anon1038_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1405) (- 0 1406)) (<= FullPerm (U_2_real (MapType1Select Mask@21 null (valid n@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@21 null (valid n@0)))) (=> (= (ControlFlow 0 1405) 1404) anon90_correct))))))
(let ((anon88_correct  (=> (and (and (state Heap@16 Mask@21) (state Heap@16 Mask@21)) (and (|valid#trigger| Heap@16 (valid n@0)) (= (MapType0Select Heap@16 null (valid n@0)) (CombineFrames (MapType0Select Heap@16 null (validRest n@0)) (CombineFrames (MapType0Select Heap@16 null (leftValid n@0)) (MapType0Select Heap@16 null (rightValid n@0))))))) (and (=> (= (ControlFlow 0 1408) 1405) anon1038_Then_correct) (=> (= (ControlFlow 0 1408) 1407) anon1038_Else_correct)))))
(let ((anon1037_Else_correct  (=> (= (MapType0Select Heap@14 n@0 parent) null) (=> (and (= Heap@16 Heap@14) (= (ControlFlow 0 1410) 1408)) anon88_correct))))
(let ((anon1037_Then_correct  (=> (and (and (not (= (MapType0Select Heap@14 n@0 parent) null)) (= Heap@15 (MapType0Store Heap@14 null (|udParentValid#sm| n@0) (MapType1Store (MapType0Select Heap@14 null (|udParentValid#sm| n@0)) (MapType0Select Heap@14 n@0 parent) root (bool_2_U true))))) (and (= Heap@16 Heap@15) (= (ControlFlow 0 1409) 1408))) anon88_correct)))
(let ((anon1036_Else_correct  (=> (and (= (MapType0Select Heap@12 n@0 parent) null) (= Heap@14 Heap@12)) (and (=> (= (ControlFlow 0 1412) 1409) anon1037_Then_correct) (=> (= (ControlFlow 0 1412) 1410) anon1037_Else_correct)))))
(let ((anon1036_Then_correct  (=> (not (= (MapType0Select Heap@12 n@0 parent) null)) (=> (and (= Heap@13 (MapType0Store Heap@12 null (|udParentValid#sm| n@0) (MapType1Store (MapType0Select Heap@12 null (|udParentValid#sm| n@0)) (MapType0Select Heap@12 n@0 parent) right (bool_2_U true)))) (= Heap@14 Heap@13)) (and (=> (= (ControlFlow 0 1411) 1409) anon1037_Then_correct) (=> (= (ControlFlow 0 1411) 1410) anon1037_Else_correct))))))
(let ((anon1035_Else_correct  (=> (and (= (MapType0Select Heap@10 n@0 parent) null) (= Heap@12 Heap@10)) (and (=> (= (ControlFlow 0 1414) 1411) anon1036_Then_correct) (=> (= (ControlFlow 0 1414) 1412) anon1036_Else_correct)))))
(let ((anon1035_Then_correct  (=> (not (= (MapType0Select Heap@10 n@0 parent) null)) (=> (and (= Heap@11 (MapType0Store Heap@10 null (|udParentValid#sm| n@0) (MapType1Store (MapType0Select Heap@10 null (|udParentValid#sm| n@0)) (MapType0Select Heap@10 n@0 parent) left (bool_2_U true)))) (= Heap@12 Heap@11)) (and (=> (= (ControlFlow 0 1413) 1411) anon1036_Then_correct) (=> (= (ControlFlow 0 1413) 1412) anon1036_Else_correct))))))
(let ((anon1034_Else_correct  (=> (and (= (MapType0Select Heap@8 n@0 parent) null) (= Heap@10 Heap@8)) (and (=> (= (ControlFlow 0 1416) 1413) anon1035_Then_correct) (=> (= (ControlFlow 0 1416) 1414) anon1035_Else_correct)))))
(let ((anon1034_Then_correct  (=> (not (= (MapType0Select Heap@8 n@0 parent) null)) (=> (and (= Heap@9 (MapType0Store Heap@8 null (|udParentValid#sm| n@0) (MapType1Store (MapType0Select Heap@8 null (|udParentValid#sm| n@0)) (MapType0Select Heap@8 n@0 parent) leftDown (bool_2_U true)))) (= Heap@10 Heap@9)) (and (=> (= (ControlFlow 0 1415) 1413) anon1035_Then_correct) (=> (= (ControlFlow 0 1415) 1414) anon1035_Else_correct))))))
(let ((anon1033_Else_correct  (=> (and (= (MapType0Select Heap@6 n@0 parent) null) (= Heap@8 Heap@6)) (and (=> (= (ControlFlow 0 1418) 1415) anon1034_Then_correct) (=> (= (ControlFlow 0 1418) 1416) anon1034_Else_correct)))))
(let ((anon1033_Then_correct  (=> (and (and (not (= (MapType0Select Heap@6 n@0 parent) null)) (forall ((o_5 T@U) (f_9 T@U) ) (! (let ((B@@99 (FieldTypeInv1 (type f_9))))
(let ((A@@100 (FieldTypeInv0 (type f_9))))
 (=> (and (and (= (type o_5) RefType) (= (type f_9) (FieldType A@@100 B@@99))) (or (U_2_bool (MapType1Select (MapType0Select Heap@6 null (|udParentValid#sm| n@0)) o_5 f_9)) (U_2_bool (MapType1Select (MapType0Select Heap@6 null (|udValid#sm| (MapType0Select Heap@6 n@0 parent))) o_5 f_9)))) (U_2_bool (MapType1Select newPMask@0 o_5 f_9)))))
 :qid |stdinbpl.1696:33|
 :skolemid |78|
 :pattern ( (MapType1Select newPMask@0 o_5 f_9))
))) (and (= Heap@7 (MapType0Store Heap@6 null (|udParentValid#sm| n@0) newPMask@0)) (= Heap@8 Heap@7))) (and (=> (= (ControlFlow 0 1417) 1415) anon1034_Then_correct) (=> (= (ControlFlow 0 1417) 1416) anon1034_Else_correct)))))
(let ((anon78_correct  (=> (and (= Heap@5 (MapType0Store Heap@4 null (|udParentValid#sm| n@0) (MapType1Store (MapType0Select Heap@4 null (|udParentValid#sm| n@0)) n@0 parent (bool_2_U true)))) (= Heap@6 (MapType0Store Heap@5 null (|udParentValid#sm| n@0) (MapType1Store (MapType0Select Heap@5 null (|udParentValid#sm| n@0)) n@0 root (bool_2_U true))))) (and (=> (= (ControlFlow 0 1419) 1417) anon1033_Then_correct) (=> (= (ControlFlow 0 1419) 1418) anon1033_Else_correct)))))
(let ((anon1032_Else_correct  (=> (HasDirectPerm Mask@21 null (udParentValid n@0)) (=> (and (= Heap@4 Heap@1) (= (ControlFlow 0 1421) 1419)) anon78_correct))))
(let ((anon1032_Then_correct  (=> (not (HasDirectPerm Mask@21 null (udParentValid n@0))) (=> (and (and (= Heap@2 (MapType0Store Heap@1 null (|udParentValid#sm| n@0) ZeroPMask)) (= Heap@3 (MapType0Store Heap@2 null (udParentValid n@0) freshVersion@0))) (and (= Heap@4 Heap@3) (= (ControlFlow 0 1420) 1419))) anon78_correct))))
(let ((anon76_correct  (=> (= Mask@21 (MapType1Store Mask@20 null (udParentValid n@0) (real_2_U (+ (U_2_real (MapType1Select Mask@20 null (udParentValid n@0))) FullPerm)))) (=> (and (and (state Heap@1 Mask@21) (state Heap@1 Mask@21)) (and (|udParentValid#trigger| Heap@1 (udParentValid n@0)) (= (MapType0Select Heap@1 null (udParentValid n@0)) (CombineFrames (FrameFragment (MapType0Select Heap@1 n@0 parent)) (CombineFrames (FrameFragment (MapType0Select Heap@1 n@0 root)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) (MapType0Select Heap@1 null (udValid (MapType0Select Heap@1 n@0 parent))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) leftDown)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) left)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) right)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) root)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@1 n@0 parent) null)) EmptyFrame EmptyFrame)) (FrameFragment (ite (= (MapType0Select Heap@1 n@0 parent) null) EmptyFrame EmptyFrame))))))))))))))) (and (=> (= (ControlFlow 0 1422) 1420) anon1032_Then_correct) (=> (= (ControlFlow 0 1422) 1421) anon1032_Else_correct))))))
(let ((anon1031_Else_correct  (=> (and (not (= (MapType0Select Heap@1 n@0 parent) null)) (= (ControlFlow 0 1425) 1422)) anon76_correct)))
(let ((anon1031_Then_correct  (=> (= (MapType0Select Heap@1 n@0 parent) null) (and (=> (= (ControlFlow 0 1423) (- 0 1424)) (= (MapType0Select Heap@1 n@0 root) n@0)) (=> (= (MapType0Select Heap@1 n@0 root) n@0) (=> (= (ControlFlow 0 1423) 1422) anon76_correct))))))
(let ((anon1030_Else_correct  (=> (= (MapType0Select Heap@1 n@0 parent) null) (and (=> (= (ControlFlow 0 1428) 1423) anon1031_Then_correct) (=> (= (ControlFlow 0 1428) 1425) anon1031_Else_correct)))))
(let ((anon1030_Then_correct  (=> (not (= (MapType0Select Heap@1 n@0 parent) null)) (and (=> (= (ControlFlow 0 1426) (- 0 1427)) (= (MapType0Select Heap@1 n@0 root) (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) root))) (=> (= (MapType0Select Heap@1 n@0 root) (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) root)) (and (=> (= (ControlFlow 0 1426) 1423) anon1031_Then_correct) (=> (= (ControlFlow 0 1426) 1425) anon1031_Else_correct)))))))
(let ((anon71_correct  (=> (and (= Mask@19 (MapType1Store Mask@18 (MapType0Select Heap@1 n@0 parent) root (real_2_U (- (U_2_real (MapType1Select Mask@18 (MapType0Select Heap@1 n@0 parent) root)) perm@6)))) (= Mask@20 Mask@19)) (and (=> (= (ControlFlow 0 1430) 1426) anon1030_Then_correct) (=> (= (ControlFlow 0 1430) 1428) anon1030_Else_correct)))))
(let ((anon1029_Else_correct  (=> (and (= perm@6 NoPerm) (= (ControlFlow 0 1433) 1430)) anon71_correct)))
(let ((anon1029_Then_correct  (=> (not (= perm@6 NoPerm)) (and (=> (= (ControlFlow 0 1431) (- 0 1432)) (<= perm@6 (U_2_real (MapType1Select Mask@18 (MapType0Select Heap@1 n@0 parent) root)))) (=> (<= perm@6 (U_2_real (MapType1Select Mask@18 (MapType0Select Heap@1 n@0 parent) root))) (=> (= (ControlFlow 0 1431) 1430) anon71_correct))))))
(let ((anon1028_Then_correct  (=> (and (not (= (MapType0Select Heap@1 n@0 parent) null)) (= perm@6 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1434) (- 0 1435)) (>= perm@6 NoPerm)) (=> (>= perm@6 NoPerm) (and (=> (= (ControlFlow 0 1434) 1431) anon1029_Then_correct) (=> (= (ControlFlow 0 1434) 1433) anon1029_Else_correct)))))))
(let ((anon1028_Else_correct  (=> (and (= (MapType0Select Heap@1 n@0 parent) null) (= Mask@20 Mask@18)) (and (=> (= (ControlFlow 0 1429) 1426) anon1030_Then_correct) (=> (= (ControlFlow 0 1429) 1428) anon1030_Else_correct)))))
(let ((anon1027_Else_correct  (=> (= (MapType0Select Heap@1 n@0 parent) null) (and (=> (= (ControlFlow 0 1438) 1434) anon1028_Then_correct) (=> (= (ControlFlow 0 1438) 1429) anon1028_Else_correct)))))
(let ((anon1027_Then_correct  (=> (not (= (MapType0Select Heap@1 n@0 parent) null)) (and (=> (= (ControlFlow 0 1436) (- 0 1437)) (=  (not (U_2_bool (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) leftDown))) (= (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) right) n@0))) (=> (=  (not (U_2_bool (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) leftDown))) (= (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) right) n@0)) (and (=> (= (ControlFlow 0 1436) 1434) anon1028_Then_correct) (=> (= (ControlFlow 0 1436) 1429) anon1028_Else_correct)))))))
(let ((anon65_correct  (=> (and (= Mask@17 (MapType1Store Mask@16 (MapType0Select Heap@1 n@0 parent) right (real_2_U (- (U_2_real (MapType1Select Mask@16 (MapType0Select Heap@1 n@0 parent) right)) perm@5)))) (= Mask@18 Mask@17)) (and (=> (= (ControlFlow 0 1440) 1436) anon1027_Then_correct) (=> (= (ControlFlow 0 1440) 1438) anon1027_Else_correct)))))
(let ((anon1026_Else_correct  (=> (and (= perm@5 NoPerm) (= (ControlFlow 0 1443) 1440)) anon65_correct)))
(let ((anon1026_Then_correct  (=> (not (= perm@5 NoPerm)) (and (=> (= (ControlFlow 0 1441) (- 0 1442)) (<= perm@5 (U_2_real (MapType1Select Mask@16 (MapType0Select Heap@1 n@0 parent) right)))) (=> (<= perm@5 (U_2_real (MapType1Select Mask@16 (MapType0Select Heap@1 n@0 parent) right))) (=> (= (ControlFlow 0 1441) 1440) anon65_correct))))))
(let ((anon1025_Then_correct  (=> (and (not (= (MapType0Select Heap@1 n@0 parent) null)) (= perm@5 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1444) (- 0 1445)) (>= perm@5 NoPerm)) (=> (>= perm@5 NoPerm) (and (=> (= (ControlFlow 0 1444) 1441) anon1026_Then_correct) (=> (= (ControlFlow 0 1444) 1443) anon1026_Else_correct)))))))
(let ((anon1025_Else_correct  (=> (and (= (MapType0Select Heap@1 n@0 parent) null) (= Mask@18 Mask@16)) (and (=> (= (ControlFlow 0 1439) 1436) anon1027_Then_correct) (=> (= (ControlFlow 0 1439) 1438) anon1027_Else_correct)))))
(let ((anon1024_Else_correct  (=> (= (MapType0Select Heap@1 n@0 parent) null) (and (=> (= (ControlFlow 0 1448) 1444) anon1025_Then_correct) (=> (= (ControlFlow 0 1448) 1439) anon1025_Else_correct)))))
(let ((anon1024_Then_correct  (=> (not (= (MapType0Select Heap@1 n@0 parent) null)) (and (=> (= (ControlFlow 0 1446) (- 0 1447)) (= (U_2_bool (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) leftDown)) (= (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) left) n@0))) (=> (= (U_2_bool (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) leftDown)) (= (MapType0Select Heap@1 (MapType0Select Heap@1 n@0 parent) left) n@0)) (and (=> (= (ControlFlow 0 1446) 1444) anon1025_Then_correct) (=> (= (ControlFlow 0 1446) 1439) anon1025_Else_correct)))))))
(let ((anon59_correct  (=> (and (= Mask@15 (MapType1Store Mask@14 (MapType0Select Heap@1 n@0 parent) left (real_2_U (- (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@1 n@0 parent) left)) perm@4)))) (= Mask@16 Mask@15)) (and (=> (= (ControlFlow 0 1450) 1446) anon1024_Then_correct) (=> (= (ControlFlow 0 1450) 1448) anon1024_Else_correct)))))
(let ((anon1023_Else_correct  (=> (and (= perm@4 NoPerm) (= (ControlFlow 0 1453) 1450)) anon59_correct)))
(let ((anon1023_Then_correct  (=> (not (= perm@4 NoPerm)) (and (=> (= (ControlFlow 0 1451) (- 0 1452)) (<= perm@4 (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@1 n@0 parent) left)))) (=> (<= perm@4 (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@1 n@0 parent) left))) (=> (= (ControlFlow 0 1451) 1450) anon59_correct))))))
(let ((anon1022_Then_correct  (=> (and (not (= (MapType0Select Heap@1 n@0 parent) null)) (= perm@4 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1454) (- 0 1455)) (>= perm@4 NoPerm)) (=> (>= perm@4 NoPerm) (and (=> (= (ControlFlow 0 1454) 1451) anon1023_Then_correct) (=> (= (ControlFlow 0 1454) 1453) anon1023_Else_correct)))))))
(let ((anon1022_Else_correct  (=> (and (= (MapType0Select Heap@1 n@0 parent) null) (= Mask@16 Mask@14)) (and (=> (= (ControlFlow 0 1449) 1446) anon1024_Then_correct) (=> (= (ControlFlow 0 1449) 1448) anon1024_Else_correct)))))
(let ((anon55_correct  (=> (and (= Mask@13 (MapType1Store Mask@12 (MapType0Select Heap@1 n@0 parent) leftDown (real_2_U (- (U_2_real (MapType1Select Mask@12 (MapType0Select Heap@1 n@0 parent) leftDown)) perm@3)))) (= Mask@14 Mask@13)) (and (=> (= (ControlFlow 0 1457) 1454) anon1022_Then_correct) (=> (= (ControlFlow 0 1457) 1449) anon1022_Else_correct)))))
(let ((anon1021_Else_correct  (=> (and (= perm@3 NoPerm) (= (ControlFlow 0 1460) 1457)) anon55_correct)))
(let ((anon1021_Then_correct  (=> (not (= perm@3 NoPerm)) (and (=> (= (ControlFlow 0 1458) (- 0 1459)) (<= perm@3 (U_2_real (MapType1Select Mask@12 (MapType0Select Heap@1 n@0 parent) leftDown)))) (=> (<= perm@3 (U_2_real (MapType1Select Mask@12 (MapType0Select Heap@1 n@0 parent) leftDown))) (=> (= (ControlFlow 0 1458) 1457) anon55_correct))))))
(let ((anon1020_Then_correct  (=> (and (not (= (MapType0Select Heap@1 n@0 parent) null)) (= perm@3 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1461) (- 0 1462)) (>= perm@3 NoPerm)) (=> (>= perm@3 NoPerm) (and (=> (= (ControlFlow 0 1461) 1458) anon1021_Then_correct) (=> (= (ControlFlow 0 1461) 1460) anon1021_Else_correct)))))))
(let ((anon1020_Else_correct  (=> (and (= (MapType0Select Heap@1 n@0 parent) null) (= Mask@14 Mask@12)) (and (=> (= (ControlFlow 0 1456) 1454) anon1022_Then_correct) (=> (= (ControlFlow 0 1456) 1449) anon1022_Else_correct)))))
(let ((anon51_correct  (=> (= Mask@11 (MapType1Store Mask@10 null (udValid (MapType0Select Heap@1 n@0 parent)) (real_2_U (- (U_2_real (MapType1Select Mask@10 null (udValid (MapType0Select Heap@1 n@0 parent)))) FullPerm)))) (=> (and (InsidePredicate (udParentValid n@0) (MapType0Select Heap@1 null (udParentValid n@0)) (udValid (MapType0Select Heap@1 n@0 parent)) (MapType0Select Heap@1 null (udValid (MapType0Select Heap@1 n@0 parent)))) (= Mask@12 Mask@11)) (and (=> (= (ControlFlow 0 1464) 1461) anon1020_Then_correct) (=> (= (ControlFlow 0 1464) 1456) anon1020_Else_correct))))))
(let ((anon1019_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1467) 1464)) anon51_correct)))
(let ((anon1019_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1465) (- 0 1466)) (<= FullPerm (U_2_real (MapType1Select Mask@10 null (udValid (MapType0Select Heap@1 n@0 parent)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@10 null (udValid (MapType0Select Heap@1 n@0 parent))))) (=> (= (ControlFlow 0 1465) 1464) anon51_correct))))))
(let ((anon1018_Then_correct  (=> (not (= (MapType0Select Heap@1 n@0 parent) null)) (and (=> (= (ControlFlow 0 1468) 1465) anon1019_Then_correct) (=> (= (ControlFlow 0 1468) 1467) anon1019_Else_correct)))))
(let ((anon1018_Else_correct  (=> (and (= (MapType0Select Heap@1 n@0 parent) null) (= Mask@12 Mask@10)) (and (=> (= (ControlFlow 0 1463) 1461) anon1020_Then_correct) (=> (= (ControlFlow 0 1463) 1456) anon1020_Else_correct)))))
(let ((anon48_correct  (=> (= Mask@10 (MapType1Store Mask@9 n@0 root (real_2_U (- (U_2_real (MapType1Select Mask@9 n@0 root)) perm@2)))) (and (=> (= (ControlFlow 0 1469) 1468) anon1018_Then_correct) (=> (= (ControlFlow 0 1469) 1463) anon1018_Else_correct)))))
(let ((anon1017_Else_correct  (=> (and (= perm@2 NoPerm) (= (ControlFlow 0 1472) 1469)) anon48_correct)))
(let ((anon1017_Then_correct  (=> (not (= perm@2 NoPerm)) (and (=> (= (ControlFlow 0 1470) (- 0 1471)) (<= perm@2 (U_2_real (MapType1Select Mask@9 n@0 root)))) (=> (<= perm@2 (U_2_real (MapType1Select Mask@9 n@0 root))) (=> (= (ControlFlow 0 1470) 1469) anon48_correct))))))
(let ((anon46_correct  (=> (and (= Mask@9 (MapType1Store Mask@8 n@0 parent (real_2_U (- (U_2_real (MapType1Select Mask@8 n@0 parent)) perm@1)))) (= perm@2 (/ (to_real 1) (to_real 10)))) (and (=> (= (ControlFlow 0 1473) (- 0 1474)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (and (=> (= (ControlFlow 0 1473) 1470) anon1017_Then_correct) (=> (= (ControlFlow 0 1473) 1472) anon1017_Else_correct)))))))
(let ((anon1016_Else_correct  (=> (and (= perm@1 NoPerm) (= (ControlFlow 0 1477) 1473)) anon46_correct)))
(let ((anon1016_Then_correct  (=> (not (= perm@1 NoPerm)) (and (=> (= (ControlFlow 0 1475) (- 0 1476)) (<= perm@1 (U_2_real (MapType1Select Mask@8 n@0 parent)))) (=> (<= perm@1 (U_2_real (MapType1Select Mask@8 n@0 parent))) (=> (= (ControlFlow 0 1475) 1473) anon46_correct))))))
(let ((anon1002_Else_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (and (=> (= (ControlFlow 0 1478) (- 0 1480)) (HasDirectPerm Mask@8 this@@53 root1)) (=> (HasDirectPerm Mask@8 this@@53 root1) (=> (= n@0 (MapType0Select Heap@1 this@@53 root1)) (=> (and (and (state Heap@1 Mask@8) (state Heap@1 Mask@8)) (and (state Heap@1 Mask@8) (= perm@1 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 1478) (- 0 1479)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (and (=> (= (ControlFlow 0 1478) 1475) anon1016_Then_correct) (=> (= (ControlFlow 0 1478) 1477) anon1016_Else_correct)))))))))))
(let ((anon16_correct  (=> (and (state Heap@1 Mask@8) (state Heap@1 Mask@8)) (and (=> (= (ControlFlow 0 1522) (- 0 1523)) (HasDirectPerm Mask@8 this@@53 root1)) (=> (HasDirectPerm Mask@8 this@@53 root1) (and (=> (= (ControlFlow 0 1522) 1521) anon1002_Then_correct) (=> (= (ControlFlow 0 1522) 1478) anon1002_Else_correct)))))))
(let ((anon1001_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= (ControlFlow 0 1525) 1522)) anon16_correct)))
(let ((anon1001_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (=> (and (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) root) (MapType0Select Heap@1 this@@53 root1)) (= (ControlFlow 0 1524) 1522)) anon16_correct))))
(let ((anon1000_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= Mask@8 Mask@6)) (and (=> (= (ControlFlow 0 1528) 1524) anon1001_Then_correct) (=> (= (ControlFlow 0 1528) 1525) anon1001_Else_correct)))))
(let ((anon1000_Then_correct  (=> (and (not (= (MapType0Select Heap@1 this@@53 root1) null)) (= perm@0 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 1526) (- 0 1527)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (=> (and (and (=> (> perm@0 NoPerm) (not (= (MapType0Select Heap@1 this@@53 root1) null))) (= Mask@7 (MapType1Store Mask@6 (MapType0Select Heap@1 this@@53 root1) root (real_2_U (+ (U_2_real (MapType1Select Mask@6 (MapType0Select Heap@1 this@@53 root1) root)) perm@0))))) (and (state Heap@1 Mask@7) (= Mask@8 Mask@7))) (and (=> (= (ControlFlow 0 1526) 1524) anon1001_Then_correct) (=> (= (ControlFlow 0 1526) 1525) anon1001_Else_correct))))))))
(let ((anon999_Else_correct  (=> (= (MapType0Select Heap@1 this@@53 root1) null) (and (=> (= (ControlFlow 0 1530) 1526) anon1000_Then_correct) (=> (= (ControlFlow 0 1530) 1528) anon1000_Else_correct)))))
(let ((anon999_Then_correct  (=> (and (not (= (MapType0Select Heap@1 this@@53 root1) null)) (= (MapType0Select Heap@1 (MapType0Select Heap@1 this@@53 root1) parent) null)) (and (=> (= (ControlFlow 0 1529) 1526) anon1000_Then_correct) (=> (= (ControlFlow 0 1529) 1528) anon1000_Else_correct)))))
(let ((anon998_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= Mask@6 Mask@4)) (and (=> (= (ControlFlow 0 1532) 1529) anon999_Then_correct) (=> (= (ControlFlow 0 1532) 1530) anon999_Else_correct)))))
(let ((anon998_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (=> (and (and (not (= (MapType0Select Heap@1 this@@53 root1) null)) (= Mask@5 (MapType1Store Mask@4 (MapType0Select Heap@1 this@@53 root1) parent (real_2_U (+ (U_2_real (MapType1Select Mask@4 (MapType0Select Heap@1 this@@53 root1) parent)) FullPerm))))) (and (state Heap@1 Mask@5) (= Mask@6 Mask@5))) (and (=> (= (ControlFlow 0 1531) 1529) anon999_Then_correct) (=> (= (ControlFlow 0 1531) 1530) anon999_Else_correct))))))
(let ((anon997_Else_correct  (=> (and (= (MapType0Select Heap@1 this@@53 root1) null) (= Mask@4 Mask@2)) (and (=> (= (ControlFlow 0 1534) 1531) anon998_Then_correct) (=> (= (ControlFlow 0 1534) 1532) anon998_Else_correct)))))
(let ((anon997_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@53 root1) null)) (=> (and (and (= Mask@3 (MapType1Store Mask@2 null (valid (MapType0Select Heap@1 this@@53 root1)) (real_2_U (+ (U_2_real (MapType1Select Mask@2 null (valid (MapType0Select Heap@1 this@@53 root1)))) FullPerm)))) (InsidePredicate (valid1 this@@53) (MapType0Select Heap@1 null (valid1 this@@53)) (valid (MapType0Select Heap@1 this@@53 root1)) (MapType0Select Heap@1 null (valid (MapType0Select Heap@1 this@@53 root1))))) (and (state Heap@1 Mask@3) (= Mask@4 Mask@3))) (and (=> (= (ControlFlow 0 1533) 1531) anon998_Then_correct) (=> (= (ControlFlow 0 1533) 1532) anon998_Else_correct))))))
(let ((anon6_correct  (=> (not (= this@@53 null)) (=> (and (= Mask@2 (MapType1Store Mask@1 this@@53 root1 (real_2_U (+ (U_2_real (MapType1Select Mask@1 this@@53 root1)) FullPerm)))) (state Heap@1 Mask@2)) (and (=> (= (ControlFlow 0 1535) 1533) anon997_Then_correct) (=> (= (ControlFlow 0 1535) 1534) anon997_Else_correct))))))
(let ((anon996_Else_correct  (=> (HasDirectPerm Mask@1 null (valid1 this@@53)) (=> (and (= Heap@1 Heap@@18) (= (ControlFlow 0 1537) 1535)) anon6_correct))))
(let ((anon996_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (valid1 this@@53))) (= Heap@0 (MapType0Store Heap@@18 null (valid1 this@@53) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 1536) 1535))) anon6_correct)))
(let ((anon4_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (valid1 this@@53) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (valid1 this@@53))) FullPerm)))) (and (=> (= (ControlFlow 0 1538) 1536) anon996_Then_correct) (=> (= (ControlFlow 0 1538) 1537) anon996_Else_correct)))))
(let ((anon995_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1541) 1538)) anon4_correct)))
(let ((anon995_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1539) (- 0 1540)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (valid1 this@@53))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (valid1 this@@53)))) (=> (= (ControlFlow 0 1539) 1538) anon4_correct))))))
(let ((anon994_Else_correct  (=> (and (U_2_bool (MapType0Select Heap@@18 n $allocated)) (U_2_bool (MapType0Select Heap@@18 p_1 $allocated))) (=> (and (and (U_2_bool (MapType0Select Heap@@18 q_1 $allocated)) (U_2_bool (MapType0Select Heap@@18 r_1 $allocated))) (and (|valid1#trigger| Heap@@18 (valid1 this@@53)) (= (MapType0Select Heap@@18 null (valid1 this@@53)) (CombineFrames (FrameFragment (MapType0Select Heap@@18 this@@53 root1)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@18 this@@53 root1) null)) (MapType0Select Heap@@18 null (valid (MapType0Select Heap@@18 this@@53 root1))) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@18 this@@53 root1) null)) (FrameFragment (MapType0Select Heap@@18 (MapType0Select Heap@@18 this@@53 root1) parent)) EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@18 this@@53 root1) null)) EmptyFrame EmptyFrame)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@@18 this@@53 root1) null)) (FrameFragment (MapType0Select Heap@@18 (MapType0Select Heap@@18 this@@53 root1) root)) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@@18 this@@53 root1) null)) EmptyFrame EmptyFrame)))))))))) (and (=> (= (ControlFlow 0 1542) 1539) anon995_Then_correct) (=> (= (ControlFlow 0 1542) 1541) anon995_Else_correct))))))
(let ((anon994_Then_correct true))
(let ((anon0_correct  (=> (state Heap@@18 ZeroMask) (=> (and (and (U_2_bool (MapType0Select Heap@@18 this@@53 $allocated)) (= Mask@0 (MapType1Store ZeroMask null (valid1 this@@53) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (valid1 this@@53))) FullPerm))))) (and (state Heap@@18 Mask@0) (state Heap@@18 Mask@0))) (and (=> (= (ControlFlow 0 1543) 1) anon994_Then_correct) (=> (= (ControlFlow 0 1543) 1542) anon994_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 1544) 1543) anon0_correct)))
PreconditionGeneratedEntry_correct
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
